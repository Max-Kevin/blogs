(window.webpackJsonp=window.webpackJsonp||[]).push([[0],[]]);!function(n){function e(e){for(var r,i,s=e[0],l=e[1],c=e[2],p=0,d=[];p<s.length;p++)i=s[p],Object.prototype.hasOwnProperty.call(o,i)&&o[i]&&d.push(o[i][0]),o[i]=0;for(r in l)Object.prototype.hasOwnProperty.call(l,r)&&(n[r]=l[r]);for(u&&u(e);d.length;)d.shift()();return a.push.apply(a,c||[]),t()}function t(){for(var n,e=0;e<a.length;e++){for(var t=a[e],r=!0,s=1;s<t.length;s++){var l=t[s];0!==o[l]&&(r=!1)}r&&(a.splice(e--,1),n=i(i.s=t[0]))}return n}var r={},o={1:0},a=[];function i(e){if(r[e])return r[e].exports;var t=r[e]={i:e,l:!1,exports:{}};return n[e].call(t.exports,t,t.exports,i),t.l=!0,t.exports}i.e=function(n){var e=[],t=o[n];if(0!==t)if(t)e.push(t[2]);else{var r=new Promise((function(e,r){t=o[n]=[e,r]}));e.push(t[2]=r);var a,s=document.createElement("script");s.charset="utf-8",s.timeout=120,i.nc&&s.setAttribute("nonce",i.nc),s.src=function(n){return i.p+"assets/js/"+({}[n]||n)+"."+{2:"7682df1d",3:"39134677",4:"633456db",5:"cbcad1ca",6:"8a48f1ab",7:"9445ca55",8:"f6f702fd",9:"61773f54",10:"99ea2b76",11:"074792e3",12:"1f181229",13:"43d84fd6",14:"011e1d7e",15:"f55a1a94",16:"19ee70fa",17:"fba235b3",18:"d5ba83c0",19:"6dde5129",20:"8b9a2a03",21:"6c7bc741",22:"b90078d7",23:"6f8e4c1c",24:"f1ab22c4",25:"040045b5",26:"22908aa7",27:"191634cb",28:"80389d6c",29:"1d9901d9",30:"f0d7121c",31:"5b50b2b8",32:"aed9f070",33:"5a98cb3e",34:"d6ab7be2",35:"cddf852e",36:"1f81dc42",37:"278c3812",38:"0f65b19b",39:"1b5be77e",40:"3e2e21af",41:"bd8e0184",42:"48834d00",43:"397bb9d5",44:"5c4dc0f9",45:"44ee786e",46:"4b93fa58",47:"eb5026e3",48:"bf63fa54",49:"701affc1",50:"3678e076",51:"a4b70aea",52:"bcd99b64",53:"20a9b78f",54:"24fd5640",55:"45ed4c81",56:"11d4af16",57:"9dc16ebe",58:"8996baa9",59:"a10848d5",60:"1823731c",61:"d075c859",62:"723c255a",63:"76a33fa6",64:"66e3d0d6",65:"5832c049",66:"0f36a50a",67:"4637e47b",68:"af9cea11",69:"14551a0d",70:"0ddededa",71:"01da15db",72:"58d4afcf",73:"4cc3245d",74:"4073c853",75:"48b38f1c",76:"3f026cb4",77:"096adaa6",78:"ed36ec30",79:"913d86af",80:"30c29f2b",81:"29f35f9e",82:"4872f55f",83:"7cb1de94",84:"a0cd141d"}[n]+".js"}(n);var l=new Error;a=function(e){s.onerror=s.onload=null,clearTimeout(c);var t=o[n];if(0!==t){if(t){var r=e&&("load"===e.type?"missing":e.type),a=e&&e.target&&e.target.src;l.message="Loading chunk "+n+" failed.\n("+r+": "+a+")",l.name="ChunkLoadError",l.type=r,l.request=a,t[1](l)}o[n]=void 0}};var c=setTimeout((function(){a({type:"timeout",target:s})}),12e4);s.onerror=s.onload=a,document.head.appendChild(s)}return Promise.all(e)},i.m=n,i.c=r,i.d=function(n,e,t){i.o(n,e)||Object.defineProperty(n,e,{enumerable:!0,get:t})},i.r=function(n){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},i.t=function(n,e){if(1&e&&(n=i(n)),8&e)return n;if(4&e&&"object"==typeof n&&n&&n.__esModule)return n;var t=Object.create(null);if(i.r(t),Object.defineProperty(t,"default",{enumerable:!0,value:n}),2&e&&"string"!=typeof n)for(var r in n)i.d(t,r,function(e){return n[e]}.bind(null,r));return t},i.n=function(n){var e=n&&n.__esModule?function(){return n.default}:function(){return n};return i.d(e,"a",e),e},i.o=function(n,e){return Object.prototype.hasOwnProperty.call(n,e)},i.p="/blogs/",i.oe=function(n){throw console.error(n),n};var s=window.webpackJsonp=window.webpackJsonp||[],l=s.push.bind(s);s.push=e,s=s.slice();for(var c=0;c<s.length;c++)e(s[c]);var u=l;a.push([107,0]),t()}([function(n,e,t){"use strict";function r(n,e,t,r,o,a,i,s){var l,c="function"==typeof n?n.options:n;if(e&&(c.render=e,c.staticRenderFns=t,c._compiled=!0),r&&(c.functional=!0),a&&(c._scopeId="data-v-"+a),i?(l=function(n){(n=n||this.$vnode&&this.$vnode.ssrContext||this.parent&&this.parent.$vnode&&this.parent.$vnode.ssrContext)||"undefined"==typeof __VUE_SSR_CONTEXT__||(n=__VUE_SSR_CONTEXT__),o&&o.call(this,n),n&&n._registeredComponents&&n._registeredComponents.add(i)},c._ssrRegister=l):o&&(l=s?function(){o.call(this,(c.functional?this.parent:this).$root.$options.shadowRoot)}:o),l)if(c.functional){c._injectStyles=l;var u=c.render;c.render=function(n,e){return l.call(e),u(n,e)}}else{var p=c.beforeCreate;c.beforeCreate=p?[].concat(p,l):[l]}return{exports:n,options:c}}t.d(e,"a",(function(){return r}))},function(n,e,t){var r=t(56),o=r.all;n.exports=r.IS_HTMLDDA?function(n){return"function"==typeof n||n===o}:function(n){return"function"==typeof n}},function(n,e){var t=function(n){return n&&n.Math==Math&&n};n.exports=t("object"==typeof globalThis&&globalThis)||t("object"==typeof window&&window)||t("object"==typeof self&&self)||t("object"==typeof global&&global)||function(){return this}()||Function("return this")()},function(n,e,t){var r=t(30),o=Function.prototype,a=o.bind,i=o.call,s=r&&a.bind(i,i);n.exports=r?function(n){return n&&s(n)}:function(n){return n&&function(){return i.apply(n,arguments)}}},function(n,e){n.exports=function(n){try{return!!n()}catch(n){return!0}}},function(n,e,t){var r=t(4);n.exports=!r((function(){return 7!=Object.defineProperty({},1,{get:function(){return 7}})[1]}))},function(n,e){var t=Array.isArray;n.exports=t},function(n,e,t){var r=t(3),o=t(32),a=r({}.hasOwnProperty);n.exports=Object.hasOwn||function(n,e){return a(o(n),e)}},function(n,e,t){var r=t(70),o="object"==typeof self&&self&&self.Object===Object&&self,a=r||o||Function("return this")();n.exports=a},function(n,e,t){var r=t(1),o=t(56),a=o.all;n.exports=o.IS_HTMLDDA?function(n){return"object"==typeof n?null!==n:r(n)||n===a}:function(n){return"object"==typeof n?null!==n:r(n)}},function(n,e,t){var r=t(165),o=t(168);n.exports=function(n,e){var t=o(n,e);return r(t)?t:void 0}},function(n,e,t){"use strict";t.d(e,"e",(function(){return r})),t.d(e,"b",(function(){return a})),t.d(e,"j",(function(){return i})),t.d(e,"g",(function(){return l})),t.d(e,"h",(function(){return c})),t.d(e,"i",(function(){return u})),t.d(e,"c",(function(){return p})),t.d(e,"f",(function(){return d})),t.d(e,"l",(function(){return m})),t.d(e,"m",(function(){return f})),t.d(e,"d",(function(){return h})),t.d(e,"k",(function(){return y})),t.d(e,"n",(function(){return b})),t.d(e,"a",(function(){return x}));t(28);const r=/#.*$/,o=/\.(md|html)$/,a=/\/$/,i=/^[a-z]+:/i;function s(n){return decodeURI(n).replace(r,"").replace(o,"")}function l(n){return i.test(n)}function c(n){return/^mailto:/.test(n)}function u(n){return/^tel:/.test(n)}function p(n){if(l(n))return n;if(!n)return"404";const e=n.match(r),t=e?e[0]:"",o=s(n);return a.test(o)?n:o+".html"+t}function d(n,e){const t=n.hash,o=function(n){const e=n&&n.match(r);if(e)return e[0]}(e);if(o&&t!==o)return!1;return s(n.path)===s(e)}function m(n,e,t){if(l(e))return{type:"external",path:e};t&&(e=function(n,e,t){const r=n.charAt(0);if("/"===r)return n;if("?"===r||"#"===r)return e+n;const o=e.split("/");t&&o[o.length-1]||o.pop();const a=n.replace(/^\//,"").split("/");for(let n=0;n<a.length;n++){const e=a[n];".."===e?o.pop():"."!==e&&o.push(e)}""!==o[0]&&o.unshift("");return o.join("/")}(e,t));const r=s(e);for(let e=0;e<n.length;e++)if(s(n[e].regularPath)===r)return Object.assign({},n[e],{type:"page",path:p(n[e].path)});return console.error(`[vuepress] No matching page found for sidebar item "${e}"`),{}}function f(n,e,t,r){const{pages:o,themeConfig:a}=t,i=r&&a.locales&&a.locales[r]||a;if("auto"===(n.frontmatter.sidebar||i.sidebar||a.sidebar))return g(n);const s=i.sidebar||a.sidebar;if(s){const{base:t,config:r}=function(n,e){if(Array.isArray(e))return{base:"/",config:e};for(const r in e)if(0===(t=n,/(\.html|\/)$/.test(t)?t:t+"/").indexOf(encodeURI(r)))return{base:r,config:e[r]};var t;return{}}(e,s);return"auto"===r?g(n):r?r.map(n=>function n(e,t,r,o=1){if("string"==typeof e)return m(t,e,r);if(Array.isArray(e))return Object.assign(m(t,e[0],r),{title:e[1]});{o>3&&console.error("[vuepress] detected a too deep nested sidebar group.");const a=e.children||[];return 0===a.length&&e.path?Object.assign(m(t,e.path,r),{title:e.title}):{type:"group",path:e.path,title:e.title,sidebarDepth:e.sidebarDepth,initialOpenGroupIndex:e.initialOpenGroupIndex,children:a.map(e=>n(e,t,r,o+1)),collapsable:!1!==e.collapsable}}}(n,o,t)):[]}return[]}function g(n){const e=h(n.headers||[]);return[{type:"group",collapsable:!1,title:n.title,path:null,children:e.map(e=>({type:"auto",title:e.title,basePath:n.path,path:n.path+"#"+e.slug,children:e.children||[]}))}]}function h(n){let e;return(n=n.map(n=>Object.assign({},n))).forEach(n=>{2===n.level?e=n:e&&(e.children||(e.children=[])).push(n)}),n.filter(n=>2===n.level)}function y(n){return Object.assign(n,{type:n.items&&n.items.length?"links":"link"})}function b(n){return Object.prototype.toString.call(n).match(/\[object (.*?)\]/)[1].toLowerCase()}function v(n){let e=n.frontmatter.date||n.lastUpdated||new Date,t=new Date(e);return"Invalid Date"==t&&e&&(t=new Date(e.replace(/-/g,"/"))),t.getTime()}function x(n,e){return v(e)-v(n)}},function(n,e){n.exports=function(n){return null!=n&&"object"==typeof n}},function(n,e,t){var r=t(5),o=t(65),a=t(102),i=t(29),s=t(55),l=TypeError,c=Object.defineProperty,u=Object.getOwnPropertyDescriptor;e.f=r?a?function(n,e,t){if(i(n),e=s(e),i(t),"function"==typeof n&&"prototype"===e&&"value"in t&&"writable"in t&&!t.writable){var r=u(n,e);r&&r.writable&&(n[e]=t.value,t={configurable:"configurable"in t?t.configurable:r.configurable,enumerable:"enumerable"in t?t.enumerable:r.enumerable,writable:!1})}return c(n,e,t)}:c:function(n,e,t){if(i(n),e=s(e),i(t),o)try{return c(n,e,t)}catch(n){}if("get"in t||"set"in t)throw l("Accessors not supported");return"value"in t&&(n[e]=t.value),n}},function(n,e,t){var r=t(15),o=t(150),a=t(151),i=r?r.toStringTag:void 0;n.exports=function(n){return null==n?void 0===n?"[object Undefined]":"[object Null]":i&&i in Object(n)?o(n):a(n)}},function(n,e,t){var r=t(8).Symbol;n.exports=r},function(n,e,t){var r=t(2),o=t(52).f,a=t(20),i=t(115),s=t(37),l=t(66),c=t(128);n.exports=function(n,e){var t,u,p,d,m,f=n.target,g=n.global,h=n.stat;if(t=g?r:h?r[f]||s(f,{}):(r[f]||{}).prototype)for(u in e){if(d=e[u],p=n.dontCallGetSet?(m=o(t,u))&&m.value:t[u],!c(g?u:f+(h?".":"#")+u,n.forced)&&void 0!==p){if(typeof d==typeof p)continue;l(d,p)}(n.sham||p&&p.sham)&&a(d,"sham",!0),i(t,u,d,n)}}},function(n,e,t){var r=t(2),o=t(1),a=function(n){return o(n)?n:void 0};n.exports=function(n,e){return arguments.length<2?a(r[n]):r[n]&&r[n][e]}},function(n,e,t){var r=t(2),o=t(62),a=t(7),i=t(64),s=t(60),l=t(59),c=o("wks"),u=r.Symbol,p=u&&u.for,d=l?u:u&&u.withoutSetter||i;n.exports=function(n){if(!a(c,n)||!s&&"string"!=typeof c[n]){var e="Symbol."+n;s&&a(u,n)?c[n]=u[n]:c[n]=l&&p?p(e):d(e)}return c[n]}},function(n,e,t){var r=t(3),o=r({}.toString),a=r("".slice);n.exports=function(n){return a(o(n),8,-1)}},function(n,e,t){var r=t(5),o=t(13),a=t(35);n.exports=r?function(n,e,t){return o.f(n,e,a(1,t))}:function(n,e,t){return n[e]=t,n}},function(n,e,t){var r=t(155),o=t(156),a=t(157),i=t(158),s=t(159);function l(n){var e=-1,t=null==n?0:n.length;for(this.clear();++e<t;){var r=n[e];this.set(r[0],r[1])}}l.prototype.clear=r,l.prototype.delete=o,l.prototype.get=a,l.prototype.has=i,l.prototype.set=s,n.exports=l},function(n,e,t){var r=t(72);n.exports=function(n,e){for(var t=n.length;t--;)if(r(n[t][0],e))return t;return-1}},function(n,e,t){var r=t(10)(Object,"create");n.exports=r},function(n,e,t){var r=t(177);n.exports=function(n,e){var t=n.__data__;return r(e)?t["string"==typeof e?"string":"hash"]:t.map}},function(n,e,t){var r=t(45);n.exports=function(n){if("string"==typeof n||r(n))return n;var e=n+"";return"0"==e&&1/n==-1/0?"-0":e}},function(n,e,t){var r,o;
/* NProgress, (c) 2013, 2014 Rico Sta. Cruz - http://ricostacruz.com/nprogress
 * @license MIT */void 0===(o="function"==typeof(r=function(){var n,e,t={version:"0.2.0"},r=t.settings={minimum:.08,easing:"ease",positionUsing:"",speed:200,trickle:!0,trickleRate:.02,trickleSpeed:800,showSpinner:!0,barSelector:'[role="bar"]',spinnerSelector:'[role="spinner"]',parent:"body",template:'<div class="bar" role="bar"><div class="peg"></div></div><div class="spinner" role="spinner"><div class="spinner-icon"></div></div>'};function o(n,e,t){return n<e?e:n>t?t:n}function a(n){return 100*(-1+n)}t.configure=function(n){var e,t;for(e in n)void 0!==(t=n[e])&&n.hasOwnProperty(e)&&(r[e]=t);return this},t.status=null,t.set=function(n){var e=t.isStarted();n=o(n,r.minimum,1),t.status=1===n?null:n;var l=t.render(!e),c=l.querySelector(r.barSelector),u=r.speed,p=r.easing;return l.offsetWidth,i((function(e){""===r.positionUsing&&(r.positionUsing=t.getPositioningCSS()),s(c,function(n,e,t){var o;return(o="translate3d"===r.positionUsing?{transform:"translate3d("+a(n)+"%,0,0)"}:"translate"===r.positionUsing?{transform:"translate("+a(n)+"%,0)"}:{"margin-left":a(n)+"%"}).transition="all "+e+"ms "+t,o}(n,u,p)),1===n?(s(l,{transition:"none",opacity:1}),l.offsetWidth,setTimeout((function(){s(l,{transition:"all "+u+"ms linear",opacity:0}),setTimeout((function(){t.remove(),e()}),u)}),u)):setTimeout(e,u)})),this},t.isStarted=function(){return"number"==typeof t.status},t.start=function(){t.status||t.set(0);var n=function(){setTimeout((function(){t.status&&(t.trickle(),n())}),r.trickleSpeed)};return r.trickle&&n(),this},t.done=function(n){return n||t.status?t.inc(.3+.5*Math.random()).set(1):this},t.inc=function(n){var e=t.status;return e?("number"!=typeof n&&(n=(1-e)*o(Math.random()*e,.1,.95)),e=o(e+n,0,.994),t.set(e)):t.start()},t.trickle=function(){return t.inc(Math.random()*r.trickleRate)},n=0,e=0,t.promise=function(r){return r&&"resolved"!==r.state()?(0===e&&t.start(),n++,e++,r.always((function(){0==--e?(n=0,t.done()):t.set((n-e)/n)})),this):this},t.render=function(n){if(t.isRendered())return document.getElementById("nprogress");c(document.documentElement,"nprogress-busy");var e=document.createElement("div");e.id="nprogress",e.innerHTML=r.template;var o,i=e.querySelector(r.barSelector),l=n?"-100":a(t.status||0),u=document.querySelector(r.parent);return s(i,{transition:"all 0 linear",transform:"translate3d("+l+"%,0,0)"}),r.showSpinner||(o=e.querySelector(r.spinnerSelector))&&d(o),u!=document.body&&c(u,"nprogress-custom-parent"),u.appendChild(e),e},t.remove=function(){u(document.documentElement,"nprogress-busy"),u(document.querySelector(r.parent),"nprogress-custom-parent");var n=document.getElementById("nprogress");n&&d(n)},t.isRendered=function(){return!!document.getElementById("nprogress")},t.getPositioningCSS=function(){var n=document.body.style,e="WebkitTransform"in n?"Webkit":"MozTransform"in n?"Moz":"msTransform"in n?"ms":"OTransform"in n?"O":"";return e+"Perspective"in n?"translate3d":e+"Transform"in n?"translate":"margin"};var i=function(){var n=[];function e(){var t=n.shift();t&&t(e)}return function(t){n.push(t),1==n.length&&e()}}(),s=function(){var n=["Webkit","O","Moz","ms"],e={};function t(t){return t=t.replace(/^-ms-/,"ms-").replace(/-([\da-z])/gi,(function(n,e){return e.toUpperCase()})),e[t]||(e[t]=function(e){var t=document.body.style;if(e in t)return e;for(var r,o=n.length,a=e.charAt(0).toUpperCase()+e.slice(1);o--;)if((r=n[o]+a)in t)return r;return e}(t))}function r(n,e,r){e=t(e),n.style[e]=r}return function(n,e){var t,o,a=arguments;if(2==a.length)for(t in e)void 0!==(o=e[t])&&e.hasOwnProperty(t)&&r(n,t,o);else r(n,a[1],a[2])}}();function l(n,e){return("string"==typeof n?n:p(n)).indexOf(" "+e+" ")>=0}function c(n,e){var t=p(n),r=t+e;l(t,e)||(n.className=r.substring(1))}function u(n,e){var t,r=p(n);l(n,e)&&(t=r.replace(" "+e+" "," "),n.className=t.substring(1,t.length-1))}function p(n){return(" "+(n.className||"")+" ").replace(/\s+/gi," ")}function d(n){n&&n.parentNode&&n.parentNode.removeChild(n)}return t})?r.call(e,t,e,n):r)||(n.exports=o)},function(n){n.exports=JSON.parse('{"name":"vuepress-plugin-comment","version":"0.7.3","description":"Comment plugin in vuepress, such as Gitalk, Valine...","main":"index.js","scripts":{"test":"echo \\"Error: no test specified\\" && exit 1"},"repository":{"type":"git","url":"git+ssh://git@github.com/dongyuanxin/vuepress-plugin-comment.git"},"keywords":["vuepress","comment","plugin","vue","gitalk","valine"],"author":"dongyuanxin","license":"MIT","bugs":{"url":"https://github.com/dongyuanxin/vuepress-plugin-comment/issues"},"homepage":"https://github.com/dongyuanxin/vuepress-plugin-comment#readme","dependencies":{"ejs":"^2.6.1","gitalk":"^1.5.0","gitalk-fix":"^1.5.2","i":"^0.3.6","npm":"^6.9.0","valine":"^1.3.9"}}')},function(n,e,t){"use strict";var r=t(16),o=t(32),a=t(33),i=t(132),s=t(134),l=t(4)((function(){return 4294967297!==[].push.call({length:4294967296},1)})),c=!function(){try{Object.defineProperty([],"length",{writable:!1}).push()}catch(n){return n instanceof TypeError}}();r({target:"Array",proto:!0,arity:1,forced:l||c},{push:function(n){var e=o(this),t=a(e),r=arguments.length;s(t+r);for(var l=0;l<r;l++)e[t]=arguments[l],t++;return i(e,t),t}})},function(n,e,t){var r=t(9),o=String,a=TypeError;n.exports=function(n){if(r(n))return n;throw a(o(n)+" is not an object")}},function(n,e,t){var r=t(4);n.exports=!r((function(){var n=function(){}.bind();return"function"!=typeof n||n.hasOwnProperty("prototype")}))},function(n,e,t){var r=t(47),o=t(53);n.exports=function(n){return r(o(n))}},function(n,e,t){var r=t(53),o=Object;n.exports=function(n){return o(r(n))}},function(n,e,t){var r=t(126);n.exports=function(n){return r(n.length)}},function(n,e,t){var r=t(30),o=Function.prototype.call;n.exports=r?o.bind(o):function(){return o.apply(o,arguments)}},function(n,e){n.exports=function(n,e){return{enumerable:!(1&n),configurable:!(2&n),writable:!(4&n),value:e}}},function(n,e,t){var r=t(2),o=t(37),a=r["__core-js_shared__"]||o("__core-js_shared__",{});n.exports=a},function(n,e,t){var r=t(2),o=Object.defineProperty;n.exports=function(n,e){try{o(r,n,{value:e,configurable:!0,writable:!0})}catch(t){r[n]=e}return e}},function(n,e,t){var r=t(149),o=t(12),a=Object.prototype,i=a.hasOwnProperty,s=a.propertyIsEnumerable,l=r(function(){return arguments}())?r:function(n){return o(n)&&i.call(n,"callee")&&!s.call(n,"callee")};n.exports=l},function(n,e,t){var r=t(10)(t(8),"Map");n.exports=r},function(n,e){n.exports=function(n){var e=typeof n;return null!=n&&("object"==e||"function"==e)}},function(n,e,t){var r=t(169),o=t(176),a=t(178),i=t(179),s=t(180);function l(n){var e=-1,t=null==n?0:n.length;for(this.clear();++e<t;){var r=n[e];this.set(r[0],r[1])}}l.prototype.clear=r,l.prototype.delete=o,l.prototype.get=a,l.prototype.has=i,l.prototype.set=s,n.exports=l},function(n,e){n.exports=function(n){var e=-1,t=Array(n.size);return n.forEach((function(n){t[++e]=n})),t}},function(n,e){n.exports=function(n){return"number"==typeof n&&n>-1&&n%1==0&&n<=9007199254740991}},function(n,e,t){var r=t(6),o=t(45),a=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,i=/^\w*$/;n.exports=function(n,e){if(r(n))return!1;var t=typeof n;return!("number"!=t&&"symbol"!=t&&"boolean"!=t&&null!=n&&!o(n))||(i.test(n)||!a.test(n)||null!=e&&n in Object(e))}},function(n,e,t){var r=t(14),o=t(12);n.exports=function(n){return"symbol"==typeof n||o(n)&&"[object Symbol]"==r(n)}},function(n,e){n.exports=function(n){return n}},function(n,e,t){var r=t(3),o=t(4),a=t(19),i=Object,s=r("".split);n.exports=o((function(){return!i("z").propertyIsEnumerable(0)}))?function(n){return"String"==a(n)?s(n,""):i(n)}:i},function(n,e,t){var r=t(1),o=t(113),a=TypeError;n.exports=function(n){if(r(n))return n;throw a(o(n)+" is not a function")}},function(n,e){n.exports={}},function(n,e){n.exports=function(n){return n.webpackPolyfill||(n.deprecate=function(){},n.paths=[],n.children||(n.children=[]),Object.defineProperty(n,"loaded",{enumerable:!0,get:function(){return n.l}}),Object.defineProperty(n,"id",{enumerable:!0,get:function(){return n.i}}),n.webpackPolyfill=1),n}},function(n,e){var t=/^\s+|\s+$/g,r=/^[-+]0x[0-9a-f]+$/i,o=/^0b[01]+$/i,a=/^0o[0-7]+$/i,i=parseInt,s="object"==typeof global&&global&&global.Object===Object&&global,l="object"==typeof self&&self&&self.Object===Object&&self,c=s||l||Function("return this")(),u=Object.prototype.toString,p=Math.max,d=Math.min,m=function(){return c.Date.now()};function f(n){var e=typeof n;return!!n&&("object"==e||"function"==e)}function g(n){if("number"==typeof n)return n;if(function(n){return"symbol"==typeof n||function(n){return!!n&&"object"==typeof n}(n)&&"[object Symbol]"==u.call(n)}(n))return NaN;if(f(n)){var e="function"==typeof n.valueOf?n.valueOf():n;n=f(e)?e+"":e}if("string"!=typeof n)return 0===n?n:+n;n=n.replace(t,"");var s=o.test(n);return s||a.test(n)?i(n.slice(2),s?2:8):r.test(n)?NaN:+n}n.exports=function(n,e,t){var r,o,a,i,s,l,c=0,u=!1,h=!1,y=!0;if("function"!=typeof n)throw new TypeError("Expected a function");function b(e){var t=r,a=o;return r=o=void 0,c=e,i=n.apply(a,t)}function v(n){return c=n,s=setTimeout(w,e),u?b(n):i}function x(n){var t=n-l;return void 0===l||t>=e||t<0||h&&n-c>=a}function w(){var n=m();if(x(n))return j(n);s=setTimeout(w,function(n){var t=e-(n-l);return h?d(t,a-(n-c)):t}(n))}function j(n){return s=void 0,y&&r?b(n):(r=o=void 0,i)}function k(){var n=m(),t=x(n);if(r=arguments,o=this,l=n,t){if(void 0===s)return v(l);if(h)return s=setTimeout(w,e),b(l)}return void 0===s&&(s=setTimeout(w,e)),i}return e=g(e)||0,f(t)&&(u=!!t.leading,a=(h="maxWait"in t)?p(g(t.maxWait)||0,e):a,y="trailing"in t?!!t.trailing:y),k.cancel=function(){void 0!==s&&clearTimeout(s),c=0,r=l=o=s=void 0},k.flush=function(){return void 0===s?i:j(m())},k}},function(n,e,t){var r=t(5),o=t(34),a=t(109),i=t(35),s=t(31),l=t(55),c=t(7),u=t(65),p=Object.getOwnPropertyDescriptor;e.f=r?p:function(n,e){if(n=s(n),e=l(e),u)try{return p(n,e)}catch(n){}if(c(n,e))return i(!o(a.f,n,e),n[e])}},function(n,e,t){var r=t(54),o=TypeError;n.exports=function(n){if(r(n))throw o("Can't call method on "+n);return n}},function(n,e){n.exports=function(n){return null==n}},function(n,e,t){var r=t(110),o=t(57);n.exports=function(n){var e=r(n,"string");return o(e)?e:e+""}},function(n,e){var t="object"==typeof document&&document.all,r=void 0===t&&void 0!==t;n.exports={all:t,IS_HTMLDDA:r}},function(n,e,t){var r=t(17),o=t(1),a=t(58),i=t(59),s=Object;n.exports=i?function(n){return"symbol"==typeof n}:function(n){var e=r("Symbol");return o(e)&&a(e.prototype,s(n))}},function(n,e,t){var r=t(3);n.exports=r({}.isPrototypeOf)},function(n,e,t){var r=t(60);n.exports=r&&!Symbol.sham&&"symbol"==typeof Symbol.iterator},function(n,e,t){var r=t(61),o=t(4);n.exports=!!Object.getOwnPropertySymbols&&!o((function(){var n=Symbol();return!String(n)||!(Object(n)instanceof Symbol)||!Symbol.sham&&r&&r<41}))},function(n,e,t){var r,o,a=t(2),i=t(111),s=a.process,l=a.Deno,c=s&&s.versions||l&&l.version,u=c&&c.v8;u&&(o=(r=u.split("."))[0]>0&&r[0]<4?1:+(r[0]+r[1])),!o&&i&&(!(r=i.match(/Edge\/(\d+)/))||r[1]>=74)&&(r=i.match(/Chrome\/(\d+)/))&&(o=+r[1]),n.exports=o},function(n,e,t){var r=t(63),o=t(36);(n.exports=function(n,e){return o[n]||(o[n]=void 0!==e?e:{})})("versions",[]).push({version:"3.25.2",mode:r?"pure":"global",copyright:"© 2014-2022 Denis Pushkarev (zloirock.ru)",license:"https://github.com/zloirock/core-js/blob/v3.25.2/LICENSE",source:"https://github.com/zloirock/core-js"})},function(n,e){n.exports=!1},function(n,e,t){var r=t(3),o=0,a=Math.random(),i=r(1..toString);n.exports=function(n){return"Symbol("+(void 0===n?"":n)+")_"+i(++o+a,36)}},function(n,e,t){var r=t(5),o=t(4),a=t(101);n.exports=!r&&!o((function(){return 7!=Object.defineProperty(a("div"),"a",{get:function(){return 7}}).a}))},function(n,e,t){var r=t(7),o=t(121),a=t(52),i=t(13);n.exports=function(n,e,t){for(var s=o(e),l=i.f,c=a.f,u=0;u<s.length;u++){var p=s[u];r(n,p)||t&&r(t,p)||l(n,p,c(e,p))}}},function(n,e,t){var r=t(125);n.exports=function(n){var e=+n;return e!=e||0===e?0:r(e)}},function(n,e,t){var r=t(3),o=t(29),a=t(137);n.exports=Object.setPrototypeOf||("__proto__"in{}?function(){var n,e=!1,t={};try{(n=r(Object.getOwnPropertyDescriptor(Object.prototype,"__proto__").set))(t,[]),e=t instanceof Array}catch(n){}return function(t,r){return o(t),a(r),e?n(t,r):t.__proto__=r,t}}():void 0)},function(n,e){n.exports=function(n,e){for(var t=-1,r=e.length,o=n.length;++t<r;)n[o+t]=e[t];return n}},function(n,e){var t="object"==typeof global&&global&&global.Object===Object&&global;n.exports=t},function(n,e,t){var r=t(21),o=t(160),a=t(161),i=t(162),s=t(163),l=t(164);function c(n){var e=this.__data__=new r(n);this.size=e.size}c.prototype.clear=o,c.prototype.delete=a,c.prototype.get=i,c.prototype.has=s,c.prototype.set=l,n.exports=c},function(n,e){n.exports=function(n,e){return n===e||n!=n&&e!=e}},function(n,e,t){var r=t(14),o=t(40);n.exports=function(n){if(!o(n))return!1;var e=r(n);return"[object Function]"==e||"[object GeneratorFunction]"==e||"[object AsyncFunction]"==e||"[object Proxy]"==e}},function(n,e){var t=Function.prototype.toString;n.exports=function(n){if(null!=n){try{return t.call(n)}catch(n){}try{return n+""}catch(n){}}return""}},function(n,e,t){var r=t(181),o=t(12);n.exports=function n(e,t,a,i,s){return e===t||(null==e||null==t||!o(e)&&!o(t)?e!=e&&t!=t:r(e,t,a,i,n,s))}},function(n,e,t){var r=t(77),o=t(184),a=t(78);n.exports=function(n,e,t,i,s,l){var c=1&t,u=n.length,p=e.length;if(u!=p&&!(c&&p>u))return!1;var d=l.get(n),m=l.get(e);if(d&&m)return d==e&&m==n;var f=-1,g=!0,h=2&t?new r:void 0;for(l.set(n,e),l.set(e,n);++f<u;){var y=n[f],b=e[f];if(i)var v=c?i(b,y,f,e,n,l):i(y,b,f,n,e,l);if(void 0!==v){if(v)continue;g=!1;break}if(h){if(!o(e,(function(n,e){if(!a(h,e)&&(y===n||s(y,n,t,i,l)))return h.push(e)}))){g=!1;break}}else if(y!==b&&!s(y,b,t,i,l)){g=!1;break}}return l.delete(n),l.delete(e),g}},function(n,e,t){var r=t(41),o=t(182),a=t(183);function i(n){var e=-1,t=null==n?0:n.length;for(this.__data__=new r;++e<t;)this.add(n[e])}i.prototype.add=i.prototype.push=o,i.prototype.has=a,n.exports=i},function(n,e){n.exports=function(n,e){return n.has(e)}},function(n,e,t){var r=t(194),o=t(200),a=t(83);n.exports=function(n){return a(n)?r(n):o(n)}},function(n,e,t){(function(n){var r=t(8),o=t(196),a=e&&!e.nodeType&&e,i=a&&"object"==typeof n&&n&&!n.nodeType&&n,s=i&&i.exports===a?r.Buffer:void 0,l=(s?s.isBuffer:void 0)||o;n.exports=l}).call(this,t(50)(n))},function(n,e){var t=/^(?:0|[1-9]\d*)$/;n.exports=function(n,e){var r=typeof n;return!!(e=null==e?9007199254740991:e)&&("number"==r||"symbol"!=r&&t.test(n))&&n>-1&&n%1==0&&n<e}},function(n,e,t){var r=t(197),o=t(198),a=t(199),i=a&&a.isTypedArray,s=i?o(i):r;n.exports=s},function(n,e,t){var r=t(73),o=t(43);n.exports=function(n){return null!=n&&o(n.length)&&!r(n)}},function(n,e,t){var r=t(10)(t(8),"Set");n.exports=r},function(n,e,t){var r=t(40);n.exports=function(n){return n==n&&!r(n)}},function(n,e){n.exports=function(n,e){return function(t){return null!=t&&(t[n]===e&&(void 0!==e||n in Object(t)))}}},function(n,e,t){var r=t(88),o=t(25);n.exports=function(n,e){for(var t=0,a=(e=r(e,n)).length;null!=n&&t<a;)n=n[o(e[t++])];return t&&t==a?n:void 0}},function(n,e,t){var r=t(6),o=t(44),a=t(211),i=t(214);n.exports=function(n,e){return r(n)?n:o(n,e)?[n]:a(i(n))}},function(n,e,t){},function(n,e,t){},function(n,e,t){},function(n,e,t){},function(n,e,t){},function(n,e,t){},function(n,e,t){var r=t(147),o=t(152),a=t(223),i=t(231),s=t(240),l=t(106),c=a((function(n){var e=l(n);return s(e)&&(e=void 0),i(r(n,1,s,!0),o(e,2))}));n.exports=c},function(n,e,t){"use strict";
/*!
 * escape-html
 * Copyright(c) 2012-2013 TJ Holowaychuk
 * Copyright(c) 2015 Andreas Lubbe
 * Copyright(c) 2015 Tiancheng "Timothy" Gu
 * MIT Licensed
 */var r=/["'&<>]/;n.exports=function(n){var e,t=""+n,o=r.exec(t);if(!o)return t;var a="",i=0,s=0;for(i=o.index;i<t.length;i++){switch(t.charCodeAt(i)){case 34:e="&quot;";break;case 38:e="&amp;";break;case 39:e="&#39;";break;case 60:e="&lt;";break;case 62:e="&gt;";break;default:continue}s!==i&&(a+=t.substring(s,i)),s=i+1,a+=e}return s!==i?a+t.substring(s,i):a}},function(n,e,t){"use strict";
/**
 * @file Embedded JavaScript templating engine. {@link http://ejs.co}
 * @author Matthew Eernisse <mde@fleegix.org>
 * @author Tiancheng "Timothy" Gu <timothygu99@gmail.com>
 * @project EJS
 * @license {@link http://www.apache.org/licenses/LICENSE-2.0 Apache License, Version 2.0}
 */var r=t(247),o=t(248),a=t(249),i=!1,s=t(250).version,l=["delimiter","scope","context","debug","compileDebug","client","_with","rmWhitespace","strict","filename","async"],c=l.concat("cache"),u=/^\uFEFF/;function p(n,t){var o,a,i=t.views,s=/^[A-Za-z]+:\\|^\//.exec(n);if(s&&s.length)o=e.resolveInclude(n.replace(/^\/*/,""),t.root||"/",!0);else if(t.filename&&(a=e.resolveInclude(n,t.filename),r.existsSync(a)&&(o=a)),o||Array.isArray(i)&&i.some((function(t){return a=e.resolveInclude(n,t,!0),r.existsSync(a)}))&&(o=a),!o)throw new Error('Could not find the include file "'+t.escapeFunction(n)+'"');return o}function d(n,t){var r,o=n.filename,a=arguments.length>1;if(n.cache){if(!o)throw new Error("cache option requires a filename");if(r=e.cache.get(o))return r;a||(t=f(o).toString().replace(u,""))}else if(!a){if(!o)throw new Error("Internal EJS error: no file name or template provided");t=f(o).toString().replace(u,"")}return r=e.compile(t,n),n.cache&&e.cache.set(o,r),r}function m(n,t,r){var o;if(!r){if("function"==typeof e.promiseImpl)return new e.promiseImpl((function(e,r){try{e(o=d(n)(t))}catch(n){r(n)}}));throw new Error("Please provide a callback function")}try{o=d(n)(t)}catch(n){return r(n)}r(null,o)}function f(n){return e.fileLoader(n)}function g(n,e,t,r,o){var a=e.split("\n"),i=Math.max(r-3,0),s=Math.min(a.length,r+3),l=o(t),c=a.slice(i,s).map((function(n,e){var t=e+i+1;return(t==r?" >> ":"    ")+t+"| "+n})).join("\n");throw n.path=l,n.message=(l||"ejs")+":"+r+"\n"+c+"\n\n"+n.message,n}function h(n){return n.replace(/;(\s*$)/,"$1")}function y(n,t){t=t||{};var r={};this.templateText=n,this.mode=null,this.truncate=!1,this.currentLine=1,this.source="",this.dependencies=[],r.client=t.client||!1,r.escapeFunction=t.escape||t.escapeFunction||a.escapeXML,r.compileDebug=!1!==t.compileDebug,r.debug=!!t.debug,r.filename=t.filename,r.openDelimiter=t.openDelimiter||e.openDelimiter||"<",r.closeDelimiter=t.closeDelimiter||e.closeDelimiter||">",r.delimiter=t.delimiter||e.delimiter||"%",r.strict=t.strict||!1,r.context=t.context,r.cache=t.cache||!1,r.rmWhitespace=t.rmWhitespace,r.root=t.root,r.outputFunctionName=t.outputFunctionName,r.localsName=t.localsName||e.localsName||"locals",r.views=t.views,r.async=t.async,r.destructuredLocals=t.destructuredLocals,r.legacyInclude=void 0===t.legacyInclude||!!t.legacyInclude,r.strict?r._with=!1:r._with=void 0===t._with||t._with,this.opts=r,this.regex=this.createRegex()}e.cache=a.cache,e.fileLoader=r.readFileSync,e.localsName="locals",e.promiseImpl=new Function("return this;")().Promise,e.resolveInclude=function(n,e,t){var r=o.dirname,a=o.extname,i=(0,o.resolve)(t?e:r(e),n);return a(n)||(i+=".ejs"),i},e.compile=function(n,e){return e&&e.scope&&(i||(console.warn("`scope` option is deprecated and will be removed in EJS 3"),i=!0),e.context||(e.context=e.scope),delete e.scope),new y(n,e).compile()},e.render=function(n,e,t){var r=e||{},o=t||{};return 2==arguments.length&&a.shallowCopyFromList(o,r,l),d(o,n)(r)},e.renderFile=function(){var n,e,t,r=Array.prototype.slice.call(arguments),o=r.shift(),i={filename:o};return"function"==typeof arguments[arguments.length-1]&&(n=r.pop()),r.length?(e=r.shift(),r.length?a.shallowCopy(i,r.pop()):(e.settings&&(e.settings.views&&(i.views=e.settings.views),e.settings["view cache"]&&(i.cache=!0),(t=e.settings["view options"])&&a.shallowCopy(i,t)),a.shallowCopyFromList(i,e,c)),i.filename=o):e={},m(i,e,n)},e.Template=y,e.clearCache=function(){e.cache.reset()},y.modes={EVAL:"eval",ESCAPED:"escaped",RAW:"raw",COMMENT:"comment",LITERAL:"literal"},y.prototype={createRegex:function(){var n="(<%%|%%>|<%=|<%-|<%_|<%#|<%|%>|-%>|_%>)",e=a.escapeRegExpChars(this.opts.delimiter),t=a.escapeRegExpChars(this.opts.openDelimiter),r=a.escapeRegExpChars(this.opts.closeDelimiter);return n=n.replace(/%/g,e).replace(/</g,t).replace(/>/g,r),new RegExp(n)},compile:function(){var n,e,t,r=this.opts,i="",s="",l=r.escapeFunction;if(!this.source){if(this.generateSource(),i+='  var __output = "";\n  function __append(s) { if (s !== undefined && s !== null) __output += s }\n',r.outputFunctionName&&(i+="  var "+r.outputFunctionName+" = __append;\n"),r.destructuredLocals&&r.destructuredLocals.length){for(var c="  var __locals = ("+r.localsName+" || {}),\n",u=0;u<r.destructuredLocals.length;u++){var m=r.destructuredLocals[u];u>0&&(c+=",\n  "),c+=m+" = __locals."+m}i+=c+";\n"}!1!==r._with&&(i+="  with ("+r.localsName+" || {}) {\n",s+="  }\n"),s+="  return __output;\n",this.source=i+this.source+s}n=r.compileDebug?"var __line = 1\n  , __lines = "+JSON.stringify(this.templateText)+"\n  , __filename = "+(r.filename?JSON.stringify(r.filename):"undefined")+";\ntry {\n"+this.source+"} catch (e) {\n  rethrow(e, __lines, __filename, __line, escapeFn);\n}\n":this.source,r.client&&(n="escapeFn = escapeFn || "+l.toString()+";\n"+n,r.compileDebug&&(n="rethrow = rethrow || "+g.toString()+";\n"+n)),r.strict&&(n='"use strict";\n'+n),r.debug&&console.log(n),r.compileDebug&&r.filename&&(n=n+"\n//# sourceURL="+r.filename+"\n");try{if(r.async)try{t=new Function("return (async function(){}).constructor;")()}catch(n){throw n instanceof SyntaxError?new Error("This environment does not support async/await"):n}else t=Function;e=new t(r.localsName+", escapeFn, include, rethrow",n)}catch(n){throw n instanceof SyntaxError&&(r.filename&&(n.message+=" in "+r.filename),n.message+=" while compiling ejs\n\n",n.message+="If the above error is not helpful, you may want to try EJS-Lint:\n",n.message+="https://github.com/RyanZim/EJS-Lint",r.async||(n.message+="\n",n.message+="Or, if you meant to create an async function, pass `async: true` as an option.")),n}var f=r.client?e:function(n){return e.apply(r.context,[n||{},l,function(e,t){var o=a.shallowCopy({},n);return t&&(o=a.shallowCopy(o,t)),function(n,e){var t=a.shallowCopy({},e);return t.filename=p(n,t),d(t)}(e,r)(o)},g])};if(f.dependencies=this.dependencies,r.filename&&"function"==typeof Object.defineProperty){var h=r.filename,y=o.basename(h,o.extname(h));try{Object.defineProperty(f,"name",{value:y,writable:!1,enumerable:!1,configurable:!0})}catch(n){}}return f},generateSource:function(){var n=this.opts;n.rmWhitespace&&(this.templateText=this.templateText.replace(/[\r\n]+/g,"\n").replace(/^\s+|\s+$/gm,"")),this.templateText=this.templateText.replace(/[ \t]*<%_/gm,"<%_").replace(/_%>[ \t]*/gm,"_%>");var t=this,r=this.parseTemplateText(),o=this.opts.delimiter,i=this.opts.openDelimiter,s=this.opts.closeDelimiter;r&&r.length&&r.forEach((function(l,c){var d,m,g,h,b,v;if(0===l.indexOf(i+o)&&0!==l.indexOf(i+o+o)&&(m=r[c+2])!=o+s&&m!="-"+o+s&&m!="_"+o+s)throw new Error('Could not find matching close tag for "'+l+'".');if(n.legacyInclude&&(g=l.match(/^\s*include\s+(\S+)/))&&(d=r[c-1])&&(d==i+o||d==i+o+"-"||d==i+o+"_"))return h=a.shallowCopy({},t.opts),b=function(n,e){var t,r,o=a.shallowCopy({},e);r=f(t=p(n,o)).toString().replace(u,""),o.filename=t;var i=new y(r,o);return i.generateSource(),{source:i.source,filename:t,template:r}}(g[1],h),v=t.opts.compileDebug?"    ; (function(){\n      var __line = 1\n      , __lines = "+JSON.stringify(b.template)+"\n      , __filename = "+JSON.stringify(b.filename)+";\n      try {\n"+b.source+"      } catch (e) {\n        rethrow(e, __lines, __filename, __line, escapeFn);\n      }\n    ; }).call(this)\n":"    ; (function(){\n"+b.source+"    ; }).call(this)\n",t.source+=v,void t.dependencies.push(e.resolveInclude(g[1],h.filename));t.scanLine(l)}))},parseTemplateText:function(){for(var n,e=this.templateText,t=this.regex,r=t.exec(e),o=[];r;)0!==(n=r.index)&&(o.push(e.substring(0,n)),e=e.slice(n)),o.push(r[0]),e=e.slice(r[0].length),r=t.exec(e);return e&&o.push(e),o},_addOutput:function(n){if(this.truncate&&(n=n.replace(/^(?:\r\n|\r|\n)/,""),this.truncate=!1),!n)return n;n=(n=(n=(n=n.replace(/\\/g,"\\\\")).replace(/\n/g,"\\n")).replace(/\r/g,"\\r")).replace(/"/g,'\\"'),this.source+='    ; __append("'+n+'")\n'},scanLine:function(n){var e,t=this.opts.delimiter,r=this.opts.openDelimiter,o=this.opts.closeDelimiter;switch(e=n.split("\n").length-1,n){case r+t:case r+t+"_":this.mode=y.modes.EVAL;break;case r+t+"=":this.mode=y.modes.ESCAPED;break;case r+t+"-":this.mode=y.modes.RAW;break;case r+t+"#":this.mode=y.modes.COMMENT;break;case r+t+t:this.mode=y.modes.LITERAL,this.source+='    ; __append("'+n.replace(r+t+t,r+t)+'")\n';break;case t+t+o:this.mode=y.modes.LITERAL,this.source+='    ; __append("'+n.replace(t+t+o,t+o)+'")\n';break;case t+o:case"-"+t+o:case"_"+t+o:this.mode==y.modes.LITERAL&&this._addOutput(n),this.mode=null,this.truncate=0===n.indexOf("-")||0===n.indexOf("_");break;default:if(this.mode){switch(this.mode){case y.modes.EVAL:case y.modes.ESCAPED:case y.modes.RAW:n.lastIndexOf("//")>n.lastIndexOf("\n")&&(n+="\n")}switch(this.mode){case y.modes.EVAL:this.source+="    ; "+n+"\n";break;case y.modes.ESCAPED:this.source+="    ; __append(escapeFn("+h(n)+"))\n";break;case y.modes.RAW:this.source+="    ; __append("+h(n)+")\n";break;case y.modes.COMMENT:break;case y.modes.LITERAL:this._addOutput(n)}}else this._addOutput(n)}this.opts.compileDebug&&e&&(this.currentLine+=e,this.source+="    ; __line = "+this.currentLine+"\n")}},e.escapeXML=a.escapeXML,e.__express=e.renderFile,e.VERSION=s,e.name="ejs","undefined"!=typeof window&&(window.ejs=e)},function(n,e,t){"use strict";t.r(e);var r={name:"CodeBlock",props:{title:{type:String,required:!0},active:{type:Boolean,default:!1}}},o=(t(241),t(0)),a=Object(o.a)(r,(function(){return(0,this._self._c)("div",{staticClass:"theme-code-block",class:{"theme-code-block__active":this.active}},[this._t("default")],2)}),[],!1,null,"4f1e9d0c",null);e.default=a.exports},function(n,e,t){"use strict";t.r(e);var r={name:"CodeGroup",data:()=>({codeTabs:[],activeCodeTabIndex:-1}),watch:{activeCodeTabIndex(n){this.codeTabs.forEach(n=>{n.elm.classList.remove("theme-code-block__active")}),this.codeTabs[n].elm.classList.add("theme-code-block__active")}},mounted(){this.codeTabs=(this.$slots.default||[]).filter(n=>Boolean(n.componentOptions)).map((n,e)=>(""===n.componentOptions.propsData.active&&(this.activeCodeTabIndex=e),{title:n.componentOptions.propsData.title,elm:n.elm})),-1===this.activeCodeTabIndex&&this.codeTabs.length>0&&(this.activeCodeTabIndex=0)},methods:{changeCodeTab(n){this.activeCodeTabIndex=n}}},o=(t(242),t(0)),a=Object(o.a)(r,(function(){var n=this,e=n._self._c;return e("div",{staticClass:"theme-code-group"},[e("div",{staticClass:"theme-code-group__nav"},[e("ul",{staticClass:"theme-code-group__ul"},n._l(n.codeTabs,(function(t,r){return e("li",{key:t.title,staticClass:"theme-code-group__li"},[e("button",{staticClass:"theme-code-group__nav-tab",class:{"theme-code-group__nav-tab-active":r===n.activeCodeTabIndex},on:{click:function(e){return n.changeCodeTab(r)}}},[n._v("\n            "+n._s(t.title)+"\n          ")])])})),0)]),n._v(" "),n._t("default"),n._v(" "),n.codeTabs.length<1?e("pre",{staticClass:"pre-blank"},[n._v("// Make sure to add code blocks to your code group")]):n._e()],2)}),[],!1,null,"2f5f1757",null);e.default=a.exports},function(n,e){n.exports=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"]},function(n,e,t){var r=t(2),o=t(9),a=r.document,i=o(a)&&o(a.createElement);n.exports=function(n){return i?a.createElement(n):{}}},function(n,e,t){var r=t(5),o=t(4);n.exports=r&&o((function(){return 42!=Object.defineProperty((function(){}),"prototype",{value:42,writable:!1}).prototype}))},function(n,e,t){var r=t(62),o=t(64),a=r("keys");n.exports=function(n){return a[n]||(a[n]=o(n))}},function(n,e,t){var r=t(3),o=t(7),a=t(31),i=t(123).indexOf,s=t(49),l=r([].push);n.exports=function(n,e){var t,r=a(n),c=0,u=[];for(t in r)!o(s,t)&&o(r,t)&&l(u,t);for(;e.length>c;)o(r,t=e[c++])&&(~i(u,t)||l(u,t));return u}},function(n,e,t){var r=t(16),o=t(2),a=t(135),i=t(136),s=o.WebAssembly,l=7!==Error("e",{cause:7}).cause,c=function(n,e){var t={};t[n]=i(n,e,l),r({global:!0,constructor:!0,arity:1,forced:l},t)},u=function(n,e){if(s&&s[n]){var t={};t[n]=i("WebAssembly."+n,e,l),r({target:"WebAssembly",stat:!0,constructor:!0,arity:1,forced:l},t)}};c("Error",(function(n){return function(e){return a(n,this,arguments)}})),c("EvalError",(function(n){return function(e){return a(n,this,arguments)}})),c("RangeError",(function(n){return function(e){return a(n,this,arguments)}})),c("ReferenceError",(function(n){return function(e){return a(n,this,arguments)}})),c("SyntaxError",(function(n){return function(e){return a(n,this,arguments)}})),c("TypeError",(function(n){return function(e){return a(n,this,arguments)}})),c("URIError",(function(n){return function(e){return a(n,this,arguments)}})),u("CompileError",(function(n){return function(e){return a(n,this,arguments)}})),u("LinkError",(function(n){return function(e){return a(n,this,arguments)}})),u("RuntimeError",(function(n){return function(e){return a(n,this,arguments)}}))},function(n,e){n.exports=function(n){var e=null==n?0:n.length;return e?n[e-1]:void 0}},function(n,e,t){n.exports=t(255)},function(n,e,t){"use strict";var r=t(16),o=t(129).left,a=t(130),i=t(61),s=t(131);r({target:"Array",proto:!0,forced:!a("reduce")||!s&&i>79&&i<83},{reduce:function(n){var e=arguments.length;return o(this,n,e,e>1?arguments[1]:void 0)}})},function(n,e,t){"use strict";var r={}.propertyIsEnumerable,o=Object.getOwnPropertyDescriptor,a=o&&!r.call({1:2},1);e.f=a?function(n){var e=o(this,n);return!!e&&e.enumerable}:r},function(n,e,t){var r=t(34),o=t(9),a=t(57),i=t(112),s=t(114),l=t(18),c=TypeError,u=l("toPrimitive");n.exports=function(n,e){if(!o(n)||a(n))return n;var t,l=i(n,u);if(l){if(void 0===e&&(e="default"),t=r(l,n,e),!o(t)||a(t))return t;throw c("Can't convert object to primitive value")}return void 0===e&&(e="number"),s(n,e)}},function(n,e,t){var r=t(17);n.exports=r("navigator","userAgent")||""},function(n,e,t){var r=t(48),o=t(54);n.exports=function(n,e){var t=n[e];return o(t)?void 0:r(t)}},function(n,e){var t=String;n.exports=function(n){try{return t(n)}catch(n){return"Object"}}},function(n,e,t){var r=t(34),o=t(1),a=t(9),i=TypeError;n.exports=function(n,e){var t,s;if("string"===e&&o(t=n.toString)&&!a(s=r(t,n)))return s;if(o(t=n.valueOf)&&!a(s=r(t,n)))return s;if("string"!==e&&o(t=n.toString)&&!a(s=r(t,n)))return s;throw i("Can't convert object to primitive value")}},function(n,e,t){var r=t(1),o=t(13),a=t(116),i=t(37);n.exports=function(n,e,t,s){s||(s={});var l=s.enumerable,c=void 0!==s.name?s.name:e;if(r(t)&&a(t,c,s),s.global)l?n[e]=t:i(e,t);else{try{s.unsafe?n[e]&&(l=!0):delete n[e]}catch(n){}l?n[e]=t:o.f(n,e,{value:t,enumerable:!1,configurable:!s.nonConfigurable,writable:!s.nonWritable})}return n}},function(n,e,t){var r=t(4),o=t(1),a=t(7),i=t(5),s=t(117).CONFIGURABLE,l=t(118),c=t(119),u=c.enforce,p=c.get,d=Object.defineProperty,m=i&&!r((function(){return 8!==d((function(){}),"length",{value:8}).length})),f=String(String).split("String"),g=n.exports=function(n,e,t){"Symbol("===String(e).slice(0,7)&&(e="["+String(e).replace(/^Symbol\(([^)]*)\)/,"$1")+"]"),t&&t.getter&&(e="get "+e),t&&t.setter&&(e="set "+e),(!a(n,"name")||s&&n.name!==e)&&(i?d(n,"name",{value:e,configurable:!0}):n.name=e),m&&t&&a(t,"arity")&&n.length!==t.arity&&d(n,"length",{value:t.arity});try{t&&a(t,"constructor")&&t.constructor?i&&d(n,"prototype",{writable:!1}):n.prototype&&(n.prototype=void 0)}catch(n){}var r=u(n);return a(r,"source")||(r.source=f.join("string"==typeof e?e:"")),n};Function.prototype.toString=g((function(){return o(this)&&p(this).source||l(this)}),"toString")},function(n,e,t){var r=t(5),o=t(7),a=Function.prototype,i=r&&Object.getOwnPropertyDescriptor,s=o(a,"name"),l=s&&"something"===function(){}.name,c=s&&(!r||r&&i(a,"name").configurable);n.exports={EXISTS:s,PROPER:l,CONFIGURABLE:c}},function(n,e,t){var r=t(3),o=t(1),a=t(36),i=r(Function.toString);o(a.inspectSource)||(a.inspectSource=function(n){return i(n)}),n.exports=a.inspectSource},function(n,e,t){var r,o,a,i=t(120),s=t(2),l=t(3),c=t(9),u=t(20),p=t(7),d=t(36),m=t(103),f=t(49),g=s.TypeError,h=s.WeakMap;if(i||d.state){var y=d.state||(d.state=new h),b=l(y.get),v=l(y.has),x=l(y.set);r=function(n,e){if(v(y,n))throw g("Object already initialized");return e.facade=n,x(y,n,e),e},o=function(n){return b(y,n)||{}},a=function(n){return v(y,n)}}else{var w=m("state");f[w]=!0,r=function(n,e){if(p(n,w))throw g("Object already initialized");return e.facade=n,u(n,w,e),e},o=function(n){return p(n,w)?n[w]:{}},a=function(n){return p(n,w)}}n.exports={set:r,get:o,has:a,enforce:function(n){return a(n)?o(n):r(n,{})},getterFor:function(n){return function(e){var t;if(!c(e)||(t=o(e)).type!==n)throw g("Incompatible receiver, "+n+" required");return t}}}},function(n,e,t){var r=t(2),o=t(1),a=r.WeakMap;n.exports=o(a)&&/native code/.test(String(a))},function(n,e,t){var r=t(17),o=t(3),a=t(122),i=t(127),s=t(29),l=o([].concat);n.exports=r("Reflect","ownKeys")||function(n){var e=a.f(s(n)),t=i.f;return t?l(e,t(n)):e}},function(n,e,t){var r=t(104),o=t(100).concat("length","prototype");e.f=Object.getOwnPropertyNames||function(n){return r(n,o)}},function(n,e,t){var r=t(31),o=t(124),a=t(33),i=function(n){return function(e,t,i){var s,l=r(e),c=a(l),u=o(i,c);if(n&&t!=t){for(;c>u;)if((s=l[u++])!=s)return!0}else for(;c>u;u++)if((n||u in l)&&l[u]===t)return n||u||0;return!n&&-1}};n.exports={includes:i(!0),indexOf:i(!1)}},function(n,e,t){var r=t(67),o=Math.max,a=Math.min;n.exports=function(n,e){var t=r(n);return t<0?o(t+e,0):a(t,e)}},function(n,e){var t=Math.ceil,r=Math.floor;n.exports=Math.trunc||function(n){var e=+n;return(e>0?r:t)(e)}},function(n,e,t){var r=t(67),o=Math.min;n.exports=function(n){return n>0?o(r(n),9007199254740991):0}},function(n,e){e.f=Object.getOwnPropertySymbols},function(n,e,t){var r=t(4),o=t(1),a=/#|\.prototype\./,i=function(n,e){var t=l[s(n)];return t==u||t!=c&&(o(e)?r(e):!!e)},s=i.normalize=function(n){return String(n).replace(a,".").toLowerCase()},l=i.data={},c=i.NATIVE="N",u=i.POLYFILL="P";n.exports=i},function(n,e,t){var r=t(48),o=t(32),a=t(47),i=t(33),s=TypeError,l=function(n){return function(e,t,l,c){r(t);var u=o(e),p=a(u),d=i(u),m=n?d-1:0,f=n?-1:1;if(l<2)for(;;){if(m in p){c=p[m],m+=f;break}if(m+=f,n?m<0:d<=m)throw s("Reduce of empty array with no initial value")}for(;n?m>=0:d>m;m+=f)m in p&&(c=t(c,p[m],m,u));return c}};n.exports={left:l(!1),right:l(!0)}},function(n,e,t){"use strict";var r=t(4);n.exports=function(n,e){var t=[][n];return!!t&&r((function(){t.call(null,e||function(){return 1},1)}))}},function(n,e,t){var r=t(19),o=t(2);n.exports="process"==r(o.process)},function(n,e,t){"use strict";var r=t(5),o=t(133),a=TypeError,i=Object.getOwnPropertyDescriptor,s=r&&!function(){if(void 0!==this)return!0;try{Object.defineProperty([],"length",{writable:!1}).length=1}catch(n){return n instanceof TypeError}}();n.exports=s?function(n,e){if(o(n)&&!i(n,"length").writable)throw a("Cannot set read only .length");return n.length=e}:function(n,e){return n.length=e}},function(n,e,t){var r=t(19);n.exports=Array.isArray||function(n){return"Array"==r(n)}},function(n,e){var t=TypeError;n.exports=function(n){if(n>9007199254740991)throw t("Maximum allowed index exceeded");return n}},function(n,e,t){var r=t(30),o=Function.prototype,a=o.apply,i=o.call;n.exports="object"==typeof Reflect&&Reflect.apply||(r?i.bind(a):function(){return i.apply(a,arguments)})},function(n,e,t){"use strict";var r=t(17),o=t(7),a=t(20),i=t(58),s=t(68),l=t(66),c=t(138),u=t(139),p=t(140),d=t(144),m=t(145),f=t(146),g=t(5),h=t(63);n.exports=function(n,e,t,y){var b=y?2:1,v=n.split("."),x=v[v.length-1],w=r.apply(null,v);if(w){var j=w.prototype;if(!h&&o(j,"cause")&&delete j.cause,!t)return w;var k=r("Error"),S=e((function(n,e){var t=p(y?e:n,void 0),r=y?new w(n):new w;return void 0!==t&&a(r,"message",t),f&&a(r,"stack",m(r.stack,2)),this&&i(j,this)&&u(r,this,S),arguments.length>b&&d(r,arguments[b]),r}));if(S.prototype=j,"Error"!==x?s?s(S,k):l(S,k,{name:!0}):g&&"stackTraceLimit"in w&&(c(S,w,"stackTraceLimit"),c(S,w,"prepareStackTrace")),l(S,w),!h)try{j.name!==x&&a(j,"name",x),j.constructor=S}catch(n){}return S}}},function(n,e,t){var r=t(1),o=String,a=TypeError;n.exports=function(n){if("object"==typeof n||r(n))return n;throw a("Can't set "+o(n)+" as a prototype")}},function(n,e,t){var r=t(13).f;n.exports=function(n,e,t){t in n||r(n,t,{configurable:!0,get:function(){return e[t]},set:function(n){e[t]=n}})}},function(n,e,t){var r=t(1),o=t(9),a=t(68);n.exports=function(n,e,t){var i,s;return a&&r(i=e.constructor)&&i!==t&&o(s=i.prototype)&&s!==t.prototype&&a(n,s),n}},function(n,e,t){var r=t(141);n.exports=function(n,e){return void 0===n?arguments.length<2?"":e:r(n)}},function(n,e,t){var r=t(142),o=String;n.exports=function(n){if("Symbol"===r(n))throw TypeError("Cannot convert a Symbol value to a string");return o(n)}},function(n,e,t){var r=t(143),o=t(1),a=t(19),i=t(18)("toStringTag"),s=Object,l="Arguments"==a(function(){return arguments}());n.exports=r?a:function(n){var e,t,r;return void 0===n?"Undefined":null===n?"Null":"string"==typeof(t=function(n,e){try{return n[e]}catch(n){}}(e=s(n),i))?t:l?a(e):"Object"==(r=a(e))&&o(e.callee)?"Arguments":r}},function(n,e,t){var r={};r[t(18)("toStringTag")]="z",n.exports="[object z]"===String(r)},function(n,e,t){var r=t(9),o=t(20);n.exports=function(n,e){r(e)&&"cause"in e&&o(n,"cause",e.cause)}},function(n,e,t){var r=t(3),o=Error,a=r("".replace),i=String(o("zxcasd").stack),s=/\n\s*at [^:]*:[^\n]*/,l=s.test(i);n.exports=function(n,e){if(l&&"string"==typeof n&&!o.prepareStackTrace)for(;e--;)n=a(n,s,"");return n}},function(n,e,t){var r=t(4),o=t(35);n.exports=!r((function(){var n=Error("a");return!("stack"in n)||(Object.defineProperty(n,"stack",o(1,7)),7!==n.stack)}))},function(n,e,t){var r=t(69),o=t(148);n.exports=function n(e,t,a,i,s){var l=-1,c=e.length;for(a||(a=o),s||(s=[]);++l<c;){var u=e[l];t>0&&a(u)?t>1?n(u,t-1,a,i,s):r(s,u):i||(s[s.length]=u)}return s}},function(n,e,t){var r=t(15),o=t(38),a=t(6),i=r?r.isConcatSpreadable:void 0;n.exports=function(n){return a(n)||o(n)||!!(i&&n&&n[i])}},function(n,e,t){var r=t(14),o=t(12);n.exports=function(n){return o(n)&&"[object Arguments]"==r(n)}},function(n,e,t){var r=t(15),o=Object.prototype,a=o.hasOwnProperty,i=o.toString,s=r?r.toStringTag:void 0;n.exports=function(n){var e=a.call(n,s),t=n[s];try{n[s]=void 0;var r=!0}catch(n){}var o=i.call(n);return r&&(e?n[s]=t:delete n[s]),o}},function(n,e){var t=Object.prototype.toString;n.exports=function(n){return t.call(n)}},function(n,e,t){var r=t(153),o=t(209),a=t(46),i=t(6),s=t(220);n.exports=function(n){return"function"==typeof n?n:null==n?a:"object"==typeof n?i(n)?o(n[0],n[1]):r(n):s(n)}},function(n,e,t){var r=t(154),o=t(208),a=t(86);n.exports=function(n){var e=o(n);return 1==e.length&&e[0][2]?a(e[0][0],e[0][1]):function(t){return t===n||r(t,n,e)}}},function(n,e,t){var r=t(71),o=t(75);n.exports=function(n,e,t,a){var i=t.length,s=i,l=!a;if(null==n)return!s;for(n=Object(n);i--;){var c=t[i];if(l&&c[2]?c[1]!==n[c[0]]:!(c[0]in n))return!1}for(;++i<s;){var u=(c=t[i])[0],p=n[u],d=c[1];if(l&&c[2]){if(void 0===p&&!(u in n))return!1}else{var m=new r;if(a)var f=a(p,d,u,n,e,m);if(!(void 0===f?o(d,p,3,a,m):f))return!1}}return!0}},function(n,e){n.exports=function(){this.__data__=[],this.size=0}},function(n,e,t){var r=t(22),o=Array.prototype.splice;n.exports=function(n){var e=this.__data__,t=r(e,n);return!(t<0)&&(t==e.length-1?e.pop():o.call(e,t,1),--this.size,!0)}},function(n,e,t){var r=t(22);n.exports=function(n){var e=this.__data__,t=r(e,n);return t<0?void 0:e[t][1]}},function(n,e,t){var r=t(22);n.exports=function(n){return r(this.__data__,n)>-1}},function(n,e,t){var r=t(22);n.exports=function(n,e){var t=this.__data__,o=r(t,n);return o<0?(++this.size,t.push([n,e])):t[o][1]=e,this}},function(n,e,t){var r=t(21);n.exports=function(){this.__data__=new r,this.size=0}},function(n,e){n.exports=function(n){var e=this.__data__,t=e.delete(n);return this.size=e.size,t}},function(n,e){n.exports=function(n){return this.__data__.get(n)}},function(n,e){n.exports=function(n){return this.__data__.has(n)}},function(n,e,t){var r=t(21),o=t(39),a=t(41);n.exports=function(n,e){var t=this.__data__;if(t instanceof r){var i=t.__data__;if(!o||i.length<199)return i.push([n,e]),this.size=++t.size,this;t=this.__data__=new a(i)}return t.set(n,e),this.size=t.size,this}},function(n,e,t){var r=t(73),o=t(166),a=t(40),i=t(74),s=/^\[object .+?Constructor\]$/,l=Function.prototype,c=Object.prototype,u=l.toString,p=c.hasOwnProperty,d=RegExp("^"+u.call(p).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$");n.exports=function(n){return!(!a(n)||o(n))&&(r(n)?d:s).test(i(n))}},function(n,e,t){var r,o=t(167),a=(r=/[^.]+$/.exec(o&&o.keys&&o.keys.IE_PROTO||""))?"Symbol(src)_1."+r:"";n.exports=function(n){return!!a&&a in n}},function(n,e,t){var r=t(8)["__core-js_shared__"];n.exports=r},function(n,e){n.exports=function(n,e){return null==n?void 0:n[e]}},function(n,e,t){var r=t(170),o=t(21),a=t(39);n.exports=function(){this.size=0,this.__data__={hash:new r,map:new(a||o),string:new r}}},function(n,e,t){var r=t(171),o=t(172),a=t(173),i=t(174),s=t(175);function l(n){var e=-1,t=null==n?0:n.length;for(this.clear();++e<t;){var r=n[e];this.set(r[0],r[1])}}l.prototype.clear=r,l.prototype.delete=o,l.prototype.get=a,l.prototype.has=i,l.prototype.set=s,n.exports=l},function(n,e,t){var r=t(23);n.exports=function(){this.__data__=r?r(null):{},this.size=0}},function(n,e){n.exports=function(n){var e=this.has(n)&&delete this.__data__[n];return this.size-=e?1:0,e}},function(n,e,t){var r=t(23),o=Object.prototype.hasOwnProperty;n.exports=function(n){var e=this.__data__;if(r){var t=e[n];return"__lodash_hash_undefined__"===t?void 0:t}return o.call(e,n)?e[n]:void 0}},function(n,e,t){var r=t(23),o=Object.prototype.hasOwnProperty;n.exports=function(n){var e=this.__data__;return r?void 0!==e[n]:o.call(e,n)}},function(n,e,t){var r=t(23);n.exports=function(n,e){var t=this.__data__;return this.size+=this.has(n)?0:1,t[n]=r&&void 0===e?"__lodash_hash_undefined__":e,this}},function(n,e,t){var r=t(24);n.exports=function(n){var e=r(this,n).delete(n);return this.size-=e?1:0,e}},function(n,e){n.exports=function(n){var e=typeof n;return"string"==e||"number"==e||"symbol"==e||"boolean"==e?"__proto__"!==n:null===n}},function(n,e,t){var r=t(24);n.exports=function(n){return r(this,n).get(n)}},function(n,e,t){var r=t(24);n.exports=function(n){return r(this,n).has(n)}},function(n,e,t){var r=t(24);n.exports=function(n,e){var t=r(this,n),o=t.size;return t.set(n,e),this.size+=t.size==o?0:1,this}},function(n,e,t){var r=t(71),o=t(76),a=t(185),i=t(188),s=t(204),l=t(6),c=t(80),u=t(82),p="[object Object]",d=Object.prototype.hasOwnProperty;n.exports=function(n,e,t,m,f,g){var h=l(n),y=l(e),b=h?"[object Array]":s(n),v=y?"[object Array]":s(e),x=(b="[object Arguments]"==b?p:b)==p,w=(v="[object Arguments]"==v?p:v)==p,j=b==v;if(j&&c(n)){if(!c(e))return!1;h=!0,x=!1}if(j&&!x)return g||(g=new r),h||u(n)?o(n,e,t,m,f,g):a(n,e,b,t,m,f,g);if(!(1&t)){var k=x&&d.call(n,"__wrapped__"),S=w&&d.call(e,"__wrapped__");if(k||S){var E=k?n.value():n,A=S?e.value():e;return g||(g=new r),f(E,A,t,m,g)}}return!!j&&(g||(g=new r),i(n,e,t,m,f,g))}},function(n,e){n.exports=function(n){return this.__data__.set(n,"__lodash_hash_undefined__"),this}},function(n,e){n.exports=function(n){return this.__data__.has(n)}},function(n,e){n.exports=function(n,e){for(var t=-1,r=null==n?0:n.length;++t<r;)if(e(n[t],t,n))return!0;return!1}},function(n,e,t){var r=t(15),o=t(186),a=t(72),i=t(76),s=t(187),l=t(42),c=r?r.prototype:void 0,u=c?c.valueOf:void 0;n.exports=function(n,e,t,r,c,p,d){switch(t){case"[object DataView]":if(n.byteLength!=e.byteLength||n.byteOffset!=e.byteOffset)return!1;n=n.buffer,e=e.buffer;case"[object ArrayBuffer]":return!(n.byteLength!=e.byteLength||!p(new o(n),new o(e)));case"[object Boolean]":case"[object Date]":case"[object Number]":return a(+n,+e);case"[object Error]":return n.name==e.name&&n.message==e.message;case"[object RegExp]":case"[object String]":return n==e+"";case"[object Map]":var m=s;case"[object Set]":var f=1&r;if(m||(m=l),n.size!=e.size&&!f)return!1;var g=d.get(n);if(g)return g==e;r|=2,d.set(n,e);var h=i(m(n),m(e),r,c,p,d);return d.delete(n),h;case"[object Symbol]":if(u)return u.call(n)==u.call(e)}return!1}},function(n,e,t){var r=t(8).Uint8Array;n.exports=r},function(n,e){n.exports=function(n){var e=-1,t=Array(n.size);return n.forEach((function(n,r){t[++e]=[r,n]})),t}},function(n,e,t){var r=t(189),o=Object.prototype.hasOwnProperty;n.exports=function(n,e,t,a,i,s){var l=1&t,c=r(n),u=c.length;if(u!=r(e).length&&!l)return!1;for(var p=u;p--;){var d=c[p];if(!(l?d in e:o.call(e,d)))return!1}var m=s.get(n),f=s.get(e);if(m&&f)return m==e&&f==n;var g=!0;s.set(n,e),s.set(e,n);for(var h=l;++p<u;){var y=n[d=c[p]],b=e[d];if(a)var v=l?a(b,y,d,e,n,s):a(y,b,d,n,e,s);if(!(void 0===v?y===b||i(y,b,t,a,s):v)){g=!1;break}h||(h="constructor"==d)}if(g&&!h){var x=n.constructor,w=e.constructor;x==w||!("constructor"in n)||!("constructor"in e)||"function"==typeof x&&x instanceof x&&"function"==typeof w&&w instanceof w||(g=!1)}return s.delete(n),s.delete(e),g}},function(n,e,t){var r=t(190),o=t(191),a=t(79);n.exports=function(n){return r(n,a,o)}},function(n,e,t){var r=t(69),o=t(6);n.exports=function(n,e,t){var a=e(n);return o(n)?a:r(a,t(n))}},function(n,e,t){var r=t(192),o=t(193),a=Object.prototype.propertyIsEnumerable,i=Object.getOwnPropertySymbols,s=i?function(n){return null==n?[]:(n=Object(n),r(i(n),(function(e){return a.call(n,e)})))}:o;n.exports=s},function(n,e){n.exports=function(n,e){for(var t=-1,r=null==n?0:n.length,o=0,a=[];++t<r;){var i=n[t];e(i,t,n)&&(a[o++]=i)}return a}},function(n,e){n.exports=function(){return[]}},function(n,e,t){var r=t(195),o=t(38),a=t(6),i=t(80),s=t(81),l=t(82),c=Object.prototype.hasOwnProperty;n.exports=function(n,e){var t=a(n),u=!t&&o(n),p=!t&&!u&&i(n),d=!t&&!u&&!p&&l(n),m=t||u||p||d,f=m?r(n.length,String):[],g=f.length;for(var h in n)!e&&!c.call(n,h)||m&&("length"==h||p&&("offset"==h||"parent"==h)||d&&("buffer"==h||"byteLength"==h||"byteOffset"==h)||s(h,g))||f.push(h);return f}},function(n,e){n.exports=function(n,e){for(var t=-1,r=Array(n);++t<n;)r[t]=e(t);return r}},function(n,e){n.exports=function(){return!1}},function(n,e,t){var r=t(14),o=t(43),a=t(12),i={};i["[object Float32Array]"]=i["[object Float64Array]"]=i["[object Int8Array]"]=i["[object Int16Array]"]=i["[object Int32Array]"]=i["[object Uint8Array]"]=i["[object Uint8ClampedArray]"]=i["[object Uint16Array]"]=i["[object Uint32Array]"]=!0,i["[object Arguments]"]=i["[object Array]"]=i["[object ArrayBuffer]"]=i["[object Boolean]"]=i["[object DataView]"]=i["[object Date]"]=i["[object Error]"]=i["[object Function]"]=i["[object Map]"]=i["[object Number]"]=i["[object Object]"]=i["[object RegExp]"]=i["[object Set]"]=i["[object String]"]=i["[object WeakMap]"]=!1,n.exports=function(n){return a(n)&&o(n.length)&&!!i[r(n)]}},function(n,e){n.exports=function(n){return function(e){return n(e)}}},function(n,e,t){(function(n){var r=t(70),o=e&&!e.nodeType&&e,a=o&&"object"==typeof n&&n&&!n.nodeType&&n,i=a&&a.exports===o&&r.process,s=function(){try{var n=a&&a.require&&a.require("util").types;return n||i&&i.binding&&i.binding("util")}catch(n){}}();n.exports=s}).call(this,t(50)(n))},function(n,e,t){var r=t(201),o=t(202),a=Object.prototype.hasOwnProperty;n.exports=function(n){if(!r(n))return o(n);var e=[];for(var t in Object(n))a.call(n,t)&&"constructor"!=t&&e.push(t);return e}},function(n,e){var t=Object.prototype;n.exports=function(n){var e=n&&n.constructor;return n===("function"==typeof e&&e.prototype||t)}},function(n,e,t){var r=t(203)(Object.keys,Object);n.exports=r},function(n,e){n.exports=function(n,e){return function(t){return n(e(t))}}},function(n,e,t){var r=t(205),o=t(39),a=t(206),i=t(84),s=t(207),l=t(14),c=t(74),u=c(r),p=c(o),d=c(a),m=c(i),f=c(s),g=l;(r&&"[object DataView]"!=g(new r(new ArrayBuffer(1)))||o&&"[object Map]"!=g(new o)||a&&"[object Promise]"!=g(a.resolve())||i&&"[object Set]"!=g(new i)||s&&"[object WeakMap]"!=g(new s))&&(g=function(n){var e=l(n),t="[object Object]"==e?n.constructor:void 0,r=t?c(t):"";if(r)switch(r){case u:return"[object DataView]";case p:return"[object Map]";case d:return"[object Promise]";case m:return"[object Set]";case f:return"[object WeakMap]"}return e}),n.exports=g},function(n,e,t){var r=t(10)(t(8),"DataView");n.exports=r},function(n,e,t){var r=t(10)(t(8),"Promise");n.exports=r},function(n,e,t){var r=t(10)(t(8),"WeakMap");n.exports=r},function(n,e,t){var r=t(85),o=t(79);n.exports=function(n){for(var e=o(n),t=e.length;t--;){var a=e[t],i=n[a];e[t]=[a,i,r(i)]}return e}},function(n,e,t){var r=t(75),o=t(210),a=t(217),i=t(44),s=t(85),l=t(86),c=t(25);n.exports=function(n,e){return i(n)&&s(e)?l(c(n),e):function(t){var i=o(t,n);return void 0===i&&i===e?a(t,n):r(e,i,3)}}},function(n,e,t){var r=t(87);n.exports=function(n,e,t){var o=null==n?void 0:r(n,e);return void 0===o?t:o}},function(n,e,t){var r=t(212),o=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,a=/\\(\\)?/g,i=r((function(n){var e=[];return 46===n.charCodeAt(0)&&e.push(""),n.replace(o,(function(n,t,r,o){e.push(r?o.replace(a,"$1"):t||n)})),e}));n.exports=i},function(n,e,t){var r=t(213);n.exports=function(n){var e=r(n,(function(n){return 500===t.size&&t.clear(),n})),t=e.cache;return e}},function(n,e,t){var r=t(41);function o(n,e){if("function"!=typeof n||null!=e&&"function"!=typeof e)throw new TypeError("Expected a function");var t=function(){var r=arguments,o=e?e.apply(this,r):r[0],a=t.cache;if(a.has(o))return a.get(o);var i=n.apply(this,r);return t.cache=a.set(o,i)||a,i};return t.cache=new(o.Cache||r),t}o.Cache=r,n.exports=o},function(n,e,t){var r=t(215);n.exports=function(n){return null==n?"":r(n)}},function(n,e,t){var r=t(15),o=t(216),a=t(6),i=t(45),s=r?r.prototype:void 0,l=s?s.toString:void 0;n.exports=function n(e){if("string"==typeof e)return e;if(a(e))return o(e,n)+"";if(i(e))return l?l.call(e):"";var t=e+"";return"0"==t&&1/e==-1/0?"-0":t}},function(n,e){n.exports=function(n,e){for(var t=-1,r=null==n?0:n.length,o=Array(r);++t<r;)o[t]=e(n[t],t,n);return o}},function(n,e,t){var r=t(218),o=t(219);n.exports=function(n,e){return null!=n&&o(n,e,r)}},function(n,e){n.exports=function(n,e){return null!=n&&e in Object(n)}},function(n,e,t){var r=t(88),o=t(38),a=t(6),i=t(81),s=t(43),l=t(25);n.exports=function(n,e,t){for(var c=-1,u=(e=r(e,n)).length,p=!1;++c<u;){var d=l(e[c]);if(!(p=null!=n&&t(n,d)))break;n=n[d]}return p||++c!=u?p:!!(u=null==n?0:n.length)&&s(u)&&i(d,u)&&(a(n)||o(n))}},function(n,e,t){var r=t(221),o=t(222),a=t(44),i=t(25);n.exports=function(n){return a(n)?r(i(n)):o(n)}},function(n,e){n.exports=function(n){return function(e){return null==e?void 0:e[n]}}},function(n,e,t){var r=t(87);n.exports=function(n){return function(e){return r(e,n)}}},function(n,e,t){var r=t(46),o=t(224),a=t(226);n.exports=function(n,e){return a(o(n,e,r),n+"")}},function(n,e,t){var r=t(225),o=Math.max;n.exports=function(n,e,t){return e=o(void 0===e?n.length-1:e,0),function(){for(var a=arguments,i=-1,s=o(a.length-e,0),l=Array(s);++i<s;)l[i]=a[e+i];i=-1;for(var c=Array(e+1);++i<e;)c[i]=a[i];return c[e]=t(l),r(n,this,c)}}},function(n,e){n.exports=function(n,e,t){switch(t.length){case 0:return n.call(e);case 1:return n.call(e,t[0]);case 2:return n.call(e,t[0],t[1]);case 3:return n.call(e,t[0],t[1],t[2])}return n.apply(e,t)}},function(n,e,t){var r=t(227),o=t(230)(r);n.exports=o},function(n,e,t){var r=t(228),o=t(229),a=t(46),i=o?function(n,e){return o(n,"toString",{configurable:!0,enumerable:!1,value:r(e),writable:!0})}:a;n.exports=i},function(n,e){n.exports=function(n){return function(){return n}}},function(n,e,t){var r=t(10),o=function(){try{var n=r(Object,"defineProperty");return n({},"",{}),n}catch(n){}}();n.exports=o},function(n,e){var t=Date.now;n.exports=function(n){var e=0,r=0;return function(){var o=t(),a=16-(o-r);if(r=o,a>0){if(++e>=800)return arguments[0]}else e=0;return n.apply(void 0,arguments)}}},function(n,e,t){var r=t(77),o=t(232),a=t(237),i=t(78),s=t(238),l=t(42);n.exports=function(n,e,t){var c=-1,u=o,p=n.length,d=!0,m=[],f=m;if(t)d=!1,u=a;else if(p>=200){var g=e?null:s(n);if(g)return l(g);d=!1,u=i,f=new r}else f=e?[]:m;n:for(;++c<p;){var h=n[c],y=e?e(h):h;if(h=t||0!==h?h:0,d&&y==y){for(var b=f.length;b--;)if(f[b]===y)continue n;e&&f.push(y),m.push(h)}else u(f,y,t)||(f!==m&&f.push(y),m.push(h))}return m}},function(n,e,t){var r=t(233);n.exports=function(n,e){return!!(null==n?0:n.length)&&r(n,e,0)>-1}},function(n,e,t){var r=t(234),o=t(235),a=t(236);n.exports=function(n,e,t){return e==e?a(n,e,t):r(n,o,t)}},function(n,e){n.exports=function(n,e,t,r){for(var o=n.length,a=t+(r?1:-1);r?a--:++a<o;)if(e(n[a],a,n))return a;return-1}},function(n,e){n.exports=function(n){return n!=n}},function(n,e){n.exports=function(n,e,t){for(var r=t-1,o=n.length;++r<o;)if(n[r]===e)return r;return-1}},function(n,e){n.exports=function(n,e,t){for(var r=-1,o=null==n?0:n.length;++r<o;)if(t(e,n[r]))return!0;return!1}},function(n,e,t){var r=t(84),o=t(239),a=t(42),i=r&&1/a(new r([,-0]))[1]==1/0?function(n){return new r(n)}:o;n.exports=i},function(n,e){n.exports=function(){}},function(n,e,t){var r=t(83),o=t(12);n.exports=function(n){return o(n)&&r(n)}},function(n,e,t){"use strict";t(89)},function(n,e,t){"use strict";t(90)},function(n,e,t){},function(n,e,t){},function(n,e,t){var r=t(16),o=t(2),a=t(246);r({global:!0},{Reflect:{}}),a(o.Reflect,"Reflect",!0)},function(n,e,t){var r=t(13).f,o=t(7),a=t(18)("toStringTag");n.exports=function(n,e,t){n&&!t&&(n=n.prototype),n&&!o(n,a)&&r(n,a,{configurable:!0,value:e})}},function(n,e){},function(n,e){function t(n,e){for(var t=0,r=n.length-1;r>=0;r--){var o=n[r];"."===o?n.splice(r,1):".."===o?(n.splice(r,1),t++):t&&(n.splice(r,1),t--)}if(e)for(;t--;t)n.unshift("..");return n}function r(n,e){if(n.filter)return n.filter(e);for(var t=[],r=0;r<n.length;r++)e(n[r],r,n)&&t.push(n[r]);return t}e.resolve=function(){for(var n="",e=!1,o=arguments.length-1;o>=-1&&!e;o--){var a=o>=0?arguments[o]:process.cwd();if("string"!=typeof a)throw new TypeError("Arguments to path.resolve must be strings");a&&(n=a+"/"+n,e="/"===a.charAt(0))}return(e?"/":"")+(n=t(r(n.split("/"),(function(n){return!!n})),!e).join("/"))||"."},e.normalize=function(n){var a=e.isAbsolute(n),i="/"===o(n,-1);return(n=t(r(n.split("/"),(function(n){return!!n})),!a).join("/"))||a||(n="."),n&&i&&(n+="/"),(a?"/":"")+n},e.isAbsolute=function(n){return"/"===n.charAt(0)},e.join=function(){var n=Array.prototype.slice.call(arguments,0);return e.normalize(r(n,(function(n,e){if("string"!=typeof n)throw new TypeError("Arguments to path.join must be strings");return n})).join("/"))},e.relative=function(n,t){function r(n){for(var e=0;e<n.length&&""===n[e];e++);for(var t=n.length-1;t>=0&&""===n[t];t--);return e>t?[]:n.slice(e,t-e+1)}n=e.resolve(n).substr(1),t=e.resolve(t).substr(1);for(var o=r(n.split("/")),a=r(t.split("/")),i=Math.min(o.length,a.length),s=i,l=0;l<i;l++)if(o[l]!==a[l]){s=l;break}var c=[];for(l=s;l<o.length;l++)c.push("..");return(c=c.concat(a.slice(s))).join("/")},e.sep="/",e.delimiter=":",e.dirname=function(n){if("string"!=typeof n&&(n+=""),0===n.length)return".";for(var e=n.charCodeAt(0),t=47===e,r=-1,o=!0,a=n.length-1;a>=1;--a)if(47===(e=n.charCodeAt(a))){if(!o){r=a;break}}else o=!1;return-1===r?t?"/":".":t&&1===r?"/":n.slice(0,r)},e.basename=function(n,e){var t=function(n){"string"!=typeof n&&(n+="");var e,t=0,r=-1,o=!0;for(e=n.length-1;e>=0;--e)if(47===n.charCodeAt(e)){if(!o){t=e+1;break}}else-1===r&&(o=!1,r=e+1);return-1===r?"":n.slice(t,r)}(n);return e&&t.substr(-1*e.length)===e&&(t=t.substr(0,t.length-e.length)),t},e.extname=function(n){"string"!=typeof n&&(n+="");for(var e=-1,t=0,r=-1,o=!0,a=0,i=n.length-1;i>=0;--i){var s=n.charCodeAt(i);if(47!==s)-1===r&&(o=!1,r=i+1),46===s?-1===e?e=i:1!==a&&(a=1):-1!==e&&(a=-1);else if(!o){t=i+1;break}}return-1===e||-1===r||0===a||1===a&&e===r-1&&e===t+1?"":n.slice(e,r)};var o="b"==="ab".substr(-1)?function(n,e,t){return n.substr(e,t)}:function(n,e,t){return e<0&&(e=n.length+e),n.substr(e,t)}},function(n,e,t){"use strict";var r=/[|\\{}()[\]^$+*?.]/g;e.escapeRegExpChars=function(n){return n?String(n).replace(r,"\\$&"):""};var o={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&#34;","'":"&#39;"},a=/[&<>'"]/g;function i(n){return o[n]||n}e.escapeXML=function(n){return null==n?"":String(n).replace(a,i)},e.escapeXML.toString=function(){return Function.prototype.toString.call(this)+';\nvar _ENCODE_HTML_RULES = {\n      "&": "&amp;"\n    , "<": "&lt;"\n    , ">": "&gt;"\n    , \'"\': "&#34;"\n    , "\'": "&#39;"\n    }\n  , _MATCH_HTML = /[&<>\'"]/g;\nfunction encode_char(c) {\n  return _ENCODE_HTML_RULES[c] || c;\n};\n'},e.shallowCopy=function(n,e){for(var t in e=e||{})n[t]=e[t];return n},e.shallowCopyFromList=function(n,e,t){for(var r=0;r<t.length;r++){var o=t[r];void 0!==e[o]&&(n[o]=e[o])}return n},e.cache={_data:{},set:function(n,e){this._data[n]=e},get:function(n){return this._data[n]},remove:function(n){delete this._data[n]},reset:function(){this._data={}}}},function(n){n.exports=JSON.parse('{"name":"ejs","description":"Embedded JavaScript templates","keywords":["template","engine","ejs"],"version":"2.7.4","author":"Matthew Eernisse <mde@fleegix.org> (http://fleegix.org)","license":"Apache-2.0","main":"./lib/ejs.js","repository":{"type":"git","url":"git://github.com/mde/ejs.git"},"bugs":"https://github.com/mde/ejs/issues","homepage":"https://github.com/mde/ejs","dependencies":{},"devDependencies":{"browserify":"^13.1.1","eslint":"^4.14.0","git-directory-deploy":"^1.5.1","jake":"^10.3.1","jsdoc":"^3.4.0","lru-cache":"^4.0.1","mocha":"^5.0.5","uglify-js":"^3.3.16"},"engines":{"node":">=0.10.0"},"scripts":{"test":"mocha","postinstall":"node ./postinstall.js"}}')},function(n,e,t){"use strict";t(91)},function(n,e,t){"use strict";t(92)},function(n,e,t){"use strict";t(93)},function(n,e,t){"use strict";t(94)},function(n,e,t){"use strict";t.r(e);
/*!
 * Vue.js v2.7.10
 * (c) 2014-2022 Evan You
 * Released under the MIT License.
 */
var r=Object.freeze({}),o=Array.isArray;function a(n){return null==n}function i(n){return null!=n}function s(n){return!0===n}function l(n){return"string"==typeof n||"number"==typeof n||"symbol"==typeof n||"boolean"==typeof n}function c(n){return"function"==typeof n}function u(n){return null!==n&&"object"==typeof n}var p=Object.prototype.toString;function d(n){return"[object Object]"===p.call(n)}function m(n){return"[object RegExp]"===p.call(n)}function f(n){var e=parseFloat(String(n));return e>=0&&Math.floor(e)===e&&isFinite(n)}function g(n){return i(n)&&"function"==typeof n.then&&"function"==typeof n.catch}function h(n){return null==n?"":Array.isArray(n)||d(n)&&n.toString===p?JSON.stringify(n,null,2):String(n)}function y(n){var e=parseFloat(n);return isNaN(e)?n:e}function b(n,e){for(var t=Object.create(null),r=n.split(","),o=0;o<r.length;o++)t[r[o]]=!0;return e?function(n){return t[n.toLowerCase()]}:function(n){return t[n]}}b("slot,component",!0);var v=b("key,ref,slot,slot-scope,is");function x(n,e){if(n.length){var t=n.indexOf(e);if(t>-1)return n.splice(t,1)}}var w=Object.prototype.hasOwnProperty;function j(n,e){return w.call(n,e)}function k(n){var e=Object.create(null);return function(t){return e[t]||(e[t]=n(t))}}var S=/-(\w)/g,E=k((function(n){return n.replace(S,(function(n,e){return e?e.toUpperCase():""}))})),A=k((function(n){return n.charAt(0).toUpperCase()+n.slice(1)})),T=/\B([A-Z])/g,I=k((function(n){return n.replace(T,"-$1").toLowerCase()}));var _=Function.prototype.bind?function(n,e){return n.bind(e)}:function(n,e){function t(t){var r=arguments.length;return r?r>1?n.apply(e,arguments):n.call(e,t):n.call(e)}return t._length=n.length,t};function M(n,e){e=e||0;for(var t=n.length-e,r=new Array(t);t--;)r[t]=n[t+e];return r}function P(n,e){for(var t in e)n[t]=e[t];return n}function C(n){for(var e={},t=0;t<n.length;t++)n[t]&&P(e,n[t]);return e}function O(n,e,t){}var z=function(n,e,t){return!1},D=function(n){return n};function B(n,e){if(n===e)return!0;var t=u(n),r=u(e);if(!t||!r)return!t&&!r&&String(n)===String(e);try{var o=Array.isArray(n),a=Array.isArray(e);if(o&&a)return n.length===e.length&&n.every((function(n,t){return B(n,e[t])}));if(n instanceof Date&&e instanceof Date)return n.getTime()===e.getTime();if(o||a)return!1;var i=Object.keys(n),s=Object.keys(e);return i.length===s.length&&i.every((function(t){return B(n[t],e[t])}))}catch(n){return!1}}function $(n,e){for(var t=0;t<n.length;t++)if(B(n[t],e))return t;return-1}function N(n){var e=!1;return function(){e||(e=!0,n.apply(this,arguments))}}function G(n,e){return n===e?0===n&&1/n!=1/e:n==n||e==e}var F=["component","directive","filter"],R=["beforeCreate","created","beforeMount","mounted","beforeUpdate","updated","beforeDestroy","destroyed","activated","deactivated","errorCaptured","serverPrefetch","renderTracked","renderTriggered"],U={optionMergeStrategies:Object.create(null),silent:!1,productionTip:!1,devtools:!1,performance:!1,errorHandler:null,warnHandler:null,ignoredElements:[],keyCodes:Object.create(null),isReservedTag:z,isReservedAttr:z,isUnknownElement:z,getTagNamespace:O,parsePlatformTagName:D,mustUseProp:z,async:!0,_lifecycleHooks:R},L=/a-zA-Z\u00B7\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u037D\u037F-\u1FFF\u200C-\u200D\u203F-\u2040\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD/;function q(n){var e=(n+"").charCodeAt(0);return 36===e||95===e}function H(n,e,t,r){Object.defineProperty(n,e,{value:t,enumerable:!!r,writable:!0,configurable:!0})}var J=new RegExp("[^".concat(L.source,".$_\\d]"));var W="__proto__"in{},V="undefined"!=typeof window,K=V&&window.navigator.userAgent.toLowerCase(),Z=K&&/msie|trident/.test(K),Y=K&&K.indexOf("msie 9.0")>0,X=K&&K.indexOf("edge/")>0;K&&K.indexOf("android");var Q=K&&/iphone|ipad|ipod|ios/.test(K);K&&/chrome\/\d+/.test(K),K&&/phantomjs/.test(K);var nn,en=K&&K.match(/firefox\/(\d+)/),tn={}.watch,rn=!1;if(V)try{var on={};Object.defineProperty(on,"passive",{get:function(){rn=!0}}),window.addEventListener("test-passive",null,on)}catch(Qs){}var an=function(){return void 0===nn&&(nn=!V&&"undefined"!=typeof global&&(global.process&&"server"===global.process.env.VUE_ENV)),nn},sn=V&&window.__VUE_DEVTOOLS_GLOBAL_HOOK__;function ln(n){return"function"==typeof n&&/native code/.test(n.toString())}var cn,un="undefined"!=typeof Symbol&&ln(Symbol)&&"undefined"!=typeof Reflect&&ln(Reflect.ownKeys);cn="undefined"!=typeof Set&&ln(Set)?Set:function(){function n(){this.set=Object.create(null)}return n.prototype.has=function(n){return!0===this.set[n]},n.prototype.add=function(n){this.set[n]=!0},n.prototype.clear=function(){this.set=Object.create(null)},n}();var pn=null;function dn(n){void 0===n&&(n=null),n||pn&&pn._scope.off(),pn=n,n&&n._scope.on()}var mn=function(){function n(n,e,t,r,o,a,i,s){this.tag=n,this.data=e,this.children=t,this.text=r,this.elm=o,this.ns=void 0,this.context=a,this.fnContext=void 0,this.fnOptions=void 0,this.fnScopeId=void 0,this.key=e&&e.key,this.componentOptions=i,this.componentInstance=void 0,this.parent=void 0,this.raw=!1,this.isStatic=!1,this.isRootInsert=!0,this.isComment=!1,this.isCloned=!1,this.isOnce=!1,this.asyncFactory=s,this.asyncMeta=void 0,this.isAsyncPlaceholder=!1}return Object.defineProperty(n.prototype,"child",{get:function(){return this.componentInstance},enumerable:!1,configurable:!0}),n}(),fn=function(n){void 0===n&&(n="");var e=new mn;return e.text=n,e.isComment=!0,e};function gn(n){return new mn(void 0,void 0,void 0,String(n))}function hn(n){var e=new mn(n.tag,n.data,n.children&&n.children.slice(),n.text,n.elm,n.context,n.componentOptions,n.asyncFactory);return e.ns=n.ns,e.isStatic=n.isStatic,e.key=n.key,e.isComment=n.isComment,e.fnContext=n.fnContext,e.fnOptions=n.fnOptions,e.fnScopeId=n.fnScopeId,e.asyncMeta=n.asyncMeta,e.isCloned=!0,e}var yn=0,bn=function(){function n(){this.id=yn++,this.subs=[]}return n.prototype.addSub=function(n){this.subs.push(n)},n.prototype.removeSub=function(n){x(this.subs,n)},n.prototype.depend=function(e){n.target&&n.target.addDep(this)},n.prototype.notify=function(n){var e=this.subs.slice();for(var t=0,r=e.length;t<r;t++){e[t].update()}},n}();bn.target=null;var vn=[];function xn(n){vn.push(n),bn.target=n}function wn(){vn.pop(),bn.target=vn[vn.length-1]}var jn=Array.prototype,kn=Object.create(jn);["push","pop","shift","unshift","splice","sort","reverse"].forEach((function(n){var e=jn[n];H(kn,n,(function(){for(var t=[],r=0;r<arguments.length;r++)t[r]=arguments[r];var o,a=e.apply(this,t),i=this.__ob__;switch(n){case"push":case"unshift":o=t;break;case"splice":o=t.slice(2)}return o&&i.observeArray(o),i.dep.notify(),a}))}));var Sn=Object.getOwnPropertyNames(kn),En={},An=!0;function Tn(n){An=n}var In={notify:O,depend:O,addSub:O,removeSub:O},_n=function(){function n(n,e,t){if(void 0===e&&(e=!1),void 0===t&&(t=!1),this.value=n,this.shallow=e,this.mock=t,this.dep=t?In:new bn,this.vmCount=0,H(n,"__ob__",this),o(n)){if(!t)if(W)n.__proto__=kn;else for(var r=0,a=Sn.length;r<a;r++){H(n,s=Sn[r],kn[s])}e||this.observeArray(n)}else{var i=Object.keys(n);for(r=0;r<i.length;r++){var s;Pn(n,s=i[r],En,void 0,e,t)}}}return n.prototype.observeArray=function(n){for(var e=0,t=n.length;e<t;e++)Mn(n[e],!1,this.mock)},n}();function Mn(n,e,t){var r;if(!(!u(n)||Nn(n)||n instanceof mn))return j(n,"__ob__")&&n.__ob__ instanceof _n?r=n.__ob__:!An||!t&&an()||!o(n)&&!d(n)||!Object.isExtensible(n)||n.__v_skip||(r=new _n(n,e,t)),r}function Pn(n,e,t,r,a,i){var s=new bn,l=Object.getOwnPropertyDescriptor(n,e);if(!l||!1!==l.configurable){var c=l&&l.get,u=l&&l.set;c&&!u||t!==En&&2!==arguments.length||(t=n[e]);var p=!a&&Mn(t,!1,i);return Object.defineProperty(n,e,{enumerable:!0,configurable:!0,get:function(){var e=c?c.call(n):t;return bn.target&&(s.depend(),p&&(p.dep.depend(),o(e)&&zn(e))),Nn(e)&&!a?e.value:e},set:function(e){var r=c?c.call(n):t;if(G(r,e)){if(u)u.call(n,e);else{if(c)return;if(!a&&Nn(r)&&!Nn(e))return void(r.value=e);t=e}p=!a&&Mn(e,!1,i),s.notify()}}}),s}}function Cn(n,e,t){if(!$n(n)){var r=n.__ob__;return o(n)&&f(e)?(n.length=Math.max(n.length,e),n.splice(e,1,t),r&&!r.shallow&&r.mock&&Mn(t,!1,!0),t):e in n&&!(e in Object.prototype)?(n[e]=t,t):n._isVue||r&&r.vmCount?t:r?(Pn(r.value,e,t,void 0,r.shallow,r.mock),r.dep.notify(),t):(n[e]=t,t)}}function On(n,e){if(o(n)&&f(e))n.splice(e,1);else{var t=n.__ob__;n._isVue||t&&t.vmCount||$n(n)||j(n,e)&&(delete n[e],t&&t.dep.notify())}}function zn(n){for(var e=void 0,t=0,r=n.length;t<r;t++)(e=n[t])&&e.__ob__&&e.__ob__.dep.depend(),o(e)&&zn(e)}function Dn(n){return Bn(n,!0),H(n,"__v_isShallow",!0),n}function Bn(n,e){if(!$n(n)){Mn(n,e,an());0}}function $n(n){return!(!n||!n.__v_isReadonly)}function Nn(n){return!(!n||!0!==n.__v_isRef)}function Gn(n,e,t){Object.defineProperty(n,t,{enumerable:!0,configurable:!0,get:function(){var n=e[t];if(Nn(n))return n.value;var r=n&&n.__ob__;return r&&r.dep.depend(),n},set:function(n){var r=e[t];Nn(r)&&!Nn(n)?r.value=n:e[t]=n}})}"".concat("watcher"," callback"),"".concat("watcher"," getter"),"".concat("watcher"," cleanup");var Fn;var Rn=function(){function n(n){void 0===n&&(n=!1),this.active=!0,this.effects=[],this.cleanups=[],!n&&Fn&&(this.parent=Fn,this.index=(Fn.scopes||(Fn.scopes=[])).push(this)-1)}return n.prototype.run=function(n){if(this.active){var e=Fn;try{return Fn=this,n()}finally{Fn=e}}else 0},n.prototype.on=function(){Fn=this},n.prototype.off=function(){Fn=this.parent},n.prototype.stop=function(n){if(this.active){var e=void 0,t=void 0;for(e=0,t=this.effects.length;e<t;e++)this.effects[e].teardown();for(e=0,t=this.cleanups.length;e<t;e++)this.cleanups[e]();if(this.scopes)for(e=0,t=this.scopes.length;e<t;e++)this.scopes[e].stop(!0);if(this.parent&&!n){var r=this.parent.scopes.pop();r&&r!==this&&(this.parent.scopes[this.index]=r,r.index=this.index)}this.active=!1}},n}();function Un(n){var e=n._provided,t=n.$parent&&n.$parent._provided;return t===e?n._provided=Object.create(t):e}var Ln=k((function(n){var e="&"===n.charAt(0),t="~"===(n=e?n.slice(1):n).charAt(0),r="!"===(n=t?n.slice(1):n).charAt(0);return{name:n=r?n.slice(1):n,once:t,capture:r,passive:e}}));function qn(n,e){function t(){var n=t.fns;if(!o(n))return Ae(n,null,arguments,e,"v-on handler");for(var r=n.slice(),a=0;a<r.length;a++)Ae(r[a],null,arguments,e,"v-on handler")}return t.fns=n,t}function Hn(n,e,t,r,o,i){var l,c,u,p;for(l in n)c=n[l],u=e[l],p=Ln(l),a(c)||(a(u)?(a(c.fns)&&(c=n[l]=qn(c,i)),s(p.once)&&(c=n[l]=o(p.name,c,p.capture)),t(p.name,c,p.capture,p.passive,p.params)):c!==u&&(u.fns=c,n[l]=u));for(l in e)a(n[l])&&r((p=Ln(l)).name,e[l],p.capture)}function Jn(n,e,t){var r;n instanceof mn&&(n=n.data.hook||(n.data.hook={}));var o=n[e];function l(){t.apply(this,arguments),x(r.fns,l)}a(o)?r=qn([l]):i(o.fns)&&s(o.merged)?(r=o).fns.push(l):r=qn([o,l]),r.merged=!0,n[e]=r}function Wn(n,e,t,r,o){if(i(e)){if(j(e,t))return n[t]=e[t],o||delete e[t],!0;if(j(e,r))return n[t]=e[r],o||delete e[r],!0}return!1}function Vn(n){return l(n)?[gn(n)]:o(n)?function n(e,t){var r,c,u,p,d=[];for(r=0;r<e.length;r++)a(c=e[r])||"boolean"==typeof c||(u=d.length-1,p=d[u],o(c)?c.length>0&&(Kn((c=n(c,"".concat(t||"","_").concat(r)))[0])&&Kn(p)&&(d[u]=gn(p.text+c[0].text),c.shift()),d.push.apply(d,c)):l(c)?Kn(p)?d[u]=gn(p.text+c):""!==c&&d.push(gn(c)):Kn(c)&&Kn(p)?d[u]=gn(p.text+c.text):(s(e._isVList)&&i(c.tag)&&a(c.key)&&i(t)&&(c.key="__vlist".concat(t,"_").concat(r,"__")),d.push(c)));return d}(n):void 0}function Kn(n){return i(n)&&i(n.text)&&function(n){return!1===n}(n.isComment)}function Zn(n,e){var t,r,a,s,l=null;if(o(n)||"string"==typeof n)for(l=new Array(n.length),t=0,r=n.length;t<r;t++)l[t]=e(n[t],t);else if("number"==typeof n)for(l=new Array(n),t=0;t<n;t++)l[t]=e(t+1,t);else if(u(n))if(un&&n[Symbol.iterator]){l=[];for(var c=n[Symbol.iterator](),p=c.next();!p.done;)l.push(e(p.value,l.length)),p=c.next()}else for(a=Object.keys(n),l=new Array(a.length),t=0,r=a.length;t<r;t++)s=a[t],l[t]=e(n[s],s,t);return i(l)||(l=[]),l._isVList=!0,l}function Yn(n,e,t,r){var o,a=this.$scopedSlots[n];a?(t=t||{},r&&(t=P(P({},r),t)),o=a(t)||(c(e)?e():e)):o=this.$slots[n]||(c(e)?e():e);var i=t&&t.slot;return i?this.$createElement("template",{slot:i},o):o}function Xn(n){return _t(this.$options,"filters",n,!0)||D}function Qn(n,e){return o(n)?-1===n.indexOf(e):n!==e}function ne(n,e,t,r,o){var a=U.keyCodes[e]||t;return o&&r&&!U.keyCodes[e]?Qn(o,r):a?Qn(a,n):r?I(r)!==e:void 0===n}function ee(n,e,t,r,a){if(t)if(u(t)){o(t)&&(t=C(t));var i=void 0,s=function(o){if("class"===o||"style"===o||v(o))i=n;else{var s=n.attrs&&n.attrs.type;i=r||U.mustUseProp(e,s,o)?n.domProps||(n.domProps={}):n.attrs||(n.attrs={})}var l=E(o),c=I(o);l in i||c in i||(i[o]=t[o],a&&((n.on||(n.on={}))["update:".concat(o)]=function(n){t[o]=n}))};for(var l in t)s(l)}else;return n}function te(n,e){var t=this._staticTrees||(this._staticTrees=[]),r=t[n];return r&&!e||oe(r=t[n]=this.$options.staticRenderFns[n].call(this._renderProxy,this._c,this),"__static__".concat(n),!1),r}function re(n,e,t){return oe(n,"__once__".concat(e).concat(t?"_".concat(t):""),!0),n}function oe(n,e,t){if(o(n))for(var r=0;r<n.length;r++)n[r]&&"string"!=typeof n[r]&&ae(n[r],"".concat(e,"_").concat(r),t);else ae(n,e,t)}function ae(n,e,t){n.isStatic=!0,n.key=e,n.isOnce=t}function ie(n,e){if(e)if(d(e)){var t=n.on=n.on?P({},n.on):{};for(var r in e){var o=t[r],a=e[r];t[r]=o?[].concat(o,a):a}}else;return n}function se(n,e,t,r){e=e||{$stable:!t};for(var a=0;a<n.length;a++){var i=n[a];o(i)?se(i,e,t):i&&(i.proxy&&(i.fn.proxy=!0),e[i.key]=i.fn)}return r&&(e.$key=r),e}function le(n,e){for(var t=0;t<e.length;t+=2){var r=e[t];"string"==typeof r&&r&&(n[e[t]]=e[t+1])}return n}function ce(n,e){return"string"==typeof n?e+n:n}function ue(n){n._o=re,n._n=y,n._s=h,n._l=Zn,n._t=Yn,n._q=B,n._i=$,n._m=te,n._f=Xn,n._k=ne,n._b=ee,n._v=gn,n._e=fn,n._u=se,n._g=ie,n._d=le,n._p=ce}function pe(n,e){if(!n||!n.length)return{};for(var t={},r=0,o=n.length;r<o;r++){var a=n[r],i=a.data;if(i&&i.attrs&&i.attrs.slot&&delete i.attrs.slot,a.context!==e&&a.fnContext!==e||!i||null==i.slot)(t.default||(t.default=[])).push(a);else{var s=i.slot,l=t[s]||(t[s]=[]);"template"===a.tag?l.push.apply(l,a.children||[]):l.push(a)}}for(var c in t)t[c].every(de)&&delete t[c];return t}function de(n){return n.isComment&&!n.asyncFactory||" "===n.text}function me(n){return n.isComment&&n.asyncFactory}function fe(n,e,t,o){var a,i=Object.keys(t).length>0,s=e?!!e.$stable:!i,l=e&&e.$key;if(e){if(e._normalized)return e._normalized;if(s&&o&&o!==r&&l===o.$key&&!i&&!o.$hasNormal)return o;for(var c in a={},e)e[c]&&"$"!==c[0]&&(a[c]=ge(n,t,c,e[c]))}else a={};for(var u in t)u in a||(a[u]=he(t,u));return e&&Object.isExtensible(e)&&(e._normalized=a),H(a,"$stable",s),H(a,"$key",l),H(a,"$hasNormal",i),a}function ge(n,e,t,r){var a=function(){var e=pn;dn(n);var t=arguments.length?r.apply(null,arguments):r({}),a=(t=t&&"object"==typeof t&&!o(t)?[t]:Vn(t))&&t[0];return dn(e),t&&(!a||1===t.length&&a.isComment&&!me(a))?void 0:t};return r.proxy&&Object.defineProperty(e,t,{get:a,enumerable:!0,configurable:!0}),a}function he(n,e){return function(){return n[e]}}function ye(n){return{get attrs(){if(!n._attrsProxy){var e=n._attrsProxy={};H(e,"_v_attr_proxy",!0),be(e,n.$attrs,r,n,"$attrs")}return n._attrsProxy},get listeners(){n._listenersProxy||be(n._listenersProxy={},n.$listeners,r,n,"$listeners");return n._listenersProxy},get slots(){return function(n){n._slotsProxy||xe(n._slotsProxy={},n.$scopedSlots);return n._slotsProxy}(n)},emit:_(n.$emit,n),expose:function(e){e&&Object.keys(e).forEach((function(t){return Gn(n,e,t)}))}}}function be(n,e,t,r,o){var a=!1;for(var i in e)i in n?e[i]!==t[i]&&(a=!0):(a=!0,ve(n,i,r,o));for(var i in n)i in e||(a=!0,delete n[i]);return a}function ve(n,e,t,r){Object.defineProperty(n,e,{enumerable:!0,configurable:!0,get:function(){return t[r][e]}})}function xe(n,e){for(var t in e)n[t]=e[t];for(var t in n)t in e||delete n[t]}var we=null;function je(n,e){return(n.__esModule||un&&"Module"===n[Symbol.toStringTag])&&(n=n.default),u(n)?e.extend(n):n}function ke(n){if(o(n))for(var e=0;e<n.length;e++){var t=n[e];if(i(t)&&(i(t.componentOptions)||me(t)))return t}}function Se(n,e,t,r,p,d){return(o(t)||l(t))&&(p=r,r=t,t=void 0),s(d)&&(p=2),function(n,e,t,r,l){if(i(t)&&i(t.__ob__))return fn();i(t)&&i(t.is)&&(e=t.is);if(!e)return fn();0;o(r)&&c(r[0])&&((t=t||{}).scopedSlots={default:r[0]},r.length=0);2===l?r=Vn(r):1===l&&(r=function(n){for(var e=0;e<n.length;e++)if(o(n[e]))return Array.prototype.concat.apply([],n);return n}(r));var p,d;if("string"==typeof e){var m=void 0;d=n.$vnode&&n.$vnode.ns||U.getTagNamespace(e),p=U.isReservedTag(e)?new mn(U.parsePlatformTagName(e),t,r,void 0,void 0,n):t&&t.pre||!i(m=_t(n.$options,"components",e))?new mn(e,t,r,void 0,void 0,n):vt(m,t,n,r,e)}else p=vt(e,t,n,r);return o(p)?p:i(p)?(i(d)&&function n(e,t,r){e.ns=t,"foreignObject"===e.tag&&(t=void 0,r=!0);if(i(e.children))for(var o=0,l=e.children.length;o<l;o++){var c=e.children[o];i(c.tag)&&(a(c.ns)||s(r)&&"svg"!==c.tag)&&n(c,t,r)}}(p,d),i(t)&&function(n){u(n.style)&&Re(n.style);u(n.class)&&Re(n.class)}(t),p):fn()}(n,e,t,r,p)}function Ee(n,e,t){xn();try{if(e)for(var r=e;r=r.$parent;){var o=r.$options.errorCaptured;if(o)for(var a=0;a<o.length;a++)try{if(!1===o[a].call(r,n,e,t))return}catch(n){Te(n,r,"errorCaptured hook")}}Te(n,e,t)}finally{wn()}}function Ae(n,e,t,r,o){var a;try{(a=t?n.apply(e,t):n.call(e))&&!a._isVue&&g(a)&&!a._handled&&(a.catch((function(n){return Ee(n,r,o+" (Promise/async)")})),a._handled=!0)}catch(n){Ee(n,r,o)}return a}function Te(n,e,t){if(U.errorHandler)try{return U.errorHandler.call(null,n,e,t)}catch(e){e!==n&&Ie(e,null,"config.errorHandler")}Ie(n,e,t)}function Ie(n,e,t){if(!V||"undefined"==typeof console)throw n;console.error(n)}var _e,Me=!1,Pe=[],Ce=!1;function Oe(){Ce=!1;var n=Pe.slice(0);Pe.length=0;for(var e=0;e<n.length;e++)n[e]()}if("undefined"!=typeof Promise&&ln(Promise)){var ze=Promise.resolve();_e=function(){ze.then(Oe),Q&&setTimeout(O)},Me=!0}else if(Z||"undefined"==typeof MutationObserver||!ln(MutationObserver)&&"[object MutationObserverConstructor]"!==MutationObserver.toString())_e="undefined"!=typeof setImmediate&&ln(setImmediate)?function(){setImmediate(Oe)}:function(){setTimeout(Oe,0)};else{var De=1,Be=new MutationObserver(Oe),$e=document.createTextNode(String(De));Be.observe($e,{characterData:!0}),_e=function(){De=(De+1)%2,$e.data=String(De)},Me=!0}function Ne(n,e){var t;if(Pe.push((function(){if(n)try{n.call(e)}catch(n){Ee(n,e,"nextTick")}else t&&t(e)})),Ce||(Ce=!0,_e()),!n&&"undefined"!=typeof Promise)return new Promise((function(n){t=n}))}function Ge(n){return function(e,t){if(void 0===t&&(t=pn),t)return function(n,e,t){var r=n.$options;r[e]=Et(r[e],t)}(t,n,e)}}Ge("beforeMount"),Ge("mounted"),Ge("beforeUpdate"),Ge("updated"),Ge("beforeDestroy"),Ge("destroyed"),Ge("activated"),Ge("deactivated"),Ge("serverPrefetch"),Ge("renderTracked"),Ge("renderTriggered"),Ge("errorCaptured");var Fe=new cn;function Re(n){return function n(e,t){var r,a,i=o(e);if(!i&&!u(e)||Object.isFrozen(e)||e instanceof mn)return;if(e.__ob__){var s=e.__ob__.dep.id;if(t.has(s))return;t.add(s)}if(i)for(r=e.length;r--;)n(e[r],t);else if(Nn(e))n(e.value,t);else for(a=Object.keys(e),r=a.length;r--;)n(e[a[r]],t)}(n,Fe),Fe.clear(),n}var Ue,Le=0,qe=function(){function n(n,e,t,r,o){var a,i;a=this,void 0===(i=Fn&&!Fn._vm?Fn:n?n._scope:void 0)&&(i=Fn),i&&i.active&&i.effects.push(a),(this.vm=n)&&o&&(n._watcher=this),r?(this.deep=!!r.deep,this.user=!!r.user,this.lazy=!!r.lazy,this.sync=!!r.sync,this.before=r.before):this.deep=this.user=this.lazy=this.sync=!1,this.cb=t,this.id=++Le,this.active=!0,this.post=!1,this.dirty=this.lazy,this.deps=[],this.newDeps=[],this.depIds=new cn,this.newDepIds=new cn,this.expression="",c(e)?this.getter=e:(this.getter=function(n){if(!J.test(n)){var e=n.split(".");return function(n){for(var t=0;t<e.length;t++){if(!n)return;n=n[e[t]]}return n}}}(e),this.getter||(this.getter=O)),this.value=this.lazy?void 0:this.get()}return n.prototype.get=function(){var n;xn(this);var e=this.vm;try{n=this.getter.call(e,e)}catch(n){if(!this.user)throw n;Ee(n,e,'getter for watcher "'.concat(this.expression,'"'))}finally{this.deep&&Re(n),wn(),this.cleanupDeps()}return n},n.prototype.addDep=function(n){var e=n.id;this.newDepIds.has(e)||(this.newDepIds.add(e),this.newDeps.push(n),this.depIds.has(e)||n.addSub(this))},n.prototype.cleanupDeps=function(){for(var n=this.deps.length;n--;){var e=this.deps[n];this.newDepIds.has(e.id)||e.removeSub(this)}var t=this.depIds;this.depIds=this.newDepIds,this.newDepIds=t,this.newDepIds.clear(),t=this.deps,this.deps=this.newDeps,this.newDeps=t,this.newDeps.length=0},n.prototype.update=function(){this.lazy?this.dirty=!0:this.sync?this.run():pt(this)},n.prototype.run=function(){if(this.active){var n=this.get();if(n!==this.value||u(n)||this.deep){var e=this.value;if(this.value=n,this.user){var t='callback for watcher "'.concat(this.expression,'"');Ae(this.cb,this.vm,[n,e],this.vm,t)}else this.cb.call(this.vm,n,e)}}},n.prototype.evaluate=function(){this.value=this.get(),this.dirty=!1},n.prototype.depend=function(){for(var n=this.deps.length;n--;)this.deps[n].depend()},n.prototype.teardown=function(){if(this.vm&&!this.vm._isBeingDestroyed&&x(this.vm._scope.effects,this),this.active){for(var n=this.deps.length;n--;)this.deps[n].removeSub(this);this.active=!1,this.onStop&&this.onStop()}},n}();function He(n,e){Ue.$on(n,e)}function Je(n,e){Ue.$off(n,e)}function We(n,e){var t=Ue;return function r(){var o=e.apply(null,arguments);null!==o&&t.$off(n,r)}}function Ve(n,e,t){Ue=n,Hn(e,t||{},He,Je,We,n),Ue=void 0}var Ke=null;function Ze(n){var e=Ke;return Ke=n,function(){Ke=e}}function Ye(n){for(;n&&(n=n.$parent);)if(n._inactive)return!0;return!1}function Xe(n,e){if(e){if(n._directInactive=!1,Ye(n))return}else if(n._directInactive)return;if(n._inactive||null===n._inactive){n._inactive=!1;for(var t=0;t<n.$children.length;t++)Xe(n.$children[t]);Qe(n,"activated")}}function Qe(n,e,t,r){void 0===r&&(r=!0),xn();var o=pn;r&&dn(n);var a=n.$options[e],i="".concat(e," hook");if(a)for(var s=0,l=a.length;s<l;s++)Ae(a[s],n,t||null,n,i);n._hasHookEvent&&n.$emit("hook:"+e),r&&dn(o),wn()}var nt=[],et=[],tt={},rt=!1,ot=!1,at=0;var it=0,st=Date.now;if(V&&!Z){var lt=window.performance;lt&&"function"==typeof lt.now&&st()>document.createEvent("Event").timeStamp&&(st=function(){return lt.now()})}var ct=function(n,e){if(n.post){if(!e.post)return 1}else if(e.post)return-1;return n.id-e.id};function ut(){var n,e;for(it=st(),ot=!0,nt.sort(ct),at=0;at<nt.length;at++)(n=nt[at]).before&&n.before(),e=n.id,tt[e]=null,n.run();var t=et.slice(),r=nt.slice();at=nt.length=et.length=0,tt={},rt=ot=!1,function(n){for(var e=0;e<n.length;e++)n[e]._inactive=!0,Xe(n[e],!0)}(t),function(n){var e=n.length;for(;e--;){var t=n[e],r=t.vm;r&&r._watcher===t&&r._isMounted&&!r._isDestroyed&&Qe(r,"updated")}}(r),sn&&U.devtools&&sn.emit("flush")}function pt(n){var e=n.id;if(null==tt[e]&&(n!==bn.target||!n.noRecurse)){if(tt[e]=!0,ot){for(var t=nt.length-1;t>at&&nt[t].id>n.id;)t--;nt.splice(t+1,0,n)}else nt.push(n);rt||(rt=!0,Ne(ut))}}function dt(n,e){if(n){for(var t=Object.create(null),r=un?Reflect.ownKeys(n):Object.keys(n),o=0;o<r.length;o++){var a=r[o];if("__ob__"!==a){var i=n[a].from;if(i in e._provided)t[a]=e._provided[i];else if("default"in n[a]){var s=n[a].default;t[a]=c(s)?s.call(e):s}else 0}}return t}}function mt(n,e,t,a,i){var l,c=this,u=i.options;j(a,"_uid")?(l=Object.create(a))._original=a:(l=a,a=a._original);var p=s(u._compiled),d=!p;this.data=n,this.props=e,this.children=t,this.parent=a,this.listeners=n.on||r,this.injections=dt(u.inject,a),this.slots=function(){return c.$slots||fe(a,n.scopedSlots,c.$slots=pe(t,a)),c.$slots},Object.defineProperty(this,"scopedSlots",{enumerable:!0,get:function(){return fe(a,n.scopedSlots,this.slots())}}),p&&(this.$options=u,this.$slots=this.slots(),this.$scopedSlots=fe(a,n.scopedSlots,this.$slots)),u._scopeId?this._c=function(n,e,t,r){var i=Se(l,n,e,t,r,d);return i&&!o(i)&&(i.fnScopeId=u._scopeId,i.fnContext=a),i}:this._c=function(n,e,t,r){return Se(l,n,e,t,r,d)}}function ft(n,e,t,r,o){var a=hn(n);return a.fnContext=t,a.fnOptions=r,e.slot&&((a.data||(a.data={})).slot=e.slot),a}function gt(n,e){for(var t in e)n[E(t)]=e[t]}function ht(n){return n.name||n.__name||n._componentTag}ue(mt.prototype);var yt={init:function(n,e){if(n.componentInstance&&!n.componentInstance._isDestroyed&&n.data.keepAlive){var t=n;yt.prepatch(t,t)}else{(n.componentInstance=function(n,e){var t={_isComponent:!0,_parentVnode:n,parent:e},r=n.data.inlineTemplate;i(r)&&(t.render=r.render,t.staticRenderFns=r.staticRenderFns);return new n.componentOptions.Ctor(t)}(n,Ke)).$mount(e?n.elm:void 0,e)}},prepatch:function(n,e){var t=e.componentOptions;!function(n,e,t,o,a){var i=o.data.scopedSlots,s=n.$scopedSlots,l=!!(i&&!i.$stable||s!==r&&!s.$stable||i&&n.$scopedSlots.$key!==i.$key||!i&&n.$scopedSlots.$key),c=!!(a||n.$options._renderChildren||l),u=n.$vnode;n.$options._parentVnode=o,n.$vnode=o,n._vnode&&(n._vnode.parent=o),n.$options._renderChildren=a;var p=o.data.attrs||r;n._attrsProxy&&be(n._attrsProxy,p,u.data&&u.data.attrs||r,n,"$attrs")&&(c=!0),n.$attrs=p,t=t||r;var d=n.$options._parentListeners;if(n._listenersProxy&&be(n._listenersProxy,t,d||r,n,"$listeners"),n.$listeners=n.$options._parentListeners=t,Ve(n,t,d),e&&n.$options.props){Tn(!1);for(var m=n._props,f=n.$options._propKeys||[],g=0;g<f.length;g++){var h=f[g],y=n.$options.props;m[h]=Mt(h,y,e,n)}Tn(!0),n.$options.propsData=e}c&&(n.$slots=pe(a,o.context),n.$forceUpdate())}(e.componentInstance=n.componentInstance,t.propsData,t.listeners,e,t.children)},insert:function(n){var e,t=n.context,r=n.componentInstance;r._isMounted||(r._isMounted=!0,Qe(r,"mounted")),n.data.keepAlive&&(t._isMounted?((e=r)._inactive=!1,et.push(e)):Xe(r,!0))},destroy:function(n){var e=n.componentInstance;e._isDestroyed||(n.data.keepAlive?function n(e,t){if(!(t&&(e._directInactive=!0,Ye(e))||e._inactive)){e._inactive=!0;for(var r=0;r<e.$children.length;r++)n(e.$children[r]);Qe(e,"deactivated")}}(e,!0):e.$destroy())}},bt=Object.keys(yt);function vt(n,e,t,l,c){if(!a(n)){var p=t.$options._base;if(u(n)&&(n=p.extend(n)),"function"==typeof n){var d;if(a(n.cid)&&void 0===(n=function(n,e){if(s(n.error)&&i(n.errorComp))return n.errorComp;if(i(n.resolved))return n.resolved;var t=we;if(t&&i(n.owners)&&-1===n.owners.indexOf(t)&&n.owners.push(t),s(n.loading)&&i(n.loadingComp))return n.loadingComp;if(t&&!i(n.owners)){var r=n.owners=[t],o=!0,l=null,c=null;t.$on("hook:destroyed",(function(){return x(r,t)}));var p=function(n){for(var e=0,t=r.length;e<t;e++)r[e].$forceUpdate();n&&(r.length=0,null!==l&&(clearTimeout(l),l=null),null!==c&&(clearTimeout(c),c=null))},d=N((function(t){n.resolved=je(t,e),o?r.length=0:p(!0)})),m=N((function(e){i(n.errorComp)&&(n.error=!0,p(!0))})),f=n(d,m);return u(f)&&(g(f)?a(n.resolved)&&f.then(d,m):g(f.component)&&(f.component.then(d,m),i(f.error)&&(n.errorComp=je(f.error,e)),i(f.loading)&&(n.loadingComp=je(f.loading,e),0===f.delay?n.loading=!0:l=setTimeout((function(){l=null,a(n.resolved)&&a(n.error)&&(n.loading=!0,p(!1))}),f.delay||200)),i(f.timeout)&&(c=setTimeout((function(){c=null,a(n.resolved)&&m(null)}),f.timeout)))),o=!1,n.loading?n.loadingComp:n.resolved}}(d=n,p)))return function(n,e,t,r,o){var a=fn();return a.asyncFactory=n,a.asyncMeta={data:e,context:t,children:r,tag:o},a}(d,e,t,l,c);e=e||{},qt(n),i(e.model)&&function(n,e){var t=n.model&&n.model.prop||"value",r=n.model&&n.model.event||"input";(e.attrs||(e.attrs={}))[t]=e.model.value;var a=e.on||(e.on={}),s=a[r],l=e.model.callback;i(s)?(o(s)?-1===s.indexOf(l):s!==l)&&(a[r]=[l].concat(s)):a[r]=l}(n.options,e);var m=function(n,e,t){var r=e.options.props;if(!a(r)){var o={},s=n.attrs,l=n.props;if(i(s)||i(l))for(var c in r){var u=I(c);Wn(o,l,c,u,!0)||Wn(o,s,c,u,!1)}return o}}(e,n);if(s(n.options.functional))return function(n,e,t,a,s){var l=n.options,c={},u=l.props;if(i(u))for(var p in u)c[p]=Mt(p,u,e||r);else i(t.attrs)&&gt(c,t.attrs),i(t.props)&&gt(c,t.props);var d=new mt(t,c,s,a,n),m=l.render.call(null,d._c,d);if(m instanceof mn)return ft(m,t,d.parent,l,d);if(o(m)){for(var f=Vn(m)||[],g=new Array(f.length),h=0;h<f.length;h++)g[h]=ft(f[h],t,d.parent,l,d);return g}}(n,m,e,t,l);var f=e.on;if(e.on=e.nativeOn,s(n.options.abstract)){var h=e.slot;e={},h&&(e.slot=h)}!function(n){for(var e=n.hook||(n.hook={}),t=0;t<bt.length;t++){var r=bt[t],o=e[r],a=yt[r];o===a||o&&o._merged||(e[r]=o?xt(a,o):a)}}(e);var y=ht(n.options)||c;return new mn("vue-component-".concat(n.cid).concat(y?"-".concat(y):""),e,void 0,void 0,void 0,t,{Ctor:n,propsData:m,listeners:f,tag:c,children:l},d)}}}function xt(n,e){var t=function(t,r){n(t,r),e(t,r)};return t._merged=!0,t}var wt=O,jt=U.optionMergeStrategies;function kt(n,e){if(!e)return n;for(var t,r,o,a=un?Reflect.ownKeys(e):Object.keys(e),i=0;i<a.length;i++)"__ob__"!==(t=a[i])&&(r=n[t],o=e[t],j(n,t)?r!==o&&d(r)&&d(o)&&kt(r,o):Cn(n,t,o));return n}function St(n,e,t){return t?function(){var r=c(e)?e.call(t,t):e,o=c(n)?n.call(t,t):n;return r?kt(r,o):o}:e?n?function(){return kt(c(e)?e.call(this,this):e,c(n)?n.call(this,this):n)}:e:n}function Et(n,e){var t=e?n?n.concat(e):o(e)?e:[e]:n;return t?function(n){for(var e=[],t=0;t<n.length;t++)-1===e.indexOf(n[t])&&e.push(n[t]);return e}(t):t}function At(n,e,t,r){var o=Object.create(n||null);return e?P(o,e):o}jt.data=function(n,e,t){return t?St(n,e,t):e&&"function"!=typeof e?n:St(n,e)},R.forEach((function(n){jt[n]=Et})),F.forEach((function(n){jt[n+"s"]=At})),jt.watch=function(n,e,t,r){if(n===tn&&(n=void 0),e===tn&&(e=void 0),!e)return Object.create(n||null);if(!n)return e;var a={};for(var i in P(a,n),e){var s=a[i],l=e[i];s&&!o(s)&&(s=[s]),a[i]=s?s.concat(l):o(l)?l:[l]}return a},jt.props=jt.methods=jt.inject=jt.computed=function(n,e,t,r){if(!n)return e;var o=Object.create(null);return P(o,n),e&&P(o,e),o},jt.provide=St;var Tt=function(n,e){return void 0===e?n:e};function It(n,e,t){if(c(e)&&(e=e.options),function(n,e){var t=n.props;if(t){var r,a,i={};if(o(t))for(r=t.length;r--;)"string"==typeof(a=t[r])&&(i[E(a)]={type:null});else if(d(t))for(var s in t)a=t[s],i[E(s)]=d(a)?a:{type:a};else 0;n.props=i}}(e),function(n,e){var t=n.inject;if(t){var r=n.inject={};if(o(t))for(var a=0;a<t.length;a++)r[t[a]]={from:t[a]};else if(d(t))for(var i in t){var s=t[i];r[i]=d(s)?P({from:i},s):{from:s}}else 0}}(e),function(n){var e=n.directives;if(e)for(var t in e){var r=e[t];c(r)&&(e[t]={bind:r,update:r})}}(e),!e._base&&(e.extends&&(n=It(n,e.extends,t)),e.mixins))for(var r=0,a=e.mixins.length;r<a;r++)n=It(n,e.mixins[r],t);var i,s={};for(i in n)l(i);for(i in e)j(n,i)||l(i);function l(r){var o=jt[r]||Tt;s[r]=o(n[r],e[r],t,r)}return s}function _t(n,e,t,r){if("string"==typeof t){var o=n[e];if(j(o,t))return o[t];var a=E(t);if(j(o,a))return o[a];var i=A(a);return j(o,i)?o[i]:o[t]||o[a]||o[i]}}function Mt(n,e,t,r){var o=e[n],a=!j(t,n),i=t[n],s=zt(Boolean,o.type);if(s>-1)if(a&&!j(o,"default"))i=!1;else if(""===i||i===I(n)){var l=zt(String,o.type);(l<0||s<l)&&(i=!0)}if(void 0===i){i=function(n,e,t){if(!j(e,"default"))return;var r=e.default;0;if(n&&n.$options.propsData&&void 0===n.$options.propsData[t]&&void 0!==n._props[t])return n._props[t];return c(r)&&"Function"!==Ct(e.type)?r.call(n):r}(r,o,n);var u=An;Tn(!0),Mn(i),Tn(u)}return i}var Pt=/^\s*function (\w+)/;function Ct(n){var e=n&&n.toString().match(Pt);return e?e[1]:""}function Ot(n,e){return Ct(n)===Ct(e)}function zt(n,e){if(!o(e))return Ot(e,n)?0:-1;for(var t=0,r=e.length;t<r;t++)if(Ot(e[t],n))return t;return-1}var Dt={enumerable:!0,configurable:!0,get:O,set:O};function Bt(n,e,t){Dt.get=function(){return this[e][t]},Dt.set=function(n){this[e][t]=n},Object.defineProperty(n,t,Dt)}function $t(n){var e=n.$options;if(e.props&&function(n,e){var t=n.$options.propsData||{},r=n._props=Dn({}),o=n.$options._propKeys=[];n.$parent&&Tn(!1);var a=function(a){o.push(a);var i=Mt(a,e,t,n);Pn(r,a,i),a in n||Bt(n,"_props",a)};for(var i in e)a(i);Tn(!0)}(n,e.props),function(n){var e=n.$options,t=e.setup;if(t){var r=n._setupContext=ye(n);dn(n),xn();var o=Ae(t,null,[n._props||Dn({}),r],n,"setup");if(wn(),dn(),c(o))e.render=o;else if(u(o))if(n._setupState=o,o.__sfc){var a=n._setupProxy={};for(var i in o)"__sfc"!==i&&Gn(a,o,i)}else for(var i in o)q(i)||Gn(n,o,i);else 0}}(n),e.methods&&function(n,e){n.$options.props;for(var t in e)n[t]="function"!=typeof e[t]?O:_(e[t],n)}(n,e.methods),e.data)!function(n){var e=n.$options.data;d(e=n._data=c(e)?function(n,e){xn();try{return n.call(e,e)}catch(n){return Ee(n,e,"data()"),{}}finally{wn()}}(e,n):e||{})||(e={});var t=Object.keys(e),r=n.$options.props,o=(n.$options.methods,t.length);for(;o--;){var a=t[o];0,r&&j(r,a)||q(a)||Bt(n,"_data",a)}var i=Mn(e);i&&i.vmCount++}(n);else{var t=Mn(n._data={});t&&t.vmCount++}e.computed&&function(n,e){var t=n._computedWatchers=Object.create(null),r=an();for(var o in e){var a=e[o],i=c(a)?a:a.get;0,r||(t[o]=new qe(n,i||O,O,Nt)),o in n||Gt(n,o,a)}}(n,e.computed),e.watch&&e.watch!==tn&&function(n,e){for(var t in e){var r=e[t];if(o(r))for(var a=0;a<r.length;a++)Ut(n,t,r[a]);else Ut(n,t,r)}}(n,e.watch)}var Nt={lazy:!0};function Gt(n,e,t){var r=!an();c(t)?(Dt.get=r?Ft(e):Rt(t),Dt.set=O):(Dt.get=t.get?r&&!1!==t.cache?Ft(e):Rt(t.get):O,Dt.set=t.set||O),Object.defineProperty(n,e,Dt)}function Ft(n){return function(){var e=this._computedWatchers&&this._computedWatchers[n];if(e)return e.dirty&&e.evaluate(),bn.target&&e.depend(),e.value}}function Rt(n){return function(){return n.call(this,this)}}function Ut(n,e,t,r){return d(t)&&(r=t,t=t.handler),"string"==typeof t&&(t=n[t]),n.$watch(e,t,r)}var Lt=0;function qt(n){var e=n.options;if(n.super){var t=qt(n.super);if(t!==n.superOptions){n.superOptions=t;var r=function(n){var e,t=n.options,r=n.sealedOptions;for(var o in t)t[o]!==r[o]&&(e||(e={}),e[o]=t[o]);return e}(n);r&&P(n.extendOptions,r),(e=n.options=It(t,n.extendOptions)).name&&(e.components[e.name]=n)}}return e}function Ht(n){this._init(n)}function Jt(n){n.cid=0;var e=1;n.extend=function(n){n=n||{};var t=this,r=t.cid,o=n._Ctor||(n._Ctor={});if(o[r])return o[r];var a=ht(n)||ht(t.options);var i=function(n){this._init(n)};return(i.prototype=Object.create(t.prototype)).constructor=i,i.cid=e++,i.options=It(t.options,n),i.super=t,i.options.props&&function(n){var e=n.options.props;for(var t in e)Bt(n.prototype,"_props",t)}(i),i.options.computed&&function(n){var e=n.options.computed;for(var t in e)Gt(n.prototype,t,e[t])}(i),i.extend=t.extend,i.mixin=t.mixin,i.use=t.use,F.forEach((function(n){i[n]=t[n]})),a&&(i.options.components[a]=i),i.superOptions=t.options,i.extendOptions=n,i.sealedOptions=P({},i.options),o[r]=i,i}}function Wt(n){return n&&(ht(n.Ctor.options)||n.tag)}function Vt(n,e){return o(n)?n.indexOf(e)>-1:"string"==typeof n?n.split(",").indexOf(e)>-1:!!m(n)&&n.test(e)}function Kt(n,e){var t=n.cache,r=n.keys,o=n._vnode;for(var a in t){var i=t[a];if(i){var s=i.name;s&&!e(s)&&Zt(t,a,r,o)}}}function Zt(n,e,t,r){var o=n[e];!o||r&&o.tag===r.tag||o.componentInstance.$destroy(),n[e]=null,x(t,e)}Ht.prototype._init=function(n){var e=this;e._uid=Lt++,e._isVue=!0,e.__v_skip=!0,e._scope=new Rn(!0),e._scope._vm=!0,n&&n._isComponent?function(n,e){var t=n.$options=Object.create(n.constructor.options),r=e._parentVnode;t.parent=e.parent,t._parentVnode=r;var o=r.componentOptions;t.propsData=o.propsData,t._parentListeners=o.listeners,t._renderChildren=o.children,t._componentTag=o.tag,e.render&&(t.render=e.render,t.staticRenderFns=e.staticRenderFns)}(e,n):e.$options=It(qt(e.constructor),n||{},e),e._renderProxy=e,e._self=e,function(n){var e=n.$options,t=e.parent;if(t&&!e.abstract){for(;t.$options.abstract&&t.$parent;)t=t.$parent;t.$children.push(n)}n.$parent=t,n.$root=t?t.$root:n,n.$children=[],n.$refs={},n._provided=t?t._provided:Object.create(null),n._watcher=null,n._inactive=null,n._directInactive=!1,n._isMounted=!1,n._isDestroyed=!1,n._isBeingDestroyed=!1}(e),function(n){n._events=Object.create(null),n._hasHookEvent=!1;var e=n.$options._parentListeners;e&&Ve(n,e)}(e),function(n){n._vnode=null,n._staticTrees=null;var e=n.$options,t=n.$vnode=e._parentVnode,o=t&&t.context;n.$slots=pe(e._renderChildren,o),n.$scopedSlots=t?fe(n.$parent,t.data.scopedSlots,n.$slots):r,n._c=function(e,t,r,o){return Se(n,e,t,r,o,!1)},n.$createElement=function(e,t,r,o){return Se(n,e,t,r,o,!0)};var a=t&&t.data;Pn(n,"$attrs",a&&a.attrs||r,null,!0),Pn(n,"$listeners",e._parentListeners||r,null,!0)}(e),Qe(e,"beforeCreate",void 0,!1),function(n){var e=dt(n.$options.inject,n);e&&(Tn(!1),Object.keys(e).forEach((function(t){Pn(n,t,e[t])})),Tn(!0))}(e),$t(e),function(n){var e=n.$options.provide;if(e){var t=c(e)?e.call(n):e;if(!u(t))return;for(var r=Un(n),o=un?Reflect.ownKeys(t):Object.keys(t),a=0;a<o.length;a++){var i=o[a];Object.defineProperty(r,i,Object.getOwnPropertyDescriptor(t,i))}}}(e),Qe(e,"created"),e.$options.el&&e.$mount(e.$options.el)},function(n){var e={get:function(){return this._data}},t={get:function(){return this._props}};Object.defineProperty(n.prototype,"$data",e),Object.defineProperty(n.prototype,"$props",t),n.prototype.$set=Cn,n.prototype.$delete=On,n.prototype.$watch=function(n,e,t){if(d(e))return Ut(this,n,e,t);(t=t||{}).user=!0;var r=new qe(this,n,e,t);if(t.immediate){var o='callback for immediate watcher "'.concat(r.expression,'"');xn(),Ae(e,this,[r.value],this,o),wn()}return function(){r.teardown()}}}(Ht),function(n){var e=/^hook:/;n.prototype.$on=function(n,t){var r=this;if(o(n))for(var a=0,i=n.length;a<i;a++)r.$on(n[a],t);else(r._events[n]||(r._events[n]=[])).push(t),e.test(n)&&(r._hasHookEvent=!0);return r},n.prototype.$once=function(n,e){var t=this;function r(){t.$off(n,r),e.apply(t,arguments)}return r.fn=e,t.$on(n,r),t},n.prototype.$off=function(n,e){var t=this;if(!arguments.length)return t._events=Object.create(null),t;if(o(n)){for(var r=0,a=n.length;r<a;r++)t.$off(n[r],e);return t}var i,s=t._events[n];if(!s)return t;if(!e)return t._events[n]=null,t;for(var l=s.length;l--;)if((i=s[l])===e||i.fn===e){s.splice(l,1);break}return t},n.prototype.$emit=function(n){var e=this,t=e._events[n];if(t){t=t.length>1?M(t):t;for(var r=M(arguments,1),o='event handler for "'.concat(n,'"'),a=0,i=t.length;a<i;a++)Ae(t[a],e,r,e,o)}return e}}(Ht),function(n){n.prototype._update=function(n,e){var t=this,r=t.$el,o=t._vnode,a=Ze(t);t._vnode=n,t.$el=o?t.__patch__(o,n):t.__patch__(t.$el,n,e,!1),a(),r&&(r.__vue__=null),t.$el&&(t.$el.__vue__=t);for(var i=t;i&&i.$vnode&&i.$parent&&i.$vnode===i.$parent._vnode;)i.$parent.$el=i.$el,i=i.$parent},n.prototype.$forceUpdate=function(){this._watcher&&this._watcher.update()},n.prototype.$destroy=function(){var n=this;if(!n._isBeingDestroyed){Qe(n,"beforeDestroy"),n._isBeingDestroyed=!0;var e=n.$parent;!e||e._isBeingDestroyed||n.$options.abstract||x(e.$children,n),n._scope.stop(),n._data.__ob__&&n._data.__ob__.vmCount--,n._isDestroyed=!0,n.__patch__(n._vnode,null),Qe(n,"destroyed"),n.$off(),n.$el&&(n.$el.__vue__=null),n.$vnode&&(n.$vnode.parent=null)}}}(Ht),function(n){ue(n.prototype),n.prototype.$nextTick=function(n){return Ne(n,this)},n.prototype._render=function(){var n,e=this,t=e.$options,r=t.render,a=t._parentVnode;a&&e._isMounted&&(e.$scopedSlots=fe(e.$parent,a.data.scopedSlots,e.$slots,e.$scopedSlots),e._slotsProxy&&xe(e._slotsProxy,e.$scopedSlots)),e.$vnode=a;try{dn(e),we=e,n=r.call(e._renderProxy,e.$createElement)}catch(t){Ee(t,e,"render"),n=e._vnode}finally{we=null,dn()}return o(n)&&1===n.length&&(n=n[0]),n instanceof mn||(n=fn()),n.parent=a,n}}(Ht);var Yt=[String,RegExp,Array],Xt={KeepAlive:{name:"keep-alive",abstract:!0,props:{include:Yt,exclude:Yt,max:[String,Number]},methods:{cacheVNode:function(){var n=this.cache,e=this.keys,t=this.vnodeToCache,r=this.keyToCache;if(t){var o=t.tag,a=t.componentInstance,i=t.componentOptions;n[r]={name:Wt(i),tag:o,componentInstance:a},e.push(r),this.max&&e.length>parseInt(this.max)&&Zt(n,e[0],e,this._vnode),this.vnodeToCache=null}}},created:function(){this.cache=Object.create(null),this.keys=[]},destroyed:function(){for(var n in this.cache)Zt(this.cache,n,this.keys)},mounted:function(){var n=this;this.cacheVNode(),this.$watch("include",(function(e){Kt(n,(function(n){return Vt(e,n)}))})),this.$watch("exclude",(function(e){Kt(n,(function(n){return!Vt(e,n)}))}))},updated:function(){this.cacheVNode()},render:function(){var n=this.$slots.default,e=ke(n),t=e&&e.componentOptions;if(t){var r=Wt(t),o=this.include,a=this.exclude;if(o&&(!r||!Vt(o,r))||a&&r&&Vt(a,r))return e;var i=this.cache,s=this.keys,l=null==e.key?t.Ctor.cid+(t.tag?"::".concat(t.tag):""):e.key;i[l]?(e.componentInstance=i[l].componentInstance,x(s,l),s.push(l)):(this.vnodeToCache=e,this.keyToCache=l),e.data.keepAlive=!0}return e||n&&n[0]}}};!function(n){var e={get:function(){return U}};Object.defineProperty(n,"config",e),n.util={warn:wt,extend:P,mergeOptions:It,defineReactive:Pn},n.set=Cn,n.delete=On,n.nextTick=Ne,n.observable=function(n){return Mn(n),n},n.options=Object.create(null),F.forEach((function(e){n.options[e+"s"]=Object.create(null)})),n.options._base=n,P(n.options.components,Xt),function(n){n.use=function(n){var e=this._installedPlugins||(this._installedPlugins=[]);if(e.indexOf(n)>-1)return this;var t=M(arguments,1);return t.unshift(this),c(n.install)?n.install.apply(n,t):c(n)&&n.apply(null,t),e.push(n),this}}(n),function(n){n.mixin=function(n){return this.options=It(this.options,n),this}}(n),Jt(n),function(n){F.forEach((function(e){n[e]=function(n,t){return t?("component"===e&&d(t)&&(t.name=t.name||n,t=this.options._base.extend(t)),"directive"===e&&c(t)&&(t={bind:t,update:t}),this.options[e+"s"][n]=t,t):this.options[e+"s"][n]}}))}(n)}(Ht),Object.defineProperty(Ht.prototype,"$isServer",{get:an}),Object.defineProperty(Ht.prototype,"$ssrContext",{get:function(){return this.$vnode&&this.$vnode.ssrContext}}),Object.defineProperty(Ht,"FunctionalRenderContext",{value:mt}),Ht.version="2.7.10";var Qt=b("style,class"),nr=b("input,textarea,option,select,progress"),er=b("contenteditable,draggable,spellcheck"),tr=b("events,caret,typing,plaintext-only"),rr=b("allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,default,defaultchecked,defaultmuted,defaultselected,defer,disabled,enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,required,reversed,scoped,seamless,selected,sortable,truespeed,typemustmatch,visible"),or="http://www.w3.org/1999/xlink",ar=function(n){return":"===n.charAt(5)&&"xlink"===n.slice(0,5)},ir=function(n){return ar(n)?n.slice(6,n.length):""},sr=function(n){return null==n||!1===n};function lr(n){for(var e=n.data,t=n,r=n;i(r.componentInstance);)(r=r.componentInstance._vnode)&&r.data&&(e=cr(r.data,e));for(;i(t=t.parent);)t&&t.data&&(e=cr(e,t.data));return function(n,e){if(i(n)||i(e))return ur(n,pr(e));return""}(e.staticClass,e.class)}function cr(n,e){return{staticClass:ur(n.staticClass,e.staticClass),class:i(n.class)?[n.class,e.class]:e.class}}function ur(n,e){return n?e?n+" "+e:n:e||""}function pr(n){return Array.isArray(n)?function(n){for(var e,t="",r=0,o=n.length;r<o;r++)i(e=pr(n[r]))&&""!==e&&(t&&(t+=" "),t+=e);return t}(n):u(n)?function(n){var e="";for(var t in n)n[t]&&(e&&(e+=" "),e+=t);return e}(n):"string"==typeof n?n:""}var dr={svg:"http://www.w3.org/2000/svg",math:"http://www.w3.org/1998/Math/MathML"},mr=b("html,body,base,head,link,meta,style,title,address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,menuitem,summary,content,element,shadow,template,blockquote,iframe,tfoot"),fr=b("svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,foreignobject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view",!0),gr=function(n){return mr(n)||fr(n)};var hr=Object.create(null);var yr=b("text,number,password,search,email,tel,url");var br=Object.freeze({__proto__:null,createElement:function(n,e){var t=document.createElement(n);return"select"!==n||e.data&&e.data.attrs&&void 0!==e.data.attrs.multiple&&t.setAttribute("multiple","multiple"),t},createElementNS:function(n,e){return document.createElementNS(dr[n],e)},createTextNode:function(n){return document.createTextNode(n)},createComment:function(n){return document.createComment(n)},insertBefore:function(n,e,t){n.insertBefore(e,t)},removeChild:function(n,e){n.removeChild(e)},appendChild:function(n,e){n.appendChild(e)},parentNode:function(n){return n.parentNode},nextSibling:function(n){return n.nextSibling},tagName:function(n){return n.tagName},setTextContent:function(n,e){n.textContent=e},setStyleScope:function(n,e){n.setAttribute(e,"")}}),vr={create:function(n,e){xr(e)},update:function(n,e){n.data.ref!==e.data.ref&&(xr(n,!0),xr(e))},destroy:function(n){xr(n,!0)}};function xr(n,e){var t=n.data.ref;if(i(t)){var r=n.context,a=n.componentInstance||n.elm,s=e?null:a,l=e?void 0:a;if(c(t))Ae(t,r,[s],r,"template ref function");else{var u=n.data.refInFor,p="string"==typeof t||"number"==typeof t,d=Nn(t),m=r.$refs;if(p||d)if(u){var f=p?m[t]:t.value;e?o(f)&&x(f,a):o(f)?f.includes(a)||f.push(a):p?(m[t]=[a],wr(r,t,m[t])):t.value=[a]}else if(p){if(e&&m[t]!==a)return;m[t]=l,wr(r,t,s)}else if(d){if(e&&t.value!==a)return;t.value=s}else 0}}}function wr(n,e,t){var r=n._setupState;r&&j(r,e)&&(Nn(r[e])?r[e].value=t:r[e]=t)}var jr=new mn("",{},[]),kr=["create","activate","update","remove","destroy"];function Sr(n,e){return n.key===e.key&&n.asyncFactory===e.asyncFactory&&(n.tag===e.tag&&n.isComment===e.isComment&&i(n.data)===i(e.data)&&function(n,e){if("input"!==n.tag)return!0;var t,r=i(t=n.data)&&i(t=t.attrs)&&t.type,o=i(t=e.data)&&i(t=t.attrs)&&t.type;return r===o||yr(r)&&yr(o)}(n,e)||s(n.isAsyncPlaceholder)&&a(e.asyncFactory.error))}function Er(n,e,t){var r,o,a={};for(r=e;r<=t;++r)i(o=n[r].key)&&(a[o]=r);return a}var Ar={create:Tr,update:Tr,destroy:function(n){Tr(n,jr)}};function Tr(n,e){(n.data.directives||e.data.directives)&&function(n,e){var t,r,o,a=n===jr,i=e===jr,s=_r(n.data.directives,n.context),l=_r(e.data.directives,e.context),c=[],u=[];for(t in l)r=s[t],o=l[t],r?(o.oldValue=r.value,o.oldArg=r.arg,Pr(o,"update",e,n),o.def&&o.def.componentUpdated&&u.push(o)):(Pr(o,"bind",e,n),o.def&&o.def.inserted&&c.push(o));if(c.length){var p=function(){for(var t=0;t<c.length;t++)Pr(c[t],"inserted",e,n)};a?Jn(e,"insert",p):p()}u.length&&Jn(e,"postpatch",(function(){for(var t=0;t<u.length;t++)Pr(u[t],"componentUpdated",e,n)}));if(!a)for(t in s)l[t]||Pr(s[t],"unbind",n,n,i)}(n,e)}var Ir=Object.create(null);function _r(n,e){var t,r,o=Object.create(null);if(!n)return o;for(t=0;t<n.length;t++){if((r=n[t]).modifiers||(r.modifiers=Ir),o[Mr(r)]=r,e._setupState&&e._setupState.__sfc){var a=r.def||_t(e,"_setupState","v-"+r.name);r.def="function"==typeof a?{bind:a,update:a}:a}r.def=r.def||_t(e.$options,"directives",r.name)}return o}function Mr(n){return n.rawName||"".concat(n.name,".").concat(Object.keys(n.modifiers||{}).join("."))}function Pr(n,e,t,r,o){var a=n.def&&n.def[e];if(a)try{a(t.elm,n,t,r,o)}catch(r){Ee(r,t.context,"directive ".concat(n.name," ").concat(e," hook"))}}var Cr=[vr,Ar];function Or(n,e){var t=e.componentOptions;if(!(i(t)&&!1===t.Ctor.options.inheritAttrs||a(n.data.attrs)&&a(e.data.attrs))){var r,o,l=e.elm,c=n.data.attrs||{},u=e.data.attrs||{};for(r in(i(u.__ob__)||s(u._v_attr_proxy))&&(u=e.data.attrs=P({},u)),u)o=u[r],c[r]!==o&&zr(l,r,o,e.data.pre);for(r in(Z||X)&&u.value!==c.value&&zr(l,"value",u.value),c)a(u[r])&&(ar(r)?l.removeAttributeNS(or,ir(r)):er(r)||l.removeAttribute(r))}}function zr(n,e,t,r){r||n.tagName.indexOf("-")>-1?Dr(n,e,t):rr(e)?sr(t)?n.removeAttribute(e):(t="allowfullscreen"===e&&"EMBED"===n.tagName?"true":e,n.setAttribute(e,t)):er(e)?n.setAttribute(e,function(n,e){return sr(e)||"false"===e?"false":"contenteditable"===n&&tr(e)?e:"true"}(e,t)):ar(e)?sr(t)?n.removeAttributeNS(or,ir(e)):n.setAttributeNS(or,e,t):Dr(n,e,t)}function Dr(n,e,t){if(sr(t))n.removeAttribute(e);else{if(Z&&!Y&&"TEXTAREA"===n.tagName&&"placeholder"===e&&""!==t&&!n.__ieph){var r=function(e){e.stopImmediatePropagation(),n.removeEventListener("input",r)};n.addEventListener("input",r),n.__ieph=!0}n.setAttribute(e,t)}}var Br={create:Or,update:Or};function $r(n,e){var t=e.elm,r=e.data,o=n.data;if(!(a(r.staticClass)&&a(r.class)&&(a(o)||a(o.staticClass)&&a(o.class)))){var s=lr(e),l=t._transitionClasses;i(l)&&(s=ur(s,pr(l))),s!==t._prevClass&&(t.setAttribute("class",s),t._prevClass=s)}}var Nr,Gr={create:$r,update:$r};function Fr(n,e,t){var r=Nr;return function o(){var a=e.apply(null,arguments);null!==a&&Lr(n,o,t,r)}}var Rr=Me&&!(en&&Number(en[1])<=53);function Ur(n,e,t,r){if(Rr){var o=it,a=e;e=a._wrapper=function(n){if(n.target===n.currentTarget||n.timeStamp>=o||n.timeStamp<=0||n.target.ownerDocument!==document)return a.apply(this,arguments)}}Nr.addEventListener(n,e,rn?{capture:t,passive:r}:t)}function Lr(n,e,t,r){(r||Nr).removeEventListener(n,e._wrapper||e,t)}function qr(n,e){if(!a(n.data.on)||!a(e.data.on)){var t=e.data.on||{},r=n.data.on||{};Nr=e.elm||n.elm,function(n){if(i(n.__r)){var e=Z?"change":"input";n[e]=[].concat(n.__r,n[e]||[]),delete n.__r}i(n.__c)&&(n.change=[].concat(n.__c,n.change||[]),delete n.__c)}(t),Hn(t,r,Ur,Lr,Fr,e.context),Nr=void 0}}var Hr,Jr={create:qr,update:qr,destroy:function(n){return qr(n,jr)}};function Wr(n,e){if(!a(n.data.domProps)||!a(e.data.domProps)){var t,r,o=e.elm,l=n.data.domProps||{},c=e.data.domProps||{};for(t in(i(c.__ob__)||s(c._v_attr_proxy))&&(c=e.data.domProps=P({},c)),l)t in c||(o[t]="");for(t in c){if(r=c[t],"textContent"===t||"innerHTML"===t){if(e.children&&(e.children.length=0),r===l[t])continue;1===o.childNodes.length&&o.removeChild(o.childNodes[0])}if("value"===t&&"PROGRESS"!==o.tagName){o._value=r;var u=a(r)?"":String(r);Vr(o,u)&&(o.value=u)}else if("innerHTML"===t&&fr(o.tagName)&&a(o.innerHTML)){(Hr=Hr||document.createElement("div")).innerHTML="<svg>".concat(r,"</svg>");for(var p=Hr.firstChild;o.firstChild;)o.removeChild(o.firstChild);for(;p.firstChild;)o.appendChild(p.firstChild)}else if(r!==l[t])try{o[t]=r}catch(n){}}}}function Vr(n,e){return!n.composing&&("OPTION"===n.tagName||function(n,e){var t=!0;try{t=document.activeElement!==n}catch(n){}return t&&n.value!==e}(n,e)||function(n,e){var t=n.value,r=n._vModifiers;if(i(r)){if(r.number)return y(t)!==y(e);if(r.trim)return t.trim()!==e.trim()}return t!==e}(n,e))}var Kr={create:Wr,update:Wr},Zr=k((function(n){var e={},t=/:(.+)/;return n.split(/;(?![^(]*\))/g).forEach((function(n){if(n){var r=n.split(t);r.length>1&&(e[r[0].trim()]=r[1].trim())}})),e}));function Yr(n){var e=Xr(n.style);return n.staticStyle?P(n.staticStyle,e):e}function Xr(n){return Array.isArray(n)?C(n):"string"==typeof n?Zr(n):n}var Qr,no=/^--/,eo=/\s*!important$/,to=function(n,e,t){if(no.test(e))n.style.setProperty(e,t);else if(eo.test(t))n.style.setProperty(I(e),t.replace(eo,""),"important");else{var r=oo(e);if(Array.isArray(t))for(var o=0,a=t.length;o<a;o++)n.style[r]=t[o];else n.style[r]=t}},ro=["Webkit","Moz","ms"],oo=k((function(n){if(Qr=Qr||document.createElement("div").style,"filter"!==(n=E(n))&&n in Qr)return n;for(var e=n.charAt(0).toUpperCase()+n.slice(1),t=0;t<ro.length;t++){var r=ro[t]+e;if(r in Qr)return r}}));function ao(n,e){var t=e.data,r=n.data;if(!(a(t.staticStyle)&&a(t.style)&&a(r.staticStyle)&&a(r.style))){var o,s,l=e.elm,c=r.staticStyle,u=r.normalizedStyle||r.style||{},p=c||u,d=Xr(e.data.style)||{};e.data.normalizedStyle=i(d.__ob__)?P({},d):d;var m=function(n,e){var t,r={};if(e)for(var o=n;o.componentInstance;)(o=o.componentInstance._vnode)&&o.data&&(t=Yr(o.data))&&P(r,t);(t=Yr(n.data))&&P(r,t);for(var a=n;a=a.parent;)a.data&&(t=Yr(a.data))&&P(r,t);return r}(e,!0);for(s in p)a(m[s])&&to(l,s,"");for(s in m)(o=m[s])!==p[s]&&to(l,s,null==o?"":o)}}var io={create:ao,update:ao},so=/\s+/;function lo(n,e){if(e&&(e=e.trim()))if(n.classList)e.indexOf(" ")>-1?e.split(so).forEach((function(e){return n.classList.add(e)})):n.classList.add(e);else{var t=" ".concat(n.getAttribute("class")||""," ");t.indexOf(" "+e+" ")<0&&n.setAttribute("class",(t+e).trim())}}function co(n,e){if(e&&(e=e.trim()))if(n.classList)e.indexOf(" ")>-1?e.split(so).forEach((function(e){return n.classList.remove(e)})):n.classList.remove(e),n.classList.length||n.removeAttribute("class");else{for(var t=" ".concat(n.getAttribute("class")||""," "),r=" "+e+" ";t.indexOf(r)>=0;)t=t.replace(r," ");(t=t.trim())?n.setAttribute("class",t):n.removeAttribute("class")}}function uo(n){if(n){if("object"==typeof n){var e={};return!1!==n.css&&P(e,po(n.name||"v")),P(e,n),e}return"string"==typeof n?po(n):void 0}}var po=k((function(n){return{enterClass:"".concat(n,"-enter"),enterToClass:"".concat(n,"-enter-to"),enterActiveClass:"".concat(n,"-enter-active"),leaveClass:"".concat(n,"-leave"),leaveToClass:"".concat(n,"-leave-to"),leaveActiveClass:"".concat(n,"-leave-active")}})),mo=V&&!Y,fo="transition",go="transitionend",ho="animation",yo="animationend";mo&&(void 0===window.ontransitionend&&void 0!==window.onwebkittransitionend&&(fo="WebkitTransition",go="webkitTransitionEnd"),void 0===window.onanimationend&&void 0!==window.onwebkitanimationend&&(ho="WebkitAnimation",yo="webkitAnimationEnd"));var bo=V?window.requestAnimationFrame?window.requestAnimationFrame.bind(window):setTimeout:function(n){return n()};function vo(n){bo((function(){bo(n)}))}function xo(n,e){var t=n._transitionClasses||(n._transitionClasses=[]);t.indexOf(e)<0&&(t.push(e),lo(n,e))}function wo(n,e){n._transitionClasses&&x(n._transitionClasses,e),co(n,e)}function jo(n,e,t){var r=So(n,e),o=r.type,a=r.timeout,i=r.propCount;if(!o)return t();var s="transition"===o?go:yo,l=0,c=function(){n.removeEventListener(s,u),t()},u=function(e){e.target===n&&++l>=i&&c()};setTimeout((function(){l<i&&c()}),a+1),n.addEventListener(s,u)}var ko=/\b(transform|all)(,|$)/;function So(n,e){var t,r=window.getComputedStyle(n),o=(r[fo+"Delay"]||"").split(", "),a=(r[fo+"Duration"]||"").split(", "),i=Eo(o,a),s=(r[ho+"Delay"]||"").split(", "),l=(r[ho+"Duration"]||"").split(", "),c=Eo(s,l),u=0,p=0;return"transition"===e?i>0&&(t="transition",u=i,p=a.length):"animation"===e?c>0&&(t="animation",u=c,p=l.length):p=(t=(u=Math.max(i,c))>0?i>c?"transition":"animation":null)?"transition"===t?a.length:l.length:0,{type:t,timeout:u,propCount:p,hasTransform:"transition"===t&&ko.test(r[fo+"Property"])}}function Eo(n,e){for(;n.length<e.length;)n=n.concat(n);return Math.max.apply(null,e.map((function(e,t){return Ao(e)+Ao(n[t])})))}function Ao(n){return 1e3*Number(n.slice(0,-1).replace(",","."))}function To(n,e){var t=n.elm;i(t._leaveCb)&&(t._leaveCb.cancelled=!0,t._leaveCb());var r=uo(n.data.transition);if(!a(r)&&!i(t._enterCb)&&1===t.nodeType){for(var o=r.css,s=r.type,l=r.enterClass,p=r.enterToClass,d=r.enterActiveClass,m=r.appearClass,f=r.appearToClass,g=r.appearActiveClass,h=r.beforeEnter,b=r.enter,v=r.afterEnter,x=r.enterCancelled,w=r.beforeAppear,j=r.appear,k=r.afterAppear,S=r.appearCancelled,E=r.duration,A=Ke,T=Ke.$vnode;T&&T.parent;)A=T.context,T=T.parent;var I=!A._isMounted||!n.isRootInsert;if(!I||j||""===j){var _=I&&m?m:l,M=I&&g?g:d,P=I&&f?f:p,C=I&&w||h,O=I&&c(j)?j:b,z=I&&k||v,D=I&&S||x,B=y(u(E)?E.enter:E);0;var $=!1!==o&&!Y,G=Mo(O),F=t._enterCb=N((function(){$&&(wo(t,P),wo(t,M)),F.cancelled?($&&wo(t,_),D&&D(t)):z&&z(t),t._enterCb=null}));n.data.show||Jn(n,"insert",(function(){var e=t.parentNode,r=e&&e._pending&&e._pending[n.key];r&&r.tag===n.tag&&r.elm._leaveCb&&r.elm._leaveCb(),O&&O(t,F)})),C&&C(t),$&&(xo(t,_),xo(t,M),vo((function(){wo(t,_),F.cancelled||(xo(t,P),G||(_o(B)?setTimeout(F,B):jo(t,s,F)))}))),n.data.show&&(e&&e(),O&&O(t,F)),$||G||F()}}}function Io(n,e){var t=n.elm;i(t._enterCb)&&(t._enterCb.cancelled=!0,t._enterCb());var r=uo(n.data.transition);if(a(r)||1!==t.nodeType)return e();if(!i(t._leaveCb)){var o=r.css,s=r.type,l=r.leaveClass,c=r.leaveToClass,p=r.leaveActiveClass,d=r.beforeLeave,m=r.leave,f=r.afterLeave,g=r.leaveCancelled,h=r.delayLeave,b=r.duration,v=!1!==o&&!Y,x=Mo(m),w=y(u(b)?b.leave:b);0;var j=t._leaveCb=N((function(){t.parentNode&&t.parentNode._pending&&(t.parentNode._pending[n.key]=null),v&&(wo(t,c),wo(t,p)),j.cancelled?(v&&wo(t,l),g&&g(t)):(e(),f&&f(t)),t._leaveCb=null}));h?h(k):k()}function k(){j.cancelled||(!n.data.show&&t.parentNode&&((t.parentNode._pending||(t.parentNode._pending={}))[n.key]=n),d&&d(t),v&&(xo(t,l),xo(t,p),vo((function(){wo(t,l),j.cancelled||(xo(t,c),x||(_o(w)?setTimeout(j,w):jo(t,s,j)))}))),m&&m(t,j),v||x||j())}}function _o(n){return"number"==typeof n&&!isNaN(n)}function Mo(n){if(a(n))return!1;var e=n.fns;return i(e)?Mo(Array.isArray(e)?e[0]:e):(n._length||n.length)>1}function Po(n,e){!0!==e.data.show&&To(e)}var Co=function(n){var e,t,r={},c=n.modules,u=n.nodeOps;for(e=0;e<kr.length;++e)for(r[kr[e]]=[],t=0;t<c.length;++t)i(c[t][kr[e]])&&r[kr[e]].push(c[t][kr[e]]);function p(n){var e=u.parentNode(n);i(e)&&u.removeChild(e,n)}function d(n,e,t,o,a,l,c){if(i(n.elm)&&i(l)&&(n=l[c]=hn(n)),n.isRootInsert=!a,!function(n,e,t,o){var a=n.data;if(i(a)){var l=i(n.componentInstance)&&a.keepAlive;if(i(a=a.hook)&&i(a=a.init)&&a(n,!1),i(n.componentInstance))return m(n,e),f(t,n.elm,o),s(l)&&function(n,e,t,o){var a,s=n;for(;s.componentInstance;)if(s=s.componentInstance._vnode,i(a=s.data)&&i(a=a.transition)){for(a=0;a<r.activate.length;++a)r.activate[a](jr,s);e.push(s);break}f(t,n.elm,o)}(n,e,t,o),!0}}(n,e,t,o)){var p=n.data,d=n.children,h=n.tag;i(h)?(n.elm=n.ns?u.createElementNS(n.ns,h):u.createElement(h,n),v(n),g(n,d,e),i(p)&&y(n,e),f(t,n.elm,o)):s(n.isComment)?(n.elm=u.createComment(n.text),f(t,n.elm,o)):(n.elm=u.createTextNode(n.text),f(t,n.elm,o))}}function m(n,e){i(n.data.pendingInsert)&&(e.push.apply(e,n.data.pendingInsert),n.data.pendingInsert=null),n.elm=n.componentInstance.$el,h(n)?(y(n,e),v(n)):(xr(n),e.push(n))}function f(n,e,t){i(n)&&(i(t)?u.parentNode(t)===n&&u.insertBefore(n,e,t):u.appendChild(n,e))}function g(n,e,t){if(o(e)){0;for(var r=0;r<e.length;++r)d(e[r],t,n.elm,null,!0,e,r)}else l(n.text)&&u.appendChild(n.elm,u.createTextNode(String(n.text)))}function h(n){for(;n.componentInstance;)n=n.componentInstance._vnode;return i(n.tag)}function y(n,t){for(var o=0;o<r.create.length;++o)r.create[o](jr,n);i(e=n.data.hook)&&(i(e.create)&&e.create(jr,n),i(e.insert)&&t.push(n))}function v(n){var e;if(i(e=n.fnScopeId))u.setStyleScope(n.elm,e);else for(var t=n;t;)i(e=t.context)&&i(e=e.$options._scopeId)&&u.setStyleScope(n.elm,e),t=t.parent;i(e=Ke)&&e!==n.context&&e!==n.fnContext&&i(e=e.$options._scopeId)&&u.setStyleScope(n.elm,e)}function x(n,e,t,r,o,a){for(;r<=o;++r)d(t[r],a,n,e,!1,t,r)}function w(n){var e,t,o=n.data;if(i(o))for(i(e=o.hook)&&i(e=e.destroy)&&e(n),e=0;e<r.destroy.length;++e)r.destroy[e](n);if(i(e=n.children))for(t=0;t<n.children.length;++t)w(n.children[t])}function j(n,e,t){for(;e<=t;++e){var r=n[e];i(r)&&(i(r.tag)?(k(r),w(r)):p(r.elm))}}function k(n,e){if(i(e)||i(n.data)){var t,o=r.remove.length+1;for(i(e)?e.listeners+=o:e=function(n,e){function t(){0==--t.listeners&&p(n)}return t.listeners=e,t}(n.elm,o),i(t=n.componentInstance)&&i(t=t._vnode)&&i(t.data)&&k(t,e),t=0;t<r.remove.length;++t)r.remove[t](n,e);i(t=n.data.hook)&&i(t=t.remove)?t(n,e):e()}else p(n.elm)}function S(n,e,t,r){for(var o=t;o<r;o++){var a=e[o];if(i(a)&&Sr(n,a))return o}}function E(n,e,t,o,l,c){if(n!==e){i(e.elm)&&i(o)&&(e=o[l]=hn(e));var p=e.elm=n.elm;if(s(n.isAsyncPlaceholder))i(e.asyncFactory.resolved)?I(n.elm,e,t):e.isAsyncPlaceholder=!0;else if(s(e.isStatic)&&s(n.isStatic)&&e.key===n.key&&(s(e.isCloned)||s(e.isOnce)))e.componentInstance=n.componentInstance;else{var m,f=e.data;i(f)&&i(m=f.hook)&&i(m=m.prepatch)&&m(n,e);var g=n.children,y=e.children;if(i(f)&&h(e)){for(m=0;m<r.update.length;++m)r.update[m](n,e);i(m=f.hook)&&i(m=m.update)&&m(n,e)}a(e.text)?i(g)&&i(y)?g!==y&&function(n,e,t,r,o){var s,l,c,p=0,m=0,f=e.length-1,g=e[0],h=e[f],y=t.length-1,b=t[0],v=t[y],w=!o;for(0;p<=f&&m<=y;)a(g)?g=e[++p]:a(h)?h=e[--f]:Sr(g,b)?(E(g,b,r,t,m),g=e[++p],b=t[++m]):Sr(h,v)?(E(h,v,r,t,y),h=e[--f],v=t[--y]):Sr(g,v)?(E(g,v,r,t,y),w&&u.insertBefore(n,g.elm,u.nextSibling(h.elm)),g=e[++p],v=t[--y]):Sr(h,b)?(E(h,b,r,t,m),w&&u.insertBefore(n,h.elm,g.elm),h=e[--f],b=t[++m]):(a(s)&&(s=Er(e,p,f)),a(l=i(b.key)?s[b.key]:S(b,e,p,f))?d(b,r,n,g.elm,!1,t,m):Sr(c=e[l],b)?(E(c,b,r,t,m),e[l]=void 0,w&&u.insertBefore(n,c.elm,g.elm)):d(b,r,n,g.elm,!1,t,m),b=t[++m]);p>f?x(n,a(t[y+1])?null:t[y+1].elm,t,m,y,r):m>y&&j(e,p,f)}(p,g,y,t,c):i(y)?(i(n.text)&&u.setTextContent(p,""),x(p,null,y,0,y.length-1,t)):i(g)?j(g,0,g.length-1):i(n.text)&&u.setTextContent(p,""):n.text!==e.text&&u.setTextContent(p,e.text),i(f)&&i(m=f.hook)&&i(m=m.postpatch)&&m(n,e)}}}function A(n,e,t){if(s(t)&&i(n.parent))n.parent.data.pendingInsert=e;else for(var r=0;r<e.length;++r)e[r].data.hook.insert(e[r])}var T=b("attrs,class,staticClass,staticStyle,key");function I(n,e,t,r){var o,a=e.tag,l=e.data,c=e.children;if(r=r||l&&l.pre,e.elm=n,s(e.isComment)&&i(e.asyncFactory))return e.isAsyncPlaceholder=!0,!0;if(i(l)&&(i(o=l.hook)&&i(o=o.init)&&o(e,!0),i(o=e.componentInstance)))return m(e,t),!0;if(i(a)){if(i(c))if(n.hasChildNodes())if(i(o=l)&&i(o=o.domProps)&&i(o=o.innerHTML)){if(o!==n.innerHTML)return!1}else{for(var u=!0,p=n.firstChild,d=0;d<c.length;d++){if(!p||!I(p,c[d],t,r)){u=!1;break}p=p.nextSibling}if(!u||p)return!1}else g(e,c,t);if(i(l)){var f=!1;for(var h in l)if(!T(h)){f=!0,y(e,t);break}!f&&l.class&&Re(l.class)}}else n.data!==e.text&&(n.data=e.text);return!0}return function(n,e,t,o){if(!a(e)){var l,c=!1,p=[];if(a(n))c=!0,d(e,p);else{var m=i(n.nodeType);if(!m&&Sr(n,e))E(n,e,p,null,null,o);else{if(m){if(1===n.nodeType&&n.hasAttribute("data-server-rendered")&&(n.removeAttribute("data-server-rendered"),t=!0),s(t)&&I(n,e,p))return A(e,p,!0),n;l=n,n=new mn(u.tagName(l).toLowerCase(),{},[],void 0,l)}var f=n.elm,g=u.parentNode(f);if(d(e,p,f._leaveCb?null:g,u.nextSibling(f)),i(e.parent))for(var y=e.parent,b=h(e);y;){for(var v=0;v<r.destroy.length;++v)r.destroy[v](y);if(y.elm=e.elm,b){for(var x=0;x<r.create.length;++x)r.create[x](jr,y);var k=y.data.hook.insert;if(k.merged)for(var S=1;S<k.fns.length;S++)k.fns[S]()}else xr(y);y=y.parent}i(g)?j([n],0,0):i(n.tag)&&w(n)}}return A(e,p,c),e.elm}i(n)&&w(n)}}({nodeOps:br,modules:[Br,Gr,Jr,Kr,io,V?{create:Po,activate:Po,remove:function(n,e){!0!==n.data.show?Io(n,e):e()}}:{}].concat(Cr)});Y&&document.addEventListener("selectionchange",(function(){var n=document.activeElement;n&&n.vmodel&&Fo(n,"input")}));var Oo={inserted:function(n,e,t,r){"select"===t.tag?(r.elm&&!r.elm._vOptions?Jn(t,"postpatch",(function(){Oo.componentUpdated(n,e,t)})):zo(n,e,t.context),n._vOptions=[].map.call(n.options,$o)):("textarea"===t.tag||yr(n.type))&&(n._vModifiers=e.modifiers,e.modifiers.lazy||(n.addEventListener("compositionstart",No),n.addEventListener("compositionend",Go),n.addEventListener("change",Go),Y&&(n.vmodel=!0)))},componentUpdated:function(n,e,t){if("select"===t.tag){zo(n,e,t.context);var r=n._vOptions,o=n._vOptions=[].map.call(n.options,$o);if(o.some((function(n,e){return!B(n,r[e])})))(n.multiple?e.value.some((function(n){return Bo(n,o)})):e.value!==e.oldValue&&Bo(e.value,o))&&Fo(n,"change")}}};function zo(n,e,t){Do(n,e,t),(Z||X)&&setTimeout((function(){Do(n,e,t)}),0)}function Do(n,e,t){var r=e.value,o=n.multiple;if(!o||Array.isArray(r)){for(var a,i,s=0,l=n.options.length;s<l;s++)if(i=n.options[s],o)a=$(r,$o(i))>-1,i.selected!==a&&(i.selected=a);else if(B($o(i),r))return void(n.selectedIndex!==s&&(n.selectedIndex=s));o||(n.selectedIndex=-1)}}function Bo(n,e){return e.every((function(e){return!B(e,n)}))}function $o(n){return"_value"in n?n._value:n.value}function No(n){n.target.composing=!0}function Go(n){n.target.composing&&(n.target.composing=!1,Fo(n.target,"input"))}function Fo(n,e){var t=document.createEvent("HTMLEvents");t.initEvent(e,!0,!0),n.dispatchEvent(t)}function Ro(n){return!n.componentInstance||n.data&&n.data.transition?n:Ro(n.componentInstance._vnode)}var Uo={model:Oo,show:{bind:function(n,e,t){var r=e.value,o=(t=Ro(t)).data&&t.data.transition,a=n.__vOriginalDisplay="none"===n.style.display?"":n.style.display;r&&o?(t.data.show=!0,To(t,(function(){n.style.display=a}))):n.style.display=r?a:"none"},update:function(n,e,t){var r=e.value;!r!=!e.oldValue&&((t=Ro(t)).data&&t.data.transition?(t.data.show=!0,r?To(t,(function(){n.style.display=n.__vOriginalDisplay})):Io(t,(function(){n.style.display="none"}))):n.style.display=r?n.__vOriginalDisplay:"none")},unbind:function(n,e,t,r,o){o||(n.style.display=n.__vOriginalDisplay)}}},Lo={name:String,appear:Boolean,css:Boolean,mode:String,type:String,enterClass:String,leaveClass:String,enterToClass:String,leaveToClass:String,enterActiveClass:String,leaveActiveClass:String,appearClass:String,appearActiveClass:String,appearToClass:String,duration:[Number,String,Object]};function qo(n){var e=n&&n.componentOptions;return e&&e.Ctor.options.abstract?qo(ke(e.children)):n}function Ho(n){var e={},t=n.$options;for(var r in t.propsData)e[r]=n[r];var o=t._parentListeners;for(var r in o)e[E(r)]=o[r];return e}function Jo(n,e){if(/\d-keep-alive$/.test(e.tag))return n("keep-alive",{props:e.componentOptions.propsData})}var Wo=function(n){return n.tag||me(n)},Vo=function(n){return"show"===n.name},Ko={name:"transition",props:Lo,abstract:!0,render:function(n){var e=this,t=this.$slots.default;if(t&&(t=t.filter(Wo)).length){0;var r=this.mode;0;var o=t[0];if(function(n){for(;n=n.parent;)if(n.data.transition)return!0}(this.$vnode))return o;var a=qo(o);if(!a)return o;if(this._leaving)return Jo(n,o);var i="__transition-".concat(this._uid,"-");a.key=null==a.key?a.isComment?i+"comment":i+a.tag:l(a.key)?0===String(a.key).indexOf(i)?a.key:i+a.key:a.key;var s=(a.data||(a.data={})).transition=Ho(this),c=this._vnode,u=qo(c);if(a.data.directives&&a.data.directives.some(Vo)&&(a.data.show=!0),u&&u.data&&!function(n,e){return e.key===n.key&&e.tag===n.tag}(a,u)&&!me(u)&&(!u.componentInstance||!u.componentInstance._vnode.isComment)){var p=u.data.transition=P({},s);if("out-in"===r)return this._leaving=!0,Jn(p,"afterLeave",(function(){e._leaving=!1,e.$forceUpdate()})),Jo(n,o);if("in-out"===r){if(me(a))return c;var d,m=function(){d()};Jn(s,"afterEnter",m),Jn(s,"enterCancelled",m),Jn(p,"delayLeave",(function(n){d=n}))}}return o}}},Zo=P({tag:String,moveClass:String},Lo);function Yo(n){n.elm._moveCb&&n.elm._moveCb(),n.elm._enterCb&&n.elm._enterCb()}function Xo(n){n.data.newPos=n.elm.getBoundingClientRect()}function Qo(n){var e=n.data.pos,t=n.data.newPos,r=e.left-t.left,o=e.top-t.top;if(r||o){n.data.moved=!0;var a=n.elm.style;a.transform=a.WebkitTransform="translate(".concat(r,"px,").concat(o,"px)"),a.transitionDuration="0s"}}delete Zo.mode;var na={Transition:Ko,TransitionGroup:{props:Zo,beforeMount:function(){var n=this,e=this._update;this._update=function(t,r){var o=Ze(n);n.__patch__(n._vnode,n.kept,!1,!0),n._vnode=n.kept,o(),e.call(n,t,r)}},render:function(n){for(var e=this.tag||this.$vnode.data.tag||"span",t=Object.create(null),r=this.prevChildren=this.children,o=this.$slots.default||[],a=this.children=[],i=Ho(this),s=0;s<o.length;s++){if((u=o[s]).tag)if(null!=u.key&&0!==String(u.key).indexOf("__vlist"))a.push(u),t[u.key]=u,(u.data||(u.data={})).transition=i;else;}if(r){var l=[],c=[];for(s=0;s<r.length;s++){var u;(u=r[s]).data.transition=i,u.data.pos=u.elm.getBoundingClientRect(),t[u.key]?l.push(u):c.push(u)}this.kept=n(e,null,l),this.removed=c}return n(e,null,a)},updated:function(){var n=this.prevChildren,e=this.moveClass||(this.name||"v")+"-move";n.length&&this.hasMove(n[0].elm,e)&&(n.forEach(Yo),n.forEach(Xo),n.forEach(Qo),this._reflow=document.body.offsetHeight,n.forEach((function(n){if(n.data.moved){var t=n.elm,r=t.style;xo(t,e),r.transform=r.WebkitTransform=r.transitionDuration="",t.addEventListener(go,t._moveCb=function n(r){r&&r.target!==t||r&&!/transform$/.test(r.propertyName)||(t.removeEventListener(go,n),t._moveCb=null,wo(t,e))})}})))},methods:{hasMove:function(n,e){if(!mo)return!1;if(this._hasMove)return this._hasMove;var t=n.cloneNode();n._transitionClasses&&n._transitionClasses.forEach((function(n){co(t,n)})),lo(t,e),t.style.display="none",this.$el.appendChild(t);var r=So(t);return this.$el.removeChild(t),this._hasMove=r.hasTransform}}}};function ea(n,e){for(var t in e)n[t]=e[t];return n}Ht.config.mustUseProp=function(n,e,t){return"value"===t&&nr(n)&&"button"!==e||"selected"===t&&"option"===n||"checked"===t&&"input"===n||"muted"===t&&"video"===n},Ht.config.isReservedTag=gr,Ht.config.isReservedAttr=Qt,Ht.config.getTagNamespace=function(n){return fr(n)?"svg":"math"===n?"math":void 0},Ht.config.isUnknownElement=function(n){if(!V)return!0;if(gr(n))return!1;if(n=n.toLowerCase(),null!=hr[n])return hr[n];var e=document.createElement(n);return n.indexOf("-")>-1?hr[n]=e.constructor===window.HTMLUnknownElement||e.constructor===window.HTMLElement:hr[n]=/HTMLUnknownElement/.test(e.toString())},P(Ht.options.directives,Uo),P(Ht.options.components,na),Ht.prototype.__patch__=V?Co:O,Ht.prototype.$mount=function(n,e){return function(n,e,t){var r;n.$el=e,n.$options.render||(n.$options.render=fn),Qe(n,"beforeMount"),r=function(){n._update(n._render(),t)},new qe(n,r,O,{before:function(){n._isMounted&&!n._isDestroyed&&Qe(n,"beforeUpdate")}},!0),t=!1;var o=n._preWatchers;if(o)for(var a=0;a<o.length;a++)o[a].run();return null==n.$vnode&&(n._isMounted=!0,Qe(n,"mounted")),n}(this,n=n&&V?function(n){if("string"==typeof n){var e=document.querySelector(n);return e||document.createElement("div")}return n}(n):void 0,e)},V&&setTimeout((function(){U.devtools&&sn&&sn.emit("init",Ht)}),0);var ta=/[!'()*]/g,ra=function(n){return"%"+n.charCodeAt(0).toString(16)},oa=/%2C/g,aa=function(n){return encodeURIComponent(n).replace(ta,ra).replace(oa,",")};function ia(n){try{return decodeURIComponent(n)}catch(n){0}return n}var sa=function(n){return null==n||"object"==typeof n?n:String(n)};function la(n){var e={};return(n=n.trim().replace(/^(\?|#|&)/,""))?(n.split("&").forEach((function(n){var t=n.replace(/\+/g," ").split("="),r=ia(t.shift()),o=t.length>0?ia(t.join("=")):null;void 0===e[r]?e[r]=o:Array.isArray(e[r])?e[r].push(o):e[r]=[e[r],o]})),e):e}function ca(n){var e=n?Object.keys(n).map((function(e){var t=n[e];if(void 0===t)return"";if(null===t)return aa(e);if(Array.isArray(t)){var r=[];return t.forEach((function(n){void 0!==n&&(null===n?r.push(aa(e)):r.push(aa(e)+"="+aa(n)))})),r.join("&")}return aa(e)+"="+aa(t)})).filter((function(n){return n.length>0})).join("&"):null;return e?"?"+e:""}var ua=/\/?$/;function pa(n,e,t,r){var o=r&&r.options.stringifyQuery,a=e.query||{};try{a=da(a)}catch(n){}var i={name:e.name||n&&n.name,meta:n&&n.meta||{},path:e.path||"/",hash:e.hash||"",query:a,params:e.params||{},fullPath:ga(e,o),matched:n?fa(n):[]};return t&&(i.redirectedFrom=ga(t,o)),Object.freeze(i)}function da(n){if(Array.isArray(n))return n.map(da);if(n&&"object"==typeof n){var e={};for(var t in n)e[t]=da(n[t]);return e}return n}var ma=pa(null,{path:"/"});function fa(n){for(var e=[];n;)e.unshift(n),n=n.parent;return e}function ga(n,e){var t=n.path,r=n.query;void 0===r&&(r={});var o=n.hash;return void 0===o&&(o=""),(t||"/")+(e||ca)(r)+o}function ha(n,e,t){return e===ma?n===e:!!e&&(n.path&&e.path?n.path.replace(ua,"")===e.path.replace(ua,"")&&(t||n.hash===e.hash&&ya(n.query,e.query)):!(!n.name||!e.name)&&(n.name===e.name&&(t||n.hash===e.hash&&ya(n.query,e.query)&&ya(n.params,e.params))))}function ya(n,e){if(void 0===n&&(n={}),void 0===e&&(e={}),!n||!e)return n===e;var t=Object.keys(n).sort(),r=Object.keys(e).sort();return t.length===r.length&&t.every((function(t,o){var a=n[t];if(r[o]!==t)return!1;var i=e[t];return null==a||null==i?a===i:"object"==typeof a&&"object"==typeof i?ya(a,i):String(a)===String(i)}))}function ba(n){for(var e=0;e<n.matched.length;e++){var t=n.matched[e];for(var r in t.instances){var o=t.instances[r],a=t.enteredCbs[r];if(o&&a){delete t.enteredCbs[r];for(var i=0;i<a.length;i++)o._isBeingDestroyed||a[i](o)}}}}var va={name:"RouterView",functional:!0,props:{name:{type:String,default:"default"}},render:function(n,e){var t=e.props,r=e.children,o=e.parent,a=e.data;a.routerView=!0;for(var i=o.$createElement,s=t.name,l=o.$route,c=o._routerViewCache||(o._routerViewCache={}),u=0,p=!1;o&&o._routerRoot!==o;){var d=o.$vnode?o.$vnode.data:{};d.routerView&&u++,d.keepAlive&&o._directInactive&&o._inactive&&(p=!0),o=o.$parent}if(a.routerViewDepth=u,p){var m=c[s],f=m&&m.component;return f?(m.configProps&&xa(f,a,m.route,m.configProps),i(f,a,r)):i()}var g=l.matched[u],h=g&&g.components[s];if(!g||!h)return c[s]=null,i();c[s]={component:h},a.registerRouteInstance=function(n,e){var t=g.instances[s];(e&&t!==n||!e&&t===n)&&(g.instances[s]=e)},(a.hook||(a.hook={})).prepatch=function(n,e){g.instances[s]=e.componentInstance},a.hook.init=function(n){n.data.keepAlive&&n.componentInstance&&n.componentInstance!==g.instances[s]&&(g.instances[s]=n.componentInstance),ba(l)};var y=g.props&&g.props[s];return y&&(ea(c[s],{route:l,configProps:y}),xa(h,a,l,y)),i(h,a,r)}};function xa(n,e,t,r){var o=e.props=function(n,e){switch(typeof e){case"undefined":return;case"object":return e;case"function":return e(n);case"boolean":return e?n.params:void 0;default:0}}(t,r);if(o){o=e.props=ea({},o);var a=e.attrs=e.attrs||{};for(var i in o)n.props&&i in n.props||(a[i]=o[i],delete o[i])}}function wa(n,e,t){var r=n.charAt(0);if("/"===r)return n;if("?"===r||"#"===r)return e+n;var o=e.split("/");t&&o[o.length-1]||o.pop();for(var a=n.replace(/^\//,"").split("/"),i=0;i<a.length;i++){var s=a[i];".."===s?o.pop():"."!==s&&o.push(s)}return""!==o[0]&&o.unshift(""),o.join("/")}function ja(n){return n.replace(/\/(?:\s*\/)+/g,"/")}var ka=Array.isArray||function(n){return"[object Array]"==Object.prototype.toString.call(n)},Sa=Na,Ea=Ma,Aa=function(n,e){return Ca(Ma(n,e),e)},Ta=Ca,Ia=$a,_a=new RegExp(["(\\\\.)","([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))"].join("|"),"g");function Ma(n,e){for(var t,r=[],o=0,a=0,i="",s=e&&e.delimiter||"/";null!=(t=_a.exec(n));){var l=t[0],c=t[1],u=t.index;if(i+=n.slice(a,u),a=u+l.length,c)i+=c[1];else{var p=n[a],d=t[2],m=t[3],f=t[4],g=t[5],h=t[6],y=t[7];i&&(r.push(i),i="");var b=null!=d&&null!=p&&p!==d,v="+"===h||"*"===h,x="?"===h||"*"===h,w=t[2]||s,j=f||g;r.push({name:m||o++,prefix:d||"",delimiter:w,optional:x,repeat:v,partial:b,asterisk:!!y,pattern:j?za(j):y?".*":"[^"+Oa(w)+"]+?"})}}return a<n.length&&(i+=n.substr(a)),i&&r.push(i),r}function Pa(n){return encodeURI(n).replace(/[\/?#]/g,(function(n){return"%"+n.charCodeAt(0).toString(16).toUpperCase()}))}function Ca(n,e){for(var t=new Array(n.length),r=0;r<n.length;r++)"object"==typeof n[r]&&(t[r]=new RegExp("^(?:"+n[r].pattern+")$",Ba(e)));return function(e,r){for(var o="",a=e||{},i=(r||{}).pretty?Pa:encodeURIComponent,s=0;s<n.length;s++){var l=n[s];if("string"!=typeof l){var c,u=a[l.name];if(null==u){if(l.optional){l.partial&&(o+=l.prefix);continue}throw new TypeError('Expected "'+l.name+'" to be defined')}if(ka(u)){if(!l.repeat)throw new TypeError('Expected "'+l.name+'" to not repeat, but received `'+JSON.stringify(u)+"`");if(0===u.length){if(l.optional)continue;throw new TypeError('Expected "'+l.name+'" to not be empty')}for(var p=0;p<u.length;p++){if(c=i(u[p]),!t[s].test(c))throw new TypeError('Expected all "'+l.name+'" to match "'+l.pattern+'", but received `'+JSON.stringify(c)+"`");o+=(0===p?l.prefix:l.delimiter)+c}}else{if(c=l.asterisk?encodeURI(u).replace(/[?#]/g,(function(n){return"%"+n.charCodeAt(0).toString(16).toUpperCase()})):i(u),!t[s].test(c))throw new TypeError('Expected "'+l.name+'" to match "'+l.pattern+'", but received "'+c+'"');o+=l.prefix+c}}else o+=l}return o}}function Oa(n){return n.replace(/([.+*?=^!:${}()[\]|\/\\])/g,"\\$1")}function za(n){return n.replace(/([=!:$\/()])/g,"\\$1")}function Da(n,e){return n.keys=e,n}function Ba(n){return n&&n.sensitive?"":"i"}function $a(n,e,t){ka(e)||(t=e||t,e=[]);for(var r=(t=t||{}).strict,o=!1!==t.end,a="",i=0;i<n.length;i++){var s=n[i];if("string"==typeof s)a+=Oa(s);else{var l=Oa(s.prefix),c="(?:"+s.pattern+")";e.push(s),s.repeat&&(c+="(?:"+l+c+")*"),a+=c=s.optional?s.partial?l+"("+c+")?":"(?:"+l+"("+c+"))?":l+"("+c+")"}}var u=Oa(t.delimiter||"/"),p=a.slice(-u.length)===u;return r||(a=(p?a.slice(0,-u.length):a)+"(?:"+u+"(?=$))?"),a+=o?"$":r&&p?"":"(?="+u+"|$)",Da(new RegExp("^"+a,Ba(t)),e)}function Na(n,e,t){return ka(e)||(t=e||t,e=[]),t=t||{},n instanceof RegExp?function(n,e){var t=n.source.match(/\((?!\?)/g);if(t)for(var r=0;r<t.length;r++)e.push({name:r,prefix:null,delimiter:null,optional:!1,repeat:!1,partial:!1,asterisk:!1,pattern:null});return Da(n,e)}(n,e):ka(n)?function(n,e,t){for(var r=[],o=0;o<n.length;o++)r.push(Na(n[o],e,t).source);return Da(new RegExp("(?:"+r.join("|")+")",Ba(t)),e)}(n,e,t):function(n,e,t){return $a(Ma(n,t),e,t)}(n,e,t)}Sa.parse=Ea,Sa.compile=Aa,Sa.tokensToFunction=Ta,Sa.tokensToRegExp=Ia;var Ga=Object.create(null);function Fa(n,e,t){e=e||{};try{var r=Ga[n]||(Ga[n]=Sa.compile(n));return"string"==typeof e.pathMatch&&(e[0]=e.pathMatch),r(e,{pretty:!0})}catch(n){return""}finally{delete e[0]}}function Ra(n,e,t,r){var o="string"==typeof n?{path:n}:n;if(o._normalized)return o;if(o.name){var a=(o=ea({},n)).params;return a&&"object"==typeof a&&(o.params=ea({},a)),o}if(!o.path&&o.params&&e){(o=ea({},o))._normalized=!0;var i=ea(ea({},e.params),o.params);if(e.name)o.name=e.name,o.params=i;else if(e.matched.length){var s=e.matched[e.matched.length-1].path;o.path=Fa(s,i,e.path)}else 0;return o}var l=function(n){var e="",t="",r=n.indexOf("#");r>=0&&(e=n.slice(r),n=n.slice(0,r));var o=n.indexOf("?");return o>=0&&(t=n.slice(o+1),n=n.slice(0,o)),{path:n,query:t,hash:e}}(o.path||""),c=e&&e.path||"/",u=l.path?wa(l.path,c,t||o.append):c,p=function(n,e,t){void 0===e&&(e={});var r,o=t||la;try{r=o(n||"")}catch(n){r={}}for(var a in e){var i=e[a];r[a]=Array.isArray(i)?i.map(sa):sa(i)}return r}(l.query,o.query,r&&r.options.parseQuery),d=o.hash||l.hash;return d&&"#"!==d.charAt(0)&&(d="#"+d),{_normalized:!0,path:u,query:p,hash:d}}var Ua,La=function(){},qa={name:"RouterLink",props:{to:{type:[String,Object],required:!0},tag:{type:String,default:"a"},custom:Boolean,exact:Boolean,exactPath:Boolean,append:Boolean,replace:Boolean,activeClass:String,exactActiveClass:String,ariaCurrentValue:{type:String,default:"page"},event:{type:[String,Array],default:"click"}},render:function(n){var e=this,t=this.$router,r=this.$route,o=t.resolve(this.to,r,this.append),a=o.location,i=o.route,s=o.href,l={},c=t.options.linkActiveClass,u=t.options.linkExactActiveClass,p=null==c?"router-link-active":c,d=null==u?"router-link-exact-active":u,m=null==this.activeClass?p:this.activeClass,f=null==this.exactActiveClass?d:this.exactActiveClass,g=i.redirectedFrom?pa(null,Ra(i.redirectedFrom),null,t):i;l[f]=ha(r,g,this.exactPath),l[m]=this.exact||this.exactPath?l[f]:function(n,e){return 0===n.path.replace(ua,"/").indexOf(e.path.replace(ua,"/"))&&(!e.hash||n.hash===e.hash)&&function(n,e){for(var t in e)if(!(t in n))return!1;return!0}(n.query,e.query)}(r,g);var h=l[f]?this.ariaCurrentValue:null,y=function(n){Ha(n)&&(e.replace?t.replace(a,La):t.push(a,La))},b={click:Ha};Array.isArray(this.event)?this.event.forEach((function(n){b[n]=y})):b[this.event]=y;var v={class:l},x=!this.$scopedSlots.$hasNormal&&this.$scopedSlots.default&&this.$scopedSlots.default({href:s,route:i,navigate:y,isActive:l[m],isExactActive:l[f]});if(x){if(1===x.length)return x[0];if(x.length>1||!x.length)return 0===x.length?n():n("span",{},x)}if("a"===this.tag)v.on=b,v.attrs={href:s,"aria-current":h};else{var w=function n(e){var t;if(e)for(var r=0;r<e.length;r++){if("a"===(t=e[r]).tag)return t;if(t.children&&(t=n(t.children)))return t}}(this.$slots.default);if(w){w.isStatic=!1;var j=w.data=ea({},w.data);for(var k in j.on=j.on||{},j.on){var S=j.on[k];k in b&&(j.on[k]=Array.isArray(S)?S:[S])}for(var E in b)E in j.on?j.on[E].push(b[E]):j.on[E]=y;var A=w.data.attrs=ea({},w.data.attrs);A.href=s,A["aria-current"]=h}else v.on=b}return n(this.tag,v,this.$slots.default)}};function Ha(n){if(!(n.metaKey||n.altKey||n.ctrlKey||n.shiftKey||n.defaultPrevented||void 0!==n.button&&0!==n.button)){if(n.currentTarget&&n.currentTarget.getAttribute){var e=n.currentTarget.getAttribute("target");if(/\b_blank\b/i.test(e))return}return n.preventDefault&&n.preventDefault(),!0}}var Ja="undefined"!=typeof window;function Wa(n,e,t,r,o){var a=e||[],i=t||Object.create(null),s=r||Object.create(null);n.forEach((function(n){!function n(e,t,r,o,a,i){var s=o.path,l=o.name;0;var c=o.pathToRegexpOptions||{},u=function(n,e,t){t||(n=n.replace(/\/$/,""));if("/"===n[0])return n;if(null==e)return n;return ja(e.path+"/"+n)}(s,a,c.strict);"boolean"==typeof o.caseSensitive&&(c.sensitive=o.caseSensitive);var p={path:u,regex:Va(u,c),components:o.components||{default:o.component},alias:o.alias?"string"==typeof o.alias?[o.alias]:o.alias:[],instances:{},enteredCbs:{},name:l,parent:a,matchAs:i,redirect:o.redirect,beforeEnter:o.beforeEnter,meta:o.meta||{},props:null==o.props?{}:o.components?o.props:{default:o.props}};o.children&&o.children.forEach((function(o){var a=i?ja(i+"/"+o.path):void 0;n(e,t,r,o,p,a)}));t[p.path]||(e.push(p.path),t[p.path]=p);if(void 0!==o.alias)for(var d=Array.isArray(o.alias)?o.alias:[o.alias],m=0;m<d.length;++m){0;var f={path:d[m],children:o.children};n(e,t,r,f,a,p.path||"/")}l&&(r[l]||(r[l]=p))}(a,i,s,n,o)}));for(var l=0,c=a.length;l<c;l++)"*"===a[l]&&(a.push(a.splice(l,1)[0]),c--,l--);return{pathList:a,pathMap:i,nameMap:s}}function Va(n,e){return Sa(n,[],e)}function Ka(n,e){var t=Wa(n),r=t.pathList,o=t.pathMap,a=t.nameMap;function i(n,t,i){var s=Ra(n,t,!1,e),c=s.name;if(c){var u=a[c];if(!u)return l(null,s);var p=u.regex.keys.filter((function(n){return!n.optional})).map((function(n){return n.name}));if("object"!=typeof s.params&&(s.params={}),t&&"object"==typeof t.params)for(var d in t.params)!(d in s.params)&&p.indexOf(d)>-1&&(s.params[d]=t.params[d]);return s.path=Fa(u.path,s.params),l(u,s,i)}if(s.path){s.params={};for(var m=0;m<r.length;m++){var f=r[m],g=o[f];if(Za(g.regex,s.path,s.params))return l(g,s,i)}}return l(null,s)}function s(n,t){var r=n.redirect,o="function"==typeof r?r(pa(n,t,null,e)):r;if("string"==typeof o&&(o={path:o}),!o||"object"!=typeof o)return l(null,t);var s=o,c=s.name,u=s.path,p=t.query,d=t.hash,m=t.params;if(p=s.hasOwnProperty("query")?s.query:p,d=s.hasOwnProperty("hash")?s.hash:d,m=s.hasOwnProperty("params")?s.params:m,c){a[c];return i({_normalized:!0,name:c,query:p,hash:d,params:m},void 0,t)}if(u){var f=function(n,e){return wa(n,e.parent?e.parent.path:"/",!0)}(u,n);return i({_normalized:!0,path:Fa(f,m),query:p,hash:d},void 0,t)}return l(null,t)}function l(n,t,r){return n&&n.redirect?s(n,r||t):n&&n.matchAs?function(n,e,t){var r=i({_normalized:!0,path:Fa(t,e.params)});if(r){var o=r.matched,a=o[o.length-1];return e.params=r.params,l(a,e)}return l(null,e)}(0,t,n.matchAs):pa(n,t,r,e)}return{match:i,addRoute:function(n,e){var t="object"!=typeof n?a[n]:void 0;Wa([e||n],r,o,a,t),t&&t.alias.length&&Wa(t.alias.map((function(n){return{path:n,children:[e]}})),r,o,a,t)},getRoutes:function(){return r.map((function(n){return o[n]}))},addRoutes:function(n){Wa(n,r,o,a)}}}function Za(n,e,t){var r=e.match(n);if(!r)return!1;if(!t)return!0;for(var o=1,a=r.length;o<a;++o){var i=n.keys[o-1];i&&(t[i.name||"pathMatch"]="string"==typeof r[o]?ia(r[o]):r[o])}return!0}var Ya=Ja&&window.performance&&window.performance.now?window.performance:Date;function Xa(){return Ya.now().toFixed(3)}var Qa=Xa();function ni(){return Qa}function ei(n){return Qa=n}var ti=Object.create(null);function ri(){"scrollRestoration"in window.history&&(window.history.scrollRestoration="manual");var n=window.location.protocol+"//"+window.location.host,e=window.location.href.replace(n,""),t=ea({},window.history.state);return t.key=ni(),window.history.replaceState(t,"",e),window.addEventListener("popstate",ii),function(){window.removeEventListener("popstate",ii)}}function oi(n,e,t,r){if(n.app){var o=n.options.scrollBehavior;o&&n.app.$nextTick((function(){var a=function(){var n=ni();if(n)return ti[n]}(),i=o.call(n,e,t,r?a:null);i&&("function"==typeof i.then?i.then((function(n){pi(n,a)})).catch((function(n){0})):pi(i,a))}))}}function ai(){var n=ni();n&&(ti[n]={x:window.pageXOffset,y:window.pageYOffset})}function ii(n){ai(),n.state&&n.state.key&&ei(n.state.key)}function si(n){return ci(n.x)||ci(n.y)}function li(n){return{x:ci(n.x)?n.x:window.pageXOffset,y:ci(n.y)?n.y:window.pageYOffset}}function ci(n){return"number"==typeof n}var ui=/^#\d/;function pi(n,e){var t,r="object"==typeof n;if(r&&"string"==typeof n.selector){var o=ui.test(n.selector)?document.getElementById(n.selector.slice(1)):document.querySelector(n.selector);if(o){var a=n.offset&&"object"==typeof n.offset?n.offset:{};e=function(n,e){var t=document.documentElement.getBoundingClientRect(),r=n.getBoundingClientRect();return{x:r.left-t.left-e.x,y:r.top-t.top-e.y}}(o,a={x:ci((t=a).x)?t.x:0,y:ci(t.y)?t.y:0})}else si(n)&&(e=li(n))}else r&&si(n)&&(e=li(n));e&&("scrollBehavior"in document.documentElement.style?window.scrollTo({left:e.x,top:e.y,behavior:n.behavior}):window.scrollTo(e.x,e.y))}var di,mi=Ja&&((-1===(di=window.navigator.userAgent).indexOf("Android 2.")&&-1===di.indexOf("Android 4.0")||-1===di.indexOf("Mobile Safari")||-1!==di.indexOf("Chrome")||-1!==di.indexOf("Windows Phone"))&&window.history&&"function"==typeof window.history.pushState);function fi(n,e){ai();var t=window.history;try{if(e){var r=ea({},t.state);r.key=ni(),t.replaceState(r,"",n)}else t.pushState({key:ei(Xa())},"",n)}catch(t){window.location[e?"replace":"assign"](n)}}function gi(n){fi(n,!0)}var hi={redirected:2,aborted:4,cancelled:8,duplicated:16};function yi(n,e){return vi(n,e,hi.redirected,'Redirected when going from "'+n.fullPath+'" to "'+function(n){if("string"==typeof n)return n;if("path"in n)return n.path;var e={};return xi.forEach((function(t){t in n&&(e[t]=n[t])})),JSON.stringify(e,null,2)}(e)+'" via a navigation guard.')}function bi(n,e){return vi(n,e,hi.cancelled,'Navigation cancelled from "'+n.fullPath+'" to "'+e.fullPath+'" with a new navigation.')}function vi(n,e,t,r){var o=new Error(r);return o._isRouter=!0,o.from=n,o.to=e,o.type=t,o}var xi=["params","query","hash"];function wi(n){return Object.prototype.toString.call(n).indexOf("Error")>-1}function ji(n,e){return wi(n)&&n._isRouter&&(null==e||n.type===e)}function ki(n,e,t){var r=function(o){o>=n.length?t():n[o]?e(n[o],(function(){r(o+1)})):r(o+1)};r(0)}function Si(n){return function(e,t,r){var o=!1,a=0,i=null;Ei(n,(function(n,e,t,s){if("function"==typeof n&&void 0===n.cid){o=!0,a++;var l,c=Ii((function(e){var o;((o=e).__esModule||Ti&&"Module"===o[Symbol.toStringTag])&&(e=e.default),n.resolved="function"==typeof e?e:Ua.extend(e),t.components[s]=e,--a<=0&&r()})),u=Ii((function(n){var e="Failed to resolve async component "+s+": "+n;i||(i=wi(n)?n:new Error(e),r(i))}));try{l=n(c,u)}catch(n){u(n)}if(l)if("function"==typeof l.then)l.then(c,u);else{var p=l.component;p&&"function"==typeof p.then&&p.then(c,u)}}})),o||r()}}function Ei(n,e){return Ai(n.map((function(n){return Object.keys(n.components).map((function(t){return e(n.components[t],n.instances[t],n,t)}))})))}function Ai(n){return Array.prototype.concat.apply([],n)}var Ti="function"==typeof Symbol&&"symbol"==typeof Symbol.toStringTag;function Ii(n){var e=!1;return function(){for(var t=[],r=arguments.length;r--;)t[r]=arguments[r];if(!e)return e=!0,n.apply(this,t)}}var _i=function(n,e){this.router=n,this.base=function(n){if(!n)if(Ja){var e=document.querySelector("base");n=(n=e&&e.getAttribute("href")||"/").replace(/^https?:\/\/[^\/]+/,"")}else n="/";"/"!==n.charAt(0)&&(n="/"+n);return n.replace(/\/$/,"")}(e),this.current=ma,this.pending=null,this.ready=!1,this.readyCbs=[],this.readyErrorCbs=[],this.errorCbs=[],this.listeners=[]};function Mi(n,e,t,r){var o=Ei(n,(function(n,r,o,a){var i=function(n,e){"function"!=typeof n&&(n=Ua.extend(n));return n.options[e]}(n,e);if(i)return Array.isArray(i)?i.map((function(n){return t(n,r,o,a)})):t(i,r,o,a)}));return Ai(r?o.reverse():o)}function Pi(n,e){if(e)return function(){return n.apply(e,arguments)}}_i.prototype.listen=function(n){this.cb=n},_i.prototype.onReady=function(n,e){this.ready?n():(this.readyCbs.push(n),e&&this.readyErrorCbs.push(e))},_i.prototype.onError=function(n){this.errorCbs.push(n)},_i.prototype.transitionTo=function(n,e,t){var r,o=this;try{r=this.router.match(n,this.current)}catch(n){throw this.errorCbs.forEach((function(e){e(n)})),n}var a=this.current;this.confirmTransition(r,(function(){o.updateRoute(r),e&&e(r),o.ensureURL(),o.router.afterHooks.forEach((function(n){n&&n(r,a)})),o.ready||(o.ready=!0,o.readyCbs.forEach((function(n){n(r)})))}),(function(n){t&&t(n),n&&!o.ready&&(ji(n,hi.redirected)&&a===ma||(o.ready=!0,o.readyErrorCbs.forEach((function(e){e(n)}))))}))},_i.prototype.confirmTransition=function(n,e,t){var r=this,o=this.current;this.pending=n;var a,i,s=function(n){!ji(n)&&wi(n)&&(r.errorCbs.length?r.errorCbs.forEach((function(e){e(n)})):console.error(n)),t&&t(n)},l=n.matched.length-1,c=o.matched.length-1;if(ha(n,o)&&l===c&&n.matched[l]===o.matched[c])return this.ensureURL(),n.hash&&oi(this.router,o,n,!1),s(((i=vi(a=o,n,hi.duplicated,'Avoided redundant navigation to current location: "'+a.fullPath+'".')).name="NavigationDuplicated",i));var u=function(n,e){var t,r=Math.max(n.length,e.length);for(t=0;t<r&&n[t]===e[t];t++);return{updated:e.slice(0,t),activated:e.slice(t),deactivated:n.slice(t)}}(this.current.matched,n.matched),p=u.updated,d=u.deactivated,m=u.activated,f=[].concat(function(n){return Mi(n,"beforeRouteLeave",Pi,!0)}(d),this.router.beforeHooks,function(n){return Mi(n,"beforeRouteUpdate",Pi)}(p),m.map((function(n){return n.beforeEnter})),Si(m)),g=function(e,t){if(r.pending!==n)return s(bi(o,n));try{e(n,o,(function(e){!1===e?(r.ensureURL(!0),s(function(n,e){return vi(n,e,hi.aborted,'Navigation aborted from "'+n.fullPath+'" to "'+e.fullPath+'" via a navigation guard.')}(o,n))):wi(e)?(r.ensureURL(!0),s(e)):"string"==typeof e||"object"==typeof e&&("string"==typeof e.path||"string"==typeof e.name)?(s(yi(o,n)),"object"==typeof e&&e.replace?r.replace(e):r.push(e)):t(e)}))}catch(n){s(n)}};ki(f,g,(function(){ki(function(n){return Mi(n,"beforeRouteEnter",(function(n,e,t,r){return function(n,e,t){return function(r,o,a){return n(r,o,(function(n){"function"==typeof n&&(e.enteredCbs[t]||(e.enteredCbs[t]=[]),e.enteredCbs[t].push(n)),a(n)}))}}(n,t,r)}))}(m).concat(r.router.resolveHooks),g,(function(){if(r.pending!==n)return s(bi(o,n));r.pending=null,e(n),r.router.app&&r.router.app.$nextTick((function(){ba(n)}))}))}))},_i.prototype.updateRoute=function(n){this.current=n,this.cb&&this.cb(n)},_i.prototype.setupListeners=function(){},_i.prototype.teardown=function(){this.listeners.forEach((function(n){n()})),this.listeners=[],this.current=ma,this.pending=null};var Ci=function(n){function e(e,t){n.call(this,e,t),this._startLocation=Oi(this.base)}return n&&(e.__proto__=n),e.prototype=Object.create(n&&n.prototype),e.prototype.constructor=e,e.prototype.setupListeners=function(){var n=this;if(!(this.listeners.length>0)){var e=this.router,t=e.options.scrollBehavior,r=mi&&t;r&&this.listeners.push(ri());var o=function(){var t=n.current,o=Oi(n.base);n.current===ma&&o===n._startLocation||n.transitionTo(o,(function(n){r&&oi(e,n,t,!0)}))};window.addEventListener("popstate",o),this.listeners.push((function(){window.removeEventListener("popstate",o)}))}},e.prototype.go=function(n){window.history.go(n)},e.prototype.push=function(n,e,t){var r=this,o=this.current;this.transitionTo(n,(function(n){fi(ja(r.base+n.fullPath)),oi(r.router,n,o,!1),e&&e(n)}),t)},e.prototype.replace=function(n,e,t){var r=this,o=this.current;this.transitionTo(n,(function(n){gi(ja(r.base+n.fullPath)),oi(r.router,n,o,!1),e&&e(n)}),t)},e.prototype.ensureURL=function(n){if(Oi(this.base)!==this.current.fullPath){var e=ja(this.base+this.current.fullPath);n?fi(e):gi(e)}},e.prototype.getCurrentLocation=function(){return Oi(this.base)},e}(_i);function Oi(n){var e=window.location.pathname,t=e.toLowerCase(),r=n.toLowerCase();return!n||t!==r&&0!==t.indexOf(ja(r+"/"))||(e=e.slice(n.length)),(e||"/")+window.location.search+window.location.hash}var zi=function(n){function e(e,t,r){n.call(this,e,t),r&&function(n){var e=Oi(n);if(!/^\/#/.test(e))return window.location.replace(ja(n+"/#"+e)),!0}(this.base)||Di()}return n&&(e.__proto__=n),e.prototype=Object.create(n&&n.prototype),e.prototype.constructor=e,e.prototype.setupListeners=function(){var n=this;if(!(this.listeners.length>0)){var e=this.router.options.scrollBehavior,t=mi&&e;t&&this.listeners.push(ri());var r=function(){var e=n.current;Di()&&n.transitionTo(Bi(),(function(r){t&&oi(n.router,r,e,!0),mi||Gi(r.fullPath)}))},o=mi?"popstate":"hashchange";window.addEventListener(o,r),this.listeners.push((function(){window.removeEventListener(o,r)}))}},e.prototype.push=function(n,e,t){var r=this,o=this.current;this.transitionTo(n,(function(n){Ni(n.fullPath),oi(r.router,n,o,!1),e&&e(n)}),t)},e.prototype.replace=function(n,e,t){var r=this,o=this.current;this.transitionTo(n,(function(n){Gi(n.fullPath),oi(r.router,n,o,!1),e&&e(n)}),t)},e.prototype.go=function(n){window.history.go(n)},e.prototype.ensureURL=function(n){var e=this.current.fullPath;Bi()!==e&&(n?Ni(e):Gi(e))},e.prototype.getCurrentLocation=function(){return Bi()},e}(_i);function Di(){var n=Bi();return"/"===n.charAt(0)||(Gi("/"+n),!1)}function Bi(){var n=window.location.href,e=n.indexOf("#");return e<0?"":n=n.slice(e+1)}function $i(n){var e=window.location.href,t=e.indexOf("#");return(t>=0?e.slice(0,t):e)+"#"+n}function Ni(n){mi?fi($i(n)):window.location.hash=n}function Gi(n){mi?gi($i(n)):window.location.replace($i(n))}var Fi=function(n){function e(e,t){n.call(this,e,t),this.stack=[],this.index=-1}return n&&(e.__proto__=n),e.prototype=Object.create(n&&n.prototype),e.prototype.constructor=e,e.prototype.push=function(n,e,t){var r=this;this.transitionTo(n,(function(n){r.stack=r.stack.slice(0,r.index+1).concat(n),r.index++,e&&e(n)}),t)},e.prototype.replace=function(n,e,t){var r=this;this.transitionTo(n,(function(n){r.stack=r.stack.slice(0,r.index).concat(n),e&&e(n)}),t)},e.prototype.go=function(n){var e=this,t=this.index+n;if(!(t<0||t>=this.stack.length)){var r=this.stack[t];this.confirmTransition(r,(function(){var n=e.current;e.index=t,e.updateRoute(r),e.router.afterHooks.forEach((function(e){e&&e(r,n)}))}),(function(n){ji(n,hi.duplicated)&&(e.index=t)}))}},e.prototype.getCurrentLocation=function(){var n=this.stack[this.stack.length-1];return n?n.fullPath:"/"},e.prototype.ensureURL=function(){},e}(_i),Ri=function(n){void 0===n&&(n={}),this.app=null,this.apps=[],this.options=n,this.beforeHooks=[],this.resolveHooks=[],this.afterHooks=[],this.matcher=Ka(n.routes||[],this);var e=n.mode||"hash";switch(this.fallback="history"===e&&!mi&&!1!==n.fallback,this.fallback&&(e="hash"),Ja||(e="abstract"),this.mode=e,e){case"history":this.history=new Ci(this,n.base);break;case"hash":this.history=new zi(this,n.base,this.fallback);break;case"abstract":this.history=new Fi(this,n.base);break;default:0}},Ui={currentRoute:{configurable:!0}};Ri.prototype.match=function(n,e,t){return this.matcher.match(n,e,t)},Ui.currentRoute.get=function(){return this.history&&this.history.current},Ri.prototype.init=function(n){var e=this;if(this.apps.push(n),n.$once("hook:destroyed",(function(){var t=e.apps.indexOf(n);t>-1&&e.apps.splice(t,1),e.app===n&&(e.app=e.apps[0]||null),e.app||e.history.teardown()})),!this.app){this.app=n;var t=this.history;if(t instanceof Ci||t instanceof zi){var r=function(n){t.setupListeners(),function(n){var r=t.current,o=e.options.scrollBehavior;mi&&o&&"fullPath"in n&&oi(e,n,r,!1)}(n)};t.transitionTo(t.getCurrentLocation(),r,r)}t.listen((function(n){e.apps.forEach((function(e){e._route=n}))}))}},Ri.prototype.beforeEach=function(n){return qi(this.beforeHooks,n)},Ri.prototype.beforeResolve=function(n){return qi(this.resolveHooks,n)},Ri.prototype.afterEach=function(n){return qi(this.afterHooks,n)},Ri.prototype.onReady=function(n,e){this.history.onReady(n,e)},Ri.prototype.onError=function(n){this.history.onError(n)},Ri.prototype.push=function(n,e,t){var r=this;if(!e&&!t&&"undefined"!=typeof Promise)return new Promise((function(e,t){r.history.push(n,e,t)}));this.history.push(n,e,t)},Ri.prototype.replace=function(n,e,t){var r=this;if(!e&&!t&&"undefined"!=typeof Promise)return new Promise((function(e,t){r.history.replace(n,e,t)}));this.history.replace(n,e,t)},Ri.prototype.go=function(n){this.history.go(n)},Ri.prototype.back=function(){this.go(-1)},Ri.prototype.forward=function(){this.go(1)},Ri.prototype.getMatchedComponents=function(n){var e=n?n.matched?n:this.resolve(n).route:this.currentRoute;return e?[].concat.apply([],e.matched.map((function(n){return Object.keys(n.components).map((function(e){return n.components[e]}))}))):[]},Ri.prototype.resolve=function(n,e,t){var r=Ra(n,e=e||this.history.current,t,this),o=this.match(r,e),a=o.redirectedFrom||o.fullPath;return{location:r,route:o,href:function(n,e,t){var r="hash"===t?"#"+e:e;return n?ja(n+"/"+r):r}(this.history.base,a,this.mode),normalizedTo:r,resolved:o}},Ri.prototype.getRoutes=function(){return this.matcher.getRoutes()},Ri.prototype.addRoute=function(n,e){this.matcher.addRoute(n,e),this.history.current!==ma&&this.history.transitionTo(this.history.getCurrentLocation())},Ri.prototype.addRoutes=function(n){this.matcher.addRoutes(n),this.history.current!==ma&&this.history.transitionTo(this.history.getCurrentLocation())},Object.defineProperties(Ri.prototype,Ui);var Li=Ri;function qi(n,e){return n.push(e),function(){var t=n.indexOf(e);t>-1&&n.splice(t,1)}}Ri.install=function n(e){if(!n.installed||Ua!==e){n.installed=!0,Ua=e;var t=function(n){return void 0!==n},r=function(n,e){var r=n.$options._parentVnode;t(r)&&t(r=r.data)&&t(r=r.registerRouteInstance)&&r(n,e)};e.mixin({beforeCreate:function(){t(this.$options.router)?(this._routerRoot=this,this._router=this.$options.router,this._router.init(this),e.util.defineReactive(this,"_route",this._router.history.current)):this._routerRoot=this.$parent&&this.$parent._routerRoot||this,r(this,this)},destroyed:function(){r(this)}}),Object.defineProperty(e.prototype,"$router",{get:function(){return this._routerRoot._router}}),Object.defineProperty(e.prototype,"$route",{get:function(){return this._routerRoot._route}}),e.component("RouterView",va),e.component("RouterLink",qa);var o=e.config.optionMergeStrategies;o.beforeRouteEnter=o.beforeRouteLeave=o.beforeRouteUpdate=o.created}},Ri.version="3.6.5",Ri.isNavigationFailure=ji,Ri.NavigationFailureType=hi,Ri.START_LOCATION=ma,Ja&&window.Vue&&window.Vue.use(Ri);t(108);t(28),t(105);var Hi={NotFound:()=>Promise.all([t.e(0),t.e(9)]).then(t.bind(null,348)),Layout:()=>Promise.all([t.e(0),t.e(2)]).then(t.bind(null,347))},Ji={"v-09144824":()=>t.e(11).then(t.bind(null,356)),"v-ff24179a":()=>t.e(12).then(t.bind(null,357)),"v-9b7ae57e":()=>t.e(15).then(t.bind(null,358)),"v-5b5a2612":()=>t.e(14).then(t.bind(null,359)),"v-06139e15":()=>t.e(13).then(t.bind(null,360)),"v-c36d31cc":()=>t.e(16).then(t.bind(null,361)),"v-3943eb72":()=>t.e(17).then(t.bind(null,362)),"v-dc794a78":()=>t.e(19).then(t.bind(null,363)),"v-2c0c67ee":()=>t.e(20).then(t.bind(null,364)),"v-5dc84f53":()=>t.e(22).then(t.bind(null,365)),"v-258c65d9":()=>t.e(21).then(t.bind(null,366)),"v-0e2aa550":()=>t.e(23).then(t.bind(null,367)),"v-644e2a09":()=>t.e(18).then(t.bind(null,349)),"v-4961bb68":()=>t.e(24).then(t.bind(null,368)),"v-243c5977":()=>t.e(25).then(t.bind(null,369)),"v-fe4d2982":()=>t.e(26).then(t.bind(null,370)),"v-7d8c58f5":()=>t.e(27).then(t.bind(null,371)),"v-7bd66884":()=>t.e(28).then(t.bind(null,372)),"v-03912346":()=>t.e(29).then(t.bind(null,373)),"v-98b238e6":()=>t.e(31).then(t.bind(null,374)),"v-a7249d18":()=>t.e(30).then(t.bind(null,375)),"v-5f4e6602":()=>t.e(32).then(t.bind(null,376)),"v-74e9cd39":()=>t.e(33).then(t.bind(null,377)),"v-565d8538":()=>t.e(34).then(t.bind(null,378)),"v-75857508":()=>t.e(37).then(t.bind(null,379)),"v-51792eb2":()=>t.e(35).then(t.bind(null,380)),"v-0dc1aff3":()=>t.e(38).then(t.bind(null,381)),"v-4aa844fe":()=>t.e(36).then(t.bind(null,382)),"v-89b4e2ce":()=>t.e(39).then(t.bind(null,383)),"v-4beadc9a":()=>t.e(41).then(t.bind(null,384)),"v-0ba19453":()=>t.e(40).then(t.bind(null,385)),"v-549e0a74":()=>t.e(42).then(t.bind(null,386)),"v-a807627a":()=>t.e(43).then(t.bind(null,387)),"v-060c4d78":()=>t.e(45).then(t.bind(null,388)),"v-34903465":()=>t.e(44).then(t.bind(null,389)),"v-802dbb5a":()=>t.e(46).then(t.bind(null,390)),"v-6b073d56":()=>t.e(48).then(t.bind(null,391)),"v-ecbac2a2":()=>t.e(47).then(t.bind(null,392)),"v-347afce6":()=>t.e(50).then(t.bind(null,393)),"v-dcb6a428":()=>t.e(49).then(t.bind(null,394)),"v-4864b371":()=>t.e(55).then(t.bind(null,395)),"v-ba4844aa":()=>t.e(51).then(t.bind(null,396)),"v-1d6c1177":()=>t.e(54).then(t.bind(null,397)),"v-767353a2":()=>t.e(56).then(t.bind(null,398)),"v-f0a23c42":()=>t.e(57).then(t.bind(null,399)),"v-ae521f96":()=>t.e(58).then(t.bind(null,400)),"v-7ef3ec0a":()=>t.e(52).then(t.bind(null,401)),"v-1f0248bb":()=>t.e(61).then(t.bind(null,402)),"v-191de033":()=>t.e(59).then(t.bind(null,403)),"v-1b1fcea0":()=>t.e(63).then(t.bind(null,404)),"v-d18328fe":()=>t.e(62).then(t.bind(null,405)),"v-76196cb6":()=>t.e(64).then(t.bind(null,406)),"v-038e5574":()=>t.e(53).then(t.bind(null,407)),"v-7632ec06":()=>t.e(60).then(t.bind(null,408)),"v-131e313b":()=>t.e(65).then(t.bind(null,409)),"v-8c861180":()=>t.e(69).then(t.bind(null,410)),"v-7b53c9d4":()=>t.e(67).then(t.bind(null,411)),"v-ca403bee":()=>t.e(66).then(t.bind(null,412)),"v-0bab8d58":()=>t.e(68).then(t.bind(null,413)),"v-a2879398":()=>t.e(70).then(t.bind(null,414)),"v-d04c94fe":()=>t.e(71).then(t.bind(null,415)),"v-79984a3c":()=>t.e(73).then(t.bind(null,416)),"v-4ce962c9":()=>t.e(74).then(t.bind(null,417)),"v-a115cce6":()=>t.e(72).then(t.bind(null,418)),"v-5e35661b":()=>t.e(75).then(t.bind(null,419)),"v-3fede6a8":()=>t.e(76).then(t.bind(null,420)),"v-1fd32e2a":()=>t.e(79).then(t.bind(null,421)),"v-1b67533c":()=>t.e(77).then(t.bind(null,422)),"v-0e579d4a":()=>t.e(78).then(t.bind(null,423)),"v-591997ca":()=>t.e(80).then(t.bind(null,424)),"v-08d0b636":()=>t.e(81).then(t.bind(null,425))};function Wi(n){const e=Object.create(null);return function(t){return e[t]||(e[t]=n(t))}}const Vi=/-(\w)/g,Ki=Wi(n=>n.replace(Vi,(n,e)=>e?e.toUpperCase():"")),Zi=/\B([A-Z])/g,Yi=Wi(n=>n.replace(Zi,"-$1").toLowerCase()),Xi=Wi(n=>n.charAt(0).toUpperCase()+n.slice(1));function Qi(n,e){if(!e)return;if(n(e))return n(e);return e.includes("-")?n(Xi(Ki(e))):n(Xi(e))||n(Yi(e))}const ns=Object.assign({},Hi,Ji),es=n=>ns[n],ts=n=>Ji[n],rs=n=>Hi[n],os=n=>Ht.component(n);function as(n){return Qi(ts,n)}function is(n){return Qi(rs,n)}function ss(n){return Qi(es,n)}function ls(n){return Qi(os,n)}function cs(...n){return Promise.all(n.filter(n=>n).map(async n=>{if(!ls(n)&&ss(n)){const e=await ss(n)();Ht.component(n,e.default)}}))}function us(n,e){"undefined"!=typeof window&&window.__VUEPRESS__&&(window.__VUEPRESS__[n]=e)}var ps=t(95),ds=t.n(ps),ms=t(96),fs=t.n(ms),gs={created(){if(this.siteMeta=this.$site.headTags.filter(([n])=>"meta"===n).map(([n,e])=>e),this.$ssrContext){const e=this.getMergedMetaTags();this.$ssrContext.title=this.$title,this.$ssrContext.lang=this.$lang,this.$ssrContext.pageMeta=(n=e)?n.map(n=>{let e="<meta";return Object.keys(n).forEach(t=>{e+=` ${t}="${fs()(n[t])}"`}),e+">"}).join("\n    "):"",this.$ssrContext.canonicalLink=ys(this.$canonicalUrl)}var n},mounted(){this.currentMetaTags=[...document.querySelectorAll("meta")],this.updateMeta(),this.updateCanonicalLink()},methods:{updateMeta(){document.title=this.$title,document.documentElement.lang=this.$lang;const n=this.getMergedMetaTags();this.currentMetaTags=bs(n,this.currentMetaTags)},getMergedMetaTags(){const n=this.$page.frontmatter.meta||[];return ds()([{name:"description",content:this.$description}],n,this.siteMeta,vs)},updateCanonicalLink(){hs(),this.$canonicalUrl&&document.head.insertAdjacentHTML("beforeend",ys(this.$canonicalUrl))}},watch:{$page(){this.updateMeta(),this.updateCanonicalLink()}},beforeDestroy(){bs(null,this.currentMetaTags),hs()}};function hs(){const n=document.querySelector("link[rel='canonical']");n&&n.remove()}function ys(n=""){return n?`<link href="${n}" rel="canonical" />`:""}function bs(n,e){if(e&&[...e].filter(n=>n.parentNode===document.head).forEach(n=>document.head.removeChild(n)),n)return n.map(n=>{const e=document.createElement("meta");return Object.keys(n).forEach(t=>{e.setAttribute(t,n[t])}),document.head.appendChild(e),e})}function vs(n){for(const e of["name","property","itemprop"])if(n.hasOwnProperty(e))return n[e]+e;return JSON.stringify(n)}var xs=t(51),ws={mounted(){window.addEventListener("scroll",this.onScroll)},methods:{onScroll:t.n(xs)()((function(){this.setActiveHash()}),300),setActiveHash(){const n=[].slice.call(document.querySelectorAll(".sidebar-link")),e=[].slice.call(document.querySelectorAll(".header-anchor")).filter(e=>n.some(n=>n.hash===e.hash)),t=Math.max(window.pageYOffset,document.documentElement.scrollTop,document.body.scrollTop),r=Math.max(document.documentElement.scrollHeight,document.body.scrollHeight),o=window.innerHeight+t;for(let n=0;n<e.length;n++){const a=e[n],i=e[n+1],s=0===n&&0===t||t>=a.parentElement.offsetTop+10&&(!i||t<i.parentElement.offsetTop-10),l=decodeURIComponent(this.$route.hash);if(s&&l!==decodeURIComponent(a.hash)){const t=a;if(o===r)for(let t=n+1;t<e.length;t++)if(l===decodeURIComponent(e[t].hash))return;return this.$vuepress.$set("disableScrollBehavior",!0),void this.$router.replace(decodeURIComponent(t.hash),()=>{this.$nextTick(()=>{this.$vuepress.$set("disableScrollBehavior",!1)})})}}}},beforeDestroy(){window.removeEventListener("scroll",this.onScroll)}},js=t(26),ks=t.n(js),Ss=[gs,ws,{mounted(){ks.a.configure({showSpinner:!1}),this.$router.beforeEach((n,e,t)=>{n.path===e.path||Ht.component(n.name)||ks.a.start(),t()}),this.$router.afterEach(()=>{ks.a.done(),this.isSidebarOpen=!1})}}],Es={name:"GlobalLayout",computed:{layout(){const n=this.getLayout();return us("layout",n),Ht.component(n)}},methods:{getLayout(){if(this.$page.path){const n=this.$page.frontmatter.layout;return n&&(this.$vuepress.getLayoutAsyncComponent(n)||this.$vuepress.getVueComponent(n))?n:"Layout"}return"NotFound"}}},As=t(0),Ts=Object(As.a)(Es,(function(){return(0,this._self._c)(this.layout,{tag:"component"})}),[],!1,null,null,null).exports;!function(n,e,t){switch(e){case"components":n[e]||(n[e]={}),Object.assign(n[e],t);break;case"mixins":n[e]||(n[e]=[]),n[e].push(...t);break;default:throw new Error("Unknown option name.")}}(Ts,"mixins",Ss);const Is=[{name:"v-09144824",path:"/speak/",component:Ts,beforeEnter:(n,e,t)=>{cs("Layout","v-09144824").then(t)}},{path:"/speak/index.html",redirect:"/speak/"},{path:"/00.目录页/00.导航栏-目录页/01.随笔.html",redirect:"/speak/"},{name:"v-ff24179a",path:"/technology/",component:Ts,beforeEnter:(n,e,t)=>{cs("Layout","v-ff24179a").then(t)}},{path:"/technology/index.html",redirect:"/technology/"},{path:"/00.目录页/00.导航栏-目录页/03.技术.html",redirect:"/technology/"},{name:"v-9b7ae57e",path:"/technology/doc/",component:Ts,beforeEnter:(n,e,t)=>{cs("Layout","v-9b7ae57e").then(t)}},{path:"/technology/doc/index.html",redirect:"/technology/doc/"},{path:"/00.目录页/03.技术-目录页/05.技术文档.html",redirect:"/technology/doc/"},{name:"v-5b5a2612",path:"/web/",component:Ts,beforeEnter:(n,e,t)=>{cs("Layout","v-5b5a2612").then(t)}},{path:"/web/index.html",redirect:"/web/"},{path:"/00.目录页/00.导航栏-目录页/09.前端.html",redirect:"/web/"},{name:"v-06139e15",path:"/books/",component:Ts,beforeEnter:(n,e,t)=>{cs("Layout","v-06139e15").then(t)}},{path:"/books/index.html",redirect:"/books/"},{path:"/00.目录页/00.导航栏-目录页/06.书籍.html",redirect:"/books/"},{name:"v-c36d31cc",path:"/books/es6/",component:Ts,beforeEnter:(n,e,t)=>{cs("Layout","v-c36d31cc").then(t)}},{path:"/books/es6/index.html",redirect:"/books/es6/"},{path:"/00.目录页/06.书籍-目录页/10.学习书籍/05.《ES6 教程》笔记.html",redirect:"/books/es6/"},{name:"v-3943eb72",path:"/books/git/",component:Ts,beforeEnter:(n,e,t)=>{cs("Layout","v-3943eb72").then(t)}},{path:"/books/git/index.html",redirect:"/books/git/"},{path:"/00.目录页/06.书籍-目录页/10.学习书籍/10.《Git》学习笔记.html",redirect:"/books/git/"},{name:"v-dc794a78",path:"/speak/d39dce/",component:Ts,beforeEnter:(n,e,t)=>{cs("Layout","v-dc794a78").then(t)}},{path:"/speak/d39dce/index.html",redirect:"/speak/d39dce/"},{path:"/01.随笔/01.吐槽.html",redirect:"/speak/d39dce/"},{name:"v-2c0c67ee",path:"/pages/b6d59b/",component:Ts,beforeEnter:(n,e,t)=>{cs("Layout","v-2c0c67ee").then(t)}},{path:"/pages/b6d59b/index.html",redirect:"/pages/b6d59b/"},{path:"/01.随笔/02.测试私密文章.html",redirect:"/pages/b6d59b/"},{name:"v-5dc84f53",path:"/pages/ad247c4332211551/",component:Ts,beforeEnter:(n,e,t)=>{cs("Layout","v-5dc84f53").then(t)}},{path:"/pages/ad247c4332211551/index.html",redirect:"/pages/ad247c4332211551/"},{path:"/03.技术/05.技术文档/02.Markdown使用教程.html",redirect:"/pages/ad247c4332211551/"},{name:"v-258c65d9",path:"/pages/9a7ee40fc232253e/",component:Ts,beforeEnter:(n,e,t)=>{cs("Layout","v-258c65d9").then(t)}},{path:"/pages/9a7ee40fc232253e/index.html",redirect:"/pages/9a7ee40fc232253e/"},{path:"/03.技术/05.技术文档/01.Git使用手册.html",redirect:"/pages/9a7ee40fc232253e/"},{name:"v-0e2aa550",path:"/pages/61f2f95fd7da14fd/",component:Ts,beforeEnter:(n,e,t)=>{cs("Layout","v-0e2aa550").then(t)}},{path:"/pages/61f2f95fd7da14fd/index.html",redirect:"/pages/61f2f95fd7da14fd/"},{path:"/03.技术/05.技术文档/03.npm常用命令.html",redirect:"/pages/61f2f95fd7da14fd/"},{name:"v-644e2a09",path:"/navigation/",component:Ts,beforeEnter:(n,e,t)=>{cs("Layout","v-644e2a09").then(t)}},{path:"/navigation/index.html",redirect:"/navigation/"},{path:"/01.导航站.html",redirect:"/navigation/"},{name:"v-4961bb68",path:"/pages/dec4f3f00e71a312/",component:Ts,beforeEnter:(n,e,t)=>{cs("Layout","v-4961bb68").then(t)}},{path:"/pages/dec4f3f00e71a312/index.html",redirect:"/pages/dec4f3f00e71a312/"},{path:"/03.技术/05.技术文档/10.npm packageJson属性详解.html",redirect:"/pages/dec4f3f00e71a312/"},{name:"v-243c5977",path:"/pages/4e8444e2d534d14f/",component:Ts,beforeEnter:(n,e,t)=>{cs("Layout","v-243c5977").then(t)}},{path:"/pages/4e8444e2d534d14f/index.html",redirect:"/pages/4e8444e2d534d14f/"},{path:"/03.技术/05.技术文档/15.yaml语言教程.html",redirect:"/pages/4e8444e2d534d14f/"},{name:"v-fe4d2982",path:"/pages/922650/",component:Ts,beforeEnter:(n,e,t)=>{cs("Layout","v-fe4d2982").then(t)}},{path:"/pages/922650/index.html",redirect:"/pages/922650/"},{path:"/03.技术/05.技术文档/20.Git修改分支名.html",redirect:"/pages/922650/"},{name:"v-7d8c58f5",path:"/pages/f344d070a1031ef7/",component:Ts,beforeEnter:(n,e,t)=>{cs("Layout","v-7d8c58f5").then(t)}},{path:"/pages/f344d070a1031ef7/index.html",redirect:"/pages/f344d070a1031ef7/"},{path:"/06.书籍/05.《ES6 教程》笔记/01.ECMAScript 6 简介.html",redirect:"/pages/f344d070a1031ef7/"},{name:"v-7bd66884",path:"/pages/c1edd70a6b7c7872/",component:Ts,beforeEnter:(n,e,t)=>{cs("Layout","v-7bd66884").then(t)}},{path:"/pages/c1edd70a6b7c7872/index.html",redirect:"/pages/c1edd70a6b7c7872/"},{path:"/06.书籍/05.《ES6 教程》笔记/02.let 和 const 命令.html",redirect:"/pages/c1edd70a6b7c7872/"},{name:"v-03912346",path:"/pages/b1ab10a62f7564da/",component:Ts,beforeEnter:(n,e,t)=>{cs("Layout","v-03912346").then(t)}},{path:"/pages/b1ab10a62f7564da/index.html",redirect:"/pages/b1ab10a62f7564da/"},{path:"/06.书籍/05.《ES6 教程》笔记/03.变量的解构赋值.html",redirect:"/pages/b1ab10a62f7564da/"},{name:"v-98b238e6",path:"/pages/a650b4a0ebfc9350/",component:Ts,beforeEnter:(n,e,t)=>{cs("Layout","v-98b238e6").then(t)}},{path:"/pages/a650b4a0ebfc9350/index.html",redirect:"/pages/a650b4a0ebfc9350/"},{path:"/06.书籍/05.《ES6 教程》笔记/05.字符串的新增方法.html",redirect:"/pages/a650b4a0ebfc9350/"},{name:"v-a7249d18",path:"/pages/ca89eca8adeba5f4/",component:Ts,beforeEnter:(n,e,t)=>{cs("Layout","v-a7249d18").then(t)}},{path:"/pages/ca89eca8adeba5f4/index.html",redirect:"/pages/ca89eca8adeba5f4/"},{path:"/06.书籍/05.《ES6 教程》笔记/04.字符串的扩展.html",redirect:"/pages/ca89eca8adeba5f4/"},{name:"v-5f4e6602",path:"/pages/0473261a6ab0ee8c/",component:Ts,beforeEnter:(n,e,t)=>{cs("Layout","v-5f4e6602").then(t)}},{path:"/pages/0473261a6ab0ee8c/index.html",redirect:"/pages/0473261a6ab0ee8c/"},{path:"/06.书籍/05.《ES6 教程》笔记/06.正则的扩展.html",redirect:"/pages/0473261a6ab0ee8c/"},{name:"v-74e9cd39",path:"/pages/5dfea9a0f2d1a392/",component:Ts,beforeEnter:(n,e,t)=>{cs("Layout","v-74e9cd39").then(t)}},{path:"/pages/5dfea9a0f2d1a392/index.html",redirect:"/pages/5dfea9a0f2d1a392/"},{path:"/06.书籍/05.《ES6 教程》笔记/07.数值的扩展.html",redirect:"/pages/5dfea9a0f2d1a392/"},{name:"v-565d8538",path:"/pages/8ed309d668b20264/",component:Ts,beforeEnter:(n,e,t)=>{cs("Layout","v-565d8538").then(t)}},{path:"/pages/8ed309d668b20264/index.html",redirect:"/pages/8ed309d668b20264/"},{path:"/06.书籍/05.《ES6 教程》笔记/08.函数的扩展.html",redirect:"/pages/8ed309d668b20264/"},{name:"v-75857508",path:"/pages/e85e68947502cf90/",component:Ts,beforeEnter:(n,e,t)=>{cs("Layout","v-75857508").then(t)}},{path:"/pages/e85e68947502cf90/index.html",redirect:"/pages/e85e68947502cf90/"},{path:"/06.书籍/05.《ES6 教程》笔记/11.对象的新增方法.html",redirect:"/pages/e85e68947502cf90/"},{name:"v-51792eb2",path:"/pages/e34009d60d8bc4b2/",component:Ts,beforeEnter:(n,e,t)=>{cs("Layout","v-51792eb2").then(t)}},{path:"/pages/e34009d60d8bc4b2/index.html",redirect:"/pages/e34009d60d8bc4b2/"},{path:"/06.书籍/05.《ES6 教程》笔记/09.数组的扩展.html",redirect:"/pages/e34009d60d8bc4b2/"},{name:"v-0dc1aff3",path:"/pages/02c86eb2792f3262/",component:Ts,beforeEnter:(n,e,t)=>{cs("Layout","v-0dc1aff3").then(t)}},{path:"/pages/02c86eb2792f3262/index.html",redirect:"/pages/02c86eb2792f3262/"},{path:"/06.书籍/05.《ES6 教程》笔记/12.Symbol.html",redirect:"/pages/02c86eb2792f3262/"},{name:"v-4aa844fe",path:"/pages/b5e3e0a0ff6e9c25/",component:Ts,beforeEnter:(n,e,t)=>{cs("Layout","v-4aa844fe").then(t)}},{path:"/pages/b5e3e0a0ff6e9c25/index.html",redirect:"/pages/b5e3e0a0ff6e9c25/"},{path:"/06.书籍/05.《ES6 教程》笔记/10.对象的扩展.html",redirect:"/pages/b5e3e0a0ff6e9c25/"},{name:"v-89b4e2ce",path:"/pages/0c21dae358fca16b/",component:Ts,beforeEnter:(n,e,t)=>{cs("Layout","v-89b4e2ce").then(t)}},{path:"/pages/0c21dae358fca16b/index.html",redirect:"/pages/0c21dae358fca16b/"},{path:"/06.书籍/05.《ES6 教程》笔记/13.Set 和 Map 数据结构.html",redirect:"/pages/0c21dae358fca16b/"},{name:"v-4beadc9a",path:"/pages/74de3e45e4491e95/",component:Ts,beforeEnter:(n,e,t)=>{cs("Layout","v-4beadc9a").then(t)}},{path:"/pages/74de3e45e4491e95/index.html",redirect:"/pages/74de3e45e4491e95/"},{path:"/06.书籍/05.《ES6 教程》笔记/15.Reflect.html",redirect:"/pages/74de3e45e4491e95/"},{name:"v-0ba19453",path:"/pages/f56ec2ab97d60483/",component:Ts,beforeEnter:(n,e,t)=>{cs("Layout","v-0ba19453").then(t)}},{path:"/pages/f56ec2ab97d60483/index.html",redirect:"/pages/f56ec2ab97d60483/"},{path:"/06.书籍/05.《ES6 教程》笔记/14.Proxy.html",redirect:"/pages/f56ec2ab97d60483/"},{name:"v-549e0a74",path:"/pages/2810ae8985e9bd52/",component:Ts,beforeEnter:(n,e,t)=>{cs("Layout","v-549e0a74").then(t)}},{path:"/pages/2810ae8985e9bd52/index.html",redirect:"/pages/2810ae8985e9bd52/"},{path:"/06.书籍/05.《ES6 教程》笔记/16.Promise 对象.html",redirect:"/pages/2810ae8985e9bd52/"},{name:"v-a807627a",path:"/pages/48df907ad3570f3d/",component:Ts,beforeEnter:(n,e,t)=>{cs("Layout","v-a807627a").then(t)}},{path:"/pages/48df907ad3570f3d/index.html",redirect:"/pages/48df907ad3570f3d/"},{path:"/06.书籍/05.《ES6 教程》笔记/17.Iterator 和 for-of 循环.html",redirect:"/pages/48df907ad3570f3d/"},{name:"v-060c4d78",path:"/pages/75af7031eb66847b/",component:Ts,beforeEnter:(n,e,t)=>{cs("Layout","v-060c4d78").then(t)}},{path:"/pages/75af7031eb66847b/index.html",redirect:"/pages/75af7031eb66847b/"},{path:"/06.书籍/05.《ES6 教程》笔记/19.Generator 函数的异步应用.html",redirect:"/pages/75af7031eb66847b/"},{name:"v-34903465",path:"/pages/718b48ed9ce0adce/",component:Ts,beforeEnter:(n,e,t)=>{cs("Layout","v-34903465").then(t)}},{path:"/pages/718b48ed9ce0adce/index.html",redirect:"/pages/718b48ed9ce0adce/"},{path:"/06.书籍/05.《ES6 教程》笔记/18.Generator 函数的语法.html",redirect:"/pages/718b48ed9ce0adce/"},{name:"v-802dbb5a",path:"/pages/3777253e65bac487/",component:Ts,beforeEnter:(n,e,t)=>{cs("Layout","v-802dbb5a").then(t)}},{path:"/pages/3777253e65bac487/index.html",redirect:"/pages/3777253e65bac487/"},{path:"/06.书籍/05.《ES6 教程》笔记/20.async 函数.html",redirect:"/pages/3777253e65bac487/"},{name:"v-6b073d56",path:"/pages/83f8c3a0cd87dd83/",component:Ts,beforeEnter:(n,e,t)=>{cs("Layout","v-6b073d56").then(t)}},{path:"/pages/83f8c3a0cd87dd83/index.html",redirect:"/pages/83f8c3a0cd87dd83/"},{path:"/06.书籍/05.《ES6 教程》笔记/22.Class 的继承.html",redirect:"/pages/83f8c3a0cd87dd83/"},{name:"v-ecbac2a2",path:"/pages/e831e1593c82bbe0/",component:Ts,beforeEnter:(n,e,t)=>{cs("Layout","v-ecbac2a2").then(t)}},{path:"/pages/e831e1593c82bbe0/index.html",redirect:"/pages/e831e1593c82bbe0/"},{path:"/06.书籍/05.《ES6 教程》笔记/21.Class 的基本语法.html",redirect:"/pages/e831e1593c82bbe0/"},{name:"v-347afce6",path:"/pages/a79ca2e64ceae213/",component:Ts,beforeEnter:(n,e,t)=>{cs("Layout","v-347afce6").then(t)}},{path:"/pages/a79ca2e64ceae213/index.html",redirect:"/pages/a79ca2e64ceae213/"},{path:"/06.书籍/05.《ES6 教程》笔记/24.Module 的加载实现.html",redirect:"/pages/a79ca2e64ceae213/"},{name:"v-dcb6a428",path:"/pages/efe2fb04eb8ac5fb/",component:Ts,beforeEnter:(n,e,t)=>{cs("Layout","v-dcb6a428").then(t)}},{path:"/pages/efe2fb04eb8ac5fb/index.html",redirect:"/pages/efe2fb04eb8ac5fb/"},{path:"/06.书籍/05.《ES6 教程》笔记/23.Module 的语法.html",redirect:"/pages/efe2fb04eb8ac5fb/"},{name:"v-4864b371",path:"/pages/7188882b8d65af1b/",component:Ts,beforeEnter:(n,e,t)=>{cs("Layout","v-4864b371").then(t)}},{path:"/pages/7188882b8d65af1b/index.html",redirect:"/pages/7188882b8d65af1b/"},{path:"/06.书籍/05.《ES6 教程》笔记/29.最新提案.html",redirect:"/pages/7188882b8d65af1b/"},{name:"v-ba4844aa",path:"/pages/984bf549204bb266/",component:Ts,beforeEnter:(n,e,t)=>{cs("Layout","v-ba4844aa").then(t)}},{path:"/pages/984bf549204bb266/index.html",redirect:"/pages/984bf549204bb266/"},{path:"/06.书籍/05.《ES6 教程》笔记/25.编程风格.html",redirect:"/pages/984bf549204bb266/"},{name:"v-1d6c1177",path:"/pages/a2ba314746bfdbdd/",component:Ts,beforeEnter:(n,e,t)=>{cs("Layout","v-1d6c1177").then(t)}},{path:"/pages/a2ba314746bfdbdd/index.html",redirect:"/pages/a2ba314746bfdbdd/"},{path:"/06.书籍/05.《ES6 教程》笔记/28.ArrayBuffer.html",redirect:"/pages/a2ba314746bfdbdd/"},{name:"v-767353a2",path:"/pages/e97bc1e5626b082c/",component:Ts,beforeEnter:(n,e,t)=>{cs("Layout","v-767353a2").then(t)}},{path:"/pages/e97bc1e5626b082c/index.html",redirect:"/pages/e97bc1e5626b082c/"},{path:"/06.书籍/05.《ES6 教程》笔记/30.装饰器.html",redirect:"/pages/e97bc1e5626b082c/"},{name:"v-f0a23c42",path:"/pages/1cf50330655efc69/",component:Ts,beforeEnter:(n,e,t)=>{cs("Layout","v-f0a23c42").then(t)}},{path:"/pages/1cf50330655efc69/index.html",redirect:"/pages/1cf50330655efc69/"},{path:"/06.书籍/05.《ES6 教程》笔记/31.函数式编程.html",redirect:"/pages/1cf50330655efc69/"},{name:"v-ae521f96",path:"/pages/6a8e2dc558da1b39/",component:Ts,beforeEnter:(n,e,t)=>{cs("Layout","v-ae521f96").then(t)}},{path:"/pages/6a8e2dc558da1b39/index.html",redirect:"/pages/6a8e2dc558da1b39/"},{path:"/06.书籍/05.《ES6 教程》笔记/32.Mixin.html",redirect:"/pages/6a8e2dc558da1b39/"},{name:"v-7ef3ec0a",path:"/pages/32c35f7651d6e58e/",component:Ts,beforeEnter:(n,e,t)=>{cs("Layout","v-7ef3ec0a").then(t)}},{path:"/pages/32c35f7651d6e58e/index.html",redirect:"/pages/32c35f7651d6e58e/"},{path:"/06.书籍/05.《ES6 教程》笔记/26.读懂 ECMAScript 规格.html",redirect:"/pages/32c35f7651d6e58e/"},{name:"v-1f0248bb",path:"/pages/8292d8/",component:Ts,beforeEnter:(n,e,t)=>{cs("Layout","v-1f0248bb").then(t)}},{path:"/pages/8292d8/index.html",redirect:"/pages/8292d8/"},{path:"/06.书籍/10.《Git》学习笔记/10.手册/00.常用Git命令清单.html",redirect:"/pages/8292d8/"},{name:"v-191de033",path:"/pages/8e8f80f69b775a56/",component:Ts,beforeEnter:(n,e,t)=>{cs("Layout","v-191de033").then(t)}},{path:"/pages/8e8f80f69b775a56/index.html",redirect:"/pages/8e8f80f69b775a56/"},{path:"/06.书籍/05.《ES6 教程》笔记/33.SIMD.html",redirect:"/pages/8e8f80f69b775a56/"},{name:"v-1b1fcea0",path:"/pages/4cbc21/",component:Ts,beforeEnter:(n,e,t)=>{cs("Layout","v-1b1fcea0").then(t)}},{path:"/pages/4cbc21/index.html",redirect:"/pages/4cbc21/"},{path:"/06.书籍/10.《Git》学习笔记/10.手册/06.Git命令思维导图.html",redirect:"/pages/4cbc21/"},{name:"v-d18328fe",path:"/pages/c10281/",component:Ts,beforeEnter:(n,e,t)=>{cs("Layout","v-d18328fe").then(t)}},{path:"/pages/c10281/index.html",redirect:"/pages/c10281/"},{path:"/06.书籍/10.《Git》学习笔记/10.手册/03.Git变基合并.html",redirect:"/pages/c10281/"},{name:"v-76196cb6",path:"/pages/635088/",component:Ts,beforeEnter:(n,e,t)=>{cs("Layout","v-76196cb6").then(t)}},{path:"/pages/635088/index.html",redirect:"/pages/635088/"},{path:"/06.书籍/10.《Git》学习笔记/20.文档笔记/10.Git基础与命令.html",redirect:"/pages/635088/"},{name:"v-038e5574",path:"/pages/16121351be68691b/",component:Ts,beforeEnter:(n,e,t)=>{cs("Layout","v-038e5574").then(t)}},{path:"/pages/16121351be68691b/index.html",redirect:"/pages/16121351be68691b/"},{path:"/06.书籍/05.《ES6 教程》笔记/27.异步遍历器.html",redirect:"/pages/16121351be68691b/"},{name:"v-7632ec06",path:"/pages/ea6f3b870f6dab69/",component:Ts,beforeEnter:(n,e,t)=>{cs("Layout","v-7632ec06").then(t)}},{path:"/pages/ea6f3b870f6dab69/index.html",redirect:"/pages/ea6f3b870f6dab69/"},{path:"/06.书籍/05.《ES6 教程》笔记/34.参考链接.html",redirect:"/pages/ea6f3b870f6dab69/"},{name:"v-131e313b",path:"/pages/1832fe/",component:Ts,beforeEnter:(n,e,t)=>{cs("Layout","v-131e313b").then(t)}},{path:"/pages/1832fe/index.html",redirect:"/pages/1832fe/"},{path:"/06.书籍/10.《Git》学习笔记/20.文档笔记/100.Git工具-重写历史.html",redirect:"/pages/1832fe/"},{name:"v-8c861180",path:"/pages/a399b3/",component:Ts,beforeEnter:(n,e,t)=>{cs("Layout","v-8c861180").then(t)}},{path:"/pages/a399b3/index.html",redirect:"/pages/a399b3/"},{path:"/06.书籍/10.《Git》学习笔记/20.文档笔记/40.Git分支管理-查看分支.html",redirect:"/pages/a399b3/"},{name:"v-7b53c9d4",path:"/pages/4bef1a/",component:Ts,beforeEnter:(n,e,t)=>{cs("Layout","v-7b53c9d4").then(t)}},{path:"/pages/4bef1a/index.html",redirect:"/pages/4bef1a/"},{path:"/06.书籍/10.《Git》学习笔记/20.文档笔记/20.Git分支-分支原理.html",redirect:"/pages/4bef1a/"},{name:"v-ca403bee",path:"/pages/d9e9c6/",component:Ts,beforeEnter:(n,e,t)=>{cs("Layout","v-ca403bee").then(t)}},{path:"/pages/d9e9c6/index.html",redirect:"/pages/d9e9c6/"},{path:"/06.书籍/10.《Git》学习笔记/20.文档笔记/110.Git工具-重置揭密.html",redirect:"/pages/d9e9c6/"},{name:"v-0bab8d58",path:"/pages/ea5a8c/",component:Ts,beforeEnter:(n,e,t)=>{cs("Layout","v-0bab8d58").then(t)}},{path:"/pages/ea5a8c/index.html",redirect:"/pages/ea5a8c/"},{path:"/06.书籍/10.《Git》学习笔记/20.文档笔记/30.Git分支的新建与合并-分支操作.html",redirect:"/pages/ea5a8c/"},{name:"v-a2879398",path:"/pages/49ee30/",component:Ts,beforeEnter:(n,e,t)=>{cs("Layout","v-a2879398").then(t)}},{path:"/pages/49ee30/index.html",redirect:"/pages/49ee30/"},{path:"/06.书籍/10.《Git》学习笔记/20.文档笔记/50.Git分支开发工作流.html",redirect:"/pages/49ee30/"},{name:"v-d04c94fe",path:"/pages/574d62/",component:Ts,beforeEnter:(n,e,t)=>{cs("Layout","v-d04c94fe").then(t)}},{path:"/pages/574d62/index.html",redirect:"/pages/574d62/"},{path:"/06.书籍/10.《Git》学习笔记/20.文档笔记/60.Git分支-远程分支.html",redirect:"/pages/574d62/"},{name:"v-79984a3c",path:"/pages/c984d1/",component:Ts,beforeEnter:(n,e,t)=>{cs("Layout","v-79984a3c").then(t)}},{path:"/pages/c984d1/index.html",redirect:"/pages/c984d1/"},{path:"/06.书籍/10.《Git》学习笔记/20.文档笔记/80.Git工具-查看修订版本.html",redirect:"/pages/c984d1/"},{name:"v-4ce962c9",path:"/pages/76d859/",component:Ts,beforeEnter:(n,e,t)=>{cs("Layout","v-4ce962c9").then(t)}},{path:"/pages/76d859/index.html",redirect:"/pages/76d859/"},{path:"/06.书籍/10.《Git》学习笔记/20.文档笔记/90.Git工具-交互式暂存.html",redirect:"/pages/76d859/"},{name:"v-a115cce6",path:"/pages/3a3247/",component:Ts,beforeEnter:(n,e,t)=>{cs("Layout","v-a115cce6").then(t)}},{path:"/pages/3a3247/index.html",redirect:"/pages/3a3247/"},{path:"/06.书籍/10.《Git》学习笔记/20.文档笔记/70.Git分支-变基.html",redirect:"/pages/3a3247/"},{name:"v-5e35661b",path:"/whell/web/",component:Ts,beforeEnter:(n,e,t)=>{cs("Layout","v-5e35661b").then(t)}},{path:"/whell/web/index.html",redirect:"/whell/web/"},{path:"/08.我的/05.收藏夹/01.网站轮子.html",redirect:"/whell/web/"},{name:"v-3fede6a8",path:"/friends/",component:Ts,beforeEnter:(n,e,t)=>{cs("Layout","v-3fede6a8").then(t)}},{path:"/friends/index.html",redirect:"/friends/"},{path:"/10.更多/99.友情连接.html",redirect:"/friends/"},{name:"v-1fd32e2a",path:"/categories/",component:Ts,beforeEnter:(n,e,t)=>{cs("Layout","v-1fd32e2a").then(t)}},{path:"/categories/index.html",redirect:"/categories/"},{path:"/@pages/categoriesPage.html",redirect:"/categories/"},{name:"v-1b67533c",path:"/vdoing/login/",component:Ts,beforeEnter:(n,e,t)=>{cs("Layout","v-1b67533c").then(t)}},{path:"/vdoing/login/index.html",redirect:"/vdoing/login/"},{path:"/99.私密文章登录.html",redirect:"/vdoing/login/"},{name:"v-0e579d4a",path:"/archives/",component:Ts,beforeEnter:(n,e,t)=>{cs("Layout","v-0e579d4a").then(t)}},{path:"/archives/index.html",redirect:"/archives/"},{path:"/@pages/archivesPage.html",redirect:"/archives/"},{name:"v-591997ca",path:"/tags/",component:Ts,beforeEnter:(n,e,t)=>{cs("Layout","v-591997ca").then(t)}},{path:"/tags/index.html",redirect:"/tags/"},{path:"/@pages/tagsPage.html",redirect:"/tags/"},{name:"v-08d0b636",path:"/",component:Ts,beforeEnter:(n,e,t)=>{cs("Layout","v-08d0b636").then(t)}},{path:"/index.html",redirect:"/"},{path:"*",component:Ts}],_s={title:"",description:"",base:"/blogs/",headTags:[["link",{rel:"stylesheet",href:"https://at.alicdn.com/t/font_3129839_xft6cqs5gc.css"}],["noscript",{},'<meta http-equiv="refresh" content="0; url=https://www.youngkbt.cn/noscript/"><style>.theme-vdoing-content { display:none }']],pages:[{title:"随便写点",frontmatter:{pageComponent:{name:"Catalogue",data:{key:"01.随笔",imgUrl:"/img/speak_tucao.png",description:"就纯粹的吐吐槽，写写字"}},title:"随便写点",date:"2022-09-25T12:00:00.000Z",permalink:"/speak",sidebar:!1,article:!1,comment:!1,editLink:!1,readingShow:"top"},regularPath:"/00.%E7%9B%AE%E5%BD%95%E9%A1%B5/00.%E5%AF%BC%E8%88%AA%E6%A0%8F-%E7%9B%AE%E5%BD%95%E9%A1%B5/01.%E9%9A%8F%E7%AC%94.html",relativePath:"00.目录页/00.导航栏-目录页/01.随笔.md",key:"v-09144824",path:"/speak/",lastUpdated:"2022/10/18 下午3:59:55",lastUpdatedTimestamp:1666079995e3,headersStr:null,content:"",normalizedContent:"",charsets:{}},{title:"开发工具",frontmatter:{pageComponent:{name:"Catalogue",data:{key:"03.技术",imgUrl:"/img/other.png",description:"技术文档、教程、技巧、总结等文章"}},title:"开发工具",date:"2022-09-25T12:00:00.000Z",permalink:"/technology",sidebar:!1,article:!1,comment:!1,editLink:!1,readingShow:"top"},regularPath:"/00.%E7%9B%AE%E5%BD%95%E9%A1%B5/00.%E5%AF%BC%E8%88%AA%E6%A0%8F-%E7%9B%AE%E5%BD%95%E9%A1%B5/03.%E6%8A%80%E6%9C%AF.html",relativePath:"00.目录页/00.导航栏-目录页/03.技术.md",key:"v-ff24179a",path:"/technology/",lastUpdated:"2022/10/18 下午3:59:55",lastUpdatedTimestamp:1666079995e3,headersStr:null,content:"",normalizedContent:"",charsets:{}},{title:"开发工具",frontmatter:{pageComponent:{name:"Catalogue",data:{key:"03.技术/05.技术文档",imgUrl:"https://symbol-node.oss-cn-shanghai.aliyuncs.com/blog/basic/goland.png",description:"开发工具,Visual Studio Code,搜索引擎"}},title:"开发工具",date:"2022-06-08T14:35:30.000Z",permalink:"/technology/doc",sidebar:!1,article:!1,comment:!1,editLink:!1,readingShow:"top"},regularPath:"/00.%E7%9B%AE%E5%BD%95%E9%A1%B5/03.%E6%8A%80%E6%9C%AF-%E7%9B%AE%E5%BD%95%E9%A1%B5/05.%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3.html",relativePath:"00.目录页/03.技术-目录页/05.技术文档.md",key:"v-9b7ae57e",path:"/technology/doc/",lastUpdated:"2022/9/22 下午4:28:09",lastUpdatedTimestamp:1663835289e3,headersStr:null,content:"",normalizedContent:"",charsets:{}},{title:"前端知识",frontmatter:{pageComponent:{name:"Catalogue",data:{key:"00.目录页/09.前端-目录页",imgUrl:"/img/speak_tucao.png",description:"有关前端的知识文章笔录"}},title:"前端知识",date:"2022-09-25T12:00:00.000Z",permalink:"/web",sidebar:!1,article:!1,comment:!1,editLink:!1,readingShow:"top"},regularPath:"/00.%E7%9B%AE%E5%BD%95%E9%A1%B5/00.%E5%AF%BC%E8%88%AA%E6%A0%8F-%E7%9B%AE%E5%BD%95%E9%A1%B5/09.%E5%89%8D%E7%AB%AF.html",relativePath:"00.目录页/00.导航栏-目录页/09.前端.md",key:"v-5b5a2612",path:"/web/",lastUpdated:"2022/10/18 下午3:59:55",lastUpdatedTimestamp:1666079995e3,headersStr:null,content:"",normalizedContent:"",charsets:{}},{title:"书籍",frontmatter:{pageComponent:{name:"Catalogue",data:{path:"00.目录页/06.书籍-目录页",imgUrl:"/img/web.png",description:"JavaScript、ES6、Vue框架等前端技术"}},title:"书籍",date:"2020-03-11T21:50:53.000Z",permalink:"/books",sidebar:!1,article:!1,comment:!1,editLink:!1,readingShow:"top"},regularPath:"/00.%E7%9B%AE%E5%BD%95%E9%A1%B5/00.%E5%AF%BC%E8%88%AA%E6%A0%8F-%E7%9B%AE%E5%BD%95%E9%A1%B5/06.%E4%B9%A6%E7%B1%8D.html",relativePath:"00.目录页/00.导航栏-目录页/06.书籍.md",key:"v-06139e15",path:"/books/",lastUpdated:"2022/9/22 下午4:28:09",lastUpdatedTimestamp:1663835289e3,headersStr:null,content:"",normalizedContent:"",charsets:{}},{title:"《ES6 教程》笔记",frontmatter:{pageComponent:{name:"Catalogue",data:{path:"06.书籍/05.《ES6 教程》笔记",description:"本章内容为博主在原教程基础上添加学习笔记，教程版权归原作者所有。来源：<a href='https://es6.ruanyifeng.com/' target='_blank'>ES6教程</a>"}},title:"《ES6 教程》笔记",date:"2020-01-12T15:49:22.000Z",permalink:"/books/es6/",sidebar:!1,article:!1,comment:!1,editLink:!1,readingShow:"top"},regularPath:"/00.%E7%9B%AE%E5%BD%95%E9%A1%B5/06.%E4%B9%A6%E7%B1%8D-%E7%9B%AE%E5%BD%95%E9%A1%B5/10.%E5%AD%A6%E4%B9%A0%E4%B9%A6%E7%B1%8D/05.%E3%80%8AES6%20%E6%95%99%E7%A8%8B%E3%80%8B%E7%AC%94%E8%AE%B0.html",relativePath:"00.目录页/06.书籍-目录页/10.学习书籍/05.《ES6 教程》笔记.md",key:"v-c36d31cc",path:"/books/es6/",lastUpdated:"2022/9/22 下午4:28:09",lastUpdatedTimestamp:1663835289e3,headersStr:null,content:"",normalizedContent:"",charsets:{}},{title:"《Git》学习笔记",frontmatter:{pageComponent:{name:"Catalogue",data:{path:"06.书籍/10.《Git》学习笔记",imgUrl:"https://avatars3.githubusercontent.com/u/18133?s=200&v=4",description:"<a href='https://git-scm.com/book/zh/v2' target='_blank'>Git官网文档</a>的学习笔记，以官方文档为准。"}},title:"《Git》学习笔记",date:"2020-11-18T17:40:48.000Z",permalink:"/books/git/",sidebar:!1,article:!1,comment:!1,editLink:!1,readingShow:"top"},regularPath:"/00.%E7%9B%AE%E5%BD%95%E9%A1%B5/06.%E4%B9%A6%E7%B1%8D-%E7%9B%AE%E5%BD%95%E9%A1%B5/10.%E5%AD%A6%E4%B9%A0%E4%B9%A6%E7%B1%8D/10.%E3%80%8AGit%E3%80%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.html",relativePath:"00.目录页/06.书籍-目录页/10.学习书籍/10.《Git》学习笔记.md",key:"v-3943eb72",path:"/books/git/",lastUpdated:"2022/9/22 下午4:28:09",lastUpdatedTimestamp:1663835289e3,headersStr:null,content:"",normalizedContent:"",charsets:{}},{title:"每日吐槽",frontmatter:{title:"每日吐槽",date:"2022-05-10T15:12:38.000Z",permalink:"/speak/d39dce/",categories:["吐槽"],tags:[null],readingShow:"top"},regularPath:"/01.%E9%9A%8F%E7%AC%94/01.%E5%90%90%E6%A7%BD.html",relativePath:"01.随笔/01.吐槽.md",key:"v-dc794a78",path:"/speak/d39dce/",lastUpdated:"2022/9/22 下午4:28:09",lastUpdatedTimestamp:1663835289e3,headersStr:null,content:"symbol\n\n人生也是如此，先是认识自我，而后认识世界、认识众生。格局越大，境界越高，越能超脱凡人之外，不为俗世所累。\n常听人说，格局决定命运，想来便是如此。格局大了，生活就顺了，命运自然垂青于你。\n\n- name: symbol\n  desc: 人生也是如此，先是认识自我，而后认识世界、认识众生。格局越大，境界越高，越能超脱凡人之外，不为俗世所累。<br/>常听人说，格局决定命运，想来便是如此。格局大了，生活就顺了，命运自然垂青于你。\n  bgColor: '#d3ebfe' # 可选，默认var(--bodyBg)。颜色值有#号时请添加单引号\n  textColor: '#6854A1' # 可选，默认var(--textColor)\n\n\n1\n2\n3\n4\n",normalizedContent:"symbol\n\n人生也是如此，先是认识自我，而后认识世界、认识众生。格局越大，境界越高，越能超脱凡人之外，不为俗世所累。\n常听人说，格局决定命运，想来便是如此。格局大了，生活就顺了，命运自然垂青于你。\n\n- name: symbol\n  desc: 人生也是如此，先是认识自我，而后认识世界、认识众生。格局越大，境界越高，越能超脱凡人之外，不为俗世所累。<br/>常听人说，格局决定命运，想来便是如此。格局大了，生活就顺了，命运自然垂青于你。\n  bgcolor: '#d3ebfe' # 可选，默认var(--bodybg)。颜色值有#号时请添加单引号\n  textcolor: '#6854a1' # 可选，默认var(--textcolor)\n\n\n1\n2\n3\n4\n",charsets:{cjk:!0}},{title:"测试私密文章",frontmatter:{private:!0,title:"测试私密文章",date:"2022-09-22T16:55:13.000Z",permalink:"/pages/b6d59b/",categories:["随笔"],tags:[null],readingShow:"top"},regularPath:"/01.%E9%9A%8F%E7%AC%94/02.%E6%B5%8B%E8%AF%95%E7%A7%81%E5%AF%86%E6%96%87%E7%AB%A0.html",relativePath:"01.随笔/02.测试私密文章.md",key:"v-2c0c67ee",path:"/pages/b6d59b/",lastUpdated:"2022/10/18 下午3:59:55",lastUpdatedTimestamp:1666079995e3,headersStr:null,content:"测试私密文章",normalizedContent:"测试私密文章",charsets:{cjk:!0}},{title:"Markdown使用教程",frontmatter:{title:"Markdown使用教程",date:"2019-12-25T14:27:01.000Z",permalink:"/pages/ad247c4332211551",categories:["技术","技术文档"],tags:[null],readingShow:"top"},regularPath:"/03.%E6%8A%80%E6%9C%AF/05.%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/02.Markdown%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B.html",relativePath:"03.技术/05.技术文档/02.Markdown使用教程.md",key:"v-5dc84f53",path:"/pages/ad247c4332211551/",headers:[{level:2,title:"一、Markdown",slug:"一、markdown",normalizedTitle:"一、markdown",charIndex:19},{level:3,title:"简介",slug:"简介",normalizedTitle:"简介",charIndex:34},{level:3,title:"应用",slug:"应用",normalizedTitle:"应用",charIndex:87},{level:3,title:"编辑器",slug:"编辑器",normalizedTitle:"编辑器",charIndex:152},{level:2,title:"二、徽章",slug:"二、徽章",normalizedTitle:"二、徽章",charIndex:195},{level:4,title:"什么是徽章",slug:"什么是徽章",normalizedTitle:"什么是徽章",charIndex:203},{level:4,title:"徽章的使用",slug:"徽章的使用",normalizedTitle:"徽章的使用",charIndex:320},{level:2,title:"三、设置目录",slug:"三、设置目录",normalizedTitle:"三、设置目录",charIndex:582},{level:2,title:"四、标题",slug:"四、标题",normalizedTitle:"四、标题",charIndex:1200},{level:2,title:"二级标题",slug:"二级标题",normalizedTitle:"二级标题",charIndex:1218},{level:3,title:"三级标题",slug:"三级标题",normalizedTitle:"三级标题",charIndex:1230},{level:4,title:"四级标题",slug:"四级标题",normalizedTitle:"四级标题",charIndex:1244},{level:2,title:"五、文本",slug:"五、文本",normalizedTitle:"五、文本",charIndex:1288},{level:3,title:"段落",slug:"段落",normalizedTitle:"段落",charIndex:1300},{level:3,title:"字体",slug:"字体",normalizedTitle:"字体",charIndex:1310},{level:3,title:"删除线",slug:"删除线",normalizedTitle:"删除线",charIndex:1320},{level:3,title:"下划线",slug:"下划线",normalizedTitle:"下划线",charIndex:1331},{level:3,title:"文字高亮",slug:"文字高亮",normalizedTitle:"文字高亮",charIndex:1342},{level:3,title:"分隔线",slug:"分隔线",normalizedTitle:"分隔线",charIndex:1354},{level:3,title:"脚注",slug:"脚注",normalizedTitle:"脚注",charIndex:1365},{level:2,title:"六、列表",slug:"六、列表",normalizedTitle:"六、列表",charIndex:1373},{level:3,title:"无序列表",slug:"无序列表",normalizedTitle:"无序列表",charIndex:1385},{level:3,title:"有序列表",slug:"有序列表",normalizedTitle:"有序列表",charIndex:1397},{level:3,title:"折叠列表",slug:"折叠列表",normalizedTitle:"折叠列表",charIndex:1409},{level:3,title:"带复选框列表",slug:"带复选框列表",normalizedTitle:"带复选框列表",charIndex:1421},{level:3,title:"列表嵌套",slug:"列表嵌套",normalizedTitle:"列表嵌套",charIndex:1435},{level:2,title:"七、区块引用",slug:"七、区块引用",normalizedTitle:"七、区块引用",charIndex:1445},{level:4,title:"区块嵌套",slug:"区块嵌套",normalizedTitle:"区块嵌套",charIndex:1459},{level:4,title:"区块中使用列表",slug:"区块中使用列表",normalizedTitle:"区块中使用列表",charIndex:1471},{level:4,title:"列表中使用区块",slug:"列表中使用区块",normalizedTitle:"列表中使用区块",charIndex:1486},{level:2,title:"八、代码",slug:"八、代码",normalizedTitle:"八、代码",charIndex:1499},{level:3,title:"代码区块",slug:"代码区块",normalizedTitle:"代码区块",charIndex:1511},{level:2,title:"九、链接",slug:"九、链接",normalizedTitle:"九、链接",charIndex:1521},{level:3,title:"变量链接",slug:"变量链接",normalizedTitle:"变量链接",charIndex:1533},{level:3,title:"Github仓库中使用内部链接",slug:"github仓库中使用内部链接",normalizedTitle:"github仓库中使用内部链接",charIndex:4951},{level:3,title:"锚点链接",slug:"锚点链接",normalizedTitle:"锚点链接",charIndex:1566},{level:2,title:"十、图片",slug:"十、图片",normalizedTitle:"十、图片",charIndex:1576},{level:3,title:"图片宽高",slug:"图片宽高",normalizedTitle:"图片宽高",charIndex:1588},{level:3,title:"相对路径以及Github中使用图片",slug:"相对路径以及github中使用图片",normalizedTitle:"相对路径以及github中使用图片",charIndex:1600},{level:2,title:"十一、表格",slug:"十一、表格",normalizedTitle:"十一、表格",charIndex:1623},{level:2,title:"十二、Emoji表情包",slug:"十二、emoji表情包",normalizedTitle:"十二、emoji表情包",charIndex:1634},{level:2,title:"十三、其他技巧",slug:"十三、其他技巧",normalizedTitle:"十三、其他技巧",charIndex:1651},{level:3,title:"支持的 HTML 元素",slug:"支持的-html-元素",normalizedTitle:"支持的 html 元素",charIndex:1666},{level:3,title:"转义",slug:"转义",normalizedTitle:"转义",charIndex:1685},{level:3,title:"数学公式",slug:"数学公式",normalizedTitle:"数学公式",charIndex:1695},{level:3,title:"图表",slug:"图表",normalizedTitle:"图表",charIndex:1707},{level:3,title:"流程图",slug:"流程图",normalizedTitle:"流程图",charIndex:1717},{level:3,title:"时序图",slug:"时序图",normalizedTitle:"时序图",charIndex:1728},{level:3,title:"甘特图",slug:"甘特图",normalizedTitle:"甘特图",charIndex:1739}],excerpt:'<h1 id="markdown使用教程"><a class="header-anchor" href="#markdown使用教程">#</a> Markdown使用教程</h1>\n<h2 id="一、markdown"><a class="header-anchor" href="#一、markdown">#</a> 一、Markdown</h2>\n<h3 id="简介"><a class="header-anchor" href="#简介">#</a> 简介</h3>\n<p><img src="https://raw.githubusercontent.com/xugaoyi/image_store/master/blog/md_logo.png" alt="logo"></p>\n<p><code>Markdown</code> 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档。</p>\n',lastUpdated:"2022/9/22 下午4:28:09",lastUpdatedTimestamp:1663835289e3,headersStr:"一、Markdown 简介 应用 编辑器 二、徽章 什么是徽章 徽章的使用 三、设置目录 四、标题 二级标题 三级标题 四级标题 五、文本 段落 字体 删除线 下划线 文字高亮 分隔线 脚注 六、列表 无序列表 有序列表 折叠列表 带复选框列表 列表嵌套 七、区块引用 区块嵌套 区块中使用列表 列表中使用区块 八、代码 代码区块 九、链接 变量链接 Github仓库中使用内部链接 锚点链接 十、图片 图片宽高 相对路径以及Github中使用图片 十一、表格 十二、Emoji表情包 十三、其他技巧 支持的 HTML 元素 转义 数学公式 图表 流程图 时序图 甘特图",content:"# Markdown使用教程\n\n\n# 一、Markdown\n\n\n# 简介\n\n\n\nMarkdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档。\n\n\n# 应用\n\n当前许多网站都广泛使用 Markdown 来撰写帮助文档或是用于论坛上发表消息。例如：GitHub、简书、知乎等\n\n\n# 编辑器\n\n推荐使用 Typora，官网：https://typora.io/\n\n\n# 二、徽章\n\n# 什么是徽章\n\n徽章是一种小巧精美的小图标，一般配有相关文字进行辅助说明，可对数据进行监控，链接跳转等，富有表现力。\n\n常见于 github项目主页，但其不仅出现于 github 项目主页，凡是能够表现图片的地方都可以出现徽章。\n\n# 徽章的使用\n\n * 在 markdown中使用\n\n格式:\n[![图片文字说明](图片源地址)](超链接地址)  # 即超链接内部嵌套图片\n\n语法：\n[![github](https://img.shields.io/badge/github-xugaoyi-brightgreen.svg)](https://github.com/xugaoyi)\n\n\n1\n2\n3\n4\n5\n\n\n\n\n徽章生成网站：https://shields.io/\n\n本文档主要介绍markdown，不对徽章做过多介绍，详细介绍请 戳我 了解。\n\n\n# 三、设置目录\n\n设置之后会根据分级标题来自动生成目录。\n\n[TOC]\n\n\n1\n\n\n> 注：github暂未支持。\n\n[toc]\n\n在github生成TOC的方法：https://github.com/ekalinin/github-markdown-toc\n\nwindows系统需要基于golang实现的工具：https://github.com/ekalinin/github-markdown-toc.go\n\n> 如果你有GO语言的编译环境，可以尝试自己编译，如果没有，可以直接下载编译好的二进制文件。\n> \n> 如windows系统64位 下载：gh-md-toc.windows.amd64.tgz （386 是32位，amd64是64位）\n> \n> 下载解压后，发现没有后缀名无法识别，实际上这是个exe文件，所以只需要暴力地在后面加上.exe就可以开始愉快使用了。\n> \n> 使用方法：\n> \n>  1. 首先将.md文档复制到gh-md-toc.exe的根目录下\n>  2. 在该目录下打开系统命令行，输入命令：gh-md-toc.exe README.MD 生成目录\n>  3. 把生成的目录复制到.md文件即可。\n\n这是gh-md-toc生成的目录：\n\n * 一、Markdown\n   * 简介\n   * 应用\n   * 编辑器\n * 二、徽章\n   * 什么是徽章\n   * 徽章的使用\n * 三、设置目录\n * 四、标题\n * 一级标题\n   * 二级标题\n     * 三级标题\n       * 四级标题\n         * 五级标题\n           * 六级标题\n   * 五、文本\n     * 段落\n     * 字体\n     * 删除线\n     * 下划线\n     * 文字高亮\n     * 分隔线\n     * 脚注\n   * 六、列表\n     * 无序列表\n     * 有序列表\n     * 折叠列表\n     * 带复选框列表\n     * 列表嵌套\n   * 七、区块引用\n     * 区块嵌套\n     * 区块中使用列表\n     * 列表中使用区块\n   * 八、代码\n     * 代码区块\n   * 九、链接\n     * 变量链接\n     * Github中使用内部链接\n     * 锚点链接\n   * 十、图片\n     * 图片宽高\n     * 相对路径以及Github中使用图片\n   * 十一、表格\n   * 十二、Emoji表情包\n   * 十三、其他技巧\n     * 支持的 HTML 元素\n     * 转义\n     * 数学公式\n     * 图表\n     * 流程图\n     * 时序图\n     * 甘特图\n\n\n# 四、标题\n\n# 一级标题\n## 二级标题\n### 三级标题\n#### 四级标题\n##### 五级标题\n###### 六级标题\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# 一级标题\n\n\n# 二级标题\n\n\n# 三级标题\n\n# 四级标题\n\n# 五级标题\n\n# 六级标题\n\n\n# 五、文本\n\n\n# 段落\n\nMarkdown 段落没有特殊的格式，直接编写文字，需要段落缩进时使用2个Tab\n\n\n# 字体\n\n*斜体文本*\n或 _斜体文本_\n**粗体文本**\n或  __粗体文本__\n***粗斜体文本***\n或 ___粗斜体文本___\n\n\n1\n2\n3\n4\n5\n6\n\n\n斜体文本\n\n斜体文本\n\n粗体文本\n\n粗体文本\n\n粗斜体文本\n\n粗斜体文本\n\n\n# 删除线\n\n如果段落上的文字要添加删除线，只需要在文字的两端加上两个波浪线 ~~ 即可，实例如下：\n\n~~BAIDU.COM~~\n\n\n1\n\n\nBAIDU.COM\n\n\n# 下划线\n\n下划线可以通过 HTML 的 <u> 标签来实现：\n\n<u>带下划线的文本</u>\n\n\n1\n\n\n<u>带下划线的文本</u>\n\n\n# 文字高亮\n\n文字高亮能使行内部分文字高亮，使用一对反引号。\n\n`html` `css` `javascript`\n\n\n1\n\n\nhtml css javascript\n\n\n# 分隔线\n\n你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线：\n\n***\n\n*****\n\n- - -\n\n----------\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n----------------------------------------\n\n\n# 脚注\n\n脚注是对文本的补充说明。\n\n[^变量]\n在文档结尾或其他位置給变量赋值：\n[^变量]: 注明框内显示的内容\n\n鼠标移到这里> [^哈喽]\n[^哈喽]: 注明框内显示的内容\n\n\n1\n2\n3\n4\n5\n6\n\n\n> 注：在部分线上预览未支持\n\n鼠标移到这里> ^哈喽\n\n\n# 六、列表\n\n\n# 无序列表\n\n使用星号 *、加号 +或是减号 -作为列表标记：\n\n* 第一项\n* 第二项\n\n+ 第一项\n+ 第二项\n\n- 第一项\n- 第二项\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n * 第一项\n * 第二项\n\n\n# 有序列表\n\n使用数字并加上 . 号来表示\n\n1. 第一项\n2. 第二项\n\n\n1\n2\n\n 1. 第一项\n 2. 第二项\n\n\n# 折叠列表\n\n<details>\n<summary>点我打开关闭折叠</summary>\n 折叠内容\n <ul>\n     <li>1</li>\n     <li>2</li>\n     <li>3</li>\n </ul>\n</details>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n> 注意：<details> 标签内写markdown代码无效，可写html代码，如ul>li、table等\n\n点我打开关闭折叠 折叠内容\n * 1\n * 2\n * 3\n\n包含table的折叠\n\n分类        例词\n人称代词-主格   I我，you你，he他，she她，they他们， we我们\n人称代词-宾格   me我， you你， him他， her她， them他们， us我们\n物主代词      my我的， his他的， your你的（your你们的）， their他们的， hers她的\n指示代词      this这， that那， these这些， those 那些\n反身代词      myself我自己， himself他自己， themselves他们自己，\n          yourself你(们)自己，herself她自己\n疑问代词      who谁， what什么， which哪个\n不定代词      some一些， many许多， both两个、两个都， any许多\n关系代词      which……的物， who……的人， that……的人或物， who谁， that引导定语从句\n相互代词      each other 互相， one another互相\n连接代词      who,whom,whose,what,which,whatever,whichever,whoever,whomever\n替代词       one（单数），ones（复数）\n\n\n# 带复选框列表\n\n* [x] 第一项\n* [ ] 第二项\n* [ ] 第三项\n\n\n1\n2\n3\n\n\n> 注：在部分线上预览未支持\n\n * [X] 第一项\n * [ ] 第二项\n * [ ] 第三项\n\n\n# 列表嵌套\n\n1. 第一项：\n    - 第一项嵌套的第一个元素\n    - 第一项嵌套的第二个元素\n2. 第二项：\n    - 第二项嵌套的第一个元素\n       - 第三层嵌套\n\n\n1\n2\n3\n4\n5\n6\n\n 1. 第一项\n    * 嵌套1\n    * 嵌套2\n 2. 第二项\n    * 嵌套1\n      * 嵌套2\n\n\n# 七、区块引用\n\n区块引用是在段落开头使用 >符号 ，然后后面紧跟一个空格符号：\n\n> 区块引用\n\n\n1\n\n\n> 区块引用\n> \n> Typora中回车键自动延伸区块\n\n# 区块嵌套\n\n> 第一层\n> > 第二层\n> > > 第三层\n\n\n1\n2\n3\n\n\n> 第一层\n> \n> > 第二层\n> > \n> > > 第三层\n\n# 区块中使用列表\n\n> 区块中使用列表\n> 1. 第一项\n> 2. 第二项\n> * 111\n> * 222\n\n\n1\n2\n3\n4\n5\n\n\n> 区块中使用列表\n> \n>  1. 第一项\n>  2. 第二项\n>     * 111\n>     * 222\n\n# 列表中使用区块\n\n* 第一项\n    > 区块\n* 第二项\n\n\n1\n2\n3\n\n\n * 第一项\n   \n   > 区块\n   > \n   > 区块\n\n * 第二项\n\n\n# 八、代码\n\n如果是段落上的一个代码片段可以用反引号把它包起来（`），示例：\n\n`alert()`\n\n\n1\n\n\nalert()\n\n\n# 代码区块\n\n用三个反引号 ``` 包裹一段代码，并指定一种语言（也可以不指定），指定代码语言后会有代码的颜色高亮\n\n本代码区块为示例说明：\n\n```javascript\nfunction test() {\n\talert('test')\n}\n\n\n1\n2\n3\n4\n\n\n\n效果：\n\n```javascript\nfunction test() {\n\talert('test')\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# 九、链接\n\n格式：\n\n[链接名称](链接地址)\n\n[链接名称](链接地址,可选的alt)\n\n或\n\n<链接地址>\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n示例：\n\n[百度](http://www.baidu.com,'百度')\n\n\n1\n\n\n百度\n\n直接显示链接地址：\n\n<http://www.baidu.com>\n\n\n1\n\n\nhttp://www.baidu.com\n\n\n# 变量链接\n\n链接可以用变量来代替，文档末尾或其他位置附带变量地址：\n\n这个链接用 1 作为网址变量 [Google][1]\n这个链接用 baidu 作为网址变量 [Baidu][baidu]\n\n然后在文档的结尾或其他位置给变量赋值（网址）\n  [1]: http://www.google.com/\n  [baidu]: http://www.baidu.com/\n\n\n1\n2\n3\n4\n5\n6\n\n\n这个链接用 1 作为网址变量 Google\n\n这个链接用 baidu 作为网址变量 Baidu\n\n\n# Github仓库中使用内部链接\n\n可使用相对路径（前提是有该路径下的文件）\n[test](test.md)\n\n\n1\n2\n\n\ntest\n\n\n# 锚点链接\n\n本文件中每一个标题都是一个锚点，和HTML的锚点（#）类似\n\n[Markdown](#Markdown)\n\n\n1\n\n\n> 注： github对含有标点符号的标题进行锚点时会忽略掉标点符号， 本页中，如果这样写则无法跳转：[链接](#九、链接) 正确写法：[链接](#九链接)\n\nMarkdown\n\n链接\n\n流程图\n\n\n# 十、图片\n\n和链接的区别是前面多一个感叹号 !\n\n![图片名](图片链接)\n\n\n1\n\n\n当然，你也可以像链接那样对图片地址使用变量:\n\n这里链接用 img 作为图片地址变量\n然后在文档的结尾或其他位置给变量赋值（图片地址）\n![RUNOOB][img]\n[img]: https://raw.githubusercontent.com/xugaoyi/image_store/master/blog/md_logo.png\n\n\n1\n2\n3\n4\n\n\n\n\n\n# 图片宽高\n\n如下想设置图片宽高，可以使用 <img> 标签。\n\n<img src=\"https://raw.githubusercontent.com/xugaoyi/image_store/master/blog/md_logo.png\" width=\"50px\" height=\"30px\">\n\n\n1\n\n\n\n# 相对路径以及Github中使用图片\n\n不管是在本地还是在github同一个仓库中，如果图片存在，可以使用相对路径。\n\n相对路径图片：\n\n![头像图片](./md-img/test.jpg)\n\n\n1\n\n\ngithub上如果引用其他github仓库中的图片则要注意地址格式：仓库地址/raw/分支名/图片路径 或 https://raw.githubusercontent.com/用户名/仓库名/分支名/图片路径\n\n![其他仓库的图片1](https://github.com/xugaoyi/vue-music/raw/master/src/common/image/default.png)\n或\n![其他仓库的图片2](https://raw.githubusercontent.com/xugaoyi/image_store/master/blog/md_logo.png)\n\n\n\n1\n2\n3\n4\n\n\n其他仓库的图片\n\n其他仓库的图片2\n\n\n# 十一、表格\n\n制作表格使用 |来分隔不同的单元格，使用 -来分隔表头和其他行。\n\n|  表头   | 表头  |\n|  ----  | ----  |\n| 单元格  | 单元格 |\n| 单元格  | 单元格 |\n\n\n1\n2\n3\n4\n\n\n表头    表头\n单元格   单元格\n单元格   单元格\n\n对齐方式\n\n * -: 设置内容和标题栏居右对齐\n * :- 设置内容和标题栏居左对齐\n * :-: 设置内容和标题栏居中对齐\n\n| 左对齐 | 右对齐 | 居中对齐 |\n| :-----| ----: | :----: |\n| 单元格 | 单元格 | 单元格 |\n| 单元格 | 单元格 | 单元格 |\n\n\n1\n2\n3\n4\n\n\n左对齐   右对齐   居中对齐\n单元格   单元格   单元格\n单元格   单元格   单元格\n\n\n# 十二、Emoji表情包\n\nEmoji表情英文名的前后加冒号，Typore上先输入冒号再输入首字母有表情提示\n\n:smirk:\n\n\n1\n\n\n💋 😸🙈🐴 😏😊😃😄 ☀️\n\n更多表情名称请查看：表情包清单\n\n\n# 十三、其他技巧\n\n\n# 支持的 HTML 元素\n\n不在 Markdown 语法涵盖范围之内的标签，都可以直接在文档里面用 HTML 撰写。\n\n目前支持的 HTML 元素有：<kbd> <b> <i> <em> <sup> <sub> <br>等等 ，如：\n\n使用 <kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>Del</kbd> 重启电脑\n\n\n1\n\n\n使用 <kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>Del</kbd> 重启电脑\n\n<b>我是使用b标签的加粗字体</b>\n\n\n# 转义\n\nMarkdown 使用了很多特殊符号来表示特定的意义，如果需要显示特定的符号则需要使用反斜杠转义字符：\n\n**未转义星号显示加粗**\n\\*\\* 转义显示星号 \\*\\*\n\n\n1\n2\n\n\n未转义星号显示加粗 ** 转义显示星号 **\n\nMarkdown 支持以下这些符号前面加上反斜杠来帮助插入普通的符号：\n\n\\   反斜线\n`   反引号\n*   星号\n_   下划线\n{}  花括号\n[]  方括号\n()  小括号\n#   井字号\n+   加号\n-   减号\n.   英文句点\n!   感叹号\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n----------------------------------------\n\n*** 以下部分在Github或其他在线预览中暂未支持 ***\n\n----------------------------------------\n\n\n# 数学公式\n\n当你需要在编辑器中插入数学公式时，可以使用两个美元符 $$ 包裹 TeX 或 LaTeX 格式的数学公式来实现。提交后，问答和文章页会根据需要加载 Mathjax 对数学公式进行渲染。如：\n\n$$\n\\mathbf{V}_1 \\times \\mathbf{V}_2 =  \\begin{vmatrix}\n\\mathbf{i} & \\mathbf{j} & \\mathbf{k} \\\\\n\\frac{\\partial X}{\\partial u} &  \\frac{\\partial Y}{\\partial u} & 0 \\\\\n\\frac{\\partial X}{\\partial v} &  \\frac{\\partial Y}{\\partial v} & 0 \\\\\n\\end{vmatrix}\n$$tep1}{\\style{visibility:hidden}{(x+1)(x+1)}}\n$$\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n$$ \\mathbf{V}_1 \\times \\mathbf{V}_2 = \\begin{vmatrix} \\mathbf{i} & \\mathbf{j} & \\mathbf{k} \\ \\frac{\\partial X}{\\partial u} & \\frac{\\partial Y}{\\partial u} & 0 \\ \\frac{\\partial X}{\\partial v} & \\frac{\\partial Y}{\\partial v} & 0 \\ \\end{vmatrix} $$\n\n\n# 图表\n\n```chart\n,Budget,Income,Expenses,Debt\nJune,5000,8000,4000,6000\nJuly,3000,1000,4000,3000\nAug,5000,7000,6000,3000\nSep,7000,2000,3000,1000\nOct,6000,5000,4000,2000\nNov,4000,3000,5000,\n\ntype: pie\ntitle: Monthly Revenue\nx.title: Amount\ny.title: Month\ny.suffix: $\n```\n```mermaid\nsequenceDiagram\nA->>B: 是否已收到消息？\nB--\x3e>A: 已收到消息\n```\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n\n> 注：在Typora中未支持\n\n\n# 流程图\n\n语法：\n```mermaid\ngraph TD\nA[模块A] --\x3e|A1| B(模块B)\nB --\x3e C{判断条件C}\nC --\x3e|条件C1| D[模块D]\nC --\x3e|条件C2| E[模块E]\nC --\x3e|条件C3| F[模块F]\n```\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n流程图相关文章：\n\nhttps://www.jianshu.com/p/b421cc723da5\n\nhttp://www.imooc.com/article/292708\n\n\n# 时序图\n\n```mermaid\nsequenceDiagram\nA->>B: 是否已收到消息？\nB--\x3e>A: 已收到消息\n```\n\n\n1\n2\n3\n4\n5\n\n\n\n# 甘特图\n\n```mermaid\ngantt\ntitle 甘特图\ndateFormat  YYYY-MM-DD\nsection 项目A\n任务1           :a1, 2018-06-06, 30d\n任务2     :after a1  , 20d\nsection 项目B\n任务3      :2018-06-12  , 12d\n任务4      : 24d\n```\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n[回到顶部](#markdown使用教程)\n",normalizedContent:"# markdown使用教程\n\n\n# 一、markdown\n\n\n# 简介\n\n\n\nmarkdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档。\n\n\n# 应用\n\n当前许多网站都广泛使用 markdown 来撰写帮助文档或是用于论坛上发表消息。例如：github、简书、知乎等\n\n\n# 编辑器\n\n推荐使用 typora，官网：https://typora.io/\n\n\n# 二、徽章\n\n# 什么是徽章\n\n徽章是一种小巧精美的小图标，一般配有相关文字进行辅助说明，可对数据进行监控，链接跳转等，富有表现力。\n\n常见于 github项目主页，但其不仅出现于 github 项目主页，凡是能够表现图片的地方都可以出现徽章。\n\n# 徽章的使用\n\n * 在 markdown中使用\n\n格式:\n[![图片文字说明](图片源地址)](超链接地址)  # 即超链接内部嵌套图片\n\n语法：\n[![github](https://img.shields.io/badge/github-xugaoyi-brightgreen.svg)](https://github.com/xugaoyi)\n\n\n1\n2\n3\n4\n5\n\n\n\n\n徽章生成网站：https://shields.io/\n\n本文档主要介绍markdown，不对徽章做过多介绍，详细介绍请 戳我 了解。\n\n\n# 三、设置目录\n\n设置之后会根据分级标题来自动生成目录。\n\n[toc]\n\n\n1\n\n\n> 注：github暂未支持。\n\n[toc]\n\n在github生成toc的方法：https://github.com/ekalinin/github-markdown-toc\n\nwindows系统需要基于golang实现的工具：https://github.com/ekalinin/github-markdown-toc.go\n\n> 如果你有go语言的编译环境，可以尝试自己编译，如果没有，可以直接下载编译好的二进制文件。\n> \n> 如windows系统64位 下载：gh-md-toc.windows.amd64.tgz （386 是32位，amd64是64位）\n> \n> 下载解压后，发现没有后缀名无法识别，实际上这是个exe文件，所以只需要暴力地在后面加上.exe就可以开始愉快使用了。\n> \n> 使用方法：\n> \n>  1. 首先将.md文档复制到gh-md-toc.exe的根目录下\n>  2. 在该目录下打开系统命令行，输入命令：gh-md-toc.exe readme.md 生成目录\n>  3. 把生成的目录复制到.md文件即可。\n\n这是gh-md-toc生成的目录：\n\n * 一、markdown\n   * 简介\n   * 应用\n   * 编辑器\n * 二、徽章\n   * 什么是徽章\n   * 徽章的使用\n * 三、设置目录\n * 四、标题\n * 一级标题\n   * 二级标题\n     * 三级标题\n       * 四级标题\n         * 五级标题\n           * 六级标题\n   * 五、文本\n     * 段落\n     * 字体\n     * 删除线\n     * 下划线\n     * 文字高亮\n     * 分隔线\n     * 脚注\n   * 六、列表\n     * 无序列表\n     * 有序列表\n     * 折叠列表\n     * 带复选框列表\n     * 列表嵌套\n   * 七、区块引用\n     * 区块嵌套\n     * 区块中使用列表\n     * 列表中使用区块\n   * 八、代码\n     * 代码区块\n   * 九、链接\n     * 变量链接\n     * github中使用内部链接\n     * 锚点链接\n   * 十、图片\n     * 图片宽高\n     * 相对路径以及github中使用图片\n   * 十一、表格\n   * 十二、emoji表情包\n   * 十三、其他技巧\n     * 支持的 html 元素\n     * 转义\n     * 数学公式\n     * 图表\n     * 流程图\n     * 时序图\n     * 甘特图\n\n\n# 四、标题\n\n# 一级标题\n## 二级标题\n### 三级标题\n#### 四级标题\n##### 五级标题\n###### 六级标题\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# 一级标题\n\n\n# 二级标题\n\n\n# 三级标题\n\n# 四级标题\n\n# 五级标题\n\n# 六级标题\n\n\n# 五、文本\n\n\n# 段落\n\nmarkdown 段落没有特殊的格式，直接编写文字，需要段落缩进时使用2个tab\n\n\n# 字体\n\n*斜体文本*\n或 _斜体文本_\n**粗体文本**\n或  __粗体文本__\n***粗斜体文本***\n或 ___粗斜体文本___\n\n\n1\n2\n3\n4\n5\n6\n\n\n斜体文本\n\n斜体文本\n\n粗体文本\n\n粗体文本\n\n粗斜体文本\n\n粗斜体文本\n\n\n# 删除线\n\n如果段落上的文字要添加删除线，只需要在文字的两端加上两个波浪线 ~~ 即可，实例如下：\n\n~~baidu.com~~\n\n\n1\n\n\nbaidu.com\n\n\n# 下划线\n\n下划线可以通过 html 的 <u> 标签来实现：\n\n<u>带下划线的文本</u>\n\n\n1\n\n\n<u>带下划线的文本</u>\n\n\n# 文字高亮\n\n文字高亮能使行内部分文字高亮，使用一对反引号。\n\n`html` `css` `javascript`\n\n\n1\n\n\nhtml css javascript\n\n\n# 分隔线\n\n你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线：\n\n***\n\n*****\n\n- - -\n\n----------\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n----------------------------------------\n\n\n# 脚注\n\n脚注是对文本的补充说明。\n\n[^变量]\n在文档结尾或其他位置給变量赋值：\n[^变量]: 注明框内显示的内容\n\n鼠标移到这里> [^哈喽]\n[^哈喽]: 注明框内显示的内容\n\n\n1\n2\n3\n4\n5\n6\n\n\n> 注：在部分线上预览未支持\n\n鼠标移到这里> ^哈喽\n\n\n# 六、列表\n\n\n# 无序列表\n\n使用星号 *、加号 +或是减号 -作为列表标记：\n\n* 第一项\n* 第二项\n\n+ 第一项\n+ 第二项\n\n- 第一项\n- 第二项\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n * 第一项\n * 第二项\n\n\n# 有序列表\n\n使用数字并加上 . 号来表示\n\n1. 第一项\n2. 第二项\n\n\n1\n2\n\n 1. 第一项\n 2. 第二项\n\n\n# 折叠列表\n\n<details>\n<summary>点我打开关闭折叠</summary>\n 折叠内容\n <ul>\n     <li>1</li>\n     <li>2</li>\n     <li>3</li>\n </ul>\n</details>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n> 注意：<details> 标签内写markdown代码无效，可写html代码，如ul>li、table等\n\n点我打开关闭折叠 折叠内容\n * 1\n * 2\n * 3\n\n包含table的折叠\n\n分类        例词\n人称代词-主格   i我，you你，he他，she她，they他们， we我们\n人称代词-宾格   me我， you你， him他， her她， them他们， us我们\n物主代词      my我的， his他的， your你的（your你们的）， their他们的， hers她的\n指示代词      this这， that那， these这些， those 那些\n反身代词      myself我自己， himself他自己， themselves他们自己，\n          yourself你(们)自己，herself她自己\n疑问代词      who谁， what什么， which哪个\n不定代词      some一些， many许多， both两个、两个都， any许多\n关系代词      which……的物， who……的人， that……的人或物， who谁， that引导定语从句\n相互代词      each other 互相， one another互相\n连接代词      who,whom,whose,what,which,whatever,whichever,whoever,whomever\n替代词       one（单数），ones（复数）\n\n\n# 带复选框列表\n\n* [x] 第一项\n* [ ] 第二项\n* [ ] 第三项\n\n\n1\n2\n3\n\n\n> 注：在部分线上预览未支持\n\n * [x] 第一项\n * [ ] 第二项\n * [ ] 第三项\n\n\n# 列表嵌套\n\n1. 第一项：\n    - 第一项嵌套的第一个元素\n    - 第一项嵌套的第二个元素\n2. 第二项：\n    - 第二项嵌套的第一个元素\n       - 第三层嵌套\n\n\n1\n2\n3\n4\n5\n6\n\n 1. 第一项\n    * 嵌套1\n    * 嵌套2\n 2. 第二项\n    * 嵌套1\n      * 嵌套2\n\n\n# 七、区块引用\n\n区块引用是在段落开头使用 >符号 ，然后后面紧跟一个空格符号：\n\n> 区块引用\n\n\n1\n\n\n> 区块引用\n> \n> typora中回车键自动延伸区块\n\n# 区块嵌套\n\n> 第一层\n> > 第二层\n> > > 第三层\n\n\n1\n2\n3\n\n\n> 第一层\n> \n> > 第二层\n> > \n> > > 第三层\n\n# 区块中使用列表\n\n> 区块中使用列表\n> 1. 第一项\n> 2. 第二项\n> * 111\n> * 222\n\n\n1\n2\n3\n4\n5\n\n\n> 区块中使用列表\n> \n>  1. 第一项\n>  2. 第二项\n>     * 111\n>     * 222\n\n# 列表中使用区块\n\n* 第一项\n    > 区块\n* 第二项\n\n\n1\n2\n3\n\n\n * 第一项\n   \n   > 区块\n   > \n   > 区块\n\n * 第二项\n\n\n# 八、代码\n\n如果是段落上的一个代码片段可以用反引号把它包起来（`），示例：\n\n`alert()`\n\n\n1\n\n\nalert()\n\n\n# 代码区块\n\n用三个反引号 ``` 包裹一段代码，并指定一种语言（也可以不指定），指定代码语言后会有代码的颜色高亮\n\n本代码区块为示例说明：\n\n```javascript\nfunction test() {\n\talert('test')\n}\n\n\n1\n2\n3\n4\n\n\n\n效果：\n\n```javascript\nfunction test() {\n\talert('test')\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# 九、链接\n\n格式：\n\n[链接名称](链接地址)\n\n[链接名称](链接地址,可选的alt)\n\n或\n\n<链接地址>\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n示例：\n\n[百度](http://www.baidu.com,'百度')\n\n\n1\n\n\n百度\n\n直接显示链接地址：\n\n<http://www.baidu.com>\n\n\n1\n\n\nhttp://www.baidu.com\n\n\n# 变量链接\n\n链接可以用变量来代替，文档末尾或其他位置附带变量地址：\n\n这个链接用 1 作为网址变量 [google][1]\n这个链接用 baidu 作为网址变量 [baidu][baidu]\n\n然后在文档的结尾或其他位置给变量赋值（网址）\n  [1]: http://www.google.com/\n  [baidu]: http://www.baidu.com/\n\n\n1\n2\n3\n4\n5\n6\n\n\n这个链接用 1 作为网址变量 google\n\n这个链接用 baidu 作为网址变量 baidu\n\n\n# github仓库中使用内部链接\n\n可使用相对路径（前提是有该路径下的文件）\n[test](test.md)\n\n\n1\n2\n\n\ntest\n\n\n# 锚点链接\n\n本文件中每一个标题都是一个锚点，和html的锚点（#）类似\n\n[markdown](#markdown)\n\n\n1\n\n\n> 注： github对含有标点符号的标题进行锚点时会忽略掉标点符号， 本页中，如果这样写则无法跳转：[链接](#九、链接) 正确写法：[链接](#九链接)\n\nmarkdown\n\n链接\n\n流程图\n\n\n# 十、图片\n\n和链接的区别是前面多一个感叹号 !\n\n![图片名](图片链接)\n\n\n1\n\n\n当然，你也可以像链接那样对图片地址使用变量:\n\n这里链接用 img 作为图片地址变量\n然后在文档的结尾或其他位置给变量赋值（图片地址）\n![runoob][img]\n[img]: https://raw.githubusercontent.com/xugaoyi/image_store/master/blog/md_logo.png\n\n\n1\n2\n3\n4\n\n\n\n\n\n# 图片宽高\n\n如下想设置图片宽高，可以使用 <img> 标签。\n\n<img src=\"https://raw.githubusercontent.com/xugaoyi/image_store/master/blog/md_logo.png\" width=\"50px\" height=\"30px\">\n\n\n1\n\n\n\n# 相对路径以及github中使用图片\n\n不管是在本地还是在github同一个仓库中，如果图片存在，可以使用相对路径。\n\n相对路径图片：\n\n![头像图片](./md-img/test.jpg)\n\n\n1\n\n\ngithub上如果引用其他github仓库中的图片则要注意地址格式：仓库地址/raw/分支名/图片路径 或 https://raw.githubusercontent.com/用户名/仓库名/分支名/图片路径\n\n![其他仓库的图片1](https://github.com/xugaoyi/vue-music/raw/master/src/common/image/default.png)\n或\n![其他仓库的图片2](https://raw.githubusercontent.com/xugaoyi/image_store/master/blog/md_logo.png)\n\n\n\n1\n2\n3\n4\n\n\n其他仓库的图片\n\n其他仓库的图片2\n\n\n# 十一、表格\n\n制作表格使用 |来分隔不同的单元格，使用 -来分隔表头和其他行。\n\n|  表头   | 表头  |\n|  ----  | ----  |\n| 单元格  | 单元格 |\n| 单元格  | 单元格 |\n\n\n1\n2\n3\n4\n\n\n表头    表头\n单元格   单元格\n单元格   单元格\n\n对齐方式\n\n * -: 设置内容和标题栏居右对齐\n * :- 设置内容和标题栏居左对齐\n * :-: 设置内容和标题栏居中对齐\n\n| 左对齐 | 右对齐 | 居中对齐 |\n| :-----| ----: | :----: |\n| 单元格 | 单元格 | 单元格 |\n| 单元格 | 单元格 | 单元格 |\n\n\n1\n2\n3\n4\n\n\n左对齐   右对齐   居中对齐\n单元格   单元格   单元格\n单元格   单元格   单元格\n\n\n# 十二、emoji表情包\n\nemoji表情英文名的前后加冒号，typore上先输入冒号再输入首字母有表情提示\n\n:smirk:\n\n\n1\n\n\n💋 😸🙈🐴 😏😊😃😄 ☀️\n\n更多表情名称请查看：表情包清单\n\n\n# 十三、其他技巧\n\n\n# 支持的 html 元素\n\n不在 markdown 语法涵盖范围之内的标签，都可以直接在文档里面用 html 撰写。\n\n目前支持的 html 元素有：<kbd> <b> <i> <em> <sup> <sub> <br>等等 ，如：\n\n使用 <kbd>ctrl</kbd>+<kbd>alt</kbd>+<kbd>del</kbd> 重启电脑\n\n\n1\n\n\n使用 <kbd>ctrl</kbd>+<kbd>alt</kbd>+<kbd>del</kbd> 重启电脑\n\n<b>我是使用b标签的加粗字体</b>\n\n\n# 转义\n\nmarkdown 使用了很多特殊符号来表示特定的意义，如果需要显示特定的符号则需要使用反斜杠转义字符：\n\n**未转义星号显示加粗**\n\\*\\* 转义显示星号 \\*\\*\n\n\n1\n2\n\n\n未转义星号显示加粗 ** 转义显示星号 **\n\nmarkdown 支持以下这些符号前面加上反斜杠来帮助插入普通的符号：\n\n\\   反斜线\n`   反引号\n*   星号\n_   下划线\n{}  花括号\n[]  方括号\n()  小括号\n#   井字号\n+   加号\n-   减号\n.   英文句点\n!   感叹号\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n----------------------------------------\n\n*** 以下部分在github或其他在线预览中暂未支持 ***\n\n----------------------------------------\n\n\n# 数学公式\n\n当你需要在编辑器中插入数学公式时，可以使用两个美元符 $$ 包裹 tex 或 latex 格式的数学公式来实现。提交后，问答和文章页会根据需要加载 mathjax 对数学公式进行渲染。如：\n\n$$\n\\mathbf{v}_1 \\times \\mathbf{v}_2 =  \\begin{vmatrix}\n\\mathbf{i} & \\mathbf{j} & \\mathbf{k} \\\\\n\\frac{\\partial x}{\\partial u} &  \\frac{\\partial y}{\\partial u} & 0 \\\\\n\\frac{\\partial x}{\\partial v} &  \\frac{\\partial y}{\\partial v} & 0 \\\\\n\\end{vmatrix}\n$$tep1}{\\style{visibility:hidden}{(x+1)(x+1)}}\n$$\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n$$ \\mathbf{v}_1 \\times \\mathbf{v}_2 = \\begin{vmatrix} \\mathbf{i} & \\mathbf{j} & \\mathbf{k} \\ \\frac{\\partial x}{\\partial u} & \\frac{\\partial y}{\\partial u} & 0 \\ \\frac{\\partial x}{\\partial v} & \\frac{\\partial y}{\\partial v} & 0 \\ \\end{vmatrix} $$\n\n\n# 图表\n\n```chart\n,budget,income,expenses,debt\njune,5000,8000,4000,6000\njuly,3000,1000,4000,3000\naug,5000,7000,6000,3000\nsep,7000,2000,3000,1000\noct,6000,5000,4000,2000\nnov,4000,3000,5000,\n\ntype: pie\ntitle: monthly revenue\nx.title: amount\ny.title: month\ny.suffix: $\n```\n```mermaid\nsequencediagram\na->>b: 是否已收到消息？\nb--\x3e>a: 已收到消息\n```\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n\n> 注：在typora中未支持\n\n\n# 流程图\n\n语法：\n```mermaid\ngraph td\na[模块a] --\x3e|a1| b(模块b)\nb --\x3e c{判断条件c}\nc --\x3e|条件c1| d[模块d]\nc --\x3e|条件c2| e[模块e]\nc --\x3e|条件c3| f[模块f]\n```\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n流程图相关文章：\n\nhttps://www.jianshu.com/p/b421cc723da5\n\nhttp://www.imooc.com/article/292708\n\n\n# 时序图\n\n```mermaid\nsequencediagram\na->>b: 是否已收到消息？\nb--\x3e>a: 已收到消息\n```\n\n\n1\n2\n3\n4\n5\n\n\n\n# 甘特图\n\n```mermaid\ngantt\ntitle 甘特图\ndateformat  yyyy-mm-dd\nsection 项目a\n任务1           :a1, 2018-06-06, 30d\n任务2     :after a1  , 20d\nsection 项目b\n任务3      :2018-06-12  , 12d\n任务4      : 24d\n```\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n[回到顶部](#markdown使用教程)\n",charsets:{cjk:!0}},{title:"Git使用手册",frontmatter:{ititle:"Git使用手册",date:"2019-12-25T14:27:01.000Z",permalink:"/pages/9a7ee40fc232253e",categories:["技术","技术文档"],tags:[null],title:"Git使用手册",readingShow:"top"},regularPath:"/03.%E6%8A%80%E6%9C%AF/05.%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/01.Git%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C.html",relativePath:"03.技术/05.技术文档/01.Git使用手册.md",key:"v-258c65d9",path:"/pages/9a7ee40fc232253e/",headers:[{level:2,title:"安装",slug:"安装",normalizedTitle:"安装",charIndex:14},{level:2,title:"创建版本库（仓库）",slug:"创建版本库-仓库",normalizedTitle:"创建版本库（仓库）",charIndex:296},{level:2,title:"添加文件到仓库",slug:"添加文件到仓库",normalizedTitle:"添加文件到仓库",charIndex:479},{level:4,title:"提交描述规范",slug:"提交描述规范",normalizedTitle:"提交描述规范",charIndex:799},{level:2,title:"版本管理",slug:"版本管理",normalizedTitle:"版本管理",charIndex:823},{level:4,title:"提交修改",slug:"提交修改",normalizedTitle:"提交修改",charIndex:940},{level:4,title:"查看版本记录",slug:"查看版本记录",normalizedTitle:"查看版本记录",charIndex:1113},{level:4,title:"回退版本",slug:"回退版本",normalizedTitle:"回退版本",charIndex:1212},{level:4,title:"撤销修改",slug:"撤销修改",normalizedTitle:"撤销修改",charIndex:1579},{level:4,title:"删除文件",slug:"删除文件",normalizedTitle:"删除文件",charIndex:1653},{level:2,title:"远程仓库",slug:"远程仓库",normalizedTitle:"远程仓库",charIndex:1728},{level:4,title:"SSH验证",slug:"ssh验证",normalizedTitle:"ssh验证",charIndex:1736},{level:4,title:"关联远程仓库",slug:"关联远程仓库",normalizedTitle:"关联远程仓库",charIndex:1747},{level:4,title:"查看远程仓库",slug:"查看远程仓库",normalizedTitle:"查看远程仓库",charIndex:2802},{level:4,title:"删除远程仓库",slug:"删除远程仓库",normalizedTitle:"删除远程仓库",charIndex:2843},{level:4,title:"从远程库克隆项目",slug:"从远程库克隆项目",normalizedTitle:"从远程库克隆项目",charIndex:2890},{level:2,title:"分支管理",slug:"分支管理",normalizedTitle:"分支管理",charIndex:2992},{level:4,title:"创建分支",slug:"创建分支",normalizedTitle:"创建分支",charIndex:3e3},{level:4,title:"查看分支",slug:"查看分支",normalizedTitle:"查看分支",charIndex:3045},{level:4,title:"切换分支",slug:"切换分支",normalizedTitle:"切换分支",charIndex:3104},{level:4,title:"合并分支",slug:"合并分支",normalizedTitle:"合并分支",charIndex:3146},{level:4,title:"删除分支",slug:"删除分支",normalizedTitle:"删除分支",charIndex:3295},{level:4,title:"修改分支名",slug:"修改分支名",normalizedTitle:"修改分支名",charIndex:3338},{level:2,title:"帮助命令",slug:"帮助命令",normalizedTitle:"帮助命令",charIndex:3392},{level:2,title:"参考文档",slug:"参考文档",normalizedTitle:"参考文档",charIndex:7064}],excerpt:'<h1 id="git使用手册"><a class="header-anchor" href="#git使用手册">#</a> Git使用手册</h1>\n<h2 id="安装"><a class="header-anchor" href="#安装">#</a> 安装</h2>\n<p>官网下载：<a href="https://git-scm.com/downloads" target="_blank" rel="noopener noreferrer">https://git-scm.com/downloads<OutboundLink/></a> 下载完成后使用默认进行安装。</p>\n<p>安装完成后，在开始菜单里找到 <code>Git</code> -&gt; <code>Git Bash</code>，蹦出一个类似命令行窗口的东西，就说明Git安装成功！\n还需要最后一步设置，在命令行输入：</p>\n\x3c!--beforebegin--\x3e<div class="language-bash line-numbers-mode">\x3c!--afterbegin--\x3e<pre v-pre class="language-bash"><code><span class="token function">git</span> config <span class="token parameter variable">--global</span> user.name <span class="token string">"Your Name"</span>\n<span class="token function">git</span> config <span class="token parameter variable">--global</span> user.email <span class="token string">"email@example.com"</span>\n</code></pre>\n<div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br></div>\x3c!--beforeend--\x3e</div>\x3c!--afterend--\x3e<p>因为Git是分布式版本控制系统，所以，每个机器都必须自报家门：你的名字和Email地址。</p>\n',lastUpdated:"2022/9/22 下午4:28:09",lastUpdatedTimestamp:1663835289e3,headersStr:"安装 创建版本库（仓库） 添加文件到仓库 提交描述规范 版本管理 提交修改 查看版本记录 回退版本 撤销修改 删除文件 远程仓库 SSH验证 关联远程仓库 查看远程仓库 删除远程仓库 从远程库克隆项目 分支管理 创建分支 查看分支 切换分支 合并分支 删除分支 修改分支名 帮助命令 参考文档",content:"# Git使用手册\n\n\n# 安装\n\n官网下载：https://git-scm.com/downloads 下载完成后使用默认进行安装。\n\n安装完成后，在开始菜单里找到 Git -> Git Bash，蹦出一个类似命令行窗口的东西，就说明Git安装成功！ 还需要最后一步设置，在命令行输入：\n\ngit config --global user.name \"Your Name\"\ngit config --global user.email \"email@example.com\"\n\n\n1\n2\n\n\n因为Git是分布式版本控制系统，所以，每个机器都必须自报家门：你的名字和Email地址。\n\n\n# 创建版本库（仓库）\n\n# 创建仓库\nmkdir <仓库name> \n\n# 进入仓库\ncd <仓库name>\n\n# 此命令用于显示当前目录\npwd\n\n# 把当前目录初始化成Git仓库\ngit init\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n> 也不一定必须在空目录下创建Git仓库，选择一个已经有东西的目录直接 git init也是可以的。\n\n\n# 添加文件到仓库\n\n在仓库目录下放入文件，如新建一个 test.txt文件，然后使用 git add test.txt命令告诉Git，把文件添加到缓存区，然后使用 git commit -m \"提交描述\"告诉Git，把文件提交到仓库。\n\n# 添加指定文件或文件夹到缓存区，文件需添加后缀\ngit add <文件或文件夹name>                   # 单个文件\ngit add <文件或文件夹name> <文件或文件夹name>  # 多个文件\n\n# 或 全部文件同时添加到缓存区\ngit add .\n\n# 把文件从缓存区提交至仓库\ngit commit -m \"提交描述\"\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n# 提交描述规范\n\n在提交代码时输入清晰的说明有利于版本管理，建议搭配如下关键字编写提交描述\n\n# 新建(add)\n# 删除(rm)\n# 更新(update)\n# 改动(change)\n# 实现\n# 发布\n# 修复\n...\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# 版本管理\n\n# 提交修改\n\n如修改 test.txt的内容后，运行 git status命令看看被修改的文件，然后再使用 git add test.txt、 git commit -m \"修改描述\"把修改后的文件提交到仓库，提交后可再次使用 git status查看当前状态。\n\n# 显示 新增/删除/被改动等 的文件\ngit status\n\n\n1\n2\n\n\n# 查看版本记录\n\n# 查看版本记录\ngit log   # 显示版本号、提交时间等信息\n\n\n1\n2\n\n\n> 也可使用可视化工具查看Git版本历史： 在仓库目录右键 > Git BUI Here\n\n# 回退版本\n\n首先，Git必须知道当前版本是哪个版本，在Git中，用 HEAD表示当前版本，也就是最新的提交1094adb...（注意我的提交ID和你的肯定不一样），上一个版本就是 HEAD^，上上一个版本就是 HEAD^^，当然往上100个版本写100个^比较容易数不过来，所以写成 HEAD~100。\n\n# 回退到上一个版本\n$ git reset --hard HEAD^\n\n\n1\n2\n\n\n此时查看 git log记录发现，原来最新的版本已经没有了，想回到原来最新的版本怎么办？这就需要知道最新的版本的版本号\n\n# 跳转到指定版本\ngit reset --hard <版本号前几位>\n\n\n1\n2\n\n\n但是不知道版本号怎么办？Git提供了一个命令 git reflog用来记录你的每一次命令\n\ngit reflog\n\n\n1\n\n\n# 撤销修改\n\nhttps://www.liaoxuefeng.com/wiki/896043488029600/897889638509536\n\n# 删除文件\n\nhttps://www.liaoxuefeng.com/wiki/896043488029600/900002180232448\n\n\n# 远程仓库\n\n# SSH验证\n\n使本机能关联远程仓库，首次需要SSH验证\n\n * 第1步：创建 SSH Key。在用户主（C:\\Users\\dell）目录下，看看有没有.ssh目录， 如果有，再看看这个目录下有没有 id_rsa和 id_rsa.pub这两个文件，如果已经有了，可直接跳到下一步。 如果没有，打开Shell（Windows下打开Git Bash），创建 SSH Key：\n\n# 创建SSH Key\nssh-keygen -t rsa -C \"邮件地址\"\n\n\n1\n2\n\n * 第2步：登陆GitHub，右上角头像 > settings > SSH and GPG keys >Add SSH Key，在key的文本框里粘贴 id_rsa.pub文件的内容\n\n# 关联远程仓库\n\nSSH验证完成后，在github创建仓库，创建仓库时记得取消 Initialize this repository with a README的勾选，然后在本地命令：\n\n# 关联远程仓库，仓库名一般使用origin\ngit remote add <仓库名> <远程仓库地址>\n\n# 示例\ngit remote add origin git@github.com:max-kevin/test.git\n\n\n1\n2\n3\n4\n5\n\n\n下一步，就可以把本地库的所有内容推送到远程库上\n\n# 把文件推送到远程仓库\ngit push -u <仓库名> <分支名>\n\n# 示例\ngit push -u origin master\n\n\n1\n2\n3\n4\n5\n\n\n由于远程库是空的，我们第一次推送 master分支时，加上了 -u参数，Git不但会把本地的 master分支内容推送的远程新的 master分支，还会把本地的 master分支和远程的 master分支关联起来，在以后的推送或者拉取时就可以简化命令。\n\n> 前提是目录已经 git init初始化成仓库，并且 git status状态是没有改动的，如果有改动则先 git add .添加至缓存区，git commit -m '提交描述'提交至仓库，然后执行上面命令。\n> \n> 如创建仓库时勾选了 Initialize this repository with a README 则需先拉取 README.md文件到本地仓库 git pull\n> \n> 可关联多个远程仓库，注意给不同的远程仓库取不一样的名称，提交是分别按名称提交到不一样的远程仓库。\n\n# 简化的推送命令\ngit push\n\n\n1\n2\n\n\n# 查看远程仓库\n\n# 查看远程仓库\ngit remote -v\n\n\n1\n2\n\n\n# 删除远程仓库\n\n# 删除远程仓库\ngit remote rm <仓库名>\n\n\n1\n2\n\n\n# 从远程库克隆项目\n\n# 从远程库克隆项目\ngit clone <仓库地址>\n\n\n1\n2\n\n\n# 克隆指定分支\n\n# 克隆指定分支\ngit clone -b <分支名> <仓库地址>\n\n\n1\n2\n\n\n\n# 分支管理\n\n# 创建分支\n\n# 创建分支\ngit checkout -b <分支名>\n\n\n1\n2\n\n\n# 查看分支\n\n# 查看分支\ngit branch\n\n\n1\n2\n\n\n查看分支时，在分支前带 * 号的表示当前的分支\n\n# 切换分支\n\n# 切换分支\ngit checkout <分支名>\n\n\n1\n2\n\n\n# 合并分支\n\n# 合并本地的分支\ngit merge <分支名>\n\n# 合并远程的分支\ngit merge <远程仓库名>/<分支名>\n\n\n1\n2\n3\n4\n5\n\n\n注意，是将指定分支合并到当前分支，并非当前分支合并到指定分支。\n\n一般情况下是把当前分支切换到主分支，然后把子分支合并到主分支。\n\n# 删除分支\n\n# 删除分支\ngit branch -d <分支名>\n\n\n1\n2\n\n\n# 修改分支名\n\n# 修改分支名\ngit branch -m <原分支名> <新分支名>\n\n\n1\n2\n\n\n\n# 帮助命令\n\n如对命令不清楚时，可使用 git help命令显示出git命令介绍。\n\n# 帮助命令\ngit help\n\n\n1\n2\n\n\n$ git help\nusage: git [--version] [--help] [-C <path>] [-c <name>=<value>]\n           [--exec-path[=<path>]] [--html-path] [--man-path] [--info-path]\n           [-p | --paginate | -P | --no-pager] [--no-replace-objects] [--bare]\n           [--git-dir=<path>] [--work-tree=<path>] [--namespace=<name>]\n           <command> [<args>]\n\nThese are common Git commands used in various situations:\n\nstart a working area (see also: git help tutorial)\n   clone      Clone a repository into a new directory\n   init       Create an empty Git repository or reinitialize an existing one\n\nwork on the current change (see also: git help everyday)\n   add        Add file contents to the index\n   mv         Move or rename a file, a directory, or a symlink\n   reset      Reset current HEAD to the specified state\n   rm         Remove files from the working tree and from the index\n\nexamine the history and state (see also: git help revisions)\n   bisect     Use binary search to find the commit that introduced a bug\n   grep       Print lines matching a pattern\n   log        Show commit logs\n   show       Show various types of objects\n   status     Show the working tree status\n\ngrow, mark and tweak your common history\n   branch     List, create, or delete branches\n   checkout   Switch branches or restore working tree files\n   commit     Record changes to the repository\n   diff       Show changes between commits, commit and working tree, etc\n   merge      Join two or more development histories together\n   rebase     Reapply commits on top of another base tip\n   tag        Create, list, delete or verify a tag object signed with GPG\n\ncollaborate (see also: git help workflows)\n   fetch      Download objects and refs from another repository\n   pull       Fetch from and integrate with another repository or a local branch\n   push       Update remote refs along with associated objects\n\n'git help -a' and 'git help -g' list available subcommands and some\nconcept guides. See 'git help <command>' or 'git help <concept>'\nto read about a specific subcommand or concept.\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n\n\n翻译工具翻译中文\n\n$ git help\n使用：git [--version] [--help] [-C <path>] [-c <name>=<value>]\n           [--exec-path[=<path>]] [--html-path] [--man-path] [--info-path]\n           [-p | --paginate | -P | --no-pager] [--no-replace-objects] [--bare]\n           [--git-dir=<path>] [--work-tree=<path>] [--namespace=<name>]\n           <command> [<args>]\n\n这些是在各种情况下使用的通用Git命令：\n\nstart a working area (参见命令: git help tutorial)\n   clone      将存储库克隆到新目录中\n   init       创建一个空的Git存储库或重新初始化一个现有的存储库\n\nwork on the current change (参见命令: git help everyday)\n   add        将文件内容添加到索引中\n   mv         移动或重命名文件、目录或符号链接\n   reset      将当前磁头重置为指定状态\n   rm         从工作树和索引中删除文件\n\nexamine the history and state (参见命令: git help revisions)\n   bisect     使用二分查找查找引入错误的提交\n   grep       打印与模式匹配的行\n   log        显示提交日志\n   show       显示各种类型的对象\n   status     显示工作树状态\n\ngrow, mark and tweak your common history\n   branch     列出、创建或删除分支\n   checkout   切换分支或还原工作树文件\n   commit     记录对存储库的更改\n   diff       显示提交、提交和工作树等之间的更改\n   merge      将两个或多个开发历史连接在一起\n   rebase     在另一个基本提示之上重新应用提交\n   tag        创建、列表、删除或验证用GPG签名的标记对象\n\ncollaborate (参见命令: git help workflows)\n   fetch      从另一个存储库下载对象和引用\n   pull       从另一个存储库或本地分支获取并与之集成\n   push       更新远程引用和相关对象\n\n'git help -a' 和 'git help -g' 列出可用的子命令和一些概念指导。\n命令'git help <command>' 或 'git help <concept>' 查看特定子命令或概念.\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n\n\n\n# 参考文档\n\nhttps://www.liaoxuefeng.com/wiki/896043488029600",normalizedContent:"# git使用手册\n\n\n# 安装\n\n官网下载：https://git-scm.com/downloads 下载完成后使用默认进行安装。\n\n安装完成后，在开始菜单里找到 git -> git bash，蹦出一个类似命令行窗口的东西，就说明git安装成功！ 还需要最后一步设置，在命令行输入：\n\ngit config --global user.name \"your name\"\ngit config --global user.email \"email@example.com\"\n\n\n1\n2\n\n\n因为git是分布式版本控制系统，所以，每个机器都必须自报家门：你的名字和email地址。\n\n\n# 创建版本库（仓库）\n\n# 创建仓库\nmkdir <仓库name> \n\n# 进入仓库\ncd <仓库name>\n\n# 此命令用于显示当前目录\npwd\n\n# 把当前目录初始化成git仓库\ngit init\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n> 也不一定必须在空目录下创建git仓库，选择一个已经有东西的目录直接 git init也是可以的。\n\n\n# 添加文件到仓库\n\n在仓库目录下放入文件，如新建一个 test.txt文件，然后使用 git add test.txt命令告诉git，把文件添加到缓存区，然后使用 git commit -m \"提交描述\"告诉git，把文件提交到仓库。\n\n# 添加指定文件或文件夹到缓存区，文件需添加后缀\ngit add <文件或文件夹name>                   # 单个文件\ngit add <文件或文件夹name> <文件或文件夹name>  # 多个文件\n\n# 或 全部文件同时添加到缓存区\ngit add .\n\n# 把文件从缓存区提交至仓库\ngit commit -m \"提交描述\"\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n# 提交描述规范\n\n在提交代码时输入清晰的说明有利于版本管理，建议搭配如下关键字编写提交描述\n\n# 新建(add)\n# 删除(rm)\n# 更新(update)\n# 改动(change)\n# 实现\n# 发布\n# 修复\n...\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# 版本管理\n\n# 提交修改\n\n如修改 test.txt的内容后，运行 git status命令看看被修改的文件，然后再使用 git add test.txt、 git commit -m \"修改描述\"把修改后的文件提交到仓库，提交后可再次使用 git status查看当前状态。\n\n# 显示 新增/删除/被改动等 的文件\ngit status\n\n\n1\n2\n\n\n# 查看版本记录\n\n# 查看版本记录\ngit log   # 显示版本号、提交时间等信息\n\n\n1\n2\n\n\n> 也可使用可视化工具查看git版本历史： 在仓库目录右键 > git bui here\n\n# 回退版本\n\n首先，git必须知道当前版本是哪个版本，在git中，用 head表示当前版本，也就是最新的提交1094adb...（注意我的提交id和你的肯定不一样），上一个版本就是 head^，上上一个版本就是 head^^，当然往上100个版本写100个^比较容易数不过来，所以写成 head~100。\n\n# 回退到上一个版本\n$ git reset --hard head^\n\n\n1\n2\n\n\n此时查看 git log记录发现，原来最新的版本已经没有了，想回到原来最新的版本怎么办？这就需要知道最新的版本的版本号\n\n# 跳转到指定版本\ngit reset --hard <版本号前几位>\n\n\n1\n2\n\n\n但是不知道版本号怎么办？git提供了一个命令 git reflog用来记录你的每一次命令\n\ngit reflog\n\n\n1\n\n\n# 撤销修改\n\nhttps://www.liaoxuefeng.com/wiki/896043488029600/897889638509536\n\n# 删除文件\n\nhttps://www.liaoxuefeng.com/wiki/896043488029600/900002180232448\n\n\n# 远程仓库\n\n# ssh验证\n\n使本机能关联远程仓库，首次需要ssh验证\n\n * 第1步：创建 ssh key。在用户主（c:\\users\\dell）目录下，看看有没有.ssh目录， 如果有，再看看这个目录下有没有 id_rsa和 id_rsa.pub这两个文件，如果已经有了，可直接跳到下一步。 如果没有，打开shell（windows下打开git bash），创建 ssh key：\n\n# 创建ssh key\nssh-keygen -t rsa -c \"邮件地址\"\n\n\n1\n2\n\n * 第2步：登陆github，右上角头像 > settings > ssh and gpg keys >add ssh key，在key的文本框里粘贴 id_rsa.pub文件的内容\n\n# 关联远程仓库\n\nssh验证完成后，在github创建仓库，创建仓库时记得取消 initialize this repository with a readme的勾选，然后在本地命令：\n\n# 关联远程仓库，仓库名一般使用origin\ngit remote add <仓库名> <远程仓库地址>\n\n# 示例\ngit remote add origin git@github.com:max-kevin/test.git\n\n\n1\n2\n3\n4\n5\n\n\n下一步，就可以把本地库的所有内容推送到远程库上\n\n# 把文件推送到远程仓库\ngit push -u <仓库名> <分支名>\n\n# 示例\ngit push -u origin master\n\n\n1\n2\n3\n4\n5\n\n\n由于远程库是空的，我们第一次推送 master分支时，加上了 -u参数，git不但会把本地的 master分支内容推送的远程新的 master分支，还会把本地的 master分支和远程的 master分支关联起来，在以后的推送或者拉取时就可以简化命令。\n\n> 前提是目录已经 git init初始化成仓库，并且 git status状态是没有改动的，如果有改动则先 git add .添加至缓存区，git commit -m '提交描述'提交至仓库，然后执行上面命令。\n> \n> 如创建仓库时勾选了 initialize this repository with a readme 则需先拉取 readme.md文件到本地仓库 git pull\n> \n> 可关联多个远程仓库，注意给不同的远程仓库取不一样的名称，提交是分别按名称提交到不一样的远程仓库。\n\n# 简化的推送命令\ngit push\n\n\n1\n2\n\n\n# 查看远程仓库\n\n# 查看远程仓库\ngit remote -v\n\n\n1\n2\n\n\n# 删除远程仓库\n\n# 删除远程仓库\ngit remote rm <仓库名>\n\n\n1\n2\n\n\n# 从远程库克隆项目\n\n# 从远程库克隆项目\ngit clone <仓库地址>\n\n\n1\n2\n\n\n# 克隆指定分支\n\n# 克隆指定分支\ngit clone -b <分支名> <仓库地址>\n\n\n1\n2\n\n\n\n# 分支管理\n\n# 创建分支\n\n# 创建分支\ngit checkout -b <分支名>\n\n\n1\n2\n\n\n# 查看分支\n\n# 查看分支\ngit branch\n\n\n1\n2\n\n\n查看分支时，在分支前带 * 号的表示当前的分支\n\n# 切换分支\n\n# 切换分支\ngit checkout <分支名>\n\n\n1\n2\n\n\n# 合并分支\n\n# 合并本地的分支\ngit merge <分支名>\n\n# 合并远程的分支\ngit merge <远程仓库名>/<分支名>\n\n\n1\n2\n3\n4\n5\n\n\n注意，是将指定分支合并到当前分支，并非当前分支合并到指定分支。\n\n一般情况下是把当前分支切换到主分支，然后把子分支合并到主分支。\n\n# 删除分支\n\n# 删除分支\ngit branch -d <分支名>\n\n\n1\n2\n\n\n# 修改分支名\n\n# 修改分支名\ngit branch -m <原分支名> <新分支名>\n\n\n1\n2\n\n\n\n# 帮助命令\n\n如对命令不清楚时，可使用 git help命令显示出git命令介绍。\n\n# 帮助命令\ngit help\n\n\n1\n2\n\n\n$ git help\nusage: git [--version] [--help] [-c <path>] [-c <name>=<value>]\n           [--exec-path[=<path>]] [--html-path] [--man-path] [--info-path]\n           [-p | --paginate | -p | --no-pager] [--no-replace-objects] [--bare]\n           [--git-dir=<path>] [--work-tree=<path>] [--namespace=<name>]\n           <command> [<args>]\n\nthese are common git commands used in various situations:\n\nstart a working area (see also: git help tutorial)\n   clone      clone a repository into a new directory\n   init       create an empty git repository or reinitialize an existing one\n\nwork on the current change (see also: git help everyday)\n   add        add file contents to the index\n   mv         move or rename a file, a directory, or a symlink\n   reset      reset current head to the specified state\n   rm         remove files from the working tree and from the index\n\nexamine the history and state (see also: git help revisions)\n   bisect     use binary search to find the commit that introduced a bug\n   grep       print lines matching a pattern\n   log        show commit logs\n   show       show various types of objects\n   status     show the working tree status\n\ngrow, mark and tweak your common history\n   branch     list, create, or delete branches\n   checkout   switch branches or restore working tree files\n   commit     record changes to the repository\n   diff       show changes between commits, commit and working tree, etc\n   merge      join two or more development histories together\n   rebase     reapply commits on top of another base tip\n   tag        create, list, delete or verify a tag object signed with gpg\n\ncollaborate (see also: git help workflows)\n   fetch      download objects and refs from another repository\n   pull       fetch from and integrate with another repository or a local branch\n   push       update remote refs along with associated objects\n\n'git help -a' and 'git help -g' list available subcommands and some\nconcept guides. see 'git help <command>' or 'git help <concept>'\nto read about a specific subcommand or concept.\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n\n\n翻译工具翻译中文\n\n$ git help\n使用：git [--version] [--help] [-c <path>] [-c <name>=<value>]\n           [--exec-path[=<path>]] [--html-path] [--man-path] [--info-path]\n           [-p | --paginate | -p | --no-pager] [--no-replace-objects] [--bare]\n           [--git-dir=<path>] [--work-tree=<path>] [--namespace=<name>]\n           <command> [<args>]\n\n这些是在各种情况下使用的通用git命令：\n\nstart a working area (参见命令: git help tutorial)\n   clone      将存储库克隆到新目录中\n   init       创建一个空的git存储库或重新初始化一个现有的存储库\n\nwork on the current change (参见命令: git help everyday)\n   add        将文件内容添加到索引中\n   mv         移动或重命名文件、目录或符号链接\n   reset      将当前磁头重置为指定状态\n   rm         从工作树和索引中删除文件\n\nexamine the history and state (参见命令: git help revisions)\n   bisect     使用二分查找查找引入错误的提交\n   grep       打印与模式匹配的行\n   log        显示提交日志\n   show       显示各种类型的对象\n   status     显示工作树状态\n\ngrow, mark and tweak your common history\n   branch     列出、创建或删除分支\n   checkout   切换分支或还原工作树文件\n   commit     记录对存储库的更改\n   diff       显示提交、提交和工作树等之间的更改\n   merge      将两个或多个开发历史连接在一起\n   rebase     在另一个基本提示之上重新应用提交\n   tag        创建、列表、删除或验证用gpg签名的标记对象\n\ncollaborate (参见命令: git help workflows)\n   fetch      从另一个存储库下载对象和引用\n   pull       从另一个存储库或本地分支获取并与之集成\n   push       更新远程引用和相关对象\n\n'git help -a' 和 'git help -g' 列出可用的子命令和一些概念指导。\n命令'git help <command>' 或 'git help <concept>' 查看特定子命令或概念.\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n\n\n\n# 参考文档\n\nhttps://www.liaoxuefeng.com/wiki/896043488029600",charsets:{cjk:!0}},{title:"npm常用命令",frontmatter:{title:"npm常用命令",date:"2019-12-25T14:27:01.000Z",permalink:"/pages/61f2f95fd7da14fd",categories:["技术","技术文档"],tags:[null],readingShow:"top"},regularPath:"/03.%E6%8A%80%E6%9C%AF/05.%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/03.npm%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4.html",relativePath:"03.技术/05.技术文档/03.npm常用命令.md",key:"v-0e2aa550",path:"/pages/61f2f95fd7da14fd/",headers:[{level:2,title:"简介",slug:"简介",normalizedTitle:"简介",charIndex:14},{level:2,title:"常用命令",slug:"常用命令",normalizedTitle:"常用命令",charIndex:5},{level:4,title:"检测是否安装及版本",slug:"检测是否安装及版本",normalizedTitle:"检测是否安装及版本",charIndex:173},{level:4,title:"生成package.json文件",slug:"生成package-json文件",normalizedTitle:"生成package.json文件",charIndex:218},{level:4,title:"安装模块",slug:"安装模块",normalizedTitle:"安装模块",charIndex:286},{level:4,title:"查看",slug:"查看",normalizedTitle:"查看",charIndex:758},{level:4,title:"更新模块",slug:"更新模块",normalizedTitle:"更新模块",charIndex:1070},{level:4,title:"卸载模块",slug:"卸载模块",normalizedTitle:"卸载模块",charIndex:1243},{level:4,title:"清空缓存",slug:"清空缓存",normalizedTitle:"清空缓存",charIndex:1352},{level:4,title:"使用淘宝镜像",slug:"使用淘宝镜像",normalizedTitle:"使用淘宝镜像",charIndex:1394},{level:4,title:"其他",slug:"其他",normalizedTitle:"其他",charIndex:278},{level:2,title:"使用技巧",slug:"使用技巧",normalizedTitle:"使用技巧",charIndex:1761},{level:4,title:"多次安装不成功尝试先清除缓存",slug:"多次安装不成功尝试先清除缓存",normalizedTitle:"多次安装不成功尝试先清除缓存",charIndex:1769},{level:4,title:"查看已安装的依赖包版本号",slug:"查看已安装的依赖包版本号",normalizedTitle:"查看已安装的依赖包版本号",charIndex:1812},{level:2,title:"npm发布包教程",slug:"npm发布包教程",normalizedTitle:"npm发布包教程",charIndex:1912},{level:2,title:"nrm的作用与使用",slug:"nrm的作用与使用",normalizedTitle:"nrm的作用与使用",charIndex:1935},{level:4,title:"nrm是什么？",slug:"nrm是什么",normalizedTitle:"nrm是什么？",charIndex:1948},{level:4,title:"nrm的安装",slug:"nrm的安装",normalizedTitle:"nrm的安装",charIndex:2030},{level:4,title:"nrm命令",slug:"nrm命令",normalizedTitle:"nrm命令",charIndex:2065},{level:4,title:"nrm使用",slug:"nrm使用",normalizedTitle:"nrm使用",charIndex:2340}],excerpt:'<h1 id="npm常用命令"><a class="header-anchor" href="#npm常用命令">#</a> npm常用命令</h1>\n<h2 id="简介"><a class="header-anchor" href="#简介">#</a> 简介</h2>\n<p>npm是跟随node一起安装的包（模块）管理器。常见的使用场景有以下几种：</p>\n<ul>\n<li>允许用户从npm服务器下载别人编写的第三方包到本地使用。</li>\n<li>允许用户从npm服务器下载并安装别人编写的命令行程序到本地使用。</li>\n<li>允许用户将自己编写的包或命令行程序上传到npm服务器供别人使用。</li>\n</ul>\n',lastUpdated:"2022/9/22 下午4:28:09",lastUpdatedTimestamp:1663835289e3,headersStr:"简介 常用命令 检测是否安装及版本 生成package.json文件 安装模块 查看 更新模块 卸载模块 清空缓存 使用淘宝镜像 其他 使用技巧 多次安装不成功尝试先清除缓存 查看已安装的依赖包版本号 npm发布包教程 nrm的作用与使用 nrm是什么？ nrm的安装 nrm命令 nrm使用",content:'# npm常用命令\n\n\n# 简介\n\nnpm是跟随node一起安装的包（模块）管理器。常见的使用场景有以下几种：\n\n * 允许用户从npm服务器下载别人编写的第三方包到本地使用。\n * 允许用户从npm服务器下载并安装别人编写的命令行程序到本地使用。\n * 允许用户将自己编写的包或命令行程序上传到npm服务器供别人使用。\n\n\n# 常用命令\n\n# 检测是否安装及版本\n\nnpm -v # 显示版本号说明已经安装相应的版本\n\n\n1\n\n\n# 生成package.json文件\n\nnpm init\n\n\n1\n\n\n> package.json用来描述项目中用到的模块和其他信息\n\n# 安装模块\n\nnpm install # 安装package.json定义好的模块，简写 npm i\n\n# 安装包指定模块\nnpm i <ModuleName>\n\n# 全局安装\nnpm i <ModuleName> -g \n\n# 安装包的同时，将信息写入到package.json中的 dependencies 配置中\nnpm i <ModuleName> --save\n\n# 安装包的同时，将信息写入到package.json中的 devDependencies 配置中\nnpm i <ModuleName> --save-dev\n\n# 安装多模块\nnpm i <ModuleName1> <ModuleName2>\n\n# 安装方式参数：\n-save # 简写-S，加入到生产依赖中\n-save-dev # 简写-D，加入到开发依赖中\n-g # 全局安装 将安装包放在 /usr/local 下或者你 node 的安装目录\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n\n\n# 查看\n\n# 查看所有全局安装的包\nnpm ls -g\n\n# 查看本地项目中安装的包\nnpm ls\n\n# 查看包的 package.json文件\nnpm view <ModuleName>\n\n# 查看包的依赖关系\nnpm view <ModuleName> dependencies\n\n# 查看包的源文件地址\nnpm view <ModuleName> repository.url\n\n# 查看包所依赖的node版本\nnpm view <ModuleName> engines\n\n# 查看帮助\nnpm help\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n\n# 更新模块\n\n# 更新本地模块\nnpm update <ModuleName>\n\n# 更新全局模块\nnpm update -g <ModuleName> # 更新全局软件包。\nnpm update -g # 更新所有的全局软件包。\nnpm outdated -g --depth=0 # 找出需要更新的包。\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n# 卸载模块\n\n# 卸载本地模块\nnpm uninstall <ModuleName>\n\n# 卸载全局模块\nnpm uninstall -g <ModuleName> # 卸载全局软件包。\n\n\n1\n2\n3\n4\n5\n\n\n# 清空缓存\n\n# 清空npm缓存\nnpm cache clear\n\n\n1\n2\n\n\n# 使用淘宝镜像\n\n# 使用淘宝镜像\nnpm install -g cnpm --registry=https://registry.npm.taobao.org\n\n\n1\n2\n\n\n# 其他\n\n# 更改包内容后进行重建\nnpm rebuild <ModuleName>\n\n# 检查包是否已经过时，此命令会列出所有已经过时的包，可以及时进行包的更新\nnpm outdated\n\n# 访问npm的json文件，此命令将会打开一个网页\nnpm help json\n\n# 发布一个包的时候，需要检验某个包名是否存在\nnpm search <ModuleName>\n\n# 撤销自己发布过的某个版本代码\nnpm unpublish <package> <version>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n\n# 使用技巧\n\n# 多次安装不成功尝试先清除缓存\n\nnpm cache clean -f\n\n\n1\n\n\n# 查看已安装的依赖包版本号\n\nnpm ls <ModuleName>\n\n\n1\n\n\n> 注意：用此方法才能准确的知道项目使用的版本号，查看package.json时，有“^" 符号表示大于此版本\n\n\n# npm发布包教程\n\nnpm发布包教程\n\n\n# nrm的作用与使用\n\n# nrm是什么？\n\nnrm(npm registry manager )是npm的镜像源管理工具，有时候国外资源太慢，使用这个就可以快速地在 npm 源间切换\n\n# nrm的安装\n\nnpm install -g nrm\n\n\n1\n\n\n# nrm命令\n\nnrm ls　#查看可用的源（有*号的表示当前所使用的源,以下<registry>表示源的名称）\nnrm use <registry> # 将npm下载源切换成指定的源\nnrm add <registry> <url> # 添加源，url为源的路径\nnrm del <registry> # 删除源\nnrm test <registry> # 测试源的响应时间，可以作为使用哪个源的参考\n\nnrm help　# 查看nrm帮助\nnrm home <registry>　# 跳转到指定源的官网\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n# nrm使用\n\n如果在你的网络不太理想或者受到其他网络限制导致不能使用npm原本的源进行下载时，nrm就非常有用了，你只需要：\n\nnrm ls # 查看可用的源\nnrm use <registry>　# 切换到指定源\n\n\n1\n2\n',normalizedContent:'# npm常用命令\n\n\n# 简介\n\nnpm是跟随node一起安装的包（模块）管理器。常见的使用场景有以下几种：\n\n * 允许用户从npm服务器下载别人编写的第三方包到本地使用。\n * 允许用户从npm服务器下载并安装别人编写的命令行程序到本地使用。\n * 允许用户将自己编写的包或命令行程序上传到npm服务器供别人使用。\n\n\n# 常用命令\n\n# 检测是否安装及版本\n\nnpm -v # 显示版本号说明已经安装相应的版本\n\n\n1\n\n\n# 生成package.json文件\n\nnpm init\n\n\n1\n\n\n> package.json用来描述项目中用到的模块和其他信息\n\n# 安装模块\n\nnpm install # 安装package.json定义好的模块，简写 npm i\n\n# 安装包指定模块\nnpm i <modulename>\n\n# 全局安装\nnpm i <modulename> -g \n\n# 安装包的同时，将信息写入到package.json中的 dependencies 配置中\nnpm i <modulename> --save\n\n# 安装包的同时，将信息写入到package.json中的 devdependencies 配置中\nnpm i <modulename> --save-dev\n\n# 安装多模块\nnpm i <modulename1> <modulename2>\n\n# 安装方式参数：\n-save # 简写-s，加入到生产依赖中\n-save-dev # 简写-d，加入到开发依赖中\n-g # 全局安装 将安装包放在 /usr/local 下或者你 node 的安装目录\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n\n\n# 查看\n\n# 查看所有全局安装的包\nnpm ls -g\n\n# 查看本地项目中安装的包\nnpm ls\n\n# 查看包的 package.json文件\nnpm view <modulename>\n\n# 查看包的依赖关系\nnpm view <modulename> dependencies\n\n# 查看包的源文件地址\nnpm view <modulename> repository.url\n\n# 查看包所依赖的node版本\nnpm view <modulename> engines\n\n# 查看帮助\nnpm help\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n\n# 更新模块\n\n# 更新本地模块\nnpm update <modulename>\n\n# 更新全局模块\nnpm update -g <modulename> # 更新全局软件包。\nnpm update -g # 更新所有的全局软件包。\nnpm outdated -g --depth=0 # 找出需要更新的包。\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n# 卸载模块\n\n# 卸载本地模块\nnpm uninstall <modulename>\n\n# 卸载全局模块\nnpm uninstall -g <modulename> # 卸载全局软件包。\n\n\n1\n2\n3\n4\n5\n\n\n# 清空缓存\n\n# 清空npm缓存\nnpm cache clear\n\n\n1\n2\n\n\n# 使用淘宝镜像\n\n# 使用淘宝镜像\nnpm install -g cnpm --registry=https://registry.npm.taobao.org\n\n\n1\n2\n\n\n# 其他\n\n# 更改包内容后进行重建\nnpm rebuild <modulename>\n\n# 检查包是否已经过时，此命令会列出所有已经过时的包，可以及时进行包的更新\nnpm outdated\n\n# 访问npm的json文件，此命令将会打开一个网页\nnpm help json\n\n# 发布一个包的时候，需要检验某个包名是否存在\nnpm search <modulename>\n\n# 撤销自己发布过的某个版本代码\nnpm unpublish <package> <version>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n\n# 使用技巧\n\n# 多次安装不成功尝试先清除缓存\n\nnpm cache clean -f\n\n\n1\n\n\n# 查看已安装的依赖包版本号\n\nnpm ls <modulename>\n\n\n1\n\n\n> 注意：用此方法才能准确的知道项目使用的版本号，查看package.json时，有“^" 符号表示大于此版本\n\n\n# npm发布包教程\n\nnpm发布包教程\n\n\n# nrm的作用与使用\n\n# nrm是什么？\n\nnrm(npm registry manager )是npm的镜像源管理工具，有时候国外资源太慢，使用这个就可以快速地在 npm 源间切换\n\n# nrm的安装\n\nnpm install -g nrm\n\n\n1\n\n\n# nrm命令\n\nnrm ls　#查看可用的源（有*号的表示当前所使用的源,以下<registry>表示源的名称）\nnrm use <registry> # 将npm下载源切换成指定的源\nnrm add <registry> <url> # 添加源，url为源的路径\nnrm del <registry> # 删除源\nnrm test <registry> # 测试源的响应时间，可以作为使用哪个源的参考\n\nnrm help　# 查看nrm帮助\nnrm home <registry>　# 跳转到指定源的官网\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n# nrm使用\n\n如果在你的网络不太理想或者受到其他网络限制导致不能使用npm原本的源进行下载时，nrm就非常有用了，你只需要：\n\nnrm ls # 查看可用的源\nnrm use <registry>　# 切换到指定源\n\n\n1\n2\n',charsets:{cjk:!0}},{title:"导航站",frontmatter:{title:"导航站",date:"2022-01-04T20:02:46.000Z",permalink:"/navigation/",titleTag:"优质",article:!1,categories:[null],tags:[null],readingShow:"top"},regularPath:"/01.%E5%AF%BC%E8%88%AA%E7%AB%99.html",relativePath:"01.导航站.md",key:"v-644e2a09",path:"/navigation/",headers:[{level:2,title:"友情链接",slug:"友情链接",normalizedTitle:"友情链接",charIndex:67},{level:2,title:"搜索引擎",slug:"搜索引擎",normalizedTitle:"搜索引擎",charIndex:334},{level:2,title:"代码托管",slug:"代码托管",normalizedTitle:"代码托管",charIndex:343},{level:2,title:"前端开发",slug:"前端开发",normalizedTitle:"前端开发",charIndex:352},{level:2,title:"后端开发",slug:"后端开发",normalizedTitle:"后端开发",charIndex:361},{level:2,title:"文档工具",slug:"文档工具",normalizedTitle:"文档工具",charIndex:370},{level:2,title:"热门社区",slug:"热门社区",normalizedTitle:"热门社区",charIndex:379},{level:2,title:"工具合集",slug:"工具合集",normalizedTitle:"工具合集",charIndex:388},{level:2,title:"文档教程",slug:"文档教程",normalizedTitle:"文档教程",charIndex:397},{level:2,title:"动态图表",slug:"动态图表",normalizedTitle:"动态图表",charIndex:406},{level:2,title:"图片图标",slug:"图片图标",normalizedTitle:"图片图标",charIndex:415},{level:2,title:"CSS样式",slug:"css样式",normalizedTitle:"css样式",charIndex:424},{level:2,title:"网站分析",slug:"网站分析",normalizedTitle:"网站分析",charIndex:434},{level:2,title:"其它资源",slug:"其它资源",normalizedTitle:"其它资源",charIndex:443},{level:2,title:"参考来源",slug:"参考来源",normalizedTitle:"参考来源",charIndex:452}],lastUpdated:"2022/10/18 下午3:59:55",lastUpdatedTimestamp:1666079995e3,headersStr:"友情链接 搜索引擎 代码托管 前端开发 后端开发 文档工具 热门社区 工具合集 文档教程 动态图表 图片图标 CSS样式 网站分析 其它资源 参考来源",content:"笔记\n\n本内容因为制作卡片效果，导致空间大小有限，如果想访问更多内容，点击前往。\n\n2022-9-22 @Max-Kevin\n\n\n# 友情链接\n\nMax-Kevin\n\n一个没有梦想的咸鱼   💻学习📝记录🔗分享\n\n- name: Max-Kevin\n  desc: 一个没有梦想的咸鱼   💻学习📝记录🔗分享\n  avatar: https://max-kevin.github.io/blogs/egg.png\n  link: https://max-kevin.github.io/blogs/\n  bgColor: '#FFB6C1'\n  textColor: '#621529'\n\n\n1\n2\n3\n4\n5\n6\n\n\n如果您想互留友链，点击前往\n\n\n# 搜索引擎\n\n\n# 代码托管\n\n\n# 前端开发\n\n\n# 后端开发\n\n\n# 文档工具\n\n\n# 热门社区\n\n\n# 工具合集\n\n\n# 文档教程\n\n\n# 动态图表\n\n\n# 图片图标\n\n\n# CSS样式\n\n\n# 网站分析\n\n\n# 其它资源\n\n\n# 参考来源\n\nhttps://www.pdai.tech/md/resource/tools.html",normalizedContent:"笔记\n\n本内容因为制作卡片效果，导致空间大小有限，如果想访问更多内容，点击前往。\n\n2022-9-22 @max-kevin\n\n\n# 友情链接\n\nmax-kevin\n\n一个没有梦想的咸鱼   💻学习📝记录🔗分享\n\n- name: max-kevin\n  desc: 一个没有梦想的咸鱼   💻学习📝记录🔗分享\n  avatar: https://max-kevin.github.io/blogs/egg.png\n  link: https://max-kevin.github.io/blogs/\n  bgcolor: '#ffb6c1'\n  textcolor: '#621529'\n\n\n1\n2\n3\n4\n5\n6\n\n\n如果您想互留友链，点击前往\n\n\n# 搜索引擎\n\n\n# 代码托管\n\n\n# 前端开发\n\n\n# 后端开发\n\n\n# 文档工具\n\n\n# 热门社区\n\n\n# 工具合集\n\n\n# 文档教程\n\n\n# 动态图表\n\n\n# 图片图标\n\n\n# css样式\n\n\n# 网站分析\n\n\n# 其它资源\n\n\n# 参考来源\n\nhttps://www.pdai.tech/md/resource/tools.html",charsets:{cjk:!0}},{title:"npm packageJson属性详解",frontmatter:{title:"npm packageJson属性详解",date:"2020-04-08T17:16:38.000Z",permalink:"/pages/dec4f3f00e71a312",categories:["技术","技术文档"],tags:[null],readingShow:"top"},regularPath:"/03.%E6%8A%80%E6%9C%AF/05.%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/10.npm%20packageJson%E5%B1%9E%E6%80%A7%E8%AF%A6%E8%A7%A3.html",relativePath:"03.技术/05.技术文档/10.npm packageJson属性详解.md",key:"v-4961bb68",path:"/pages/dec4f3f00e71a312/",headers:[{level:2,title:"概述",slug:"概述",normalizedTitle:"概述",charIndex:86},{level:2,title:"name",slug:"name",normalizedTitle:"name",charIndex:161},{level:2,title:"version",slug:"version",normalizedTitle:"version",charIndex:194},{level:2,title:"description",slug:"description",normalizedTitle:"description",charIndex:1043},{level:2,title:"keywords",slug:"keywords",normalizedTitle:"keywords",charIndex:1088},{level:2,title:"homepage",slug:"homepage",normalizedTitle:"homepage",charIndex:1121},{level:2,title:"bugs",slug:"bugs",normalizedTitle:"bugs",charIndex:1273},{level:2,title:"license",slug:"license",normalizedTitle:"license",charIndex:1503},{level:2,title:"和用户相关的属性: author, contributors",slug:"和用户相关的属性-author-contributors",normalizedTitle:"和用户相关的属性: author, contributors",charIndex:1673},{level:2,title:"files",slug:"files",normalizedTitle:"files",charIndex:2046},{level:2,title:"main",slug:"main",normalizedTitle:"main",charIndex:2022},{level:2,title:"bin",slug:"bin",normalizedTitle:"bin",charIndex:2454},{level:2,title:"man",slug:"man",normalizedTitle:"man",charIndex:3190},{level:2,title:"directories",slug:"directories",normalizedTitle:"directories",charIndex:4065},{level:3,title:"directories.lib",slug:"directories-lib",normalizedTitle:"directories.lib",charIndex:4221},{level:3,title:"directories.bin",slug:"directories-bin",normalizedTitle:"directories.bin",charIndex:4292},{level:3,title:"directories.man",slug:"directories-man",normalizedTitle:"directories.man",charIndex:4393},{level:3,title:"directories.doc",slug:"directories-doc",normalizedTitle:"directories.doc",charIndex:4450},{level:3,title:"directories.example",slug:"directories-example",normalizedTitle:"directories.example",charIndex:4524},{level:2,title:"repository",slug:"repository",normalizedTitle:"repository",charIndex:4571},{level:2,title:"scripts",slug:"scripts",normalizedTitle:"scripts",charIndex:5076},{level:2,title:"config",slug:"config",normalizedTitle:"config",charIndex:147},{level:2,title:"dependencies",slug:"dependencies",normalizedTitle:"dependencies",charIndex:1024},{level:2,title:"URLs as Dependencies",slug:"urls-as-dependencies",normalizedTitle:"urls as dependencies",charIndex:6639},{level:2,title:"Git URLs as Dependencies",slug:"git-urls-as-dependencies",normalizedTitle:"git urls as dependencies",charIndex:6716},{level:2,title:"GitHub URLs",slug:"github-urls",normalizedTitle:"github urls",charIndex:7069},{level:2,title:"Local Paths",slug:"local-paths",normalizedTitle:"local paths",charIndex:7310},{level:2,title:"devDependencies",slug:"devdependencies",normalizedTitle:"devdependencies",charIndex:7641},{level:2,title:"peerDependencies",slug:"peerdependencies",normalizedTitle:"peerdependencies",charIndex:8364},{level:2,title:"bundledDependencies",slug:"bundleddependencies",normalizedTitle:"bundleddependencies",charIndex:8803},{level:2,title:"optionalDependencies",slug:"optionaldependencies",normalizedTitle:"optionaldependencies",charIndex:8880},{level:2,title:"engines",slug:"engines",normalizedTitle:"engines",charIndex:597},{level:2,title:"engineStrict",slug:"enginestrict",normalizedTitle:"enginestrict",charIndex:9656},{level:2,title:"os",slug:"os",normalizedTitle:"os",charIndex:1401},{level:2,title:"cpu",slug:"cpu",normalizedTitle:"cpu",charIndex:9856},{level:2,title:"preferGlobal",slug:"preferglobal",normalizedTitle:"preferglobal",charIndex:9972},{level:2,title:"private",slug:"private",normalizedTitle:"private",charIndex:10089},{level:2,title:"publishConfig",slug:"publishconfig",normalizedTitle:"publishconfig",charIndex:10182},{level:2,title:"DEFAULT VALUES",slug:"default-values",normalizedTitle:"default values",charIndex:10296},{level:2,title:"参考文档列表(https://docs.npmjs.com/)",slug:"参考文档列表-https-docs-npmjs-com",normalizedTitle:"参考文档列表(https://docs.npmjs.com/)",charIndex:10609}],excerpt:'<h1 id="npm-package-json属性详解"><a class="header-anchor" href="#npm-package-json属性详解">#</a> npm package.json属性详解</h1>\n<blockquote>\n<p>本文转自<a href="https://www.cnblogs.com/tzyy/p/5193811.html" target="_blank" rel="noopener noreferrer">https://www.cnblogs.com/tzyy/p/5193811.html<OutboundLink/></a>，作者：TZYY</p>\n</blockquote>\n<h2 id="概述"><a class="header-anchor" href="#概述">#</a> 概述</h2>\n<p><code>package.json</code>必须是一个严格的json文件，而不仅仅是js里边的一个对象。其中很多属性可以通过 <code>npm-config</code>来生成</p>\n',lastUpdated:"2022/9/22 下午4:28:09",lastUpdatedTimestamp:1663835289e3,headersStr:"概述 name version description keywords homepage bugs license 和用户相关的属性: author, contributors files main bin man directories directories.lib directories.bin directories.man directories.doc directories.example repository scripts config dependencies URLs as Dependencies Git URLs as Dependencies GitHub URLs Local Paths devDependencies peerDependencies bundledDependencies optionalDependencies engines engineStrict os cpu preferGlobal private publishConfig DEFAULT VALUES 参考文档列表(https://docs.npmjs.com/)",content:'# npm package.json属性详解\n\n> 本文转自https://www.cnblogs.com/tzyy/p/5193811.html，作者：TZYY\n\n\n# 概述\n\npackage.json必须是一个严格的json文件，而不仅仅是js里边的一个对象。其中很多属性可以通过 npm-config来生成\n\n\n# name\n\npackage.json中最重要的属性是 name和 version两个属性，这两个属性是必须要有的，否则模块就无法被安装，这两个属性一起形成了一个npm模块的唯一标识符。模块中内容变更的同时，模块版本也应该一起变化。 name属性就是你的模块名称，下面是一些命名规则:\n\n * name必须小于等于214个字节，包括前缀名称在内（如 xxx/xxxmodule）。\n\n * name不能以"_"或"."开头\n\n * 不能含有大写字母\n\n * name会成为url的一部分，不能含有url非法字符\n   \n   下面是官网文档的一些建议：\n\n * 不要使用和node核心模块一样的名称\n\n * name中不要含有"js"和"node"。 It\'s assumed that it\'s js, since you\'re writing a package.json file, and you can specify the engine using the "engines" field. (See below.)\n\n * name属性会成为模块url、命令行中的一个参数或者一个文件夹名称，任何非url安全的字符在name中都不能使用，也不能以"_"或"."开头\n\n * name属性也许会被写在 require()的参数中，所以最好取个简短而语义化的值。\n\n * 创建一个模块前可以先到后边的网址查查 name是否已经被占用. https://www.npmjs.com/\n   \n   * # 发布一个包的时候，需要检验某个包名是否存在\n     npm search <ModuleName>\n     \n     \n     1\n     2\n     \n\nname属性可以有一些前缀如 e.g. @myorg/mypackage.在npm-scope(7)的文档中可以看到详细说明\n\n\n# version\n\nversion必须可以被npm依赖的一个 node-semver模块解析。具体规则见下面的 dependencies模块\n\n\n# description\n\n一个描述，方便别人了解你的模块作用，搜索的时候也有用。\n\n\n# keywords\n\n一个字符串数组，方便别人搜索到本模块\n\n\n# homepage\n\n项目主页url 注意: 这个项目主页url和url属性不同，如果你填写了url属性，npm注册工具会认为你把项目发布到其他地方了，获取模块的时候不会从npm官方仓库获取，而是会重定向到url属性配置的地址。 （原文档中用了 spit(吐)这个单词，作者表示他不是在开玩笑:）\n\n\n# bugs\n\n填写一个bug提交地址或者一个邮箱，被你的模块坑到的人可以通过这里吐槽，例如：\n\n{\n    "url" : "https://github.com/owner/project/issues",\n    "email" : "project@hostname.com"\n}\n\n\n1\n2\n3\n4\n\n\nurl和email可以任意填或不填，如果只填一个，可以直接写成一个字符串而不是对象。如果填写了url，npm bugs命令会使用这个url。\n\n\n# license\n\n你应该为你的模块制定一个协议，让用户知道他们有何权限来使用你的模块，以及使用该模块有哪些限制。最简单的，例如你用BSD-3-Clause 或 MIT之类的协议，如下：\n\n{ "license" : "MIT" }\n\n\n1\n\n\n你可以在https://spdx.org/licenses/ 这个地址查阅协议列表 。\n\n\n# 和用户相关的属性: author, contributors\n\nauthor是一个码农， contributors是一个码农数组。 person是一个有一些描述属性的对象，如下 like this:\n\n{\n    "name" : "Barney Rubble",\n    "email" : "b@rubble.com",\n    "url" : "http://barnyrubble.tumblr.com/"\n}\n\n\n1\n2\n3\n4\n5\n\n\n也可以按如下格式缩写，npm会帮着转换:\n\n"Barney Rubble b@rubble.com (http://barnyrubble.tumblr.com/)"\n\n\n1\n\n\nemail和 url属性实际上都是可以省略的。描述用户信息的还有一个 maintainers（维护者）属性。\n\n\n# files\n\nfiles属性的值是一个数组，内容是模块下文件名或者文件夹名，如果是文件夹名，则文件夹下所有的文件也会被包含进来（除非文件被另一些配置排除了） 你也可以在模块根目录下创建一个 .npmignore文件（windows下无法直接创建以"."开头的文件，使用linux命令行工具创建如git bash），写在这个文件里边的文件即便被写在files属性里边也会被排除在外，这个文件的写法".gitignore"类似。\n\n\n# main\n\nmain属性指定了程序的主入口文件。意思是，如果你的模块被命名为foo，用户安装了这个模块并通过require("foo")来使用这个模块，那么require返回的内容就是main属性指定的文件中 module.exports指向的对象。 它应该指向模块根目录下的一个文件。对大对数模块而言，这个属性更多的是让模块有一个主入口文件，然而很多模块并不写这个属性。\n\n\n# bin\n\n很多模块有一个或多个需要配置到PATH路径下的可执行模块，npm让这个工作变得十分简单（实际上npm本身也是通过bin属性安装为一个可执行命令的） 如果要用npm的这个功能，在package.json里边配置一个bin属性。bin属性是一个已命令名称为key，本地文件名称为value的map如下：\n\n{\n    "bin" : { "myapp" : "./cli.js" }\n}\n\n\n1\n2\n3\n\n\n模块安装的时候，若是全局安装，则npm会为bin中配置的文件在bin目录下创建一个软连接（对于windows系统，默认会在C:\\Users\\username\\AppData\\Roaming\\npm目录下），若是局部安装，则会在项目内的./node_modules/.bin/目录下创建一个软链接。 因此，按上面的例子，当你安装myapp的时候，npm就会为cli.js在/usr/local/bin/myapp路径创建一个软链接。 如果你的模块只有一个可执行文件，并且它的命令名称和模块名称一样，你可以只写一个字符串来代替上面那种配置，例如：\n\n{ \n    "name": "my-program",\n    "version": "1.2.5", \n    "bin": "./path/to/program"\n}\n\n\n1\n2\n3\n4\n5\n\n\n作用和如下写法相同:\n\n{ \n    "name": "my-program", \n    "version": "1.2.5", \n    "bin" : { \n        "my-program" : "./path/to/program" \n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# man\n\n制定一个或通过数组制定一些文件来让linux下的man命令查找文档地址。 如果只有一个文件被指定的话，安装后直接使用man+模块名称，而不管man指定的文件的实际名称。例如:\n\n{\n    "name" : "foo",\n    "version" : "1.2.3", \n    "description" : "A packaged foo fooer for fooing foos", \n    "main" : "foo.js", \n    "man" : "./man/doc.1"\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n通过man foo命令会得到 ./man/doc.1 文件的内容。 如果man文件名称不是以模块名称开头的，安装的时候会给加上模块名称前缀。因此，下面这段配置：\n\n{ \n    "name" : "foo", \n    "version" : "1.2.3", \n    "description" : "A packaged foo fooer for fooing foos", \n    "main" : "foo.js", \n    "man" : [ "./man/foo.1", "./man/bar.1" ]\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n会创建一些文件来作为man foo和man foo-bar命令的结果。 man文件必须以数字结尾，或者如果被压缩了，以.gz结尾。数字表示文件将被安装到man的哪个部分。\n\n{ \n    "name" : "foo", \n    "version" : "1.2.3",\n    "description" : "A packaged foo fooer for fooing foos", \n    "main" : "foo.js", \n    "man" : [ "./man/foo.1", "./man/foo.2" ]\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n会创建 man foo 和 man 2 foo 两条命令。\n\n\n# directories\n\nCommonJs通过directories来制定一些方法来描述模块的结构，看看npm的package.json文件https://registry.npmjs.org/npm/latest ，可以发现里边有这个字段的内容。 目前这个配置没有任何作用，将来可能会整出一些花样来。\n\n\n# directories.lib\n\n告诉用户模块中lib目录在哪，这个配置目前没有任何作用，但是对使用模块的人来说是一个很有用的信息。\n\n\n# directories.bin\n\n如果你在这里指定了bin目录，这个配置下面的文件会被加入到bin路径下，如果你已经在package.json中配置了bin目录，那么这里的配置将不起任何作用。\n\n\n# directories.man\n\n指定一个目录，目录里边都是man文件，这是一种配置man文件的语法糖。\n\n\n# directories.doc\n\n在这个目录里边放一些markdown文件，可能最终有一天它们会被友好的展现出来（应该是在npm的网站上）\n\n\n# directories.example\n\n放一些示例脚本，或许某一天会有用 - -！\n\n\n# repository\n\n指定一个代码存放地址，对想要为你的项目贡献代码的人有帮助。像这样：\n\n"repository" :\n  {\n      "type" : "git",\n      "url" : "https://github.com/npm/npm.git"\n  }\n\n"repository" :\n  { \n      "type" : "svn", \n      "url" : "https://v8.googlecode.com/svn/trunk/"\n  }\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n若你的模块放在GitHub, GitHub gist, Bitbucket, or GitLab的仓库里，npm install的时候可以使用缩写标记来完成：\n\n"repository": "npm/npm"\n\n"repository": "gist:11081aaa281"\n\n"repository": "bitbucket:example/repo"\n\n"repository": "gitlab:another/repo"\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# scripts\n\nscripts属性是一个对象，里边指定了项目的生命周期个各个环节需要执行的命令。key是生命周期中的事件，value是要执行的命令。 具体的内容有 install start stop 等，详见 https://docs.npmjs.com/misc/scripts\n\n\n# config\n\n用来设置一些项目不怎么变化的项目配置，例如port等。 用户用的时候可以使用如下用法：\n\nhttp.createServer(...).listen(process.env.npm_package_config_port)\n\n\n1\n\n\n可以通过npm config set foo:port 80来修改config。详见https://docs.npmjs.com/misc/config\n\n{ \n    "name" : "foo", \n    "config" : { "port" : "8080" }\n}\n\n\n1\n2\n3\n4\n\n\n\n# dependencies\n\ndependencies属性是一个对象，配置模块依赖的模块列表，key是模块名称，value是版本范围，版本范围是一个字符，可以被一个或多个空格分割。 dependencies也可以被指定为一个git地址或者一个压缩包地址。 不要把测试工具或transpilers写到dependencies中。 下面是一些写法，详见https://docs.npmjs.com/misc/semver\n\n * version 精确匹配版本\n * >version 必须大于某个版本\n * >=version 大于等于\n * <version 小于\n * <=versionversion 小于\n * ~version "约等于"，具体规则详见semver文档\n * ^version "兼容版本"具体规则详见semver文档\n * 1.2.x 仅一点二点几的版本\n * http://... 见下面url作为denpendencies的说明\n * * 任何版本\n * "" 空字符，和*相同\n * version1 - version2 相当于 >=version1 <=version2.\n * range1 || range2 范围1和范围2满足任意一个都行\n * git... 见下面git url作为denpendencies的说明\n * user/repo See 见下面GitHub仓库的说明\n * tag 发布的一个特殊的标签，见npm-tag的文档 https://docs.npmjs.com/getting-started/using-tags\n * path/path/path 见下面本地模块的说明 下面的写法都是可以的:\n\n{ "dependencies" :\n  { "foo" : "1.0.0 - 2.9999.9999"\n  , "bar" : ">=1.0.2 <2.1.2"\n  , "baz" : ">1.0.2 <=2.3.4"\n  , "boo" : "2.0.1"\n  , "qux" : "<1.0.0 || >=2.3.1 <2.4.5 || >=2.5.2 <3.0.0"\n  , "asd" : "http://asdf.com/asdf.tar.gz"\n  , "til" : "~1.2"\n  , "elf" : "~1.2.3"\n  , "two" : "2.x"\n  , "thr" : "3.3.x"\n  , "lat" : "latest"\n  , "dyl" : "file:../dyl"\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n\n# URLs as Dependencies\n\n在版本范围的地方可以写一个url指向一个压缩包，模块安装的时候会把这个压缩包下载下来安装到模块本地。\n\n\n# Git URLs as Dependencies\n\nGit url可以像下面一样:\n\ngit://github.com/user/project.git#commit-ish\ngit+ssh://user@hostname:project.git#commit-ish\ngit+ssh://user@hostname/project.git#commit-ish\ngit+http://user@hostname/project/blah.git#commit-ish\ngit+https://user@hostname/project/blah.git#commit-ish\n\n\n1\n2\n3\n4\n5\n\n\ncommit-ish 可以是任意标签，哈希值，或者可以检出的分支，默认是master分支。\n\n\n# GitHub URLs\n\n支持github的 username/modulename 的写法，#后边可以加后缀写明分支hash或标签：\n\n{\n  "name": "foo",\n  "version": "0.0.0",\n  "dependencies": {\n    "express": "visionmedia/express",\n    "mocha": "visionmedia/mocha#4727d357ea"\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# Local Paths\n\nnpm2.0.0版本以上可以提供一个本地路径来安装一个本地的模块，通过npm install xxx --save 来安装，格式如下：\n\n../foo/bar\n~/foo/bar\n./foo/bar\n/foo/bar\n\n\n1\n2\n3\n4\n\n\npackage.json 生成的相对路径如下:\n\n{\n  "name": "baz",\n  "dependencies": {\n    "bar": "file:../foo/bar"\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n\n\n这种属性在离线开发或者测试需要用npm install的情况，又不想自己搞一个npm server的时候有用，但是发布模块到公共仓库时不应该使用这种属性。\n\n\n# devDependencies\n\n如果有人想要下载并使用你的模块，也许他们并不希望或需要下载一些你在开发过程中使用的额外的测试或者文档框架。 在这种情况下，最好的方法是把这些依赖添加到devDependencies属性的对象中。 这些模块会在npm link或者npm install的时候被安装，也可以像其他npm配置一样被管理，详见npm的config文档。 对于一些跨平台的构建任务，例如把CoffeeScript编译成JavaScript，就可以通过在package.json的script属性里边配置prepublish脚本来完成这个任务，然后需要依赖的coffee-script模块就写在devDependencies属性种。 例如:\n\n{ "name": "ethopia-waza",\n  "description": "a delightfully fruity coffee varietal",\n  "version": "1.2.3",\n  "devDependencies": {\n    "coffee-script": "~1.6.3"\n  },\n  "scripts": {\n    "prepublish": "coffee -o lib/ -c src/waza.coffee"\n  },\n  "main": "lib/waza.js"\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\nprepublish脚本会在发布之前运行，因此用户在使用之前就不用再自己去完成编译的过程了。在开发模式下，运行npm install也会执行这个脚本（见npm script文档），因此可以很方便的调试。\n\n\n# peerDependencies\n\n有时候做一些插件开发，比如grunt等工具的插件，它们往往是在grunt的某个版本的基础上开发的，而在他们的代码中并不会出现require("grunt")这样的依赖，dependencies配置里边也不会写上grunt的依赖，为了说明此模块只能作为插件跑在宿主的某个版本范围下，可以配置peerDependencies：\n\n{\n  "name": "tea-latte",\n  "version": "1.3.5",\n  "peerDependencies": {\n    "tea": "2.x"\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n上面这个配置确保再npm install的时候tea-latte会和2.x版本的tea一起安装，而且它们两个的依赖关系是同级的： ├── tea-latte@1.3.5 └── tea@2.2.0 这个配置的目的是让npm知道，如果要使用此插件模块，请确保安装了兼容版本的宿主模块。\n\n\n# bundledDependencies\n\n上面的单词少个d，写成bundleDependencies也可以。 指定发布的时候会被一起打包的模块。\n\n\n# optionalDependencies\n\n如果一个依赖模块可以被使用， 同时你也希望在该模块找不到或无法获取时npm继续运行，你可以把这个模块依赖放到optionalDependencies配置中。这个配置的写法和dependencies的写法一样，不同的是这里边写的模块安装失败不会导致npm install失败。 当然，这种模块就需要你自己在代码中处理模块确实的情况了，例如：\n\ntry {\n  var foo = require(\'foo\')\n  var fooVersion = require(\'foo/package.json\').version\n} catch (er) {\n  foo = null\n}\nif ( notGoodFooVersion(fooVersion) ) {\n  foo = null\n}\n\n// .. then later in your program ..\n\nif (foo) {\n  foo.doFooThings()\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\noptionalDependencies 中的配置会覆盖dependencies中的配置，最好只在一个地方写。\n\n\n# engines\n\n你可以指定项目运行的node版本范围，如下： { "engines" : { "node" : ">=0.10.3 <0.12" } } 和dependencies一样，如果你不指定版本范围或者指定为*，任何版本的node都可以。 也可以指定一些npm版本可以正确的安装你的模块，例如： { "engines" : { "npm" : "~1.0.20" } } 要注意的是，除非你设置了engine-strict属性，engines属性是仅供参考的。\n\n\n# engineStrict\n\n注意：这个属性已经弃用，将在npm 3.0.0 版本干掉。\n\n\n# os\n\n可以指定你的模块只能在哪个操作系统上跑： "os" : [ "darwin", "linux" ] 也可以指定黑名单而不是白名单： "os" : [ "!win32" ] 服务的操作系统是由process.platform来判断的，这个属性允许黑白名单同时存在，虽然没啥必要这样搞...\n\n\n# cpu\n\n限制模块只能在某某cpu架构下运行 "cpu" : [ "x64", "ia32" ] 同样可以设置黑名单: "cpu" : [ "!arm", "!mips" ] cpu架构通过 process.arch 判断\n\n\n# preferGlobal\n\n如果您的软件包主要用于安装到全局的命令行应用程序，那么该值设置为true ，如果它被安装在本地，则提供一个警告。实际上该配置并没有阻止用户把模块安装到本地，只是防止该模块被错误的使用引起一些问题。\n\n\n# private\n\n如果这个属性被设置为true，npm将拒绝发布它，这是为了防止一个私有模块被无意间发布出去。如果你只想让模块被发布到一个特定的npm仓库，如一个内部的仓库，可与在下面的publishConfig中配置仓库参数。\n\n\n# publishConfig\n\n这个配置是会在模块发布时用到的一些值的集合。如果你不想模块被默认被标记为最新的，或者默认发布到公共仓库，可以在这里配置tag或仓库地址。\n\n\n# DEFAULT VALUES\n\nnpm设置了一些默认参数，如： "scripts": {"start": "node server.js"} 如果模块根目录下有一个server.js文件，那么npm start会默认运行这个文件。 "scripts":{"preinstall": "node-gyp rebuild"} 如果模块根目录下有binding.gyp, npm将默认用node-gyp来编译preinstall的脚本 "contributors": [...] 若模块根目录下有AUTHORS 文件，则npm会按Name (url)格式解析每一行的数据添加到contributors中，可以用#添加行注释\n\n\n# 参考文档列表(https://docs.npmjs.com/)\n\nsemver(7) npm-init(1) npm-version(1) npm-config(1) npm-config(7) npm-help(1) npm-faq(7) npm-install(1) npm-publish(1) npm-rm(1)',normalizedContent:'# npm package.json属性详解\n\n> 本文转自https://www.cnblogs.com/tzyy/p/5193811.html，作者：tzyy\n\n\n# 概述\n\npackage.json必须是一个严格的json文件，而不仅仅是js里边的一个对象。其中很多属性可以通过 npm-config来生成\n\n\n# name\n\npackage.json中最重要的属性是 name和 version两个属性，这两个属性是必须要有的，否则模块就无法被安装，这两个属性一起形成了一个npm模块的唯一标识符。模块中内容变更的同时，模块版本也应该一起变化。 name属性就是你的模块名称，下面是一些命名规则:\n\n * name必须小于等于214个字节，包括前缀名称在内（如 xxx/xxxmodule）。\n\n * name不能以"_"或"."开头\n\n * 不能含有大写字母\n\n * name会成为url的一部分，不能含有url非法字符\n   \n   下面是官网文档的一些建议：\n\n * 不要使用和node核心模块一样的名称\n\n * name中不要含有"js"和"node"。 it\'s assumed that it\'s js, since you\'re writing a package.json file, and you can specify the engine using the "engines" field. (see below.)\n\n * name属性会成为模块url、命令行中的一个参数或者一个文件夹名称，任何非url安全的字符在name中都不能使用，也不能以"_"或"."开头\n\n * name属性也许会被写在 require()的参数中，所以最好取个简短而语义化的值。\n\n * 创建一个模块前可以先到后边的网址查查 name是否已经被占用. https://www.npmjs.com/\n   \n   * # 发布一个包的时候，需要检验某个包名是否存在\n     npm search <modulename>\n     \n     \n     1\n     2\n     \n\nname属性可以有一些前缀如 e.g. @myorg/mypackage.在npm-scope(7)的文档中可以看到详细说明\n\n\n# version\n\nversion必须可以被npm依赖的一个 node-semver模块解析。具体规则见下面的 dependencies模块\n\n\n# description\n\n一个描述，方便别人了解你的模块作用，搜索的时候也有用。\n\n\n# keywords\n\n一个字符串数组，方便别人搜索到本模块\n\n\n# homepage\n\n项目主页url 注意: 这个项目主页url和url属性不同，如果你填写了url属性，npm注册工具会认为你把项目发布到其他地方了，获取模块的时候不会从npm官方仓库获取，而是会重定向到url属性配置的地址。 （原文档中用了 spit(吐)这个单词，作者表示他不是在开玩笑:）\n\n\n# bugs\n\n填写一个bug提交地址或者一个邮箱，被你的模块坑到的人可以通过这里吐槽，例如：\n\n{\n    "url" : "https://github.com/owner/project/issues",\n    "email" : "project@hostname.com"\n}\n\n\n1\n2\n3\n4\n\n\nurl和email可以任意填或不填，如果只填一个，可以直接写成一个字符串而不是对象。如果填写了url，npm bugs命令会使用这个url。\n\n\n# license\n\n你应该为你的模块制定一个协议，让用户知道他们有何权限来使用你的模块，以及使用该模块有哪些限制。最简单的，例如你用bsd-3-clause 或 mit之类的协议，如下：\n\n{ "license" : "mit" }\n\n\n1\n\n\n你可以在https://spdx.org/licenses/ 这个地址查阅协议列表 。\n\n\n# 和用户相关的属性: author, contributors\n\nauthor是一个码农， contributors是一个码农数组。 person是一个有一些描述属性的对象，如下 like this:\n\n{\n    "name" : "barney rubble",\n    "email" : "b@rubble.com",\n    "url" : "http://barnyrubble.tumblr.com/"\n}\n\n\n1\n2\n3\n4\n5\n\n\n也可以按如下格式缩写，npm会帮着转换:\n\n"barney rubble b@rubble.com (http://barnyrubble.tumblr.com/)"\n\n\n1\n\n\nemail和 url属性实际上都是可以省略的。描述用户信息的还有一个 maintainers（维护者）属性。\n\n\n# files\n\nfiles属性的值是一个数组，内容是模块下文件名或者文件夹名，如果是文件夹名，则文件夹下所有的文件也会被包含进来（除非文件被另一些配置排除了） 你也可以在模块根目录下创建一个 .npmignore文件（windows下无法直接创建以"."开头的文件，使用linux命令行工具创建如git bash），写在这个文件里边的文件即便被写在files属性里边也会被排除在外，这个文件的写法".gitignore"类似。\n\n\n# main\n\nmain属性指定了程序的主入口文件。意思是，如果你的模块被命名为foo，用户安装了这个模块并通过require("foo")来使用这个模块，那么require返回的内容就是main属性指定的文件中 module.exports指向的对象。 它应该指向模块根目录下的一个文件。对大对数模块而言，这个属性更多的是让模块有一个主入口文件，然而很多模块并不写这个属性。\n\n\n# bin\n\n很多模块有一个或多个需要配置到path路径下的可执行模块，npm让这个工作变得十分简单（实际上npm本身也是通过bin属性安装为一个可执行命令的） 如果要用npm的这个功能，在package.json里边配置一个bin属性。bin属性是一个已命令名称为key，本地文件名称为value的map如下：\n\n{\n    "bin" : { "myapp" : "./cli.js" }\n}\n\n\n1\n2\n3\n\n\n模块安装的时候，若是全局安装，则npm会为bin中配置的文件在bin目录下创建一个软连接（对于windows系统，默认会在c:\\users\\username\\appdata\\roaming\\npm目录下），若是局部安装，则会在项目内的./node_modules/.bin/目录下创建一个软链接。 因此，按上面的例子，当你安装myapp的时候，npm就会为cli.js在/usr/local/bin/myapp路径创建一个软链接。 如果你的模块只有一个可执行文件，并且它的命令名称和模块名称一样，你可以只写一个字符串来代替上面那种配置，例如：\n\n{ \n    "name": "my-program",\n    "version": "1.2.5", \n    "bin": "./path/to/program"\n}\n\n\n1\n2\n3\n4\n5\n\n\n作用和如下写法相同:\n\n{ \n    "name": "my-program", \n    "version": "1.2.5", \n    "bin" : { \n        "my-program" : "./path/to/program" \n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# man\n\n制定一个或通过数组制定一些文件来让linux下的man命令查找文档地址。 如果只有一个文件被指定的话，安装后直接使用man+模块名称，而不管man指定的文件的实际名称。例如:\n\n{\n    "name" : "foo",\n    "version" : "1.2.3", \n    "description" : "a packaged foo fooer for fooing foos", \n    "main" : "foo.js", \n    "man" : "./man/doc.1"\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n通过man foo命令会得到 ./man/doc.1 文件的内容。 如果man文件名称不是以模块名称开头的，安装的时候会给加上模块名称前缀。因此，下面这段配置：\n\n{ \n    "name" : "foo", \n    "version" : "1.2.3", \n    "description" : "a packaged foo fooer for fooing foos", \n    "main" : "foo.js", \n    "man" : [ "./man/foo.1", "./man/bar.1" ]\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n会创建一些文件来作为man foo和man foo-bar命令的结果。 man文件必须以数字结尾，或者如果被压缩了，以.gz结尾。数字表示文件将被安装到man的哪个部分。\n\n{ \n    "name" : "foo", \n    "version" : "1.2.3",\n    "description" : "a packaged foo fooer for fooing foos", \n    "main" : "foo.js", \n    "man" : [ "./man/foo.1", "./man/foo.2" ]\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n会创建 man foo 和 man 2 foo 两条命令。\n\n\n# directories\n\ncommonjs通过directories来制定一些方法来描述模块的结构，看看npm的package.json文件https://registry.npmjs.org/npm/latest ，可以发现里边有这个字段的内容。 目前这个配置没有任何作用，将来可能会整出一些花样来。\n\n\n# directories.lib\n\n告诉用户模块中lib目录在哪，这个配置目前没有任何作用，但是对使用模块的人来说是一个很有用的信息。\n\n\n# directories.bin\n\n如果你在这里指定了bin目录，这个配置下面的文件会被加入到bin路径下，如果你已经在package.json中配置了bin目录，那么这里的配置将不起任何作用。\n\n\n# directories.man\n\n指定一个目录，目录里边都是man文件，这是一种配置man文件的语法糖。\n\n\n# directories.doc\n\n在这个目录里边放一些markdown文件，可能最终有一天它们会被友好的展现出来（应该是在npm的网站上）\n\n\n# directories.example\n\n放一些示例脚本，或许某一天会有用 - -！\n\n\n# repository\n\n指定一个代码存放地址，对想要为你的项目贡献代码的人有帮助。像这样：\n\n"repository" :\n  {\n      "type" : "git",\n      "url" : "https://github.com/npm/npm.git"\n  }\n\n"repository" :\n  { \n      "type" : "svn", \n      "url" : "https://v8.googlecode.com/svn/trunk/"\n  }\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n若你的模块放在github, github gist, bitbucket, or gitlab的仓库里，npm install的时候可以使用缩写标记来完成：\n\n"repository": "npm/npm"\n\n"repository": "gist:11081aaa281"\n\n"repository": "bitbucket:example/repo"\n\n"repository": "gitlab:another/repo"\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# scripts\n\nscripts属性是一个对象，里边指定了项目的生命周期个各个环节需要执行的命令。key是生命周期中的事件，value是要执行的命令。 具体的内容有 install start stop 等，详见 https://docs.npmjs.com/misc/scripts\n\n\n# config\n\n用来设置一些项目不怎么变化的项目配置，例如port等。 用户用的时候可以使用如下用法：\n\nhttp.createserver(...).listen(process.env.npm_package_config_port)\n\n\n1\n\n\n可以通过npm config set foo:port 80来修改config。详见https://docs.npmjs.com/misc/config\n\n{ \n    "name" : "foo", \n    "config" : { "port" : "8080" }\n}\n\n\n1\n2\n3\n4\n\n\n\n# dependencies\n\ndependencies属性是一个对象，配置模块依赖的模块列表，key是模块名称，value是版本范围，版本范围是一个字符，可以被一个或多个空格分割。 dependencies也可以被指定为一个git地址或者一个压缩包地址。 不要把测试工具或transpilers写到dependencies中。 下面是一些写法，详见https://docs.npmjs.com/misc/semver\n\n * version 精确匹配版本\n * >version 必须大于某个版本\n * >=version 大于等于\n * <version 小于\n * <=versionversion 小于\n * ~version "约等于"，具体规则详见semver文档\n * ^version "兼容版本"具体规则详见semver文档\n * 1.2.x 仅一点二点几的版本\n * http://... 见下面url作为denpendencies的说明\n * * 任何版本\n * "" 空字符，和*相同\n * version1 - version2 相当于 >=version1 <=version2.\n * range1 || range2 范围1和范围2满足任意一个都行\n * git... 见下面git url作为denpendencies的说明\n * user/repo see 见下面github仓库的说明\n * tag 发布的一个特殊的标签，见npm-tag的文档 https://docs.npmjs.com/getting-started/using-tags\n * path/path/path 见下面本地模块的说明 下面的写法都是可以的:\n\n{ "dependencies" :\n  { "foo" : "1.0.0 - 2.9999.9999"\n  , "bar" : ">=1.0.2 <2.1.2"\n  , "baz" : ">1.0.2 <=2.3.4"\n  , "boo" : "2.0.1"\n  , "qux" : "<1.0.0 || >=2.3.1 <2.4.5 || >=2.5.2 <3.0.0"\n  , "asd" : "http://asdf.com/asdf.tar.gz"\n  , "til" : "~1.2"\n  , "elf" : "~1.2.3"\n  , "two" : "2.x"\n  , "thr" : "3.3.x"\n  , "lat" : "latest"\n  , "dyl" : "file:../dyl"\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n\n# urls as dependencies\n\n在版本范围的地方可以写一个url指向一个压缩包，模块安装的时候会把这个压缩包下载下来安装到模块本地。\n\n\n# git urls as dependencies\n\ngit url可以像下面一样:\n\ngit://github.com/user/project.git#commit-ish\ngit+ssh://user@hostname:project.git#commit-ish\ngit+ssh://user@hostname/project.git#commit-ish\ngit+http://user@hostname/project/blah.git#commit-ish\ngit+https://user@hostname/project/blah.git#commit-ish\n\n\n1\n2\n3\n4\n5\n\n\ncommit-ish 可以是任意标签，哈希值，或者可以检出的分支，默认是master分支。\n\n\n# github urls\n\n支持github的 username/modulename 的写法，#后边可以加后缀写明分支hash或标签：\n\n{\n  "name": "foo",\n  "version": "0.0.0",\n  "dependencies": {\n    "express": "visionmedia/express",\n    "mocha": "visionmedia/mocha#4727d357ea"\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# local paths\n\nnpm2.0.0版本以上可以提供一个本地路径来安装一个本地的模块，通过npm install xxx --save 来安装，格式如下：\n\n../foo/bar\n~/foo/bar\n./foo/bar\n/foo/bar\n\n\n1\n2\n3\n4\n\n\npackage.json 生成的相对路径如下:\n\n{\n  "name": "baz",\n  "dependencies": {\n    "bar": "file:../foo/bar"\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n\n\n这种属性在离线开发或者测试需要用npm install的情况，又不想自己搞一个npm server的时候有用，但是发布模块到公共仓库时不应该使用这种属性。\n\n\n# devdependencies\n\n如果有人想要下载并使用你的模块，也许他们并不希望或需要下载一些你在开发过程中使用的额外的测试或者文档框架。 在这种情况下，最好的方法是把这些依赖添加到devdependencies属性的对象中。 这些模块会在npm link或者npm install的时候被安装，也可以像其他npm配置一样被管理，详见npm的config文档。 对于一些跨平台的构建任务，例如把coffeescript编译成javascript，就可以通过在package.json的script属性里边配置prepublish脚本来完成这个任务，然后需要依赖的coffee-script模块就写在devdependencies属性种。 例如:\n\n{ "name": "ethopia-waza",\n  "description": "a delightfully fruity coffee varietal",\n  "version": "1.2.3",\n  "devdependencies": {\n    "coffee-script": "~1.6.3"\n  },\n  "scripts": {\n    "prepublish": "coffee -o lib/ -c src/waza.coffee"\n  },\n  "main": "lib/waza.js"\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\nprepublish脚本会在发布之前运行，因此用户在使用之前就不用再自己去完成编译的过程了。在开发模式下，运行npm install也会执行这个脚本（见npm script文档），因此可以很方便的调试。\n\n\n# peerdependencies\n\n有时候做一些插件开发，比如grunt等工具的插件，它们往往是在grunt的某个版本的基础上开发的，而在他们的代码中并不会出现require("grunt")这样的依赖，dependencies配置里边也不会写上grunt的依赖，为了说明此模块只能作为插件跑在宿主的某个版本范围下，可以配置peerdependencies：\n\n{\n  "name": "tea-latte",\n  "version": "1.3.5",\n  "peerdependencies": {\n    "tea": "2.x"\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n上面这个配置确保再npm install的时候tea-latte会和2.x版本的tea一起安装，而且它们两个的依赖关系是同级的： ├── tea-latte@1.3.5 └── tea@2.2.0 这个配置的目的是让npm知道，如果要使用此插件模块，请确保安装了兼容版本的宿主模块。\n\n\n# bundleddependencies\n\n上面的单词少个d，写成bundledependencies也可以。 指定发布的时候会被一起打包的模块。\n\n\n# optionaldependencies\n\n如果一个依赖模块可以被使用， 同时你也希望在该模块找不到或无法获取时npm继续运行，你可以把这个模块依赖放到optionaldependencies配置中。这个配置的写法和dependencies的写法一样，不同的是这里边写的模块安装失败不会导致npm install失败。 当然，这种模块就需要你自己在代码中处理模块确实的情况了，例如：\n\ntry {\n  var foo = require(\'foo\')\n  var fooversion = require(\'foo/package.json\').version\n} catch (er) {\n  foo = null\n}\nif ( notgoodfooversion(fooversion) ) {\n  foo = null\n}\n\n// .. then later in your program ..\n\nif (foo) {\n  foo.dofoothings()\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\noptionaldependencies 中的配置会覆盖dependencies中的配置，最好只在一个地方写。\n\n\n# engines\n\n你可以指定项目运行的node版本范围，如下： { "engines" : { "node" : ">=0.10.3 <0.12" } } 和dependencies一样，如果你不指定版本范围或者指定为*，任何版本的node都可以。 也可以指定一些npm版本可以正确的安装你的模块，例如： { "engines" : { "npm" : "~1.0.20" } } 要注意的是，除非你设置了engine-strict属性，engines属性是仅供参考的。\n\n\n# enginestrict\n\n注意：这个属性已经弃用，将在npm 3.0.0 版本干掉。\n\n\n# os\n\n可以指定你的模块只能在哪个操作系统上跑： "os" : [ "darwin", "linux" ] 也可以指定黑名单而不是白名单： "os" : [ "!win32" ] 服务的操作系统是由process.platform来判断的，这个属性允许黑白名单同时存在，虽然没啥必要这样搞...\n\n\n# cpu\n\n限制模块只能在某某cpu架构下运行 "cpu" : [ "x64", "ia32" ] 同样可以设置黑名单: "cpu" : [ "!arm", "!mips" ] cpu架构通过 process.arch 判断\n\n\n# preferglobal\n\n如果您的软件包主要用于安装到全局的命令行应用程序，那么该值设置为true ，如果它被安装在本地，则提供一个警告。实际上该配置并没有阻止用户把模块安装到本地，只是防止该模块被错误的使用引起一些问题。\n\n\n# private\n\n如果这个属性被设置为true，npm将拒绝发布它，这是为了防止一个私有模块被无意间发布出去。如果你只想让模块被发布到一个特定的npm仓库，如一个内部的仓库，可与在下面的publishconfig中配置仓库参数。\n\n\n# publishconfig\n\n这个配置是会在模块发布时用到的一些值的集合。如果你不想模块被默认被标记为最新的，或者默认发布到公共仓库，可以在这里配置tag或仓库地址。\n\n\n# default values\n\nnpm设置了一些默认参数，如： "scripts": {"start": "node server.js"} 如果模块根目录下有一个server.js文件，那么npm start会默认运行这个文件。 "scripts":{"preinstall": "node-gyp rebuild"} 如果模块根目录下有binding.gyp, npm将默认用node-gyp来编译preinstall的脚本 "contributors": [...] 若模块根目录下有authors 文件，则npm会按name (url)格式解析每一行的数据添加到contributors中，可以用#添加行注释\n\n\n# 参考文档列表(https://docs.npmjs.com/)\n\nsemver(7) npm-init(1) npm-version(1) npm-config(1) npm-config(7) npm-help(1) npm-faq(7) npm-install(1) npm-publish(1) npm-rm(1)',charsets:{cjk:!0}},{title:"yaml语言教程",frontmatter:{title:"yaml语言教程",date:"2019-12-25T14:27:01.000Z",permalink:"/pages/4e8444e2d534d14f",categories:["技术","技术文档"],tags:[null],readingShow:"top"},regularPath:"/03.%E6%8A%80%E6%9C%AF/05.%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/15.yaml%E8%AF%AD%E8%A8%80%E6%95%99%E7%A8%8B.html",relativePath:"03.技术/05.技术文档/15.yaml语言教程.md",key:"v-243c5977",path:"/pages/4e8444e2d534d14f/",headers:[{level:2,title:"简介",slug:"简介",normalizedTitle:"简介",charIndex:15},{level:2,title:"基本语法",slug:"基本语法",normalizedTitle:"基本语法",charIndex:326},{level:2,title:"数据类型",slug:"数据类型",normalizedTitle:"数据类型",charIndex:418},{level:2,title:"YAML 对象",slug:"yaml-对象",normalizedTitle:"yaml 对象",charIndex:572},{level:2,title:"YAML 数组",slug:"yaml-数组",normalizedTitle:"yaml 数组",charIndex:1082},{level:2,title:"复合结构（对象和数组组合）",slug:"复合结构-对象和数组组合",normalizedTitle:"复合结构（对象和数组组合）",charIndex:1590},{level:2,title:"纯量",slug:"纯量",normalizedTitle:"纯量",charIndex:545},{level:2,title:"转换数据格式",slug:"转换数据格式",normalizedTitle:"转换数据格式",charIndex:3048},{level:2,title:"锚点引用",slug:"锚点引用",normalizedTitle:"锚点引用",charIndex:3155}],excerpt:'<h1 id="yaml语言教程"><a class="header-anchor" href="#yaml语言教程">#</a> yaml语言教程</h1>\n<h2 id="简介"><a class="header-anchor" href="#简介">#</a> 简介</h2>\n<p>YAML 是 &quot;YAML Ain\'t a Markup Language&quot;（YAML 不是一种标记语言）的递归缩写。在开发的这种语言时，YAML 的意思其实是：&quot;Yet Another Markup Language&quot;（仍是一种标记语言）。</p>\n',lastUpdated:"2022/9/22 下午4:28:09",lastUpdatedTimestamp:1663835289e3,headersStr:"简介 基本语法 数据类型 YAML 对象 YAML 数组 复合结构（对象和数组组合） 纯量 转换数据格式 锚点引用",content:"# yaml语言教程\n\n\n# 简介\n\nYAML 是 \"YAML Ain't a Markup Language\"（YAML 不是一种标记语言）的递归缩写。在开发的这种语言时，YAML 的意思其实是：\"Yet Another Markup Language\"（仍是一种标记语言）。\n\nYAML 的语法和其他高级语言类似，并且可以简单表达清单、散列表，标量等数据形态。它使用空白符号缩进和大量依赖外观的特色，特别适合用来表达或编辑数据结构、各种配置文件、倾印调试内容、文件大纲（例如：许多电子邮件标题格式和YAML非常接近）。\n\nYAML 的配置文件后缀为 .yml，如：runoob.yml 。\n\n> yaml常用来用作配置文件，和json类似\n\n\n# 基本语法\n\n * 大小写敏感\n * 使用缩进表示层级关系\n * 缩进不允许使用tab，只允许空格\n * 缩进的空格数不重要，只要相同层级的元素左对齐即可\n * '#'表示注释\n\n\n# 数据类型\n\nYAML 支持以下几种数据类型：\n\n * 对象：键值对的集合，又称为映射（mapping）/ 哈希（hashes） / 字典（dictionary）\n * 数组：一组按次序排列的值，又称为序列（sequence） / 列表（list）\n * 纯量（scalars）：单个的、不可再分的值\n\n\n# YAML 对象\n\n对象的几种表示形式：\n\n1、对象键值对使用冒号结构表示 key: value，冒号后面要加一个空格。\n\nkey: value\n\n\n1\n\n\n2、也可以使用 key:{key1: value1, key2: value2, ...}。\n\nkey:{child-key1:value1,child-key2:value2}\n\n\n1\n\n\n3、还可以使用缩进表示层级关系；\n\nkey: \n    child-key1: value1\n    child-key2: value2\n\n\n1\n2\n3\n\n\n同2，只是表示形式不同。\n\n4、较为复杂的对象格式，可以使用问号加一个空格代表一个复杂的 key，配合一个冒号加一个空格代表一个 value：\n\n?  \n    - complexkey1\n    - complexkey2\n:\n    - complexvalue1\n    - complexvalue2\n\n\n1\n2\n3\n4\n5\n6\n\n\n意思即对象的属性是一个数组 [complexkey1,complexkey2]，对应的值也是一个数组 [complexvalue1,complexvalue2]\n\n\n# YAML 数组\n\n以 - 开头的行表示构成一个数组：\n\n- A\n- B\n- C\n\n\n1\n2\n3\n\n\nYAML 支持多维数组，可以使用行内表示：\n\nkey: [value1, value2, ...]\n\n\n1\n\n\n数据结构的子成员是一个数组，则可以在该项下面缩进一个空格。\n\n-\n - A\n - B\n - C\n\n\n1\n2\n3\n4\n\n\n一个相对复杂的例子：\n\ncompanies:\n    -\n        id: 1\n        name: company1\n        price: 200W\n    -\n        id: 2\n        name: company2\n        price: 500W\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n意思是 companies 属性是一个数组，每一个数组元素又是由 id、name、price 三个属性构成。\n\n数组也可以使用流式(flow)的方式表示：\n\ncompanies: [{id: 1,name: company1,price: 200W},{id: 2,name: company2,price: 500W}]\n\n\n1\n\n\n\n# 复合结构（对象和数组组合）\n\n数组和对象可以构成复合结构，例：\n\nlanguages:\n  - Ruby\n  - Perl\n  - Python \nwebsites:\n  YAML: yaml.org \n  Ruby: ruby-lang.org \n  Python: python.org \n  Perl: use.perl.org\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n转换为 js 为：\n\n{ \n  languages: [ 'Ruby', 'Perl', 'Python'],\n  websites: {\n    YAML: 'yaml.org',\n    Ruby: 'ruby-lang.org',\n    Python: 'python.org',\n    Perl: 'use.perl.org' \n  } \n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n\n# 纯量\n\n纯量是最基本的，不可再分的值，包括：\n\n * 字符串\n * 布尔值\n * 整数\n * 浮点数\n * Null\n * 时间\n * 日期\n\n使用一个例子来快速了解纯量的基本使用：\n\nboolean: # 布尔值\n    - TRUE  #true,True都可以\n    - FALSE  #false，False都可以\nfloat: # 浮点数\n    - 3.14\n    - 6.8523015e+5  #可以使用科学计数法\nint: # 整数\n    - 123\n    - 0b1010_0111_0100_1010_1110    #二进制表示\nnull: # Null\n    nodeName: 'node'\n    parent: ~  #使用~表示null\nstring: # 字符串\n    - 哈哈 # 字符串默认不使用引号表示\n    - 'Hello world'  #可以使用双引号或者单引号包裹特殊字符\n    - newline\n      newline2    #字符串可以拆成多行，每一行会被转化成一个空格\ndate:\n    - 2018-02-17    #日期必须使用ISO 8601格式，即yyyy-MM-dd\ndatetime: \n    -  2018-02-17T15:02:31+08:00    #时间使用ISO 8601格式，时间和日期之间使用T连接，最后使用+代表时区\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n\n\n多行字符串可以使用 |保留换行符，也可以使用 >折叠换行。\n\nthis: |\n  Foo\n  Bar\nthat: >\n  Foo\n  Bar\n\n\n1\n2\n3\n4\n5\n6\n\n\n转为js代码如下。\n\n{ this: 'Foo\\nBar\\n', that: 'Foo Bar\\n' }\n\n\n1\n\n\n+表示保留文字块末尾的换行，-表示删除字符串末尾的换行。\n\ns1: |\n  Foo\n \ns2: |+\n  Foo\n \n \ns3: |-\n  Foo\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n转为json代码如下\n\n{ s1: 'Foo\\n', s2: 'Foo\\n\\n\\n', s3: 'Foo' }\n\n\n1\n\n\n字符串之中可以插入 HTML 标记。\n\nmessage: |\n  <p style=\"color: red\">\n    段落\n  </p>\n\n\n1\n2\n3\n4\n\n\n\n# 转换数据格式\n\n允许使用两个感叹号，强制转换数据类型。\n\ne: !!str 123\nf: !!str true\n\n\n1\n2\n\n\n转换js结果同：\n\n{ e: '123', f: 'true' }\n\n\n1\n\n\n\n# 锚点引用\n\n& 锚点和< span class=\"marked\">* 别名，可以用来引用:\n\ndefaults: &defaults # 添加锚点\n  adapter:  postgres\n  host:     localhost\n\ndevelopment:\n  database: myapp_development\n  <<: *defaults # <<表示合并，*引用锚点\n\ntest:\n  database: myapp_test\n  <<: *defaults # <<表示合并，*引用锚点\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n相当于:\n\ndefaults:\n  adapter:  postgres\n  host:     localhost\n\ndevelopment:\n  database: myapp_development\n  adapter:  postgres\n  host:     localhost\n\ntest:\n  database: myapp_test\n  adapter:  postgres\n  host:     localhost\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n& 用来建立锚点（defaults），<< 表示合并到当前数据，***** 用来引用锚点。\n\n下面是另一个例子:\n\n- &showell Steve \n- Clark \n- Brian \n- Oren \n- *showell \n\n\n1\n2\n3\n4\n5\n\n\n转为js代码如下:\n\n[ 'Steve', 'Clark', 'Brian', 'Oren', 'Steve' ]\n\n\n1\n\n\n> 参考：\n> \n>  * yaml官网：https://yaml.org/\n>  * yaml与js的转换demo：http://nodeca.github.io/js-yaml/\n>  * 菜鸟教程：https://www.ruanyifeng.com/blog/2016/07/yaml.html",normalizedContent:"# yaml语言教程\n\n\n# 简介\n\nyaml 是 \"yaml ain't a markup language\"（yaml 不是一种标记语言）的递归缩写。在开发的这种语言时，yaml 的意思其实是：\"yet another markup language\"（仍是一种标记语言）。\n\nyaml 的语法和其他高级语言类似，并且可以简单表达清单、散列表，标量等数据形态。它使用空白符号缩进和大量依赖外观的特色，特别适合用来表达或编辑数据结构、各种配置文件、倾印调试内容、文件大纲（例如：许多电子邮件标题格式和yaml非常接近）。\n\nyaml 的配置文件后缀为 .yml，如：runoob.yml 。\n\n> yaml常用来用作配置文件，和json类似\n\n\n# 基本语法\n\n * 大小写敏感\n * 使用缩进表示层级关系\n * 缩进不允许使用tab，只允许空格\n * 缩进的空格数不重要，只要相同层级的元素左对齐即可\n * '#'表示注释\n\n\n# 数据类型\n\nyaml 支持以下几种数据类型：\n\n * 对象：键值对的集合，又称为映射（mapping）/ 哈希（hashes） / 字典（dictionary）\n * 数组：一组按次序排列的值，又称为序列（sequence） / 列表（list）\n * 纯量（scalars）：单个的、不可再分的值\n\n\n# yaml 对象\n\n对象的几种表示形式：\n\n1、对象键值对使用冒号结构表示 key: value，冒号后面要加一个空格。\n\nkey: value\n\n\n1\n\n\n2、也可以使用 key:{key1: value1, key2: value2, ...}。\n\nkey:{child-key1:value1,child-key2:value2}\n\n\n1\n\n\n3、还可以使用缩进表示层级关系；\n\nkey: \n    child-key1: value1\n    child-key2: value2\n\n\n1\n2\n3\n\n\n同2，只是表示形式不同。\n\n4、较为复杂的对象格式，可以使用问号加一个空格代表一个复杂的 key，配合一个冒号加一个空格代表一个 value：\n\n?  \n    - complexkey1\n    - complexkey2\n:\n    - complexvalue1\n    - complexvalue2\n\n\n1\n2\n3\n4\n5\n6\n\n\n意思即对象的属性是一个数组 [complexkey1,complexkey2]，对应的值也是一个数组 [complexvalue1,complexvalue2]\n\n\n# yaml 数组\n\n以 - 开头的行表示构成一个数组：\n\n- a\n- b\n- c\n\n\n1\n2\n3\n\n\nyaml 支持多维数组，可以使用行内表示：\n\nkey: [value1, value2, ...]\n\n\n1\n\n\n数据结构的子成员是一个数组，则可以在该项下面缩进一个空格。\n\n-\n - a\n - b\n - c\n\n\n1\n2\n3\n4\n\n\n一个相对复杂的例子：\n\ncompanies:\n    -\n        id: 1\n        name: company1\n        price: 200w\n    -\n        id: 2\n        name: company2\n        price: 500w\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n意思是 companies 属性是一个数组，每一个数组元素又是由 id、name、price 三个属性构成。\n\n数组也可以使用流式(flow)的方式表示：\n\ncompanies: [{id: 1,name: company1,price: 200w},{id: 2,name: company2,price: 500w}]\n\n\n1\n\n\n\n# 复合结构（对象和数组组合）\n\n数组和对象可以构成复合结构，例：\n\nlanguages:\n  - ruby\n  - perl\n  - python \nwebsites:\n  yaml: yaml.org \n  ruby: ruby-lang.org \n  python: python.org \n  perl: use.perl.org\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n转换为 js 为：\n\n{ \n  languages: [ 'ruby', 'perl', 'python'],\n  websites: {\n    yaml: 'yaml.org',\n    ruby: 'ruby-lang.org',\n    python: 'python.org',\n    perl: 'use.perl.org' \n  } \n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n\n# 纯量\n\n纯量是最基本的，不可再分的值，包括：\n\n * 字符串\n * 布尔值\n * 整数\n * 浮点数\n * null\n * 时间\n * 日期\n\n使用一个例子来快速了解纯量的基本使用：\n\nboolean: # 布尔值\n    - true  #true,true都可以\n    - false  #false，false都可以\nfloat: # 浮点数\n    - 3.14\n    - 6.8523015e+5  #可以使用科学计数法\nint: # 整数\n    - 123\n    - 0b1010_0111_0100_1010_1110    #二进制表示\nnull: # null\n    nodename: 'node'\n    parent: ~  #使用~表示null\nstring: # 字符串\n    - 哈哈 # 字符串默认不使用引号表示\n    - 'hello world'  #可以使用双引号或者单引号包裹特殊字符\n    - newline\n      newline2    #字符串可以拆成多行，每一行会被转化成一个空格\ndate:\n    - 2018-02-17    #日期必须使用iso 8601格式，即yyyy-mm-dd\ndatetime: \n    -  2018-02-17t15:02:31+08:00    #时间使用iso 8601格式，时间和日期之间使用t连接，最后使用+代表时区\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n\n\n多行字符串可以使用 |保留换行符，也可以使用 >折叠换行。\n\nthis: |\n  foo\n  bar\nthat: >\n  foo\n  bar\n\n\n1\n2\n3\n4\n5\n6\n\n\n转为js代码如下。\n\n{ this: 'foo\\nbar\\n', that: 'foo bar\\n' }\n\n\n1\n\n\n+表示保留文字块末尾的换行，-表示删除字符串末尾的换行。\n\ns1: |\n  foo\n \ns2: |+\n  foo\n \n \ns3: |-\n  foo\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n转为json代码如下\n\n{ s1: 'foo\\n', s2: 'foo\\n\\n\\n', s3: 'foo' }\n\n\n1\n\n\n字符串之中可以插入 html 标记。\n\nmessage: |\n  <p style=\"color: red\">\n    段落\n  </p>\n\n\n1\n2\n3\n4\n\n\n\n# 转换数据格式\n\n允许使用两个感叹号，强制转换数据类型。\n\ne: !!str 123\nf: !!str true\n\n\n1\n2\n\n\n转换js结果同：\n\n{ e: '123', f: 'true' }\n\n\n1\n\n\n\n# 锚点引用\n\n& 锚点和< span class=\"marked\">* 别名，可以用来引用:\n\ndefaults: &defaults # 添加锚点\n  adapter:  postgres\n  host:     localhost\n\ndevelopment:\n  database: myapp_development\n  <<: *defaults # <<表示合并，*引用锚点\n\ntest:\n  database: myapp_test\n  <<: *defaults # <<表示合并，*引用锚点\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n相当于:\n\ndefaults:\n  adapter:  postgres\n  host:     localhost\n\ndevelopment:\n  database: myapp_development\n  adapter:  postgres\n  host:     localhost\n\ntest:\n  database: myapp_test\n  adapter:  postgres\n  host:     localhost\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n& 用来建立锚点（defaults），<< 表示合并到当前数据，***** 用来引用锚点。\n\n下面是另一个例子:\n\n- &showell steve \n- clark \n- brian \n- oren \n- *showell \n\n\n1\n2\n3\n4\n5\n\n\n转为js代码如下:\n\n[ 'steve', 'clark', 'brian', 'oren', 'steve' ]\n\n\n1\n\n\n> 参考：\n> \n>  * yaml官网：https://yaml.org/\n>  * yaml与js的转换demo：http://nodeca.github.io/js-yaml/\n>  * 菜鸟教程：https://www.ruanyifeng.com/blog/2016/07/yaml.html",charsets:{cjk:!0}},{title:"Git修改分支名",frontmatter:{title:"Git修改分支名",date:"2022-08-11T10:51:18.000Z",permalink:"/pages/922650/",categories:["技术","技术文档"],tags:[null],readingShow:"top"},regularPath:"/03.%E6%8A%80%E6%9C%AF/05.%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/20.Git%E4%BF%AE%E6%94%B9%E5%88%86%E6%94%AF%E5%90%8D.html",relativePath:"03.技术/05.技术文档/20.Git修改分支名.md",key:"v-fe4d2982",path:"/pages/922650/",headers:[{level:2,title:"同时修改本地分支名和对应的远程分支名",slug:"同时修改本地分支名和对应的远程分支名",normalizedTitle:"同时修改本地分支名和对应的远程分支名",charIndex:2}],lastUpdated:"2022/9/22 下午4:28:09",lastUpdatedTimestamp:1663835289e3,headersStr:"同时修改本地分支名和对应的远程分支名",content:"# 同时修改本地分支名和对应的远程分支名\n\n修改前要确保本地分支的代码是最新的，并且修改后不会影响到同事的代码。\n\n 1. 修改本地分支名\n\ngit branch -m oldBranchName newBranchName\n\n\n1\n\n 2. 删除远程分支\n\ngit push origin :oldBranchName\n# 或者 git push origin --delete oldBranchName\n\n\n1\n2\n\n 3. 改名后的本地分支推送到远程\n\ngit push --set-upstream origin newBranchName\n\n\n1\n",normalizedContent:"# 同时修改本地分支名和对应的远程分支名\n\n修改前要确保本地分支的代码是最新的，并且修改后不会影响到同事的代码。\n\n 1. 修改本地分支名\n\ngit branch -m oldbranchname newbranchname\n\n\n1\n\n 2. 删除远程分支\n\ngit push origin :oldbranchname\n# 或者 git push origin --delete oldbranchname\n\n\n1\n2\n\n 3. 改名后的本地分支推送到远程\n\ngit push --set-upstream origin newbranchname\n\n\n1\n",charsets:{cjk:!0}},{title:"ECMAScript 6 简介",frontmatter:{title:"ECMAScript 6 简介",date:"2020-01-12T15:45:35.000Z",permalink:"/pages/f344d070a1031ef7",author:"阮一峰",categories:["《ES6 教程》笔记"],tags:["ES6"],readingShow:"top"},regularPath:"/06.%E4%B9%A6%E7%B1%8D/05.%E3%80%8AES6%20%E6%95%99%E7%A8%8B%E3%80%8B%E7%AC%94%E8%AE%B0/01.ECMAScript%206%20%E7%AE%80%E4%BB%8B.html",relativePath:"06.书籍/05.《ES6 教程》笔记/01.ECMAScript 6 简介.md",key:"v-7d8c58f5",path:"/pages/f344d070a1031ef7/",headers:[{level:2,title:"ECMAScript 和 JavaScript 的关系",slug:"ecmascript-和-javascript-的关系",normalizedTitle:"ecmascript 和 javascript 的关系",charIndex:210},{level:2,title:"ES6 与 ECMAScript 2015 的关系",slug:"es6-与-ecmascript-2015-的关系",normalizedTitle:"es6 与 ecmascript 2015 的关系",charIndex:795},{level:2,title:"语法提案的批准流程",slug:"语法提案的批准流程",normalizedTitle:"语法提案的批准流程",charIndex:1756},{level:2,title:"ECMAScript 的历史",slug:"ecmascript-的历史",normalizedTitle:"ecmascript 的历史",charIndex:2184},{level:2,title:"部署进度",slug:"部署进度",normalizedTitle:"部署进度",charIndex:3648},{level:2,title:"Babel 转码器",slug:"babel-转码器",normalizedTitle:"babel 转码器",charIndex:4336},{level:3,title:"配置文件.babelrc",slug:"配置文件-babelrc",normalizedTitle:"配置文件.babelrc",charIndex:4688},{level:3,title:"命令行转码",slug:"命令行转码",normalizedTitle:"命令行转码",charIndex:5176},{level:3,title:"babel-node",slug:"babel-node",normalizedTitle:"babel-node",charIndex:5638},{level:3,title:"@babel/register 模块",slug:"babel-register-模块",normalizedTitle:"@babel/register 模块",charIndex:6011},{level:3,title:"babel API",slug:"babel-api",normalizedTitle:"babel api",charIndex:6406},{level:3,title:"@babel/polyfill",slug:"babel-polyfill",normalizedTitle:"@babel/polyfill",charIndex:7300},{level:3,title:"浏览器环境",slug:"浏览器环境",normalizedTitle:"浏览器环境",charIndex:7791},{level:2,title:"Traceur 转码器",slug:"traceur-转码器",normalizedTitle:"traceur 转码器",charIndex:8118},{level:3,title:"直接插入网页",slug:"直接插入网页",normalizedTitle:"直接插入网页",charIndex:8178},{level:3,title:"在线转换",slug:"在线转换",normalizedTitle:"在线转换",charIndex:9938},{level:3,title:"命令行转换",slug:"命令行转换",normalizedTitle:"命令行转换",charIndex:10679},{level:3,title:"Node 环境的用法",slug:"node-环境的用法",normalizedTitle:"node 环境的用法",charIndex:11158}],excerpt:'<blockquote>\n<p>说明：本章内容为博主在原教程基础上添加自己的学习笔记，来源<a href="http://es6.ruanyifeng.com/" target="_blank" rel="noopener noreferrer">http://es6.ruanyifeng.com/<OutboundLink/></a>，教程版权归原作者所有。</p>\n</blockquote>\n<h1 id="ecmascript-6-简介"><a class="header-anchor" href="#ecmascript-6-简介">#</a> ECMAScript 6 简介</h1>\n<p>ECMAScript 6.0（以下简称 ES6）是 JavaScript 语言的下一代标准，已经在 2015 年 6 月正式发布了。它的目标，是使得 JavaScript 语言可以用来编写复杂的大型应用程序，成为企业级开发语言。</p>\n',lastUpdated:"2022/9/22 下午4:28:09",lastUpdatedTimestamp:1663835289e3,headersStr:"ECMAScript 和 JavaScript 的关系 ES6 与 ECMAScript 2015 的关系 语法提案的批准流程 ECMAScript 的历史 部署进度 Babel 转码器 配置文件.babelrc 命令行转码 babel-node @babel/register 模块 babel API @babel/polyfill 浏览器环境 Traceur 转码器 直接插入网页 在线转换 命令行转换 Node 环境的用法",content:"> 说明：本章内容为博主在原教程基础上添加自己的学习笔记，来源http://es6.ruanyifeng.com/，教程版权归原作者所有。\n\n\n# ECMAScript 6 简介\n\nECMAScript 6.0（以下简称 ES6）是 JavaScript 语言的下一代标准，已经在 2015 年 6 月正式发布了。它的目标，是使得 JavaScript 语言可以用来编写复杂的大型应用程序，成为企业级开发语言。\n\n\n# ECMAScript 和 JavaScript 的关系\n\n一个常见的问题是，ECMAScript 和 JavaScript 到底是什么关系？\n\n要讲清楚这个问题，需要回顾历史。1996 年 11 月，JavaScript 的创造者 Netscape 公司，决定将 JavaScript 提交给标准化组织 ECMA，希望这种语言能够成为国际标准。次年，ECMA 发布 262 号标准文件（ECMA-262）的第一版，规定了浏览器脚本语言的标准，并将这种语言称为 ECMAScript，这个版本就是 1.0 版。\n\n该标准从一开始就是针对 JavaScript 语言制定的，但是之所以不叫 JavaScript，有两个原因。一是商标，Java 是 Sun 公司的商标，根据授权协议，只有 Netscape 公司可以合法地使用 JavaScript 这个名字，且 JavaScript 本身也已经被 Netscape 公司注册为商标。二是想体现这门语言的制定者是 ECMA，不是 Netscape，这样有利于保证这门语言的开放性和中立性。\n\n因此，ECMAScript 和 JavaScript 的关系是，前者是后者的规格，后者是前者的一种实现（另外的 ECMAScript 方言还有 JScript 和 ActionScript）。日常场合，这两个词是可以互换的。\n\n\n# ES6 与 ECMAScript 2015 的关系\n\nECMAScript 2015（简称 ES2015）这个词，也是经常可以看到的。它与 ES6 是什么关系呢？\n\n2011 年，ECMAScript 5.1 版发布后，就开始制定 6.0 版了。因此，ES6 这个词的原意，就是指 JavaScript 语言的下一个版本。\n\n但是，因为这个版本引入的语法功能太多，而且制定过程当中，还有很多组织和个人不断提交新功能。事情很快就变得清楚了，不可能在一个版本里面包括所有将要引入的功能。常规的做法是先发布 6.0 版，过一段时间再发 6.1 版，然后是 6.2 版、6.3 版等等。\n\n但是，标准的制定者不想这样做。他们想让标准的升级成为常规流程：任何人在任何时候，都可以向标准委员会提交新语法的提案，然后标准委员会每个月开一次会，评估这些提案是否可以接受，需要哪些改进。如果经过多次会议以后，一个提案足够成熟了，就可以正式进入标准了。这就是说，标准的版本升级成为了一个不断滚动的流程，每个月都会有变动。\n\n标准委员会最终决定，标准在每年的 6 月份正式发布一次，作为当年的正式版本。接下来的时间，就在这个版本的基础上做改动，直到下一年的 6 月份，草案就自然变成了新一年的版本。这样一来，就不需要以前的版本号了，只要用年份标记就可以了。\n\nES6 的第一个版本，就这样在 2015 年 6 月发布了，正式名称就是《ECMAScript 2015 标准》（简称 ES2015）。2016 年 6 月，小幅修订的《ECMAScript 2016 标准》（简称 ES2016）如期发布，这个版本可以看作是 ES6.1 版，因为两者的差异非常小（只新增了数组实例的includes方法和指数运算符），基本上是同一个标准。根据计划，2017 年 6 月发布 ES2017 标准。\n\n因此，ES6 既是一个历史名词，也是一个泛指，含义是 5.1 版以后的 JavaScript 的下一代标准，涵盖了 ES2015、ES2016、ES2017 等等，而 ES2015 则是正式名称，特指该年发布的正式版本的语言标准。本书中提到 ES6 的地方，一般是指 ES2015 标准，但有时也是泛指“下一代 JavaScript 语言”。\n\n\n# 语法提案的批准流程\n\n任何人都可以向标准委员会（又称 TC39 委员会）提案，要求修改语言标准。\n\n一种新的语法从提案到变成正式标准，需要经历五个阶段。每个阶段的变动都需要由 TC39 委员会批准。\n\n * Stage 0 - Strawman（展示阶段）\n * Stage 1 - Proposal（征求意见阶段）\n * Stage 2 - Draft（草案阶段）\n * Stage 3 - Candidate（候选人阶段）\n * Stage 4 - Finished（定案阶段）\n\n一个提案只要能进入 Stage 2，就差不多肯定会包括在以后的正式标准里面。ECMAScript 当前的所有提案，可以在 TC39 的官方网站GitHub.com/tc39/ecma262查看。\n\n本书的写作目标之一，是跟踪 ECMAScript 语言的最新进展，介绍 5.1 版本以后所有的新语法。对于那些明确或很有希望，将要列入标准的新语法，都将予以介绍。\n\n\n# ECMAScript 的历史\n\nES6 从开始制定到最后发布，整整用了 15 年。\n\n前面提到，ECMAScript 1.0 是 1997 年发布的，接下来的两年，连续发布了 ECMAScript 2.0（1998 年 6 月）和 ECMAScript 3.0（1999 年 12 月）。3.0 版是一个巨大的成功，在业界得到广泛支持，成为通行标准，奠定了 JavaScript 语言的基本语法，以后的版本完全继承。直到今天，初学者一开始学习 JavaScript，其实就是在学 3.0 版的语法。\n\n2000 年，ECMAScript 4.0 开始酝酿。这个版本最后没有通过，但是它的大部分内容被 ES6 继承了。因此，ES6 制定的起点其实是 2000 年。\n\n为什么 ES4 没有通过呢？因为这个版本太激进了，对 ES3 做了彻底升级，导致标准委员会的一些成员不愿意接受。ECMA 的第 39 号技术专家委员会（Technical Committee 39，简称 TC39）负责制订 ECMAScript 标准，成员包括 Microsoft、Mozilla、Google 等大公司。\n\n2007 年 10 月，ECMAScript 4.0 版草案发布，本来预计次年 8 月发布正式版本。但是，各方对于是否通过这个标准，发生了严重分歧。以 Yahoo、Microsoft、Google 为首的大公司，反对 JavaScript 的大幅升级，主张小幅改动；以 JavaScript 创造者 Brendan Eich 为首的 Mozilla 公司，则坚持当前的草案。\n\n2008 年 7 月，由于对于下一个版本应该包括哪些功能，各方分歧太大，争论过于激烈，ECMA 开会决定，中止 ECMAScript 4.0 的开发，将其中涉及现有功能改善的一小部分，发布为 ECMAScript 3.1，而将其他激进的设想扩大范围，放入以后的版本，由于会议的气氛，该版本的项目代号起名为 Harmony（和谐）。会后不久，ECMAScript 3.1 就改名为 ECMAScript 5。\n\n2009 年 12 月，ECMAScript 5.0 版正式发布。Harmony 项目则一分为二，一些较为可行的设想定名为 JavaScript.next 继续开发，后来演变成 ECMAScript 6；一些不是很成熟的设想，则被视为 JavaScript.next.next，在更远的将来再考虑推出。TC39 委员会的总体考虑是，ES5 与 ES3 基本保持兼容，较大的语法修正和新功能加入，将由 JavaScript.next 完成。当时，JavaScript.next 指的是 ES6，第六版发布以后，就指 ES7。TC39 的判断是，ES5 会在 2013 年的年中成为 JavaScript 开发的主流标准，并在此后五年中一直保持这个位置。\n\n2011 年 6 月，ECMAScript 5.1 版发布，并且成为 ISO 国际标准（ISO/IEC 16262:2011）。\n\n2013 年 3 月，ECMAScript 6 草案冻结，不再添加新功能。新的功能设想将被放到 ECMAScript 7。\n\n2013 年 12 月，ECMAScript 6 草案发布。然后是 12 个月的讨论期，听取各方反馈。\n\n2015 年 6 月，ECMAScript 6 正式通过，成为国际标准。从 2000 年算起，这时已经过去了 15 年。\n\n\n# 部署进度\n\n各大浏览器的最新版本，对 ES6 的支持可以查看kangax.github.io/compat-table/es6/。随着时间的推移，支持度已经越来越高了，超过 90%的 ES6 语法特性都实现了。\n\nNode 是 JavaScript 的服务器运行环境（runtime）。它对 ES6 的支持度更高。除了那些默认打开的功能，还有一些语法功能已经实现了，但是默认没有打开。使用下面的命令，可以查看 Node 已经实现的 ES6 特性。\n\n// Linux & Mac\n$ node --v8-options | grep harmony\n\n// Windows\n$ node --v8-options | findstr harmony\n\n\n1\n2\n3\n4\n5\n\n\n我写了一个工具 ES-Checker，用来检查各种运行环境对 ES6 的支持情况。访问ruanyf.github.io/es-checker，可以看到您的浏览器支持 ES6 的程度。运行下面的命令，可以查看你正在使用的 Node 环境对 ES6 的支持程度。\n\n$ npm install -g es-checker\n$ es-checker\n\n=========================================\nPasses 24 feature Detections\nYour runtime supports 57% of ECMAScript 6\n=========================================\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# Babel 转码器\n\nBabel 是一个广泛使用的 ES6 转码器，可以将 ES6 代码转为 ES5 代码，从而在现有环境执行。这意味着，你可以用 ES6 的方式编写程序，又不用担心现有环境是否支持。下面是一个例子。\n\n// 转码前\ninput.map(item => item + 1);\n\n// 转码后\ninput.map(function (item) {\n  return item + 1;\n});\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n上面的原始代码用了箭头函数，Babel 将其转为普通函数，就能在不支持箭头函数的 JavaScript 环境执行了。\n\n下面的命令在项目目录中，安装 Babel。\n\n$ npm install --save-dev @babel/core\n\n\n1\n\n\n\n# 配置文件.babelrc\n\nBabel 的配置文件是.babelrc，存放在项目的根目录下。使用 Babel 的第一步，就是配置这个文件。\n\n该文件用来设置转码规则和插件，基本格式如下。\n\n{\n  \"presets\": [],\n  \"plugins\": []\n}\n\n\n1\n2\n3\n4\n\n\npresets字段设定转码规则，官方提供以下的规则集，你可以根据需要安装。\n\n# 最新转码规则\n$ npm install --save-dev @babel/preset-env\n\n# react 转码规则\n$ npm install --save-dev @babel/preset-react\n\n\n1\n2\n3\n4\n5\n\n\n然后，将这些规则加入.babelrc。\n\n  {\n    \"presets\": [\n      \"@babel/env\",\n      \"@babel/preset-react\"\n    ],\n    \"plugins\": []\n  }\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n注意，以下所有 Babel 工具和模块的使用，都必须先写好.babelrc。\n\n\n# 命令行转码\n\nBabel 提供命令行工具@babel/cli，用于命令行转码。\n\n它的安装命令如下。\n\n$ npm install --save-dev @babel/cli\n\n\n1\n\n\n基本用法如下。\n\n# 转码结果输出到标准输出\n$ npx babel example.js\n\n# 转码结果写入一个文件\n# --out-file 或 -o 参数指定输出文件\n$ npx babel example.js --out-file compiled.js\n# 或者\n$ npx babel example.js -o compiled.js\n\n# 整个目录转码\n# --out-dir 或 -d 参数指定输出目录\n$ npx babel src --out-dir lib\n# 或者\n$ npx babel src -d lib\n\n# -s 参数生成source map文件\n$ npx babel src -d lib -s\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n\n# babel-node\n\n@babel/node模块的babel-node命令，提供一个支持 ES6 的 REPL 环境。它支持 Node 的 REPL 环境的所有功能，而且可以直接运行 ES6 代码。\n\n首先，安装这个模块。\n\n$ npm install --save-dev @babel/node\n\n\n1\n\n\n然后，执行babel-node就进入 REPL 环境。\n\n$ npx babel-node\n> (x => x * 2)(1)\n2\n\n\n1\n2\n3\n\n\nbabel-node命令可以直接运行 ES6 脚本。将上面的代码放入脚本文件es6.js，然后直接运行。\n\n# es6.js 的代码\n# console.log((x => x * 2)(1));\n$ npx babel-node es6.js\n2\n\n\n1\n2\n3\n4\n\n\n\n# @babel/register 模块\n\n@babel/register模块改写require命令，为它加上一个钩子。此后，每当使用require加载.js、.jsx、.es和.es6后缀名的文件，就会先用 Babel 进行转码。\n\n$ npm install --save-dev @babel/register\n\n\n1\n\n\n使用时，必须首先加载@babel/register。\n\n// index.js\nrequire('@babel/register');\nrequire('./es6.js');\n\n\n1\n2\n3\n\n\n然后，就不需要手动对index.js转码了。\n\n$ node index.js\n2\n\n\n1\n2\n\n\n需要注意的是，@babel/register只会对require命令加载的文件转码，而不会对当前文件转码。另外，由于它是实时转码，所以只适合在开发环境使用。\n\n\n# babel API\n\n如果某些代码需要调用 Babel 的 API 进行转码，就要使用@babel/core模块。\n\nvar babel = require('@babel/core');\n\n// 字符串转码\nbabel.transform('code();', options);\n// => { code, map, ast }\n\n// 文件转码（异步）\nbabel.transformFile('filename.js', options, function(err, result) {\n  result; // => { code, map, ast }\n});\n\n// 文件转码（同步）\nbabel.transformFileSync('filename.js', options);\n// => { code, map, ast }\n\n// Babel AST转码\nbabel.transformFromAst(ast, code, options);\n// => { code, map, ast }\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\n配置对象options，可以参看官方文档http://babeljs.io/docs/usage/options/。\n\n下面是一个例子。\n\nvar es6Code = 'let x = n => n + 1';\nvar es5Code = require('@babel/core')\n  .transform(es6Code, {\n    presets: ['@babel/env']\n  })\n  .code;\n\nconsole.log(es5Code);\n// '\"use strict\";\\n\\nvar x = function x(n) {\\n  return n + 1;\\n};'\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n上面代码中，transform方法的第一个参数是一个字符串，表示需要被转换的 ES6 代码，第二个参数是转换的配置对象。\n\n\n# @babel/polyfill\n\nBabel 默认只转换新的 JavaScript 句法（syntax），而不转换新的 API，比如Iterator、Generator、Set、Map、Proxy、Reflect、Symbol、Promise等全局对象，以及一些定义在全局对象上的方法（比如Object.assign）都不会转码。\n\n举例来说，ES6 在Array对象上新增了Array.from方法。Babel 就不会转码这个方法。如果想让这个方法运行，必须使用babel-polyfill，为当前环境提供一个垫片。\n\n安装命令如下。\n\n$ npm install --save-dev @babel/polyfill\n\n\n1\n\n\n然后，在脚本头部，加入如下一行代码。\n\nimport '@babel/polyfill';\n// 或者\nrequire('@babel/polyfill');\n\n\n1\n2\n3\n\n\nBabel 默认不转码的 API 非常多，详细清单可以查看babel-plugin-transform-runtime模块的definitions.js文件。\n\n\n# 浏览器环境\n\nBabel 也可以用于浏览器环境，使用@babel/standalone模块提供的浏览器版本，将其插入网页。\n\n<script src=\"https://unpkg.com/@babel/standalone/babel.min.js\"><\/script>\n<script type=\"text/babel\">\n// Your ES6 code\n<\/script>\n\n\n1\n2\n3\n4\n\n\n注意，网页实时将 ES6 代码转为 ES5，对性能会有影响。生产环境需要加载已经转码完成的脚本。\n\nBabel 提供一个REPL 在线编译器，可以在线将 ES6 代码转为 ES5 代码。转换后的代码，可以直接作为 ES5 代码插入网页运行。\n\n\n# Traceur 转码器\n\nGoogle 公司的Traceur转码器，也可以将 ES6 代码转为 ES5 代码。\n\n\n# 直接插入网页\n\nTraceur 允许将 ES6 代码直接插入网页。首先，必须在网页头部加载 Traceur 库文件。\n\n<script src=\"https://google.github.io/traceur-compiler/bin/traceur.js\"><\/script>\n<script src=\"https://google.github.io/traceur-compiler/bin/BrowserSystem.js\"><\/script>\n<script src=\"https://google.github.io/traceur-compiler/src/bootstrap.js\"><\/script>\n<script type=\"module\">\n  import './Greeter.js';\n<\/script>\n\n\n1\n2\n3\n4\n5\n6\n\n\n上面代码中，一共有 4 个script标签。第一个是加载 Traceur 的库文件，第二个和第三个是将这个库文件用于浏览器环境，第四个则是加载用户脚本，这个脚本里面可以使用 ES6 代码。\n\n注意，第四个script标签的type属性的值是module，而不是text/javascript。这是 Traceur 编译器识别 ES6 代码的标志，编译器会自动将所有type=module的代码编译为 ES5，然后再交给浏览器执行。\n\n除了引用外部 ES6 脚本，也可以直接在网页中放置 ES6 代码。\n\n<script type=\"module\">\n  class Calc {\n    constructor() {\n      console.log('Calc constructor');\n    }\n    add(a, b) {\n      return a + b;\n    }\n  }\n\n  var c = new Calc();\n  console.log(c.add(4,5));\n<\/script>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n正常情况下，上面代码会在控制台打印出9。\n\n如果想对 Traceur 的行为有精确控制，可以采用下面参数配置的写法。\n\n<script>\n  // Create the System object\n  window.System = new traceur.runtime.BrowserTraceurLoader();\n  // Set some experimental options\n  var metadata = {\n    traceurOptions: {\n      experimental: true,\n      properTailCalls: true,\n      symbols: true,\n      arrayComprehension: true,\n      asyncFunctions: true,\n      asyncGenerators: exponentiation,\n      forOn: true,\n      generatorComprehension: true\n    }\n  };\n  // Load your module\n  System.import('./myModule.js', {metadata: metadata}).catch(function(ex) {\n    console.error('Import failed', ex.stack || ex);\n  });\n<\/script>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n\n\n上面代码中，首先生成 Traceur 的全局对象window.System，然后System.import方法可以用来加载 ES6。加载的时候，需要传入一个配置对象metadata，该对象的traceurOptions属性可以配置支持 ES6 功能。如果设为experimental: true，就表示除了 ES6 以外，还支持一些实验性的新功能。\n\n\n# 在线转换\n\nTraceur 也提供一个在线编译器，可以在线将 ES6 代码转为 ES5 代码。转换后的代码，可以直接作为 ES5 代码插入网页运行。\n\n上面的例子转为 ES5 代码运行，就是下面这个样子。\n\n<script src=\"https://google.github.io/traceur-compiler/bin/traceur.js\"><\/script>\n<script src=\"https://google.github.io/traceur-compiler/bin/BrowserSystem.js\"><\/script>\n<script src=\"https://google.github.io/traceur-compiler/src/bootstrap.js\"><\/script>\n<script>\n$traceurRuntime.ModuleStore.getAnonymousModule(function() {\n  \"use strict\";\n\n  var Calc = function Calc() {\n    console.log('Calc constructor');\n  };\n\n  ($traceurRuntime.createClass)(Calc, {add: function(a, b) {\n    return a + b;\n  }}, {});\n\n  var c = new Calc();\n  console.log(c.add(4, 5));\n  return {};\n});\n<\/script>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n\n\n# 命令行转换\n\n作为命令行工具使用时，Traceur 是一个 Node 的模块，首先需要用 npm 安装。\n\n$ npm install -g traceur\n\n\n1\n\n\n安装成功后，就可以在命令行下使用 Traceur 了。\n\nTraceur 直接运行 ES6 脚本文件，会在标准输出显示运行结果，以前面的calc.js为例。\n\n$ traceur calc.js\nCalc constructor\n9\n\n\n1\n2\n3\n\n\n如果要将 ES6 脚本转为 ES5 保存，要采用下面的写法。\n\n$ traceur --script calc.es6.js --out calc.es5.js\n\n\n1\n\n\n上面代码的--script选项表示指定输入文件，--out选项表示指定输出文件。\n\n为了防止有些特性编译不成功，最好加上--experimental选项。\n\n$ traceur --script calc.es6.js --out calc.es5.js --experimental\n\n\n1\n\n\n命令行下转换生成的文件，就可以直接放到浏览器中运行。\n\n\n# Node 环境的用法\n\nTraceur 的 Node 用法如下（假定已安装traceur模块）。\n\nvar traceur = require('traceur');\nvar fs = require('fs');\n\n// 将 ES6 脚本转为字符串\nvar contents = fs.readFileSync('es6-file.js').toString();\n\nvar result = traceur.compile(contents, {\n  filename: 'es6-file.js',\n  sourceMap: true,\n  // 其他设置\n  modules: 'commonjs'\n});\n\nif (result.error)\n  throw result.error;\n\n// result 对象的 js 属性就是转换后的 ES5 代码\nfs.writeFileSync('out.js', result.js);\n// sourceMap 属性对应 map 文件\nfs.writeFileSync('out.js.map', result.sourceMap);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n",normalizedContent:"> 说明：本章内容为博主在原教程基础上添加自己的学习笔记，来源http://es6.ruanyifeng.com/，教程版权归原作者所有。\n\n\n# ecmascript 6 简介\n\necmascript 6.0（以下简称 es6）是 javascript 语言的下一代标准，已经在 2015 年 6 月正式发布了。它的目标，是使得 javascript 语言可以用来编写复杂的大型应用程序，成为企业级开发语言。\n\n\n# ecmascript 和 javascript 的关系\n\n一个常见的问题是，ecmascript 和 javascript 到底是什么关系？\n\n要讲清楚这个问题，需要回顾历史。1996 年 11 月，javascript 的创造者 netscape 公司，决定将 javascript 提交给标准化组织 ecma，希望这种语言能够成为国际标准。次年，ecma 发布 262 号标准文件（ecma-262）的第一版，规定了浏览器脚本语言的标准，并将这种语言称为 ecmascript，这个版本就是 1.0 版。\n\n该标准从一开始就是针对 javascript 语言制定的，但是之所以不叫 javascript，有两个原因。一是商标，java 是 sun 公司的商标，根据授权协议，只有 netscape 公司可以合法地使用 javascript 这个名字，且 javascript 本身也已经被 netscape 公司注册为商标。二是想体现这门语言的制定者是 ecma，不是 netscape，这样有利于保证这门语言的开放性和中立性。\n\n因此，ecmascript 和 javascript 的关系是，前者是后者的规格，后者是前者的一种实现（另外的 ecmascript 方言还有 jscript 和 actionscript）。日常场合，这两个词是可以互换的。\n\n\n# es6 与 ecmascript 2015 的关系\n\necmascript 2015（简称 es2015）这个词，也是经常可以看到的。它与 es6 是什么关系呢？\n\n2011 年，ecmascript 5.1 版发布后，就开始制定 6.0 版了。因此，es6 这个词的原意，就是指 javascript 语言的下一个版本。\n\n但是，因为这个版本引入的语法功能太多，而且制定过程当中，还有很多组织和个人不断提交新功能。事情很快就变得清楚了，不可能在一个版本里面包括所有将要引入的功能。常规的做法是先发布 6.0 版，过一段时间再发 6.1 版，然后是 6.2 版、6.3 版等等。\n\n但是，标准的制定者不想这样做。他们想让标准的升级成为常规流程：任何人在任何时候，都可以向标准委员会提交新语法的提案，然后标准委员会每个月开一次会，评估这些提案是否可以接受，需要哪些改进。如果经过多次会议以后，一个提案足够成熟了，就可以正式进入标准了。这就是说，标准的版本升级成为了一个不断滚动的流程，每个月都会有变动。\n\n标准委员会最终决定，标准在每年的 6 月份正式发布一次，作为当年的正式版本。接下来的时间，就在这个版本的基础上做改动，直到下一年的 6 月份，草案就自然变成了新一年的版本。这样一来，就不需要以前的版本号了，只要用年份标记就可以了。\n\nes6 的第一个版本，就这样在 2015 年 6 月发布了，正式名称就是《ecmascript 2015 标准》（简称 es2015）。2016 年 6 月，小幅修订的《ecmascript 2016 标准》（简称 es2016）如期发布，这个版本可以看作是 es6.1 版，因为两者的差异非常小（只新增了数组实例的includes方法和指数运算符），基本上是同一个标准。根据计划，2017 年 6 月发布 es2017 标准。\n\n因此，es6 既是一个历史名词，也是一个泛指，含义是 5.1 版以后的 javascript 的下一代标准，涵盖了 es2015、es2016、es2017 等等，而 es2015 则是正式名称，特指该年发布的正式版本的语言标准。本书中提到 es6 的地方，一般是指 es2015 标准，但有时也是泛指“下一代 javascript 语言”。\n\n\n# 语法提案的批准流程\n\n任何人都可以向标准委员会（又称 tc39 委员会）提案，要求修改语言标准。\n\n一种新的语法从提案到变成正式标准，需要经历五个阶段。每个阶段的变动都需要由 tc39 委员会批准。\n\n * stage 0 - strawman（展示阶段）\n * stage 1 - proposal（征求意见阶段）\n * stage 2 - draft（草案阶段）\n * stage 3 - candidate（候选人阶段）\n * stage 4 - finished（定案阶段）\n\n一个提案只要能进入 stage 2，就差不多肯定会包括在以后的正式标准里面。ecmascript 当前的所有提案，可以在 tc39 的官方网站github.com/tc39/ecma262查看。\n\n本书的写作目标之一，是跟踪 ecmascript 语言的最新进展，介绍 5.1 版本以后所有的新语法。对于那些明确或很有希望，将要列入标准的新语法，都将予以介绍。\n\n\n# ecmascript 的历史\n\nes6 从开始制定到最后发布，整整用了 15 年。\n\n前面提到，ecmascript 1.0 是 1997 年发布的，接下来的两年，连续发布了 ecmascript 2.0（1998 年 6 月）和 ecmascript 3.0（1999 年 12 月）。3.0 版是一个巨大的成功，在业界得到广泛支持，成为通行标准，奠定了 javascript 语言的基本语法，以后的版本完全继承。直到今天，初学者一开始学习 javascript，其实就是在学 3.0 版的语法。\n\n2000 年，ecmascript 4.0 开始酝酿。这个版本最后没有通过，但是它的大部分内容被 es6 继承了。因此，es6 制定的起点其实是 2000 年。\n\n为什么 es4 没有通过呢？因为这个版本太激进了，对 es3 做了彻底升级，导致标准委员会的一些成员不愿意接受。ecma 的第 39 号技术专家委员会（technical committee 39，简称 tc39）负责制订 ecmascript 标准，成员包括 microsoft、mozilla、google 等大公司。\n\n2007 年 10 月，ecmascript 4.0 版草案发布，本来预计次年 8 月发布正式版本。但是，各方对于是否通过这个标准，发生了严重分歧。以 yahoo、microsoft、google 为首的大公司，反对 javascript 的大幅升级，主张小幅改动；以 javascript 创造者 brendan eich 为首的 mozilla 公司，则坚持当前的草案。\n\n2008 年 7 月，由于对于下一个版本应该包括哪些功能，各方分歧太大，争论过于激烈，ecma 开会决定，中止 ecmascript 4.0 的开发，将其中涉及现有功能改善的一小部分，发布为 ecmascript 3.1，而将其他激进的设想扩大范围，放入以后的版本，由于会议的气氛，该版本的项目代号起名为 harmony（和谐）。会后不久，ecmascript 3.1 就改名为 ecmascript 5。\n\n2009 年 12 月，ecmascript 5.0 版正式发布。harmony 项目则一分为二，一些较为可行的设想定名为 javascript.next 继续开发，后来演变成 ecmascript 6；一些不是很成熟的设想，则被视为 javascript.next.next，在更远的将来再考虑推出。tc39 委员会的总体考虑是，es5 与 es3 基本保持兼容，较大的语法修正和新功能加入，将由 javascript.next 完成。当时，javascript.next 指的是 es6，第六版发布以后，就指 es7。tc39 的判断是，es5 会在 2013 年的年中成为 javascript 开发的主流标准，并在此后五年中一直保持这个位置。\n\n2011 年 6 月，ecmascript 5.1 版发布，并且成为 iso 国际标准（iso/iec 16262:2011）。\n\n2013 年 3 月，ecmascript 6 草案冻结，不再添加新功能。新的功能设想将被放到 ecmascript 7。\n\n2013 年 12 月，ecmascript 6 草案发布。然后是 12 个月的讨论期，听取各方反馈。\n\n2015 年 6 月，ecmascript 6 正式通过，成为国际标准。从 2000 年算起，这时已经过去了 15 年。\n\n\n# 部署进度\n\n各大浏览器的最新版本，对 es6 的支持可以查看kangax.github.io/compat-table/es6/。随着时间的推移，支持度已经越来越高了，超过 90%的 es6 语法特性都实现了。\n\nnode 是 javascript 的服务器运行环境（runtime）。它对 es6 的支持度更高。除了那些默认打开的功能，还有一些语法功能已经实现了，但是默认没有打开。使用下面的命令，可以查看 node 已经实现的 es6 特性。\n\n// linux & mac\n$ node --v8-options | grep harmony\n\n// windows\n$ node --v8-options | findstr harmony\n\n\n1\n2\n3\n4\n5\n\n\n我写了一个工具 es-checker，用来检查各种运行环境对 es6 的支持情况。访问ruanyf.github.io/es-checker，可以看到您的浏览器支持 es6 的程度。运行下面的命令，可以查看你正在使用的 node 环境对 es6 的支持程度。\n\n$ npm install -g es-checker\n$ es-checker\n\n=========================================\npasses 24 feature detections\nyour runtime supports 57% of ecmascript 6\n=========================================\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# babel 转码器\n\nbabel 是一个广泛使用的 es6 转码器，可以将 es6 代码转为 es5 代码，从而在现有环境执行。这意味着，你可以用 es6 的方式编写程序，又不用担心现有环境是否支持。下面是一个例子。\n\n// 转码前\ninput.map(item => item + 1);\n\n// 转码后\ninput.map(function (item) {\n  return item + 1;\n});\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n上面的原始代码用了箭头函数，babel 将其转为普通函数，就能在不支持箭头函数的 javascript 环境执行了。\n\n下面的命令在项目目录中，安装 babel。\n\n$ npm install --save-dev @babel/core\n\n\n1\n\n\n\n# 配置文件.babelrc\n\nbabel 的配置文件是.babelrc，存放在项目的根目录下。使用 babel 的第一步，就是配置这个文件。\n\n该文件用来设置转码规则和插件，基本格式如下。\n\n{\n  \"presets\": [],\n  \"plugins\": []\n}\n\n\n1\n2\n3\n4\n\n\npresets字段设定转码规则，官方提供以下的规则集，你可以根据需要安装。\n\n# 最新转码规则\n$ npm install --save-dev @babel/preset-env\n\n# react 转码规则\n$ npm install --save-dev @babel/preset-react\n\n\n1\n2\n3\n4\n5\n\n\n然后，将这些规则加入.babelrc。\n\n  {\n    \"presets\": [\n      \"@babel/env\",\n      \"@babel/preset-react\"\n    ],\n    \"plugins\": []\n  }\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n注意，以下所有 babel 工具和模块的使用，都必须先写好.babelrc。\n\n\n# 命令行转码\n\nbabel 提供命令行工具@babel/cli，用于命令行转码。\n\n它的安装命令如下。\n\n$ npm install --save-dev @babel/cli\n\n\n1\n\n\n基本用法如下。\n\n# 转码结果输出到标准输出\n$ npx babel example.js\n\n# 转码结果写入一个文件\n# --out-file 或 -o 参数指定输出文件\n$ npx babel example.js --out-file compiled.js\n# 或者\n$ npx babel example.js -o compiled.js\n\n# 整个目录转码\n# --out-dir 或 -d 参数指定输出目录\n$ npx babel src --out-dir lib\n# 或者\n$ npx babel src -d lib\n\n# -s 参数生成source map文件\n$ npx babel src -d lib -s\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n\n# babel-node\n\n@babel/node模块的babel-node命令，提供一个支持 es6 的 repl 环境。它支持 node 的 repl 环境的所有功能，而且可以直接运行 es6 代码。\n\n首先，安装这个模块。\n\n$ npm install --save-dev @babel/node\n\n\n1\n\n\n然后，执行babel-node就进入 repl 环境。\n\n$ npx babel-node\n> (x => x * 2)(1)\n2\n\n\n1\n2\n3\n\n\nbabel-node命令可以直接运行 es6 脚本。将上面的代码放入脚本文件es6.js，然后直接运行。\n\n# es6.js 的代码\n# console.log((x => x * 2)(1));\n$ npx babel-node es6.js\n2\n\n\n1\n2\n3\n4\n\n\n\n# @babel/register 模块\n\n@babel/register模块改写require命令，为它加上一个钩子。此后，每当使用require加载.js、.jsx、.es和.es6后缀名的文件，就会先用 babel 进行转码。\n\n$ npm install --save-dev @babel/register\n\n\n1\n\n\n使用时，必须首先加载@babel/register。\n\n// index.js\nrequire('@babel/register');\nrequire('./es6.js');\n\n\n1\n2\n3\n\n\n然后，就不需要手动对index.js转码了。\n\n$ node index.js\n2\n\n\n1\n2\n\n\n需要注意的是，@babel/register只会对require命令加载的文件转码，而不会对当前文件转码。另外，由于它是实时转码，所以只适合在开发环境使用。\n\n\n# babel api\n\n如果某些代码需要调用 babel 的 api 进行转码，就要使用@babel/core模块。\n\nvar babel = require('@babel/core');\n\n// 字符串转码\nbabel.transform('code();', options);\n// => { code, map, ast }\n\n// 文件转码（异步）\nbabel.transformfile('filename.js', options, function(err, result) {\n  result; // => { code, map, ast }\n});\n\n// 文件转码（同步）\nbabel.transformfilesync('filename.js', options);\n// => { code, map, ast }\n\n// babel ast转码\nbabel.transformfromast(ast, code, options);\n// => { code, map, ast }\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\n配置对象options，可以参看官方文档http://babeljs.io/docs/usage/options/。\n\n下面是一个例子。\n\nvar es6code = 'let x = n => n + 1';\nvar es5code = require('@babel/core')\n  .transform(es6code, {\n    presets: ['@babel/env']\n  })\n  .code;\n\nconsole.log(es5code);\n// '\"use strict\";\\n\\nvar x = function x(n) {\\n  return n + 1;\\n};'\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n上面代码中，transform方法的第一个参数是一个字符串，表示需要被转换的 es6 代码，第二个参数是转换的配置对象。\n\n\n# @babel/polyfill\n\nbabel 默认只转换新的 javascript 句法（syntax），而不转换新的 api，比如iterator、generator、set、map、proxy、reflect、symbol、promise等全局对象，以及一些定义在全局对象上的方法（比如object.assign）都不会转码。\n\n举例来说，es6 在array对象上新增了array.from方法。babel 就不会转码这个方法。如果想让这个方法运行，必须使用babel-polyfill，为当前环境提供一个垫片。\n\n安装命令如下。\n\n$ npm install --save-dev @babel/polyfill\n\n\n1\n\n\n然后，在脚本头部，加入如下一行代码。\n\nimport '@babel/polyfill';\n// 或者\nrequire('@babel/polyfill');\n\n\n1\n2\n3\n\n\nbabel 默认不转码的 api 非常多，详细清单可以查看babel-plugin-transform-runtime模块的definitions.js文件。\n\n\n# 浏览器环境\n\nbabel 也可以用于浏览器环境，使用@babel/standalone模块提供的浏览器版本，将其插入网页。\n\n<script src=\"https://unpkg.com/@babel/standalone/babel.min.js\"><\/script>\n<script type=\"text/babel\">\n// your es6 code\n<\/script>\n\n\n1\n2\n3\n4\n\n\n注意，网页实时将 es6 代码转为 es5，对性能会有影响。生产环境需要加载已经转码完成的脚本。\n\nbabel 提供一个repl 在线编译器，可以在线将 es6 代码转为 es5 代码。转换后的代码，可以直接作为 es5 代码插入网页运行。\n\n\n# traceur 转码器\n\ngoogle 公司的traceur转码器，也可以将 es6 代码转为 es5 代码。\n\n\n# 直接插入网页\n\ntraceur 允许将 es6 代码直接插入网页。首先，必须在网页头部加载 traceur 库文件。\n\n<script src=\"https://google.github.io/traceur-compiler/bin/traceur.js\"><\/script>\n<script src=\"https://google.github.io/traceur-compiler/bin/browsersystem.js\"><\/script>\n<script src=\"https://google.github.io/traceur-compiler/src/bootstrap.js\"><\/script>\n<script type=\"module\">\n  import './greeter.js';\n<\/script>\n\n\n1\n2\n3\n4\n5\n6\n\n\n上面代码中，一共有 4 个script标签。第一个是加载 traceur 的库文件，第二个和第三个是将这个库文件用于浏览器环境，第四个则是加载用户脚本，这个脚本里面可以使用 es6 代码。\n\n注意，第四个script标签的type属性的值是module，而不是text/javascript。这是 traceur 编译器识别 es6 代码的标志，编译器会自动将所有type=module的代码编译为 es5，然后再交给浏览器执行。\n\n除了引用外部 es6 脚本，也可以直接在网页中放置 es6 代码。\n\n<script type=\"module\">\n  class calc {\n    constructor() {\n      console.log('calc constructor');\n    }\n    add(a, b) {\n      return a + b;\n    }\n  }\n\n  var c = new calc();\n  console.log(c.add(4,5));\n<\/script>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n正常情况下，上面代码会在控制台打印出9。\n\n如果想对 traceur 的行为有精确控制，可以采用下面参数配置的写法。\n\n<script>\n  // create the system object\n  window.system = new traceur.runtime.browsertraceurloader();\n  // set some experimental options\n  var metadata = {\n    traceuroptions: {\n      experimental: true,\n      propertailcalls: true,\n      symbols: true,\n      arraycomprehension: true,\n      asyncfunctions: true,\n      asyncgenerators: exponentiation,\n      foron: true,\n      generatorcomprehension: true\n    }\n  };\n  // load your module\n  system.import('./mymodule.js', {metadata: metadata}).catch(function(ex) {\n    console.error('import failed', ex.stack || ex);\n  });\n<\/script>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n\n\n上面代码中，首先生成 traceur 的全局对象window.system，然后system.import方法可以用来加载 es6。加载的时候，需要传入一个配置对象metadata，该对象的traceuroptions属性可以配置支持 es6 功能。如果设为experimental: true，就表示除了 es6 以外，还支持一些实验性的新功能。\n\n\n# 在线转换\n\ntraceur 也提供一个在线编译器，可以在线将 es6 代码转为 es5 代码。转换后的代码，可以直接作为 es5 代码插入网页运行。\n\n上面的例子转为 es5 代码运行，就是下面这个样子。\n\n<script src=\"https://google.github.io/traceur-compiler/bin/traceur.js\"><\/script>\n<script src=\"https://google.github.io/traceur-compiler/bin/browsersystem.js\"><\/script>\n<script src=\"https://google.github.io/traceur-compiler/src/bootstrap.js\"><\/script>\n<script>\n$traceurruntime.modulestore.getanonymousmodule(function() {\n  \"use strict\";\n\n  var calc = function calc() {\n    console.log('calc constructor');\n  };\n\n  ($traceurruntime.createclass)(calc, {add: function(a, b) {\n    return a + b;\n  }}, {});\n\n  var c = new calc();\n  console.log(c.add(4, 5));\n  return {};\n});\n<\/script>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n\n\n# 命令行转换\n\n作为命令行工具使用时，traceur 是一个 node 的模块，首先需要用 npm 安装。\n\n$ npm install -g traceur\n\n\n1\n\n\n安装成功后，就可以在命令行下使用 traceur 了。\n\ntraceur 直接运行 es6 脚本文件，会在标准输出显示运行结果，以前面的calc.js为例。\n\n$ traceur calc.js\ncalc constructor\n9\n\n\n1\n2\n3\n\n\n如果要将 es6 脚本转为 es5 保存，要采用下面的写法。\n\n$ traceur --script calc.es6.js --out calc.es5.js\n\n\n1\n\n\n上面代码的--script选项表示指定输入文件，--out选项表示指定输出文件。\n\n为了防止有些特性编译不成功，最好加上--experimental选项。\n\n$ traceur --script calc.es6.js --out calc.es5.js --experimental\n\n\n1\n\n\n命令行下转换生成的文件，就可以直接放到浏览器中运行。\n\n\n# node 环境的用法\n\ntraceur 的 node 用法如下（假定已安装traceur模块）。\n\nvar traceur = require('traceur');\nvar fs = require('fs');\n\n// 将 es6 脚本转为字符串\nvar contents = fs.readfilesync('es6-file.js').tostring();\n\nvar result = traceur.compile(contents, {\n  filename: 'es6-file.js',\n  sourcemap: true,\n  // 其他设置\n  modules: 'commonjs'\n});\n\nif (result.error)\n  throw result.error;\n\n// result 对象的 js 属性就是转换后的 es5 代码\nfs.writefilesync('out.js', result.js);\n// sourcemap 属性对应 map 文件\nfs.writefilesync('out.js.map', result.sourcemap);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n",charsets:{cjk:!0}},{title:"let 和 const 命令",frontmatter:{title:"let 和 const 命令",date:"2020-02-09T16:00:29.000Z",permalink:"/pages/c1edd70a6b7c7872",author:"阮一峰",categories:["《ES6 教程》笔记"],tags:["ES6"],readingShow:"top"},regularPath:"/06.%E4%B9%A6%E7%B1%8D/05.%E3%80%8AES6%20%E6%95%99%E7%A8%8B%E3%80%8B%E7%AC%94%E8%AE%B0/02.let%20%E5%92%8C%20const%20%E5%91%BD%E4%BB%A4.html",relativePath:"06.书籍/05.《ES6 教程》笔记/02.let 和 const 命令.md",key:"v-7bd66884",path:"/pages/c1edd70a6b7c7872/",headers:[{level:2,title:"let 命令",slug:"let-命令",normalizedTitle:"let 命令",charIndex:21},{level:3,title:"基本用法",slug:"基本用法",normalizedTitle:"基本用法",charIndex:32},{level:3,title:"不存在变量提升",slug:"不存在变量提升",normalizedTitle:"不存在变量提升",charIndex:1395},{level:3,title:"暂时性死区",slug:"暂时性死区",normalizedTitle:"暂时性死区",charIndex:1807},{level:3,title:"不允许重复声明",slug:"不允许重复声明",normalizedTitle:"不允许重复声明",charIndex:3512},{level:2,title:"块级作用域",slug:"块级作用域",normalizedTitle:"块级作用域",charIndex:95},{level:3,title:"为什么需要块级作用域？",slug:"为什么需要块级作用域",normalizedTitle:"为什么需要块级作用域？",charIndex:3848},{level:3,title:"ES6 的块级作用域",slug:"es6-的块级作用域",normalizedTitle:"es6 的块级作用域",charIndex:4363},{level:3,title:"块级作用域与函数声明",slug:"块级作用域与函数声明",normalizedTitle:"块级作用域与函数声明",charIndex:5026},{level:2,title:"const 命令",slug:"const-命令",normalizedTitle:"const 命令",charIndex:8},{level:3,title:"基本用法",slug:"基本用法-2",normalizedTitle:"基本用法",charIndex:32},{level:3,title:"本质",slug:"本质",normalizedTitle:"本质",charIndex:3441},{level:3,title:"ES6 声明变量的六种方法",slug:"es6-声明变量的六种方法",normalizedTitle:"es6 声明变量的六种方法",charIndex:9231},{level:2,title:"顶层对象的属性",slug:"顶层对象的属性",normalizedTitle:"顶层对象的属性",charIndex:9364},{level:2,title:"globalThis 对象",slug:"globalthis-对象",normalizedTitle:"globalthis 对象",charIndex:10123}],excerpt:'<h1 id="let-和-const-命令"><a class="header-anchor" href="#let-和-const-命令">#</a> let 和 const 命令</h1>\n<h2 id="let-命令"><a class="header-anchor" href="#let-命令">#</a> let 命令</h2>\n<h3 id="基本用法"><a class="header-anchor" href="#基本用法">#</a> 基本用法</h3>\n<p>ES6 新增了<code>let</code>命令，用来声明变量。它的用法类似于<code>var</code>，但是所声明的变量，<strong>只在<code>let</code>命令所在的代码块内有效(块级作用域)</strong>。</p>\n\x3c!--beforebegin--\x3e<div class="language-javascript line-numbers-mode">\x3c!--afterbegin--\x3e<pre v-pre class="language-javascript"><code><span class="token punctuation">{</span>\n  <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>\n  <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\na <span class="token comment">// ReferenceError: a is not defined.</span>\nb <span class="token comment">// 1</span>\n</code></pre>\n<div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div>\x3c!--beforeend--\x3e</div>\x3c!--afterend--\x3e',lastUpdated:"2022/9/22 下午4:28:09",lastUpdatedTimestamp:1663835289e3,headersStr:"let 命令 基本用法 不存在变量提升 暂时性死区 不允许重复声明 块级作用域 为什么需要块级作用域？ ES6 的块级作用域 块级作用域与函数声明 const 命令 基本用法 本质 ES6 声明变量的六种方法 顶层对象的属性 globalThis 对象",content:"# let 和 const 命令\n\n\n# let 命令\n\n\n# 基本用法\n\nES6 新增了let命令，用来声明变量。它的用法类似于var，但是所声明的变量，只在let命令所在的代码块内有效(块级作用域)。\n\n{\n  let a = 10;\n  var b = 1;\n}\n\na // ReferenceError: a is not defined.\nb // 1\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n上面代码在代码块之中，分别用let和var声明了两个变量。然后在代码块之外调用这两个变量，结果let声明的变量报错，var声明的变量返回了正确的值。这表明，let声明的变量只在它所在的代码块有效。\n\nfor循环的计数器，就很合适使用let命令。\n\nfor (let i = 0; i < 10; i++) {\n  // ...\n}\n\nconsole.log(i);\n// ReferenceError: i is not defined\n\n\n1\n2\n3\n4\n5\n6\n\n\n上面代码中，计数器i只在for循环体内有效，在循环体外引用就会报错。\n\n> 如果for循环内用var声明i，则会打印10\n\n下面的代码如果使用var，最后输出的是10。\n\nvar a = [];\nfor (var i = 0; i < 10; i++) {\n  a[i] = function () { // 循环时只是将函数赋值给a[i],并未执行函数。函数内的i是全局的i\n    console.log(i);\n  };\n}\na[6](); // 10\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n上面代码中，变量i是var命令声明的，在全局范围内都有效，所以全局只有一个变量i。每一次循环，变量i的值都会发生改变，而循环内被赋给数组a的函数内部的console.log(i)，里面的i指向的就是全局的i。也就是说，所有数组a的成员里面的i，指向的都是同一个i，导致运行时输出的是最后一轮的i的值，也就是 10。\n\n如果使用let，声明的变量仅在块级作用域内有效，最后输出的是 6。\n\nvar a = [];\nfor (let i = 0; i < 10; i++) {\n  a[i] = function () {\n    console.log(i);\n  };\n}\na[6](); // 6\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n上面代码中，变量i是let声明的，当前的i只在本轮循环有效，所以每一次循环的i其实都是一个新的变量，所以最后输出的是6。你可能会问，如果每一轮循环的变量i都是重新声明的，那它怎么知道上一轮循环的值，从而计算出本轮循环的值？这是因为 JavaScript 引擎内部会记住上一轮循环的值，初始化本轮的变量i时，就在上一轮循环的基础上进行计算。\n\n另外，for循环还有一个特别之处，就是设置循环变量的那部分是一个父作用域，而循环体内部是一个单独的子作用域。\n\nfor (let i = 0; i < 3; i++) {\n  let i = 'abc';\n  console.log(i);\n}\n// abc\n// abc\n// abc\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n上面代码正确运行，输出了 3 次abc。这表明函数内部的变量i与循环变量i不在同一个作用域，有各自单独的作用域。\n\n\n# 不存在变量提升\n\nvar命令会发生“变量提升”现象，即变量可以在声明之前使用，值为undefined。这种现象多多少少是有些奇怪的，按照一般的逻辑，变量应该在声明语句之后才可以使用。\n\n为了纠正这种现象，let命令改变了语法行为，它所声明的变量一定要在声明后使用，否则报错。\n\n// var 的情况\nconsole.log(foo); // 输出undefined\nvar foo = 2;\n\n// let 的情况\nconsole.log(bar); // 报错ReferenceError\nlet bar = 2;\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n上面代码中，变量foo用var命令声明，会发生变量提升，即脚本开始运行时，变量foo已经存在了，但是没有值，所以会输出undefined。变量bar用let命令声明，不会发生变量提升。这表示在声明它之前，变量bar是不存在的，这时如果用到它，就会抛出一个错误。\n\n\n# 暂时性死区\n\n只要块级作用域内存在let命令，它所声明的变量就“绑定”（binding）这个区域，不再受外部的影响。\n\nvar tmp = 123;\n\nif (true) {\n  tmp = 'abc'; // ReferenceError\n  let tmp;\n}\n\n\n1\n2\n3\n4\n5\n6\n\n\n上面代码中，存在全局变量tmp，但是块级作用域内let又声明了一个局部变量tmp，导致后者绑定这个块级作用域，所以在let声明变量前，对tmp赋值会报错。\n\nES6 明确规定，如果区块中存在let和const命令，这个区块对这些命令声明的变量，从一开始就形成了封闭作用域。凡是在声明之前就使用这些变量，就会报错。\n\n总之，在代码块内，**使用let命令声明变量之前，该变量都是不可用的。这在语法上，称为“暂时性死区”（**temporal dead zone，简称 TDZ）。\n\nif (true) {\n  // TDZ开始\n  tmp = 'abc'; // ReferenceError\n  console.log(tmp); // ReferenceError\n\n  let tmp; // TDZ结束\n  console.log(tmp); // undefined\n\n  tmp = 123;\n  console.log(tmp); // 123\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n上面代码中，在let命令声明变量tmp之前，都属于变量tmp的“死区”。\n\n“暂时性死区”也意味着typeof不再是一个百分之百安全的操作。\n\ntypeof x; // ReferenceError\nlet x;\n\n\n1\n2\n\n\n上面代码中，变量x使用let命令声明，所以在声明之前，都属于x的“死区”，只要用到该变量就会报错。因此，typeof运行时就会抛出一个ReferenceError。\n\n作为比较，如果一个变量根本没有被声明，使用typeof反而不会报错。\n\ntypeof undeclared_variable // \"undefined\"\n\n\n1\n\n\n上面代码中，undeclared_variable是一个不存在的变量名，结果返回“undefined”。所以，在没有let之前，typeof运算符是百分之百安全的，永远不会报错。现在这一点不成立了。这样的设计是为了让大家养成良好的编程习惯，变量一定要在声明之后使用，否则就报错。\n\n有些“死区”比较隐蔽，不太容易发现。\n\nfunction bar(x = y, y = 2) {\n  return [x, y];\n}\n\nbar(); // 报错\n\n\n1\n2\n3\n4\n5\n\n\n上面代码中，调用bar函数之所以报错（某些实现可能不报错），是因为参数x默认值等于另一个参数y，而此时y还没有声明，属于“死区”。如果y的默认值是x，就不会报错，因为此时x已经声明了。\n\nfunction bar(x = 2, y = x) {\n  return [x, y];\n}\nbar(); // [2, 2]\n\n\n1\n2\n3\n4\n\n\n另外，下面的代码也会报错，与var的行为不同。\n\n// 不报错\nvar x = x;\n\n// 报错\nlet x = x;\n// ReferenceError: x is not defined\n\n\n1\n2\n3\n4\n5\n6\n\n\n上面代码报错，也是因为暂时性死区。使用let声明变量时，只要变量在还没有声明完成前使用，就会报错。上面这行就属于这个情况，在变量x的声明语句还没有执行完成前，就去取x的值，导致报错”x 未定义“。\n\nES6 规定暂时性死区和let、const语句不出现变量提升，主要是为了减少运行时错误，防止在变量声明前就使用这个变量，从而导致意料之外的行为。这样的错误在 ES5 是很常见的，现在有了这种规定，避免此类错误就很容易了。\n\n总之，暂时性死区的本质就是，只要一进入当前作用域，所要使用的变量就已经存在了，但是不可获取，只有等到声明变量的那一行代码出现，才可以获取和使用该变量。\n\n\n# 不允许重复声明\n\nlet不允许在相同作用域内，重复声明同一个变量。\n\n// 报错\nfunction func() {\n  let a = 10;\n  var a = 1;\n}\n\n// 报错\nfunction func() {\n  let a = 10;\n  let a = 1;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n因此，不能在函数内部重新声明参数。\n\nfunction func(arg) {\n  let arg;\n}\nfunc() // 报错\n\nfunction func(arg) {\n  {\n    let arg;\n  }\n}\nfunc() // 不报错\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n\n# 块级作用域\n\n\n# 为什么需要块级作用域？\n\nES5 只有全局作用域和函数作用域，没有块级作用域，这带来很多不合理的场景。\n\n第一种场景，内层变量可能会覆盖外层变量。\n\nvar tmp = new Date();\n\nfunction f() {\n  console.log(tmp);\n  if (false) {\n    var tmp = 'hello world';\n  }\n}\n\nf(); // undefined\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n上面代码的原意是，if代码块的外部使用外层的tmp变量，内部使用内层的tmp变量。但是，函数f执行后，输出结果为undefined，原因在于变量提升，导致内层的tmp变量覆盖了外层的tmp变量。\n\n第二种场景，用来计数的循环变量泄露为全局变量。\n\nvar s = 'hello';\n\nfor (var i = 0; i < s.length; i++) {\n  console.log(s[i]);\n}\n\nconsole.log(i); // 5\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n上面代码中，变量i只用来控制循环，但是循环结束后，它并没有消失，泄露成了全局变量。\n\n\n# ES6 的块级作用域\n\nlet实际上为 JavaScript 新增了块级作用域。\n\nfunction f1() {\n  let n = 5;\n  if (true) {\n    let n = 10;\n  }\n  console.log(n); // 5\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n上面的函数有两个代码块，都声明了变量n，运行后输出 5。这表示外层代码块不受内层代码块的影响。如果两次都使用var定义变量n，最后输出的值才是 10。\n\nES6 允许块级作用域的任意嵌套。\n\n{{{{\n  {let insane = 'Hello World'}\n  console.log(insane); // 报错\n}}}};\n\n\n1\n2\n3\n4\n\n\n上面代码使用了一个五层的块级作用域，每一层都是一个单独的作用域。第四层作用域无法读取第五层作用域的内部变量。\n\n内层作用域可以定义外层作用域的同名变量。\n\n{{{{\n  let insane = 'Hello World';\n  {let insane = 'Hello World'}\n}}}};\n\n\n1\n2\n3\n4\n\n\n块级作用域的出现，实际上使得获得广泛应用的匿名立即执行函数表达式（匿名 IIFE）不再必要了。\n\n// IIFE 写法\n(function () {\n  var tmp = ...;\n  ...\n}());\n\n// 块级作用域写法\n{\n  let tmp = ...;\n  ...\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n\n# 块级作用域与函数声明\n\n函数能不能在块级作用域之中声明？这是一个相当令人混淆的问题。\n\nES5 规定，函数只能在顶层作用域和函数作用域之中声明，不能在块级作用域声明。\n\n// 情况一\nif (true) {\n  function f() {}\n}\n\n// 情况二\ntry {\n  function f() {}\n} catch(e) {\n  // ...\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n上面两种函数声明，根据 ES5 的规定都是非法的。\n\n但是，浏览器没有遵守这个规定，为了兼容以前的旧代码，还是支持在块级作用域之中声明函数，因此上面两种情况实际都能运行，不会报错。\n\nES6 引入了块级作用域，明确允许在块级作用域之中声明函数。ES6 规定，块级作用域之中，函数声明语句的行为类似于let，在块级作用域之外不可引用。\n\nfunction f() { console.log('I am outside!'); }\n\n(function () {\n  if (false) {\n    // 重复声明一次函数f\n    function f() { console.log('I am inside!'); }\n  }\n\n  f();\n}());\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n上面代码在 ES5 中运行，会得到“I am inside!”，因为在if内声明的函数f会被提升到函数头部，实际运行的代码如下。\n\n// ES5 环境\nfunction f() { console.log('I am outside!'); }\n\n(function () {\n  function f() { console.log('I am inside!'); }\n  if (false) {\n  }\n  f();\n}());\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\nES6 就完全不一样了，理论上会得到“I am outside!”。因为块级作用域内声明的函数类似于let，对作用域之外没有影响。但是，如果你真的在 ES6 浏览器中运行一下上面的代码，是会报错的，这是为什么呢？\n\n// 浏览器的 ES6 环境\nfunction f() { console.log('I am outside!'); }\n\n(function () {\n  if (false) {\n    // 重复声明一次函数f\n    function f() { console.log('I am inside!'); }\n  }\n\n  f();\n}());\n// Uncaught TypeError: f is not a function\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n上面的代码在 ES6 浏览器中，都会报错。\n\n原来，如果改变了块级作用域内声明的函数的处理规则，显然会对老代码产生很大影响。为了减轻因此产生的不兼容问题，ES6 在附录 B里面规定，浏览器的实现可以不遵守上面的规定，有自己的行为方式。\n\n * 允许在块级作用域内声明函数。\n * 函数声明类似于var，即会提升到全局作用域或函数作用域的头部。\n * 同时，函数声明还会提升到所在的块级作用域的头部。\n\n注意，上面三条规则只对 ES6 的浏览器实现有效，其他环境的实现不用遵守，还是将块级作用域的函数声明当作let处理。\n\n根据这三条规则，浏览器的 ES6 环境中，块级作用域内声明的函数，行为类似于var声明的变量。上面的例子实际运行的代码如下。\n\n// 浏览器的 ES6 环境\nfunction f() { console.log('I am outside!'); }\n(function () {\n  var f = undefined;\n  if (false) {\n    function f() { console.log('I am inside!'); }\n  }\n\n  f();\n}());\n// Uncaught TypeError: f is not a function\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n考虑到环境导致的行为差异太大，应该避免在块级作用域内声明函数。如果确实需要，也应该写成函数表达式，而不是函数声明语句。\n\n// 块级作用域内部的函数声明语句，建议不要使用\n{\n  let a = 'secret';\n  function f() {\n    return a;\n  }\n}\n\n// 块级作用域内部，优先使用函数表达式\n{\n  let a = 'secret';\n  let f = function () {\n    return a;\n  };\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n另外，还有一个需要注意的地方。ES6 的块级作用域必须有大括号，如果没有大括号，JavaScript 引擎就认为不存在块级作用域。\n\n// 第一种写法，报错\nif (true) let x = 1;\n\n// 第二种写法，不报错\nif (true) {\n  let x = 1;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n上面代码中，第一种写法没有大括号，所以不存在块级作用域，而let只能出现在当前作用域的顶层，所以报错。第二种写法有大括号，所以块级作用域成立。\n\n函数声明也是如此，严格模式下，函数只能声明在当前作用域的顶层。\n\n// 不报错\n'use strict';\nif (true) {\n  function f() {}\n}\n\n// 报错\n'use strict';\nif (true)\n  function f() {}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n\n# const 命令\n\n\n# 基本用法\n\nconst声明一个只读的常量。一旦声明，常量的值就不能改变。\n\nconst PI = 3.1415;\nPI // 3.1415\n\nPI = 3;\n// TypeError: Assignment to constant variable.\n\n\n1\n2\n3\n4\n5\n\n\n上面代码表明改变常量的值会报错。\n\nconst声明的变量不得改变值，这意味着，const一旦声明变量，就必须立即初始化，不能留到以后赋值。\n\nconst foo;\n// SyntaxError: Missing initializer in const declaration\n\n\n1\n2\n\n\n上面代码表示，对于const来说，只声明不赋值，就会报错。\n\nconst的作用域与let命令相同：只在声明所在的块级作用域内有效。\n\nif (true) {\n  const MAX = 5;\n}\n\nMAX // Uncaught ReferenceError: MAX is not defined\n\n\n1\n2\n3\n4\n5\n\n\nconst命令声明的常量也是不提升，同样存在暂时性死区，只能在声明的位置后面使用。\n\nif (true) {\n  console.log(MAX); // ReferenceError\n  const MAX = 5;\n}\n\n\n1\n2\n3\n4\n\n\n上面代码在常量MAX声明之前就调用，结果报错。\n\nconst声明的常量，也与let一样不可重复声明。\n\nvar message = \"Hello!\";\nlet age = 25;\n\n// 以下两行都会报错\nconst message = \"Goodbye!\";\nconst age = 30;\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# 本质\n\nconst实际上保证的，并不是变量的值不得改动，而是变量指向的那个内存地址所保存的数据不得改动。对于简单类型的数据（数值、字符串、布尔值），值就保存在变量指向的那个内存地址，因此等同于常量。但对于复合类型的数据（主要是对象和数组），变量指向的内存地址，保存的只是一个指向实际数据的指针，const只能保证这个指针是固定的（即总是指向另一个固定的地址），至于它指向的数据结构是不是可变的，就完全不能控制了。因此，将一个对象声明为常量必须非常小心。\n\nconst foo = {};\n\n// 为 foo 添加一个属性，可以成功\nfoo.prop = 123;\nfoo.prop // 123\n\n// 将 foo 指向另一个对象，就会报错\nfoo = {}; // TypeError: \"foo\" is read-only\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n上面代码中，常量foo储存的是一个地址，这个地址指向一个对象。不可变的只是这个地址，即不能把foo指向另一个地址，但对象本身是可变的，所以依然可以为其添加新属性。\n\n下面是另一个例子。\n\nconst a = [];\na.push('Hello'); // 可执行\na.length = 0;    // 可执行\na = ['Dave'];    // 报错\n\n\n1\n2\n3\n4\n\n\n上面代码中，常量a是一个数组，这个数组本身是可写的，但是如果将另一个数组赋值给a，就会报错。\n\n如果真的想将对象冻结，应该使用Object.freeze方法。\n\nconst foo = Object.freeze({});\n\n// 常规模式时，下面一行不起作用；\n// 严格模式时，该行会报错\nfoo.prop = 123;\n\n\n1\n2\n3\n4\n5\n\n\n上面代码中，常量foo指向一个冻结的对象，所以添加新属性不起作用，严格模式时还会报错。\n\n除了将对象本身冻结，对象的属性也应该冻结。下面是一个将对象彻底冻结的函数。\n\nvar constantize = (obj) => {\n  Object.freeze(obj);\n  Object.keys(obj).forEach( (key, i) => {\n    if ( typeof obj[key] === 'object' ) {\n      constantize( obj[key] );\n    }\n  });\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# ES6 声明变量的六种方法\n\nES5 只有两种声明变量的方法：var命令和function命令。ES6 除了添加let和const命令，后面章节还会提到，另外两种声明变量的方法：import命令和class命令。所以，ES6 一共有 6 种声明变量的方法。\n\n\n# 顶层对象的属性\n\n顶层对象，在浏览器环境指的是window对象，在 Node 指的是global对象。ES5 之中，顶层对象的属性与全局变量是等价的。\n\nwindow.a = 1;\na // 1\n\na = 2;\nwindow.a // 2\n\n\n1\n2\n3\n4\n5\n\n\n上面代码中，顶层对象的属性赋值与全局变量的赋值，是同一件事。\n\n顶层对象的属性与全局变量挂钩，被认为是 JavaScript 语言最大的设计败笔之一。这样的设计带来了几个很大的问题，首先是没法在编译时就报出变量未声明的错误，只有运行时才能知道（因为全局变量可能是顶层对象的属性创造的，而属性的创造是动态的）；其次，程序员很容易不知不觉地就创建了全局变量（比如打字出错）；最后，顶层对象的属性是到处可以读写的，这非常不利于模块化编程。另一方面，window对象有实体含义，指的是浏览器的窗口对象，顶层对象是一个有实体含义的对象，也是不合适的。\n\nES6 为了改变这一点，一方面规定，为了保持兼容性，var命令和function命令声明的全局变量，依旧是顶层对象的属性；另一方面规定，let命令、const命令、class命令声明的全局变量，不属于顶层对象的属性。也就是说，从 ES6 开始，全局变量将逐步与顶层对象的属性脱钩。\n\nvar a = 1;\n// 如果在 Node 的 REPL 环境，可以写成 global.a\n// 或者采用通用方法，写成 this.a\nwindow.a // 1\n\nlet b = 1;\nwindow.b // undefined\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n上面代码中，全局变量a由var命令声明，所以它是顶层对象的属性；全局变量b由let命令声明，所以它不是顶层对象的属性，返回undefined。\n\n\n# globalThis 对象\n\nJavaScript 语言存在一个顶层对象，它提供全局环境（即全局作用域），所有代码都是在这个环境中运行。但是，顶层对象在各种实现里面是不统一的。\n\n * 浏览器里面，顶层对象是window，但 Node 和 Web Worker 没有window。\n * 浏览器和 Web Worker 里面，self也指向顶层对象，但是 Node 没有self。\n * Node 里面，顶层对象是global，但其他环境都不支持。\n\n同一段代码为了能够在各种环境，都能取到顶层对象，现在一般是使用this变量，但是有局限性。\n\n * 全局环境中，this会返回顶层对象。但是，Node 模块和 ES6 模块中，this返回的是当前模块。\n * 函数里面的this，如果函数不是作为对象的方法运行，而是单纯作为函数运行，this会指向顶层对象。但是，严格模式下，这时this会返回undefined。\n * 不管是严格模式，还是普通模式，new Function('return this')()，总是会返回全局对象。但是，如果浏览器用了 CSP（Content Security Policy，内容安全策略），那么eval、new Function这些方法都可能无法使用。\n\n综上所述，很难找到一种方法，可以在所有情况下，都取到顶层对象。下面是两种勉强可以使用的方法。\n\n// 方法一\n(typeof window !== 'undefined'\n   ? window\n   : (typeof process === 'object' &&\n      typeof require === 'function' &&\n      typeof global === 'object')\n     ? global\n     : this);\n\n// 方法二\nvar getGlobal = function () {\n  if (typeof self !== 'undefined') { return self; }\n  if (typeof window !== 'undefined') { return window; }\n  if (typeof global !== 'undefined') { return global; }\n  throw new Error('unable to locate global object');\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\nES2020 在语言标准的层面，引入globalThis作为顶层对象。也就是说，任何环境下，globalThis都是存在的，都可以从它拿到顶层对象，指向全局环境下的this。\n\n垫片库global-this模拟了这个提案，可以在所有环境拿到globalThis。",normalizedContent:"# let 和 const 命令\n\n\n# let 命令\n\n\n# 基本用法\n\nes6 新增了let命令，用来声明变量。它的用法类似于var，但是所声明的变量，只在let命令所在的代码块内有效(块级作用域)。\n\n{\n  let a = 10;\n  var b = 1;\n}\n\na // referenceerror: a is not defined.\nb // 1\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n上面代码在代码块之中，分别用let和var声明了两个变量。然后在代码块之外调用这两个变量，结果let声明的变量报错，var声明的变量返回了正确的值。这表明，let声明的变量只在它所在的代码块有效。\n\nfor循环的计数器，就很合适使用let命令。\n\nfor (let i = 0; i < 10; i++) {\n  // ...\n}\n\nconsole.log(i);\n// referenceerror: i is not defined\n\n\n1\n2\n3\n4\n5\n6\n\n\n上面代码中，计数器i只在for循环体内有效，在循环体外引用就会报错。\n\n> 如果for循环内用var声明i，则会打印10\n\n下面的代码如果使用var，最后输出的是10。\n\nvar a = [];\nfor (var i = 0; i < 10; i++) {\n  a[i] = function () { // 循环时只是将函数赋值给a[i],并未执行函数。函数内的i是全局的i\n    console.log(i);\n  };\n}\na[6](); // 10\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n上面代码中，变量i是var命令声明的，在全局范围内都有效，所以全局只有一个变量i。每一次循环，变量i的值都会发生改变，而循环内被赋给数组a的函数内部的console.log(i)，里面的i指向的就是全局的i。也就是说，所有数组a的成员里面的i，指向的都是同一个i，导致运行时输出的是最后一轮的i的值，也就是 10。\n\n如果使用let，声明的变量仅在块级作用域内有效，最后输出的是 6。\n\nvar a = [];\nfor (let i = 0; i < 10; i++) {\n  a[i] = function () {\n    console.log(i);\n  };\n}\na[6](); // 6\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n上面代码中，变量i是let声明的，当前的i只在本轮循环有效，所以每一次循环的i其实都是一个新的变量，所以最后输出的是6。你可能会问，如果每一轮循环的变量i都是重新声明的，那它怎么知道上一轮循环的值，从而计算出本轮循环的值？这是因为 javascript 引擎内部会记住上一轮循环的值，初始化本轮的变量i时，就在上一轮循环的基础上进行计算。\n\n另外，for循环还有一个特别之处，就是设置循环变量的那部分是一个父作用域，而循环体内部是一个单独的子作用域。\n\nfor (let i = 0; i < 3; i++) {\n  let i = 'abc';\n  console.log(i);\n}\n// abc\n// abc\n// abc\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n上面代码正确运行，输出了 3 次abc。这表明函数内部的变量i与循环变量i不在同一个作用域，有各自单独的作用域。\n\n\n# 不存在变量提升\n\nvar命令会发生“变量提升”现象，即变量可以在声明之前使用，值为undefined。这种现象多多少少是有些奇怪的，按照一般的逻辑，变量应该在声明语句之后才可以使用。\n\n为了纠正这种现象，let命令改变了语法行为，它所声明的变量一定要在声明后使用，否则报错。\n\n// var 的情况\nconsole.log(foo); // 输出undefined\nvar foo = 2;\n\n// let 的情况\nconsole.log(bar); // 报错referenceerror\nlet bar = 2;\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n上面代码中，变量foo用var命令声明，会发生变量提升，即脚本开始运行时，变量foo已经存在了，但是没有值，所以会输出undefined。变量bar用let命令声明，不会发生变量提升。这表示在声明它之前，变量bar是不存在的，这时如果用到它，就会抛出一个错误。\n\n\n# 暂时性死区\n\n只要块级作用域内存在let命令，它所声明的变量就“绑定”（binding）这个区域，不再受外部的影响。\n\nvar tmp = 123;\n\nif (true) {\n  tmp = 'abc'; // referenceerror\n  let tmp;\n}\n\n\n1\n2\n3\n4\n5\n6\n\n\n上面代码中，存在全局变量tmp，但是块级作用域内let又声明了一个局部变量tmp，导致后者绑定这个块级作用域，所以在let声明变量前，对tmp赋值会报错。\n\nes6 明确规定，如果区块中存在let和const命令，这个区块对这些命令声明的变量，从一开始就形成了封闭作用域。凡是在声明之前就使用这些变量，就会报错。\n\n总之，在代码块内，**使用let命令声明变量之前，该变量都是不可用的。这在语法上，称为“暂时性死区”（**temporal dead zone，简称 tdz）。\n\nif (true) {\n  // tdz开始\n  tmp = 'abc'; // referenceerror\n  console.log(tmp); // referenceerror\n\n  let tmp; // tdz结束\n  console.log(tmp); // undefined\n\n  tmp = 123;\n  console.log(tmp); // 123\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n上面代码中，在let命令声明变量tmp之前，都属于变量tmp的“死区”。\n\n“暂时性死区”也意味着typeof不再是一个百分之百安全的操作。\n\ntypeof x; // referenceerror\nlet x;\n\n\n1\n2\n\n\n上面代码中，变量x使用let命令声明，所以在声明之前，都属于x的“死区”，只要用到该变量就会报错。因此，typeof运行时就会抛出一个referenceerror。\n\n作为比较，如果一个变量根本没有被声明，使用typeof反而不会报错。\n\ntypeof undeclared_variable // \"undefined\"\n\n\n1\n\n\n上面代码中，undeclared_variable是一个不存在的变量名，结果返回“undefined”。所以，在没有let之前，typeof运算符是百分之百安全的，永远不会报错。现在这一点不成立了。这样的设计是为了让大家养成良好的编程习惯，变量一定要在声明之后使用，否则就报错。\n\n有些“死区”比较隐蔽，不太容易发现。\n\nfunction bar(x = y, y = 2) {\n  return [x, y];\n}\n\nbar(); // 报错\n\n\n1\n2\n3\n4\n5\n\n\n上面代码中，调用bar函数之所以报错（某些实现可能不报错），是因为参数x默认值等于另一个参数y，而此时y还没有声明，属于“死区”。如果y的默认值是x，就不会报错，因为此时x已经声明了。\n\nfunction bar(x = 2, y = x) {\n  return [x, y];\n}\nbar(); // [2, 2]\n\n\n1\n2\n3\n4\n\n\n另外，下面的代码也会报错，与var的行为不同。\n\n// 不报错\nvar x = x;\n\n// 报错\nlet x = x;\n// referenceerror: x is not defined\n\n\n1\n2\n3\n4\n5\n6\n\n\n上面代码报错，也是因为暂时性死区。使用let声明变量时，只要变量在还没有声明完成前使用，就会报错。上面这行就属于这个情况，在变量x的声明语句还没有执行完成前，就去取x的值，导致报错”x 未定义“。\n\nes6 规定暂时性死区和let、const语句不出现变量提升，主要是为了减少运行时错误，防止在变量声明前就使用这个变量，从而导致意料之外的行为。这样的错误在 es5 是很常见的，现在有了这种规定，避免此类错误就很容易了。\n\n总之，暂时性死区的本质就是，只要一进入当前作用域，所要使用的变量就已经存在了，但是不可获取，只有等到声明变量的那一行代码出现，才可以获取和使用该变量。\n\n\n# 不允许重复声明\n\nlet不允许在相同作用域内，重复声明同一个变量。\n\n// 报错\nfunction func() {\n  let a = 10;\n  var a = 1;\n}\n\n// 报错\nfunction func() {\n  let a = 10;\n  let a = 1;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n因此，不能在函数内部重新声明参数。\n\nfunction func(arg) {\n  let arg;\n}\nfunc() // 报错\n\nfunction func(arg) {\n  {\n    let arg;\n  }\n}\nfunc() // 不报错\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n\n# 块级作用域\n\n\n# 为什么需要块级作用域？\n\nes5 只有全局作用域和函数作用域，没有块级作用域，这带来很多不合理的场景。\n\n第一种场景，内层变量可能会覆盖外层变量。\n\nvar tmp = new date();\n\nfunction f() {\n  console.log(tmp);\n  if (false) {\n    var tmp = 'hello world';\n  }\n}\n\nf(); // undefined\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n上面代码的原意是，if代码块的外部使用外层的tmp变量，内部使用内层的tmp变量。但是，函数f执行后，输出结果为undefined，原因在于变量提升，导致内层的tmp变量覆盖了外层的tmp变量。\n\n第二种场景，用来计数的循环变量泄露为全局变量。\n\nvar s = 'hello';\n\nfor (var i = 0; i < s.length; i++) {\n  console.log(s[i]);\n}\n\nconsole.log(i); // 5\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n上面代码中，变量i只用来控制循环，但是循环结束后，它并没有消失，泄露成了全局变量。\n\n\n# es6 的块级作用域\n\nlet实际上为 javascript 新增了块级作用域。\n\nfunction f1() {\n  let n = 5;\n  if (true) {\n    let n = 10;\n  }\n  console.log(n); // 5\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n上面的函数有两个代码块，都声明了变量n，运行后输出 5。这表示外层代码块不受内层代码块的影响。如果两次都使用var定义变量n，最后输出的值才是 10。\n\nes6 允许块级作用域的任意嵌套。\n\n{{{{\n  {let insane = 'hello world'}\n  console.log(insane); // 报错\n}}}};\n\n\n1\n2\n3\n4\n\n\n上面代码使用了一个五层的块级作用域，每一层都是一个单独的作用域。第四层作用域无法读取第五层作用域的内部变量。\n\n内层作用域可以定义外层作用域的同名变量。\n\n{{{{\n  let insane = 'hello world';\n  {let insane = 'hello world'}\n}}}};\n\n\n1\n2\n3\n4\n\n\n块级作用域的出现，实际上使得获得广泛应用的匿名立即执行函数表达式（匿名 iife）不再必要了。\n\n// iife 写法\n(function () {\n  var tmp = ...;\n  ...\n}());\n\n// 块级作用域写法\n{\n  let tmp = ...;\n  ...\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n\n# 块级作用域与函数声明\n\n函数能不能在块级作用域之中声明？这是一个相当令人混淆的问题。\n\nes5 规定，函数只能在顶层作用域和函数作用域之中声明，不能在块级作用域声明。\n\n// 情况一\nif (true) {\n  function f() {}\n}\n\n// 情况二\ntry {\n  function f() {}\n} catch(e) {\n  // ...\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n上面两种函数声明，根据 es5 的规定都是非法的。\n\n但是，浏览器没有遵守这个规定，为了兼容以前的旧代码，还是支持在块级作用域之中声明函数，因此上面两种情况实际都能运行，不会报错。\n\nes6 引入了块级作用域，明确允许在块级作用域之中声明函数。es6 规定，块级作用域之中，函数声明语句的行为类似于let，在块级作用域之外不可引用。\n\nfunction f() { console.log('i am outside!'); }\n\n(function () {\n  if (false) {\n    // 重复声明一次函数f\n    function f() { console.log('i am inside!'); }\n  }\n\n  f();\n}());\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n上面代码在 es5 中运行，会得到“i am inside!”，因为在if内声明的函数f会被提升到函数头部，实际运行的代码如下。\n\n// es5 环境\nfunction f() { console.log('i am outside!'); }\n\n(function () {\n  function f() { console.log('i am inside!'); }\n  if (false) {\n  }\n  f();\n}());\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\nes6 就完全不一样了，理论上会得到“i am outside!”。因为块级作用域内声明的函数类似于let，对作用域之外没有影响。但是，如果你真的在 es6 浏览器中运行一下上面的代码，是会报错的，这是为什么呢？\n\n// 浏览器的 es6 环境\nfunction f() { console.log('i am outside!'); }\n\n(function () {\n  if (false) {\n    // 重复声明一次函数f\n    function f() { console.log('i am inside!'); }\n  }\n\n  f();\n}());\n// uncaught typeerror: f is not a function\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n上面的代码在 es6 浏览器中，都会报错。\n\n原来，如果改变了块级作用域内声明的函数的处理规则，显然会对老代码产生很大影响。为了减轻因此产生的不兼容问题，es6 在附录 b里面规定，浏览器的实现可以不遵守上面的规定，有自己的行为方式。\n\n * 允许在块级作用域内声明函数。\n * 函数声明类似于var，即会提升到全局作用域或函数作用域的头部。\n * 同时，函数声明还会提升到所在的块级作用域的头部。\n\n注意，上面三条规则只对 es6 的浏览器实现有效，其他环境的实现不用遵守，还是将块级作用域的函数声明当作let处理。\n\n根据这三条规则，浏览器的 es6 环境中，块级作用域内声明的函数，行为类似于var声明的变量。上面的例子实际运行的代码如下。\n\n// 浏览器的 es6 环境\nfunction f() { console.log('i am outside!'); }\n(function () {\n  var f = undefined;\n  if (false) {\n    function f() { console.log('i am inside!'); }\n  }\n\n  f();\n}());\n// uncaught typeerror: f is not a function\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n考虑到环境导致的行为差异太大，应该避免在块级作用域内声明函数。如果确实需要，也应该写成函数表达式，而不是函数声明语句。\n\n// 块级作用域内部的函数声明语句，建议不要使用\n{\n  let a = 'secret';\n  function f() {\n    return a;\n  }\n}\n\n// 块级作用域内部，优先使用函数表达式\n{\n  let a = 'secret';\n  let f = function () {\n    return a;\n  };\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n另外，还有一个需要注意的地方。es6 的块级作用域必须有大括号，如果没有大括号，javascript 引擎就认为不存在块级作用域。\n\n// 第一种写法，报错\nif (true) let x = 1;\n\n// 第二种写法，不报错\nif (true) {\n  let x = 1;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n上面代码中，第一种写法没有大括号，所以不存在块级作用域，而let只能出现在当前作用域的顶层，所以报错。第二种写法有大括号，所以块级作用域成立。\n\n函数声明也是如此，严格模式下，函数只能声明在当前作用域的顶层。\n\n// 不报错\n'use strict';\nif (true) {\n  function f() {}\n}\n\n// 报错\n'use strict';\nif (true)\n  function f() {}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n\n# const 命令\n\n\n# 基本用法\n\nconst声明一个只读的常量。一旦声明，常量的值就不能改变。\n\nconst pi = 3.1415;\npi // 3.1415\n\npi = 3;\n// typeerror: assignment to constant variable.\n\n\n1\n2\n3\n4\n5\n\n\n上面代码表明改变常量的值会报错。\n\nconst声明的变量不得改变值，这意味着，const一旦声明变量，就必须立即初始化，不能留到以后赋值。\n\nconst foo;\n// syntaxerror: missing initializer in const declaration\n\n\n1\n2\n\n\n上面代码表示，对于const来说，只声明不赋值，就会报错。\n\nconst的作用域与let命令相同：只在声明所在的块级作用域内有效。\n\nif (true) {\n  const max = 5;\n}\n\nmax // uncaught referenceerror: max is not defined\n\n\n1\n2\n3\n4\n5\n\n\nconst命令声明的常量也是不提升，同样存在暂时性死区，只能在声明的位置后面使用。\n\nif (true) {\n  console.log(max); // referenceerror\n  const max = 5;\n}\n\n\n1\n2\n3\n4\n\n\n上面代码在常量max声明之前就调用，结果报错。\n\nconst声明的常量，也与let一样不可重复声明。\n\nvar message = \"hello!\";\nlet age = 25;\n\n// 以下两行都会报错\nconst message = \"goodbye!\";\nconst age = 30;\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# 本质\n\nconst实际上保证的，并不是变量的值不得改动，而是变量指向的那个内存地址所保存的数据不得改动。对于简单类型的数据（数值、字符串、布尔值），值就保存在变量指向的那个内存地址，因此等同于常量。但对于复合类型的数据（主要是对象和数组），变量指向的内存地址，保存的只是一个指向实际数据的指针，const只能保证这个指针是固定的（即总是指向另一个固定的地址），至于它指向的数据结构是不是可变的，就完全不能控制了。因此，将一个对象声明为常量必须非常小心。\n\nconst foo = {};\n\n// 为 foo 添加一个属性，可以成功\nfoo.prop = 123;\nfoo.prop // 123\n\n// 将 foo 指向另一个对象，就会报错\nfoo = {}; // typeerror: \"foo\" is read-only\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n上面代码中，常量foo储存的是一个地址，这个地址指向一个对象。不可变的只是这个地址，即不能把foo指向另一个地址，但对象本身是可变的，所以依然可以为其添加新属性。\n\n下面是另一个例子。\n\nconst a = [];\na.push('hello'); // 可执行\na.length = 0;    // 可执行\na = ['dave'];    // 报错\n\n\n1\n2\n3\n4\n\n\n上面代码中，常量a是一个数组，这个数组本身是可写的，但是如果将另一个数组赋值给a，就会报错。\n\n如果真的想将对象冻结，应该使用object.freeze方法。\n\nconst foo = object.freeze({});\n\n// 常规模式时，下面一行不起作用；\n// 严格模式时，该行会报错\nfoo.prop = 123;\n\n\n1\n2\n3\n4\n5\n\n\n上面代码中，常量foo指向一个冻结的对象，所以添加新属性不起作用，严格模式时还会报错。\n\n除了将对象本身冻结，对象的属性也应该冻结。下面是一个将对象彻底冻结的函数。\n\nvar constantize = (obj) => {\n  object.freeze(obj);\n  object.keys(obj).foreach( (key, i) => {\n    if ( typeof obj[key] === 'object' ) {\n      constantize( obj[key] );\n    }\n  });\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# es6 声明变量的六种方法\n\nes5 只有两种声明变量的方法：var命令和function命令。es6 除了添加let和const命令，后面章节还会提到，另外两种声明变量的方法：import命令和class命令。所以，es6 一共有 6 种声明变量的方法。\n\n\n# 顶层对象的属性\n\n顶层对象，在浏览器环境指的是window对象，在 node 指的是global对象。es5 之中，顶层对象的属性与全局变量是等价的。\n\nwindow.a = 1;\na // 1\n\na = 2;\nwindow.a // 2\n\n\n1\n2\n3\n4\n5\n\n\n上面代码中，顶层对象的属性赋值与全局变量的赋值，是同一件事。\n\n顶层对象的属性与全局变量挂钩，被认为是 javascript 语言最大的设计败笔之一。这样的设计带来了几个很大的问题，首先是没法在编译时就报出变量未声明的错误，只有运行时才能知道（因为全局变量可能是顶层对象的属性创造的，而属性的创造是动态的）；其次，程序员很容易不知不觉地就创建了全局变量（比如打字出错）；最后，顶层对象的属性是到处可以读写的，这非常不利于模块化编程。另一方面，window对象有实体含义，指的是浏览器的窗口对象，顶层对象是一个有实体含义的对象，也是不合适的。\n\nes6 为了改变这一点，一方面规定，为了保持兼容性，var命令和function命令声明的全局变量，依旧是顶层对象的属性；另一方面规定，let命令、const命令、class命令声明的全局变量，不属于顶层对象的属性。也就是说，从 es6 开始，全局变量将逐步与顶层对象的属性脱钩。\n\nvar a = 1;\n// 如果在 node 的 repl 环境，可以写成 global.a\n// 或者采用通用方法，写成 this.a\nwindow.a // 1\n\nlet b = 1;\nwindow.b // undefined\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n上面代码中，全局变量a由var命令声明，所以它是顶层对象的属性；全局变量b由let命令声明，所以它不是顶层对象的属性，返回undefined。\n\n\n# globalthis 对象\n\njavascript 语言存在一个顶层对象，它提供全局环境（即全局作用域），所有代码都是在这个环境中运行。但是，顶层对象在各种实现里面是不统一的。\n\n * 浏览器里面，顶层对象是window，但 node 和 web worker 没有window。\n * 浏览器和 web worker 里面，self也指向顶层对象，但是 node 没有self。\n * node 里面，顶层对象是global，但其他环境都不支持。\n\n同一段代码为了能够在各种环境，都能取到顶层对象，现在一般是使用this变量，但是有局限性。\n\n * 全局环境中，this会返回顶层对象。但是，node 模块和 es6 模块中，this返回的是当前模块。\n * 函数里面的this，如果函数不是作为对象的方法运行，而是单纯作为函数运行，this会指向顶层对象。但是，严格模式下，这时this会返回undefined。\n * 不管是严格模式，还是普通模式，new function('return this')()，总是会返回全局对象。但是，如果浏览器用了 csp（content security policy，内容安全策略），那么eval、new function这些方法都可能无法使用。\n\n综上所述，很难找到一种方法，可以在所有情况下，都取到顶层对象。下面是两种勉强可以使用的方法。\n\n// 方法一\n(typeof window !== 'undefined'\n   ? window\n   : (typeof process === 'object' &&\n      typeof require === 'function' &&\n      typeof global === 'object')\n     ? global\n     : this);\n\n// 方法二\nvar getglobal = function () {\n  if (typeof self !== 'undefined') { return self; }\n  if (typeof window !== 'undefined') { return window; }\n  if (typeof global !== 'undefined') { return global; }\n  throw new error('unable to locate global object');\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\nes2020 在语言标准的层面，引入globalthis作为顶层对象。也就是说，任何环境下，globalthis都是存在的，都可以从它拿到顶层对象，指向全局环境下的this。\n\n垫片库global-this模拟了这个提案，可以在所有环境拿到globalthis。",charsets:{cjk:!0}},{title:"变量的解构赋值",frontmatter:{title:"变量的解构赋值",date:"2020-02-09T16:00:29.000Z",permalink:"/pages/b1ab10a62f7564da",author:"阮一峰",categories:["《ES6 教程》笔记"],tags:["ES6"],readingShow:"top"},regularPath:"/06.%E4%B9%A6%E7%B1%8D/05.%E3%80%8AES6%20%E6%95%99%E7%A8%8B%E3%80%8B%E7%AC%94%E8%AE%B0/03.%E5%8F%98%E9%87%8F%E7%9A%84%E8%A7%A3%E6%9E%84%E8%B5%8B%E5%80%BC.html",relativePath:"06.书籍/05.《ES6 教程》笔记/03.变量的解构赋值.md",key:"v-03912346",path:"/pages/b1ab10a62f7564da/",headers:[{level:2,title:"数组的解构赋值",slug:"数组的解构赋值",normalizedTitle:"数组的解构赋值",charIndex:14},{level:3,title:"基本用法",slug:"基本用法",normalizedTitle:"基本用法",charIndex:26},{level:3,title:"默认值",slug:"默认值",normalizedTitle:"默认值",charIndex:1628},{level:2,title:"对象的解构赋值",slug:"对象的解构赋值",normalizedTitle:"对象的解构赋值",charIndex:2516},{level:3,title:"简介",slug:"简介",normalizedTitle:"简介",charIndex:2528},{level:3,title:"默认值",slug:"默认值-2",normalizedTitle:"默认值",charIndex:1628},{level:3,title:"注意点",slug:"注意点",normalizedTitle:"注意点",charIndex:5548},{level:2,title:"字符串的解构赋值",slug:"字符串的解构赋值",normalizedTitle:"字符串的解构赋值",charIndex:6212},{level:2,title:"数值和布尔值的解构赋值",slug:"数值和布尔值的解构赋值",normalizedTitle:"数值和布尔值的解构赋值",charIndex:6441},{level:2,title:"函数参数的解构赋值",slug:"函数参数的解构赋值",normalizedTitle:"函数参数的解构赋值",charIndex:6840},{level:2,title:"圆括号问题",slug:"圆括号问题",normalizedTitle:"圆括号问题",charIndex:7706},{level:3,title:"不能使用圆括号的情况",slug:"不能使用圆括号的情况",normalizedTitle:"不能使用圆括号的情况",charIndex:7904},{level:3,title:"可以使用圆括号的情况",slug:"可以使用圆括号的情况",normalizedTitle:"可以使用圆括号的情况",charIndex:8440},{level:2,title:"用途",slug:"用途",normalizedTitle:"用途",charIndex:8693}],excerpt:'<h1 id="变量的解构赋值"><a class="header-anchor" href="#变量的解构赋值">#</a> 变量的解构赋值</h1>\n<h2 id="数组的解构赋值"><a class="header-anchor" href="#数组的解构赋值">#</a> 数组的解构赋值</h2>\n<h3 id="基本用法"><a class="header-anchor" href="#基本用法">#</a> 基本用法</h3>\n<p>ES6 允许按照一定模式，<strong>从数组和对象中提取值，对变量进行赋值，这被称为解构</strong>（Destructuring）。</p>\n<p>以前，为变量赋值，只能直接指定值。</p>\n\x3c!--beforebegin--\x3e<div class="language-javascript line-numbers-mode">\x3c!--afterbegin--\x3e<pre v-pre class="language-javascript"><code><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> c <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>\n</code></pre>\n<div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div>\x3c!--beforeend--\x3e</div>\x3c!--afterend--\x3e',lastUpdated:"2022/9/22 下午4:28:09",lastUpdatedTimestamp:1663835289e3,headersStr:"数组的解构赋值 基本用法 默认值 对象的解构赋值 简介 默认值 注意点 字符串的解构赋值 数值和布尔值的解构赋值 函数参数的解构赋值 圆括号问题 不能使用圆括号的情况 可以使用圆括号的情况 用途",content:"# 变量的解构赋值\n\n\n# 数组的解构赋值\n\n\n# 基本用法\n\nES6 允许按照一定模式，从数组和对象中提取值，对变量进行赋值，这被称为解构（Destructuring）。\n\n以前，为变量赋值，只能直接指定值。\n\nlet a = 1;\nlet b = 2;\nlet c = 3;\n\n\n1\n2\n3\n\n\nES6 允许写成下面这样。\n\nlet [a, b, c] = [1, 2, 3];\n\n\n1\n\n\n上面代码表示，可以从数组中提取值，按照对应位置，对变量赋值。\n\n本质上，这种写法属于“模式匹配”，只要等号两边的模式相同，左边的变量就会被赋予对应的值。下面是一些使用嵌套数组进行解构的例子。\n\nlet [foo, [[bar], baz]] = [1, [[2], 3]];\nfoo // 1\nbar // 2\nbaz // 3\n\nlet [ , , third] = [\"foo\", \"bar\", \"baz\"];\nthird // \"baz\"\n\nlet [x, , y] = [1, 2, 3];\nx // 1\ny // 3\n\nlet [head, ...tail] = [1, 2, 3, 4];\nhead // 1\ntail // [2, 3, 4]\n\nlet [x, y, ...z] = ['a'];\nx // \"a\"\ny // undefined\nz // []\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n\n如果解构不成功，变量的值就等于undefined。\n\nlet [foo] = [];\nlet [bar, foo] = [1];\n\n\n1\n2\n\n\n以上两种情况都属于解构不成功，foo的值都会等于undefined。\n\n另一种情况是不完全解构，即等号左边的模式，只匹配一部分的等号右边的数组。这种情况下，解构依然可以成功。\n\nlet [x, y] = [1, 2, 3];\nx // 1\ny // 2\n\nlet [a, [b], d] = [1, [2, 3], 4];\na // 1\nb // 2\nd // 4\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n上面两个例子，都属于不完全解构，但是可以成功。\n\n如果等号的右边不是数组（或者严格地说，不是可遍历的结构，参见《Iterator》一章），那么将会报错。\n\n// 报错\nlet [foo] = 1;\nlet [foo] = false;\nlet [foo] = NaN;\nlet [foo] = undefined;\nlet [foo] = null;\nlet [foo] = {};\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n上面的语句都会报错，因为等号右边的值，要么转为对象以后不具备 Iterator 接口（前五个表达式），要么本身就不具备 Iterator 接口（最后一个表达式）。\n\n对于 Set 结构，也可以使用数组的解构赋值。\n\nlet [x, y, z] = new Set(['a', 'b', 'c']);\nx // \"a\"\n\n\n1\n2\n\n\n事实上，只要某种数据结构具有 Iterator 接口，都可以采用数组形式的解构赋值。\n\nfunction* fibs() {\n  let a = 0;\n  let b = 1;\n  while (true) {\n    yield a;\n    [a, b] = [b, a + b];\n  }\n}\n\nlet [first, second, third, fourth, fifth, sixth] = fibs();\nsixth // 5\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n上面代码中，fibs是一个 Generator 函数（参见《Generator 函数》一章），原生具有 Iterator 接口。解构赋值会依次从这个接口获取值。\n\n\n# 默认值\n\n解构赋值允许指定默认值。\n\nlet [foo = true] = [];\nfoo // true\n\nlet [x, y = 'b'] = ['a']; // x='a', y='b'\nlet [x, y = 'b'] = ['a', undefined]; // x='a', y='b'\n\n\n1\n2\n3\n4\n5\n\n\n注意，ES6 内部使用严格相等运算符（===），判断一个位置是否有值。所以，只有 当一个数组成员严格等于undefined，默认值才会生效。\n\nlet [x = 1] = [undefined];\nx // 1\n\nlet [x = 1] = [null];\nx // null\n\n\n1\n2\n3\n4\n5\n\n\n上面代码中，如果一个数组成员是null，默认值就不会生效，因为null不严格等于undefined。\n\n如果默认值是一个表达式，那么这个表达式是惰性求值的，即只有在用到的时候，才会求值。\n\nfunction f() {\n  console.log('aaa');\n}\n\nlet [x = f()] = [1];\n\n\n1\n2\n3\n4\n5\n\n\n上面代码中，因为x能取到值，所以函数f根本不会执行。上面的代码其实等价于下面的代码。\n\nlet x;\nif ([1][0] === undefined) {\n  x = f();\n} else {\n  x = [1][0];\n}\n\n\n1\n2\n3\n4\n5\n6\n\n\n默认值可以引用解构赋值的其他变量，但该变量必须已经声明。\n\nlet [x = 1, y = x] = [];     // x=1; y=1\nlet [x = 1, y = x] = [2];    // x=2; y=2\nlet [x = 1, y = x] = [1, 2]; // x=1; y=2\nlet [x = y, y = 1] = [];     // ReferenceError: y is not defined\n\n\n1\n2\n3\n4\n\n\n上面最后一个表达式之所以会报错，是因为x用y做默认值时，y还没有声明。\n\n\n# 对象的解构赋值\n\n\n# 简介\n\n解构不仅可以用于数组，还可以用于对象。\n\nlet { foo, bar } = { foo: 'aaa', bar: 'bbb' };\nfoo // \"aaa\"\nbar // \"bbb\"\n\n\n1\n2\n3\n\n\n对象的解构与数组有一个重要的不同。数组的元素是按次序排列的，变量的取值由它的位置决定；而对象的属性没有次序，变量必须与属性同名，才能取到正确的值。\n\nlet { bar, foo } = { foo: 'aaa', bar: 'bbb' };\nfoo // \"aaa\"\nbar // \"bbb\"\n\nlet { baz } = { foo: 'aaa', bar: 'bbb' };\nbaz // undefined\n\n\n1\n2\n3\n4\n5\n6\n\n\n上面代码的第一个例子，等号左边的两个变量的次序，与等号右边两个同名属性的次序不一致，但是对取值完全没有影响。第二个例子的变量没有对应的同名属性，导致取不到值，最后等于undefined。\n\n如果解构失败，变量的值等于undefined。\n\nlet {foo} = {bar: 'baz'};\nfoo // undefined\n\n\n1\n2\n\n\n上面代码中，等号右边的对象没有foo属性，所以变量foo取不到值，所以等于undefined。\n\n对象的解构赋值，可以很方便地将现有对象的方法，赋值到某个变量。\n\n// 例一\nlet { log, sin, cos } = Math;\n\n// 例二\nconst { log } = console;\nlog('hello') // hello\n\n\n1\n2\n3\n4\n5\n6\n\n\n上面代码的例一将Math对象的对数、正弦、余弦三个方法，赋值到对应的变量上，使用起来就会方便很多。例二将console.log赋值到log变量。\n\n如果变量名与属性名不一致，必须写成下面这样。\n\nlet { foo: baz } = { foo: 'aaa', bar: 'bbb' };\nbaz // \"aaa\"\n\nlet obj = { first: 'hello', last: 'world' };\nlet { first: f, last: l } = obj;\nf // 'hello'\nl // 'world'\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n这实际上说明，对象的解构赋值是下面形式的简写（参见《对象的扩展》一章）。\n\nlet { foo: foo, bar: bar } = { foo: 'aaa', bar: 'bbb' };\n\n\n1\n\n\n也就是说，对象的解构赋值的内部机制，是先找到同名属性，然后再赋给对应的变量。真正被赋值的是后者，而不是前者。\n\nlet { foo: baz } = { foo: 'aaa', bar: 'bbb' };\nbaz // \"aaa\"\nfoo // error: foo is not defined\n\n\n1\n2\n3\n\n\n上面代码中，foo是匹配的模式，baz才是变量。真正被赋值的是变量baz，而不是模式foo。\n\n与数组一样，解构也可以用于嵌套结构的对象。\n\nlet obj = {\n  p: [\n    'Hello',\n    { y: 'World' }\n  ]\n};\n\nlet { p: [x, { y }] } = obj;\nx // \"Hello\"\ny // \"World\"\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n注意，这时p是模式，不是变量，因此不会被赋值。如果p也要作为变量赋值，可以写成下面这样。\n\nlet obj = {\n  p: [\n    'Hello',\n    { y: 'World' }\n  ]\n};\n\nlet { p, p: [x, { y }] } = obj;\nx // \"Hello\"\ny // \"World\"\np // [\"Hello\", {y: \"World\"}]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n下面是另一个例子。\n\nconst node = {\n  loc: {\n    start: {\n      line: 1,\n      column: 5\n    }\n  }\n};\n\nlet { loc, loc: { start }, loc: { start: { line }} } = node;\nline // 1\nloc  // Object {start: Object}\nstart // Object {line: 1, column: 5}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n上面代码有三次解构赋值，分别是对loc、start、line三个属性的解构赋值。注意，最后一次对line属性的解构赋值之中，只有line是变量，loc和start都是模式，不是变量。\n\n下面是嵌套赋值的例子。\n\nlet obj = {};\nlet arr = [];\n\n({ foo: obj.prop, bar: arr[0] } = { foo: 123, bar: true });\n\nobj // {prop:123}\narr // [true]\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n如果解构模式是嵌套的对象，而且子对象所在的父属性不存在，那么将会报错。\n\n// 报错\nlet {foo: {bar}} = {baz: 'baz'};\n\n\n1\n2\n\n\n上面代码中，等号左边对象的foo属性，对应一个子对象。该子对象的bar属性，解构时会报错。原因很简单，因为foo这时等于undefined，再取子属性就会报错。\n\n注意，对象的解构赋值可以取到继承的属性。\n\nconst obj1 = {};\nconst obj2 = { foo: 'bar' };\nObject.setPrototypeOf(obj1, obj2);\n\nconst { foo } = obj1;\nfoo // \"bar\"\n\n\n1\n2\n3\n4\n5\n6\n\n\n上面代码中，对象obj1的原型对象是obj2。foo属性不是obj1自身的属性，而是继承自obj2的属性，解构赋值可以取到这个属性。\n\n\n# 默认值\n\n对象的解构也可以指定默认值。\n\nvar {x = 3} = {};\nx // 3\n\nvar {x, y = 5} = {x: 1};\nx // 1\ny // 5\n\nvar {x: y = 3} = {};\ny // 3\n\nvar {x: y = 3} = {x: 5};\ny // 5\n\nvar { message: msg = 'Something went wrong' } = {};\nmsg // \"Something went wrong\"\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n默认值生效的条件是，对象的属性值严格等于undefined。\n\nvar {x = 3} = {x: undefined};\nx // 3\n\nvar {x = 3} = {x: null};\nx // null\n\n\n1\n2\n3\n4\n5\n\n\n上面代码中，属性x等于null，因为null与undefined不严格相等，所以是个有效的赋值，导致默认值3不会生效。\n\n\n# 注意点\n\n（1）如果要将一个已经声明的变量用于解构赋值，必须非常小心。\n\n// 错误的写法\nlet x;\n{x} = {x: 1};\n// SyntaxError: syntax error\n\n\n1\n2\n3\n4\n\n\n上面代码的写法会报错，因为 JavaScript 引擎会将{x}理解成一个代码块，从而发生语法错误。只有不将大括号写在行首，避免 JavaScript 将其解释为代码块，才能解决这个问题。\n\n// 正确的写法\nlet x;\n({x} = {x: 1});\n\n\n1\n2\n3\n\n\n上面代码将整个解构赋值语句，放在一个圆括号里面，就可以正确执行。关于圆括号与解构赋值的关系，参见下文。\n\n（2）解构赋值允许等号左边的模式之中，不放置任何变量名。因此，可以写出非常古怪的赋值表达式。\n\n({} = [true, false]);\n({} = 'abc');\n({} = []);\n\n\n1\n2\n3\n\n\n上面的表达式虽然毫无意义，但是语法是合法的，可以执行。\n\n（3）由于数组本质是特殊的对象，因此可以对数组进行对象属性的解构。\n\nlet arr = [1, 2, 3];\nlet {0 : first, [arr.length - 1] : last} = arr;\nfirst // 1\nlast // 3\n\n\n1\n2\n3\n4\n\n\n上面代码对数组进行对象解构。数组arr的0键对应的值是1，[arr.length - 1]就是2键，对应的值是3。方括号这种写法，属于“属性名表达式”（参见《对象的扩展》一章）。\n\n\n# 字符串的解构赋值\n\n字符串也可以解构赋值。这是因为此时，字符串被转换成了一个类似数组的对象。\n\nconst [a, b, c, d, e] = 'hello';\na // \"h\"\nb // \"e\"\nc // \"l\"\nd // \"l\"\ne // \"o\"\n\n\n1\n2\n3\n4\n5\n6\n\n\n类似数组的对象都有一个length属性，因此还可以对这个属性解构赋值。\n\nlet {length : len} = 'hello';\nlen // 5\n\n\n1\n2\n\n\n\n# 数值和布尔值的解构赋值\n\n解构赋值时，如果等号右边是数值和布尔值，则会先转为对象。\n\nlet {toString: s} = 123;\ns === Number.prototype.toString // true\n\nlet {toString: s} = true;\ns === Boolean.prototype.toString // true\n\n\n1\n2\n3\n4\n5\n\n\n上面代码中，数值和布尔值的包装对象都有toString属性，因此变量s都能取到值。\n\n解构赋值的规则是，只要等号右边的值不是对象或数组，就先将其转为对象。由于undefined和null无法转为对象，所以对它们进行解构赋值，都会报错。\n\nlet { prop: x } = undefined; // TypeError\nlet { prop: y } = null; // TypeError\n\n\n1\n2\n\n\n\n# 函数参数的解构赋值\n\n函数的参数也可以使用解构赋值。\n\nfunction add([x, y]){\n  return x + y;\n}\n\nadd([1, 2]); // 3\n\n\n1\n2\n3\n4\n5\n\n\n上面代码中，函数add的参数表面上是一个数组，但在传入参数的那一刻，数组参数就被解构成变量x和y。对于函数内部的代码来说，它们能感受到的参数就是x和y。\n\n下面是另一个例子。\n\n[[1, 2], [3, 4]].map(([a, b]) => a + b);\n// [ 3, 7 ]\n\n\n1\n2\n\n\n函数参数的解构也可以使用默认值。\n\nfunction move({x = 0, y = 0} = {}) {\n  return [x, y];\n}\n\nmove({x: 3, y: 8}); // [3, 8]\nmove({x: 3}); // [3, 0]\nmove({}); // [0, 0]\nmove(); // [0, 0]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n上面代码中，函数move的参数是一个对象，通过对这个对象进行解构，得到变量x和y的值。如果解构失败，x和y等于默认值。\n\n注意，下面的写法会得到不一样的结果。\n\nfunction move({x, y} = { x: 0, y: 0 }) {\n  return [x, y];\n}\n\nmove({x: 3, y: 8}); // [3, 8]\nmove({x: 3}); // [3, undefined]\nmove({}); // [undefined, undefined]\nmove(); // [0, 0]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n上面代码是为函数move的参数指定默认值，而不是为变量x和y指定默认值，所以会得到与前一种写法不同的结果。\n\nundefined就会触发函数参数的默认值。\n\n[1, undefined, 3].map((x = 'yes') => x);\n// [ 1, 'yes', 3 ]\n\n\n1\n2\n\n\n\n# 圆括号问题\n\n解构赋值虽然很方便，但是解析起来并不容易。对于编译器来说，一个式子到底是模式，还是表达式，没有办法从一开始就知道，必须解析到（或解析不到）等号才能知道。\n\n由此带来的问题是，如果模式中出现圆括号怎么处理。ES6 的规则是，只要有可能导致解构的歧义，就不得使用圆括号。\n\n但是，这条规则实际上不那么容易辨别，处理起来相当麻烦。因此，建议只要有可能，就不要在模式中放置圆括号。\n\n\n# 不能使用圆括号的情况\n\n以下三种解构赋值不得使用圆括号。\n\n（1）变量声明语句\n\n// 全部报错\nlet [(a)] = [1];\n\nlet {x: (c)} = {};\nlet ({x: c}) = {};\nlet {(x: c)} = {};\nlet {(x): c} = {};\n\nlet { o: ({ p: p }) } = { o: { p: 2 } };\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n上面 6 个语句都会报错，因为它们都是变量声明语句，模式不能使用圆括号。\n\n（2）函数参数\n\n函数参数也属于变量声明，因此不能带有圆括号。\n\n// 报错\nfunction f([(z)]) { return z; }\n// 报错\nfunction f([z,(x)]) { return x; }\n\n\n1\n2\n3\n4\n\n\n（3）赋值语句的模式\n\n// 全部报错\n({ p: a }) = { p: 42 };\n([a]) = [5];\n\n\n1\n2\n3\n\n\n上面代码将整个模式放在圆括号之中，导致报错。\n\n// 报错\n[({ p: a }), { x: c }] = [{}, {}];\n\n\n1\n2\n\n\n上面代码将一部分模式放在圆括号之中，导致报错。\n\n\n# 可以使用圆括号的情况\n\n可以使用圆括号的情况只有一种：赋值语句的非模式部分，可以使用圆括号。\n\n[(b)] = [3]; // 正确\n({ p: (d) } = {}); // 正确\n[(parseInt.prop)] = [3]; // 正确\n\n\n1\n2\n3\n\n\n上面三行语句都可以正确执行，因为首先它们都是赋值语句，而不是声明语句；其次它们的圆括号都不属于模式的一部分。第一行语句中，模式是取数组的第一个成员，跟圆括号无关；第二行语句中，模式是p，而不是d；第三行语句与第一行语句的性质一致。\n\n\n# 用途\n\n变量的解构赋值用途很多。\n\n（1）交换变量的值\n\nlet x = 1;\nlet y = 2;\n\n[x, y] = [y, x];\n\n\n1\n2\n3\n4\n\n\n上面代码交换变量x和y的值，这样的写法不仅简洁，而且易读，语义非常清晰。\n\n（2）从函数返回多个值\n\n函数只能返回一个值，如果要返回多个值，只能将它们放在数组或对象里返回。有了解构赋值，取出这些值就非常方便。\n\n// 返回一个数组\n\nfunction example() {\n  return [1, 2, 3];\n}\nlet [a, b, c] = example();\n\n// 返回一个对象\n\nfunction example() {\n  return {\n    foo: 1,\n    bar: 2\n  };\n}\nlet { foo, bar } = example();\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n（3）函数参数的定义\n\n解构赋值可以方便地将一组参数与变量名对应起来。\n\n// 参数是一组有次序的值\nfunction f([x, y, z]) { ... }\nf([1, 2, 3]);\n\n// 参数是一组无次序的值\nfunction f({x, y, z}) { ... }\nf({z: 3, y: 2, x: 1});\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n（4）提取 JSON 数据\n\n解构赋值对提取 JSON 对象中的数据，尤其有用。\n\nlet jsonData = {\n  id: 42,\n  status: \"OK\",\n  data: [867, 5309]\n};\n\nlet { id, status, data: number } = jsonData;\n\nconsole.log(id, status, number);\n// 42, \"OK\", [867, 5309]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n上面代码可以快速提取 JSON 数据的值。\n\n（5）函数参数的默认值\n\njQuery.ajax = function (url, {\n  async = true,\n  beforeSend = function () {},\n  cache = true,\n  complete = function () {},\n  crossDomain = false,\n  global = true,\n  // ... more config\n} = {}) {\n  // ... do stuff\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n指定参数的默认值，就避免了在函数体内部再写var foo = config.foo || 'default foo';这样的语句。\n\n（6）遍历 Map 结构\n\n任何部署了 Iterator 接口的对象，都可以用for...of循环遍历。Map 结构原生支持 Iterator 接口，配合变量的解构赋值，获取键名和键值就非常方便。\n\nconst map = new Map();\nmap.set('first', 'hello');\nmap.set('second', 'world');\n\nfor (let [key, value] of map) {\n  console.log(key + \" is \" + value);\n}\n// first is hello\n// second is world\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n如果只想获取键名，或者只想获取键值，可以写成下面这样。\n\n// 获取键名\nfor (let [key] of map) {\n  // ...\n}\n\n// 获取键值\nfor (let [,value] of map) {\n  // ...\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n（7）输入模块的指定方法\n\n加载模块时，往往需要指定输入哪些方法。解构赋值使得输入语句非常清晰。\n\nconst { SourceMapConsumer, SourceNode } = require(\"source-map\");\n\n\n1\n",normalizedContent:"# 变量的解构赋值\n\n\n# 数组的解构赋值\n\n\n# 基本用法\n\nes6 允许按照一定模式，从数组和对象中提取值，对变量进行赋值，这被称为解构（destructuring）。\n\n以前，为变量赋值，只能直接指定值。\n\nlet a = 1;\nlet b = 2;\nlet c = 3;\n\n\n1\n2\n3\n\n\nes6 允许写成下面这样。\n\nlet [a, b, c] = [1, 2, 3];\n\n\n1\n\n\n上面代码表示，可以从数组中提取值，按照对应位置，对变量赋值。\n\n本质上，这种写法属于“模式匹配”，只要等号两边的模式相同，左边的变量就会被赋予对应的值。下面是一些使用嵌套数组进行解构的例子。\n\nlet [foo, [[bar], baz]] = [1, [[2], 3]];\nfoo // 1\nbar // 2\nbaz // 3\n\nlet [ , , third] = [\"foo\", \"bar\", \"baz\"];\nthird // \"baz\"\n\nlet [x, , y] = [1, 2, 3];\nx // 1\ny // 3\n\nlet [head, ...tail] = [1, 2, 3, 4];\nhead // 1\ntail // [2, 3, 4]\n\nlet [x, y, ...z] = ['a'];\nx // \"a\"\ny // undefined\nz // []\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n\n如果解构不成功，变量的值就等于undefined。\n\nlet [foo] = [];\nlet [bar, foo] = [1];\n\n\n1\n2\n\n\n以上两种情况都属于解构不成功，foo的值都会等于undefined。\n\n另一种情况是不完全解构，即等号左边的模式，只匹配一部分的等号右边的数组。这种情况下，解构依然可以成功。\n\nlet [x, y] = [1, 2, 3];\nx // 1\ny // 2\n\nlet [a, [b], d] = [1, [2, 3], 4];\na // 1\nb // 2\nd // 4\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n上面两个例子，都属于不完全解构，但是可以成功。\n\n如果等号的右边不是数组（或者严格地说，不是可遍历的结构，参见《iterator》一章），那么将会报错。\n\n// 报错\nlet [foo] = 1;\nlet [foo] = false;\nlet [foo] = nan;\nlet [foo] = undefined;\nlet [foo] = null;\nlet [foo] = {};\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n上面的语句都会报错，因为等号右边的值，要么转为对象以后不具备 iterator 接口（前五个表达式），要么本身就不具备 iterator 接口（最后一个表达式）。\n\n对于 set 结构，也可以使用数组的解构赋值。\n\nlet [x, y, z] = new set(['a', 'b', 'c']);\nx // \"a\"\n\n\n1\n2\n\n\n事实上，只要某种数据结构具有 iterator 接口，都可以采用数组形式的解构赋值。\n\nfunction* fibs() {\n  let a = 0;\n  let b = 1;\n  while (true) {\n    yield a;\n    [a, b] = [b, a + b];\n  }\n}\n\nlet [first, second, third, fourth, fifth, sixth] = fibs();\nsixth // 5\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n上面代码中，fibs是一个 generator 函数（参见《generator 函数》一章），原生具有 iterator 接口。解构赋值会依次从这个接口获取值。\n\n\n# 默认值\n\n解构赋值允许指定默认值。\n\nlet [foo = true] = [];\nfoo // true\n\nlet [x, y = 'b'] = ['a']; // x='a', y='b'\nlet [x, y = 'b'] = ['a', undefined]; // x='a', y='b'\n\n\n1\n2\n3\n4\n5\n\n\n注意，es6 内部使用严格相等运算符（===），判断一个位置是否有值。所以，只有 当一个数组成员严格等于undefined，默认值才会生效。\n\nlet [x = 1] = [undefined];\nx // 1\n\nlet [x = 1] = [null];\nx // null\n\n\n1\n2\n3\n4\n5\n\n\n上面代码中，如果一个数组成员是null，默认值就不会生效，因为null不严格等于undefined。\n\n如果默认值是一个表达式，那么这个表达式是惰性求值的，即只有在用到的时候，才会求值。\n\nfunction f() {\n  console.log('aaa');\n}\n\nlet [x = f()] = [1];\n\n\n1\n2\n3\n4\n5\n\n\n上面代码中，因为x能取到值，所以函数f根本不会执行。上面的代码其实等价于下面的代码。\n\nlet x;\nif ([1][0] === undefined) {\n  x = f();\n} else {\n  x = [1][0];\n}\n\n\n1\n2\n3\n4\n5\n6\n\n\n默认值可以引用解构赋值的其他变量，但该变量必须已经声明。\n\nlet [x = 1, y = x] = [];     // x=1; y=1\nlet [x = 1, y = x] = [2];    // x=2; y=2\nlet [x = 1, y = x] = [1, 2]; // x=1; y=2\nlet [x = y, y = 1] = [];     // referenceerror: y is not defined\n\n\n1\n2\n3\n4\n\n\n上面最后一个表达式之所以会报错，是因为x用y做默认值时，y还没有声明。\n\n\n# 对象的解构赋值\n\n\n# 简介\n\n解构不仅可以用于数组，还可以用于对象。\n\nlet { foo, bar } = { foo: 'aaa', bar: 'bbb' };\nfoo // \"aaa\"\nbar // \"bbb\"\n\n\n1\n2\n3\n\n\n对象的解构与数组有一个重要的不同。数组的元素是按次序排列的，变量的取值由它的位置决定；而对象的属性没有次序，变量必须与属性同名，才能取到正确的值。\n\nlet { bar, foo } = { foo: 'aaa', bar: 'bbb' };\nfoo // \"aaa\"\nbar // \"bbb\"\n\nlet { baz } = { foo: 'aaa', bar: 'bbb' };\nbaz // undefined\n\n\n1\n2\n3\n4\n5\n6\n\n\n上面代码的第一个例子，等号左边的两个变量的次序，与等号右边两个同名属性的次序不一致，但是对取值完全没有影响。第二个例子的变量没有对应的同名属性，导致取不到值，最后等于undefined。\n\n如果解构失败，变量的值等于undefined。\n\nlet {foo} = {bar: 'baz'};\nfoo // undefined\n\n\n1\n2\n\n\n上面代码中，等号右边的对象没有foo属性，所以变量foo取不到值，所以等于undefined。\n\n对象的解构赋值，可以很方便地将现有对象的方法，赋值到某个变量。\n\n// 例一\nlet { log, sin, cos } = math;\n\n// 例二\nconst { log } = console;\nlog('hello') // hello\n\n\n1\n2\n3\n4\n5\n6\n\n\n上面代码的例一将math对象的对数、正弦、余弦三个方法，赋值到对应的变量上，使用起来就会方便很多。例二将console.log赋值到log变量。\n\n如果变量名与属性名不一致，必须写成下面这样。\n\nlet { foo: baz } = { foo: 'aaa', bar: 'bbb' };\nbaz // \"aaa\"\n\nlet obj = { first: 'hello', last: 'world' };\nlet { first: f, last: l } = obj;\nf // 'hello'\nl // 'world'\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n这实际上说明，对象的解构赋值是下面形式的简写（参见《对象的扩展》一章）。\n\nlet { foo: foo, bar: bar } = { foo: 'aaa', bar: 'bbb' };\n\n\n1\n\n\n也就是说，对象的解构赋值的内部机制，是先找到同名属性，然后再赋给对应的变量。真正被赋值的是后者，而不是前者。\n\nlet { foo: baz } = { foo: 'aaa', bar: 'bbb' };\nbaz // \"aaa\"\nfoo // error: foo is not defined\n\n\n1\n2\n3\n\n\n上面代码中，foo是匹配的模式，baz才是变量。真正被赋值的是变量baz，而不是模式foo。\n\n与数组一样，解构也可以用于嵌套结构的对象。\n\nlet obj = {\n  p: [\n    'hello',\n    { y: 'world' }\n  ]\n};\n\nlet { p: [x, { y }] } = obj;\nx // \"hello\"\ny // \"world\"\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n注意，这时p是模式，不是变量，因此不会被赋值。如果p也要作为变量赋值，可以写成下面这样。\n\nlet obj = {\n  p: [\n    'hello',\n    { y: 'world' }\n  ]\n};\n\nlet { p, p: [x, { y }] } = obj;\nx // \"hello\"\ny // \"world\"\np // [\"hello\", {y: \"world\"}]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n下面是另一个例子。\n\nconst node = {\n  loc: {\n    start: {\n      line: 1,\n      column: 5\n    }\n  }\n};\n\nlet { loc, loc: { start }, loc: { start: { line }} } = node;\nline // 1\nloc  // object {start: object}\nstart // object {line: 1, column: 5}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n上面代码有三次解构赋值，分别是对loc、start、line三个属性的解构赋值。注意，最后一次对line属性的解构赋值之中，只有line是变量，loc和start都是模式，不是变量。\n\n下面是嵌套赋值的例子。\n\nlet obj = {};\nlet arr = [];\n\n({ foo: obj.prop, bar: arr[0] } = { foo: 123, bar: true });\n\nobj // {prop:123}\narr // [true]\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n如果解构模式是嵌套的对象，而且子对象所在的父属性不存在，那么将会报错。\n\n// 报错\nlet {foo: {bar}} = {baz: 'baz'};\n\n\n1\n2\n\n\n上面代码中，等号左边对象的foo属性，对应一个子对象。该子对象的bar属性，解构时会报错。原因很简单，因为foo这时等于undefined，再取子属性就会报错。\n\n注意，对象的解构赋值可以取到继承的属性。\n\nconst obj1 = {};\nconst obj2 = { foo: 'bar' };\nobject.setprototypeof(obj1, obj2);\n\nconst { foo } = obj1;\nfoo // \"bar\"\n\n\n1\n2\n3\n4\n5\n6\n\n\n上面代码中，对象obj1的原型对象是obj2。foo属性不是obj1自身的属性，而是继承自obj2的属性，解构赋值可以取到这个属性。\n\n\n# 默认值\n\n对象的解构也可以指定默认值。\n\nvar {x = 3} = {};\nx // 3\n\nvar {x, y = 5} = {x: 1};\nx // 1\ny // 5\n\nvar {x: y = 3} = {};\ny // 3\n\nvar {x: y = 3} = {x: 5};\ny // 5\n\nvar { message: msg = 'something went wrong' } = {};\nmsg // \"something went wrong\"\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n默认值生效的条件是，对象的属性值严格等于undefined。\n\nvar {x = 3} = {x: undefined};\nx // 3\n\nvar {x = 3} = {x: null};\nx // null\n\n\n1\n2\n3\n4\n5\n\n\n上面代码中，属性x等于null，因为null与undefined不严格相等，所以是个有效的赋值，导致默认值3不会生效。\n\n\n# 注意点\n\n（1）如果要将一个已经声明的变量用于解构赋值，必须非常小心。\n\n// 错误的写法\nlet x;\n{x} = {x: 1};\n// syntaxerror: syntax error\n\n\n1\n2\n3\n4\n\n\n上面代码的写法会报错，因为 javascript 引擎会将{x}理解成一个代码块，从而发生语法错误。只有不将大括号写在行首，避免 javascript 将其解释为代码块，才能解决这个问题。\n\n// 正确的写法\nlet x;\n({x} = {x: 1});\n\n\n1\n2\n3\n\n\n上面代码将整个解构赋值语句，放在一个圆括号里面，就可以正确执行。关于圆括号与解构赋值的关系，参见下文。\n\n（2）解构赋值允许等号左边的模式之中，不放置任何变量名。因此，可以写出非常古怪的赋值表达式。\n\n({} = [true, false]);\n({} = 'abc');\n({} = []);\n\n\n1\n2\n3\n\n\n上面的表达式虽然毫无意义，但是语法是合法的，可以执行。\n\n（3）由于数组本质是特殊的对象，因此可以对数组进行对象属性的解构。\n\nlet arr = [1, 2, 3];\nlet {0 : first, [arr.length - 1] : last} = arr;\nfirst // 1\nlast // 3\n\n\n1\n2\n3\n4\n\n\n上面代码对数组进行对象解构。数组arr的0键对应的值是1，[arr.length - 1]就是2键，对应的值是3。方括号这种写法，属于“属性名表达式”（参见《对象的扩展》一章）。\n\n\n# 字符串的解构赋值\n\n字符串也可以解构赋值。这是因为此时，字符串被转换成了一个类似数组的对象。\n\nconst [a, b, c, d, e] = 'hello';\na // \"h\"\nb // \"e\"\nc // \"l\"\nd // \"l\"\ne // \"o\"\n\n\n1\n2\n3\n4\n5\n6\n\n\n类似数组的对象都有一个length属性，因此还可以对这个属性解构赋值。\n\nlet {length : len} = 'hello';\nlen // 5\n\n\n1\n2\n\n\n\n# 数值和布尔值的解构赋值\n\n解构赋值时，如果等号右边是数值和布尔值，则会先转为对象。\n\nlet {tostring: s} = 123;\ns === number.prototype.tostring // true\n\nlet {tostring: s} = true;\ns === boolean.prototype.tostring // true\n\n\n1\n2\n3\n4\n5\n\n\n上面代码中，数值和布尔值的包装对象都有tostring属性，因此变量s都能取到值。\n\n解构赋值的规则是，只要等号右边的值不是对象或数组，就先将其转为对象。由于undefined和null无法转为对象，所以对它们进行解构赋值，都会报错。\n\nlet { prop: x } = undefined; // typeerror\nlet { prop: y } = null; // typeerror\n\n\n1\n2\n\n\n\n# 函数参数的解构赋值\n\n函数的参数也可以使用解构赋值。\n\nfunction add([x, y]){\n  return x + y;\n}\n\nadd([1, 2]); // 3\n\n\n1\n2\n3\n4\n5\n\n\n上面代码中，函数add的参数表面上是一个数组，但在传入参数的那一刻，数组参数就被解构成变量x和y。对于函数内部的代码来说，它们能感受到的参数就是x和y。\n\n下面是另一个例子。\n\n[[1, 2], [3, 4]].map(([a, b]) => a + b);\n// [ 3, 7 ]\n\n\n1\n2\n\n\n函数参数的解构也可以使用默认值。\n\nfunction move({x = 0, y = 0} = {}) {\n  return [x, y];\n}\n\nmove({x: 3, y: 8}); // [3, 8]\nmove({x: 3}); // [3, 0]\nmove({}); // [0, 0]\nmove(); // [0, 0]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n上面代码中，函数move的参数是一个对象，通过对这个对象进行解构，得到变量x和y的值。如果解构失败，x和y等于默认值。\n\n注意，下面的写法会得到不一样的结果。\n\nfunction move({x, y} = { x: 0, y: 0 }) {\n  return [x, y];\n}\n\nmove({x: 3, y: 8}); // [3, 8]\nmove({x: 3}); // [3, undefined]\nmove({}); // [undefined, undefined]\nmove(); // [0, 0]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n上面代码是为函数move的参数指定默认值，而不是为变量x和y指定默认值，所以会得到与前一种写法不同的结果。\n\nundefined就会触发函数参数的默认值。\n\n[1, undefined, 3].map((x = 'yes') => x);\n// [ 1, 'yes', 3 ]\n\n\n1\n2\n\n\n\n# 圆括号问题\n\n解构赋值虽然很方便，但是解析起来并不容易。对于编译器来说，一个式子到底是模式，还是表达式，没有办法从一开始就知道，必须解析到（或解析不到）等号才能知道。\n\n由此带来的问题是，如果模式中出现圆括号怎么处理。es6 的规则是，只要有可能导致解构的歧义，就不得使用圆括号。\n\n但是，这条规则实际上不那么容易辨别，处理起来相当麻烦。因此，建议只要有可能，就不要在模式中放置圆括号。\n\n\n# 不能使用圆括号的情况\n\n以下三种解构赋值不得使用圆括号。\n\n（1）变量声明语句\n\n// 全部报错\nlet [(a)] = [1];\n\nlet {x: (c)} = {};\nlet ({x: c}) = {};\nlet {(x: c)} = {};\nlet {(x): c} = {};\n\nlet { o: ({ p: p }) } = { o: { p: 2 } };\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n上面 6 个语句都会报错，因为它们都是变量声明语句，模式不能使用圆括号。\n\n（2）函数参数\n\n函数参数也属于变量声明，因此不能带有圆括号。\n\n// 报错\nfunction f([(z)]) { return z; }\n// 报错\nfunction f([z,(x)]) { return x; }\n\n\n1\n2\n3\n4\n\n\n（3）赋值语句的模式\n\n// 全部报错\n({ p: a }) = { p: 42 };\n([a]) = [5];\n\n\n1\n2\n3\n\n\n上面代码将整个模式放在圆括号之中，导致报错。\n\n// 报错\n[({ p: a }), { x: c }] = [{}, {}];\n\n\n1\n2\n\n\n上面代码将一部分模式放在圆括号之中，导致报错。\n\n\n# 可以使用圆括号的情况\n\n可以使用圆括号的情况只有一种：赋值语句的非模式部分，可以使用圆括号。\n\n[(b)] = [3]; // 正确\n({ p: (d) } = {}); // 正确\n[(parseint.prop)] = [3]; // 正确\n\n\n1\n2\n3\n\n\n上面三行语句都可以正确执行，因为首先它们都是赋值语句，而不是声明语句；其次它们的圆括号都不属于模式的一部分。第一行语句中，模式是取数组的第一个成员，跟圆括号无关；第二行语句中，模式是p，而不是d；第三行语句与第一行语句的性质一致。\n\n\n# 用途\n\n变量的解构赋值用途很多。\n\n（1）交换变量的值\n\nlet x = 1;\nlet y = 2;\n\n[x, y] = [y, x];\n\n\n1\n2\n3\n4\n\n\n上面代码交换变量x和y的值，这样的写法不仅简洁，而且易读，语义非常清晰。\n\n（2）从函数返回多个值\n\n函数只能返回一个值，如果要返回多个值，只能将它们放在数组或对象里返回。有了解构赋值，取出这些值就非常方便。\n\n// 返回一个数组\n\nfunction example() {\n  return [1, 2, 3];\n}\nlet [a, b, c] = example();\n\n// 返回一个对象\n\nfunction example() {\n  return {\n    foo: 1,\n    bar: 2\n  };\n}\nlet { foo, bar } = example();\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n（3）函数参数的定义\n\n解构赋值可以方便地将一组参数与变量名对应起来。\n\n// 参数是一组有次序的值\nfunction f([x, y, z]) { ... }\nf([1, 2, 3]);\n\n// 参数是一组无次序的值\nfunction f({x, y, z}) { ... }\nf({z: 3, y: 2, x: 1});\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n（4）提取 json 数据\n\n解构赋值对提取 json 对象中的数据，尤其有用。\n\nlet jsondata = {\n  id: 42,\n  status: \"ok\",\n  data: [867, 5309]\n};\n\nlet { id, status, data: number } = jsondata;\n\nconsole.log(id, status, number);\n// 42, \"ok\", [867, 5309]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n上面代码可以快速提取 json 数据的值。\n\n（5）函数参数的默认值\n\njquery.ajax = function (url, {\n  async = true,\n  beforesend = function () {},\n  cache = true,\n  complete = function () {},\n  crossdomain = false,\n  global = true,\n  // ... more config\n} = {}) {\n  // ... do stuff\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n指定参数的默认值，就避免了在函数体内部再写var foo = config.foo || 'default foo';这样的语句。\n\n（6）遍历 map 结构\n\n任何部署了 iterator 接口的对象，都可以用for...of循环遍历。map 结构原生支持 iterator 接口，配合变量的解构赋值，获取键名和键值就非常方便。\n\nconst map = new map();\nmap.set('first', 'hello');\nmap.set('second', 'world');\n\nfor (let [key, value] of map) {\n  console.log(key + \" is \" + value);\n}\n// first is hello\n// second is world\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n如果只想获取键名，或者只想获取键值，可以写成下面这样。\n\n// 获取键名\nfor (let [key] of map) {\n  // ...\n}\n\n// 获取键值\nfor (let [,value] of map) {\n  // ...\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n（7）输入模块的指定方法\n\n加载模块时，往往需要指定输入哪些方法。解构赋值使得输入语句非常清晰。\n\nconst { sourcemapconsumer, sourcenode } = require(\"source-map\");\n\n\n1\n",charsets:{cjk:!0}},{title:"字符串的新增方法",frontmatter:{title:"字符串的新增方法",date:"2020-02-09T16:00:29.000Z",permalink:"/pages/a650b4a0ebfc9350",author:"阮一峰",categories:["《ES6 教程》笔记"],tags:["ES6"],readingShow:"top"},regularPath:"/06.%E4%B9%A6%E7%B1%8D/05.%E3%80%8AES6%20%E6%95%99%E7%A8%8B%E3%80%8B%E7%AC%94%E8%AE%B0/05.%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%96%B0%E5%A2%9E%E6%96%B9%E6%B3%95.html",relativePath:"06.书籍/05.《ES6 教程》笔记/05.字符串的新增方法.md",key:"v-98b238e6",path:"/pages/a650b4a0ebfc9350/",headers:[{level:2,title:"String.fromCodePoint()",slug:"string-fromcodepoint",normalizedTitle:"string.fromcodepoint()",charIndex:32},{level:2,title:"String.raw()",slug:"string-raw",normalizedTitle:"string.raw()",charIndex:630},{level:2,title:"实例方法：codePointAt()",slug:"实例方法-codepointat",normalizedTitle:"实例方法：codepointat()",charIndex:1613},{level:2,title:"实例方法：normalize()",slug:"实例方法-normalize",normalizedTitle:"实例方法：normalize()",charIndex:3275},{level:2,title:"实例方法：includes() 包含, startsWith() 头部包含, endsWith() 末尾包含",slug:"实例方法-includes-包含-startswith-头部包含-endswith-末尾包含",normalizedTitle:"实例方法：includes() 包含, startswith() 头部包含, endswith() 末尾包含",charIndex:4453},{level:2,title:"实例方法：repeat() 重复",slug:"实例方法-repeat-重复",normalizedTitle:"实例方法：repeat() 重复",charIndex:5046},{level:2,title:"实例方法：padStart() 补全头部，padEnd() 补全末尾",slug:"实例方法-padstart-补全头部-padend-补全末尾",normalizedTitle:"实例方法：padstart() 补全头部，padend() 补全末尾",charIndex:5579},{level:2,title:"实例方法：trimStart() 修剪头部，trimEnd() 修剪末尾",slug:"实例方法-trimstart-修剪头部-trimend-修剪末尾",normalizedTitle:"实例方法：trimstart() 修剪头部，trimend() 修剪末尾",charIndex:6504},{level:2,title:"实例方法：matchAll()",slug:"实例方法-matchall",normalizedTitle:"实例方法：matchall()",charIndex:6936}],excerpt:'<h1 id="字符串的新增方法"><a class="header-anchor" href="#字符串的新增方法">#</a> 字符串的新增方法</h1>\n<p>本章介绍字符串对象的新增方法。</p>\n<h2 id="string-fromcodepoint"><a class="header-anchor" href="#string-fromcodepoint">#</a> String.fromCodePoint()</h2>\n<p>ES5 提供<code>String.fromCharCode()</code>方法，用于从 Unicode 码点返回对应字符，但是这个方法不能识别码点大于<code>0xFFFF</code>的字符。</p>\n\x3c!--beforebegin--\x3e<div class="language-javascript line-numbers-mode">\x3c!--afterbegin--\x3e<pre v-pre class="language-javascript"><code>String<span class="token punctuation">.</span><span class="token function">fromCharCode</span><span class="token punctuation">(</span><span class="token number">0x20BB7</span><span class="token punctuation">)</span>\n<span class="token comment">// "ஷ"</span>\n</code></pre>\n<div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br></div>\x3c!--beforeend--\x3e</div>\x3c!--afterend--\x3e',lastUpdated:"2022/9/22 下午4:28:09",lastUpdatedTimestamp:1663835289e3,headersStr:"String.fromCodePoint() String.raw() 实例方法：codePointAt() 实例方法：normalize() 实例方法：includes() 包含, startsWith() 头部包含, endsWith() 末尾包含 实例方法：repeat() 重复 实例方法：padStart() 补全头部，padEnd() 补全末尾 实例方法：trimStart() 修剪头部，trimEnd() 修剪末尾 实例方法：matchAll()",content:"# 字符串的新增方法\n\n本章介绍字符串对象的新增方法。\n\n\n# String.fromCodePoint()\n\nES5 提供String.fromCharCode()方法，用于从 Unicode 码点返回对应字符，但是这个方法不能识别码点大于0xFFFF的字符。\n\nString.fromCharCode(0x20BB7)\n// \"ஷ\"\n\n\n1\n2\n\n\n上面代码中，String.fromCharCode()不能识别大于0xFFFF的码点，所以0x20BB7就发生了溢出，最高位2被舍弃了，最后返回码点U+0BB7对应的字符，而不是码点U+20BB7对应的字符。\n\nES6 提供了String.fromCodePoint()方法，可以识别大于0xFFFF的字符，弥补了String.fromCharCode()方法的不足。在作用上，正好与下面的codePointAt()方法相反。\n\nString.fromCodePoint(0x20BB7)\n// \"𠮷\"\nString.fromCodePoint(0x78, 0x1f680, 0x79) === 'x\\uD83D\\uDE80y'\n// true\n\n\n1\n2\n3\n4\n\n\n上面代码中，如果String.fromCodePoint方法有多个参数，则它们会被合并成一个字符串返回。\n\n注意，fromCodePoint方法定义在String对象上，而codePointAt方法定义在字符串的实例对象上。\n\n\n# String.raw()\n\nES6 还为原生的 String 对象，提供了一个raw()方法。该方法返回一个斜杠都被转义（即斜杠前面再加一个斜杠）的字符串，往往用于模板字符串的处理方法。\n\nString.raw`Hi\\n${2+3}!`\n// 实际返回 \"Hi\\\\n5!\"，显示的是转义后的结果 \"Hi\\n5!\"\n\nString.raw`Hi\\u000A!`;\n// 实际返回 \"Hi\\\\u000A!\"，显示的是转义后的结果 \"Hi\\u000A!\"\n\n\n1\n2\n3\n4\n5\n\n\n如果原字符串的斜杠已经转义，那么String.raw()会进行再次转义。\n\nString.raw`Hi\\\\n`\n// 返回 \"Hi\\\\\\\\n\"\n\nString.raw`Hi\\\\n` === \"Hi\\\\\\\\n\" // true\n\n\n1\n2\n3\n4\n\n\nString.raw()方法可以作为处理模板字符串的基本方法，它会将所有变量替换，而且对斜杠进行转义，方便下一步作为字符串来使用。\n\nString.raw()本质上是一个正常的函数，只是专用于模板字符串的标签函数。如果写成正常函数的形式，它的第一个参数，应该是一个具有raw属性的对象，且raw属性的值应该是一个数组，对应模板字符串解析后的值。\n\n// `foo${1 + 2}bar`\n// 等同于\nString.raw({ raw: ['foo', 'bar'] }, 1 + 2) // \"foo3bar\"\n\n\n1\n2\n3\n\n\n上面代码中，String.raw()方法的第一个参数是一个对象，它的raw属性等同于原始的模板字符串解析后得到的数组。\n\n作为函数，String.raw()的代码实现基本如下。\n\nString.raw = function (strings, ...values) {\n  let output = '';\n  let index;\n  for (index = 0; index < values.length; index++) {\n    output += strings.raw[index] + values[index];\n  }\n\n  output += strings.raw[index]\n  return output;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n\n# 实例方法：codePointAt()\n\nJavaScript 内部，字符以 UTF-16 的格式储存，每个字符固定为2个字节。对于那些需要4个字节储存的字符（Unicode 码点大于0xFFFF的字符），JavaScript 会认为它们是两个字符。\n\nvar s = \"𠮷\";\n\ns.length // 2\ns.charAt(0) // ''\ns.charAt(1) // ''\ns.charCodeAt(0) // 55362\ns.charCodeAt(1) // 57271\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n上面代码中，汉字“𠮷”（注意，这个字不是“吉祥”的“吉”）的码点是0x20BB7，UTF-16 编码为0xD842 0xDFB7（十进制为55362 57271），需要4个字节储存。对于这种4个字节的字符，JavaScript 不能正确处理，字符串长度会误判为2，而且charAt()方法无法读取整个字符，charCodeAt()方法只能分别返回前两个字节和后两个字节的值。\n\nES6 提供了codePointAt()方法，能够正确处理 4 个字节储存的字符，返回一个字符的码点。\n\nlet s = '𠮷a';\n\ns.codePointAt(0) // 134071\ns.codePointAt(1) // 57271\n\ns.codePointAt(2) // 97\n\n\n1\n2\n3\n4\n5\n6\n\n\ncodePointAt()方法的参数，是字符在字符串中的位置（从 0 开始）。上面代码中，JavaScript 将“𠮷a”视为三个字符，codePointAt 方法在第一个字符上，正确地识别了“𠮷”，返回了它的十进制码点 134071（即十六进制的20BB7）。在第二个字符（即“𠮷”的后两个字节）和第三个字符“a”上，codePointAt()方法的结果与charCodeAt()方法相同。\n\n总之，codePointAt()方法会正确返回 32 位的 UTF-16 字符的码点。对于那些两个字节储存的常规字符，它的返回结果与charCodeAt()方法相同。\n\ncodePointAt()方法返回的是码点的十进制值，如果想要十六进制的值，可以使用toString()方法转换一下。\n\nlet s = '𠮷a';\n\ns.codePointAt(0).toString(16) // \"20bb7\"\ns.codePointAt(2).toString(16) // \"61\"\n\n\n1\n2\n3\n4\n\n\n你可能注意到了，codePointAt()方法的参数，仍然是不正确的。比如，上面代码中，字符a在字符串s的正确位置序号应该是 1，但是必须向codePointAt()方法传入 2。解决这个问题的一个办法是使用for...of循环，因为它会正确识别 32 位的 UTF-16 字符。\n\nlet s = '𠮷a';\nfor (let ch of s) {\n  console.log(ch.codePointAt(0).toString(16));\n}\n// 20bb7\n// 61\n\n\n1\n2\n3\n4\n5\n6\n\n\n另一种方法也可以，使用扩展运算符（...）进行展开运算。\n\nlet arr = [...'𠮷a']; // arr.length === 2\narr.forEach(\n  ch => console.log(ch.codePointAt(0).toString(16))\n);\n// 20bb7\n// 61\n\n\n1\n2\n3\n4\n5\n6\n\n\ncodePointAt()方法是测试一个字符由两个字节还是由四个字节组成的最简单方法。\n\nfunction is32Bit(c) {\n  return c.codePointAt(0) > 0xFFFF;\n}\n\nis32Bit(\"𠮷\") // true\nis32Bit(\"a\") // false\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# 实例方法：normalize()\n\n许多欧洲语言有语调符号和重音符号。为了表示它们，Unicode 提供了两种方法。一种是直接提供带重音符号的字符，比如Ǒ（\\u01D1）。另一种是提供合成符号（combining character），即原字符与重音符号的合成，两个字符合成一个字符，比如O（\\u004F）和ˇ（\\u030C）合成Ǒ（\\u004F\\u030C）。\n\n这两种表示方法，在视觉和语义上都等价，但是 JavaScript 不能识别。\n\n'\\u01D1'==='\\u004F\\u030C' //false\n\n'\\u01D1'.length // 1\n'\\u004F\\u030C'.length // 2\n\n\n1\n2\n3\n4\n\n\n上面代码表示，JavaScript 将合成字符视为两个字符，导致两种表示方法不相等。\n\nES6 提供字符串实例的normalize()方法，用来将字符的不同表示方法统一为同样的形式，这称为 Unicode 正规化。\n\n'\\u01D1'.normalize() === '\\u004F\\u030C'.normalize()\n// true\n\n\n1\n2\n\n\nnormalize方法可以接受一个参数来指定normalize的方式，参数的四个可选值如下。\n\n * NFC，默认参数，表示“标准等价合成”（Normalization Form Canonical Composition），返回多个简单字符的合成字符。所谓“标准等价”指的是视觉和语义上的等价。\n * NFD，表示“标准等价分解”（Normalization Form Canonical Decomposition），即在标准等价的前提下，返回合成字符分解的多个简单字符。\n * NFKC，表示“兼容等价合成”（Normalization Form Compatibility Composition），返回合成字符。所谓“兼容等价”指的是语义上存在等价，但视觉上不等价，比如“囍”和“喜喜”。（这只是用来举例，normalize方法不能识别中文。）\n * NFKD，表示“兼容等价分解”（Normalization Form Compatibility Decomposition），即在兼容等价的前提下，返回合成字符分解的多个简单字符。\n\n'\\u004F\\u030C'.normalize('NFC').length // 1\n'\\u004F\\u030C'.normalize('NFD').length // 2\n\n\n1\n2\n\n\n上面代码表示，NFC参数返回字符的合成形式，NFD参数返回字符的分解形式。\n\n不过，normalize方法目前不能识别三个或三个以上字符的合成。这种情况下，还是只能使用正则表达式，通过 Unicode 编号区间判断。\n\n\n# 实例方法：includes() 包含, startsWith() 头部包含, endsWith() 末尾包含\n\n传统上，JavaScript 只有indexOf方法，可以用来确定一个字符串是否包含在另一个字符串中。ES6 又提供了三种新方法。\n\n * includes()：返回布尔值，表示是否找到了参数字符串。\n * startsWith()：返回布尔值，表示参数字符串是否在原字符串的头部。\n * endsWith()：返回布尔值，表示参数字符串是否在原字符串的尾部。\n\nlet s = 'Hello world!';\n\ns.startsWith('Hello') // true\ns.endsWith('!') // true\ns.includes('o') // true\n\n\n1\n2\n3\n4\n5\n\n\n这三个方法都支持第二个参数，表示开始搜索的位置。\n\nlet s = 'Hello world!';\n\ns.startsWith('world', 6) // true\ns.endsWith('Hello', 5) // true\ns.includes('Hello', 6) // false\n\n\n1\n2\n3\n4\n5\n\n\n上面代码表示，使用第二个参数n时，endsWith的行为与其他两个方法有所不同。它针对前n个字符，而其他两个方法针对从第n个位置直到字符串结束。\n\n\n# 实例方法：repeat() 重复\n\nrepeat方法返回一个新字符串，表示将原字符串重复n次。\n\n'x'.repeat(3) // \"xxx\"\n'hello'.repeat(2) // \"hellohello\"\n'na'.repeat(0) // \"\"\n\n\n1\n2\n3\n\n\n参数如果是小数，会被取整。\n\n'na'.repeat(2.9) // \"nana\"\n\n\n1\n\n\n如果repeat的参数是负数或者Infinity，会报错。\n\n'na'.repeat(Infinity)\n// RangeError\n'na'.repeat(-1)\n// RangeError\n\n\n1\n2\n3\n4\n\n\n但是，如果参数是 0 到-1 之间的小数，则等同于 0，这是因为会先进行取整运算。0 到-1 之间的小数，取整以后等于-0，repeat视同为 0。\n\n'na'.repeat(-0.9) // \"\"\n\n\n1\n\n\n参数NaN等同于 0。\n\n'na'.repeat(NaN) // \"\"\n\n\n1\n\n\n如果repeat的参数是字符串，则会先转换成数字。\n\n'na'.repeat('na') // \"\"\n'na'.repeat('3') // \"nanana\"\n\n\n1\n2\n\n\n\n# 实例方法：padStart() 补全头部，padEnd() 补全末尾\n\nES2017 引入了字符串补全长度的功能。如果某个字符串不够指定长度，会在头部或尾部补全。padStart()用于头部补全，padEnd()用于尾部补全。\n\n'x'.padStart(5, 'ab') // 'ababx'\n'x'.padStart(4, 'ab') // 'abax'\n\n'x'.padEnd(5, 'ab') // 'xabab'\n'x'.padEnd(4, 'ab') // 'xaba'\n\n\n1\n2\n3\n4\n5\n\n\n上面代码中，padStart()和padEnd()一共接受两个参数，第一个参数是字符串补全生效的最大长度，第二个参数是用来补全的字符串。\n\n如果原字符串的长度，等于或大于最大长度，则字符串补全不生效，返回原字符串。\n\n'xxx'.padStart(2, 'ab') // 'xxx'\n'xxx'.padEnd(2, 'ab') // 'xxx'\n\n\n1\n2\n\n\n如果用来补全的字符串与原字符串，两者的长度之和超过了最大长度，则会截去超出位数的补全字符串。\n\n'abc'.padStart(10, '0123456789')\n// '0123456abc'\n\n\n1\n2\n\n\n如果省略第二个参数，默认使用空格补全长度。\n\n'x'.padStart(4) // '   x'\n'x'.padEnd(4) // 'x   '\n\n\n1\n2\n\n\npadStart()的常见用途是为数值补全指定位数。下面代码生成 10 位的数值字符串。\n\n'1'.padStart(10, '0') // \"0000000001\"\n'12'.padStart(10, '0') // \"0000000012\"\n'123456'.padStart(10, '0') // \"0000123456\"\n\n\n1\n2\n3\n\n\n另一个用途是提示字符串格式。\n\n'12'.padStart(10, 'YYYY-MM-DD') // \"YYYY-MM-12\"\n'09-12'.padStart(10, 'YYYY-MM-DD') // \"YYYY-09-12\"\n\n\n1\n2\n\n\n\n# 实例方法：trimStart() 修剪头部，trimEnd() 修剪末尾\n\nES2019 对字符串实例新增了trimStart()和trimEnd()这两个方法。它们的行为与trim()一致，trimStart()消除字符串头部的空格，trimEnd()消除尾部的空格。它们返回的都是新字符串，不会修改原始字符串。\n\nconst s = '  abc  ';\n\ns.trim() // \"abc\"\ns.trimStart() // \"abc  \"\ns.trimEnd() // \"  abc\"\n\n\n1\n2\n3\n4\n5\n\n\n上面代码中，trimStart()只消除头部的空格，保留尾部的空格。trimEnd()也是类似行为。\n\n除了空格键，这两个方法对字符串头部（或尾部）的 tab 键、换行符等不可见的空白符号也有效。\n\n浏览器还部署了额外的两个方法，trimLeft()是trimStart()的别名，trimRight()是trimEnd()的别名。\n\n\n# 实例方法：matchAll()\n\nmatchAll()方法返回一个正则表达式在当前字符串的所有匹配，详见《正则的扩展》的一章。",normalizedContent:"# 字符串的新增方法\n\n本章介绍字符串对象的新增方法。\n\n\n# string.fromcodepoint()\n\nes5 提供string.fromcharcode()方法，用于从 unicode 码点返回对应字符，但是这个方法不能识别码点大于0xffff的字符。\n\nstring.fromcharcode(0x20bb7)\n// \"ஷ\"\n\n\n1\n2\n\n\n上面代码中，string.fromcharcode()不能识别大于0xffff的码点，所以0x20bb7就发生了溢出，最高位2被舍弃了，最后返回码点u+0bb7对应的字符，而不是码点u+20bb7对应的字符。\n\nes6 提供了string.fromcodepoint()方法，可以识别大于0xffff的字符，弥补了string.fromcharcode()方法的不足。在作用上，正好与下面的codepointat()方法相反。\n\nstring.fromcodepoint(0x20bb7)\n// \"𠮷\"\nstring.fromcodepoint(0x78, 0x1f680, 0x79) === 'x\\ud83d\\ude80y'\n// true\n\n\n1\n2\n3\n4\n\n\n上面代码中，如果string.fromcodepoint方法有多个参数，则它们会被合并成一个字符串返回。\n\n注意，fromcodepoint方法定义在string对象上，而codepointat方法定义在字符串的实例对象上。\n\n\n# string.raw()\n\nes6 还为原生的 string 对象，提供了一个raw()方法。该方法返回一个斜杠都被转义（即斜杠前面再加一个斜杠）的字符串，往往用于模板字符串的处理方法。\n\nstring.raw`hi\\n${2+3}!`\n// 实际返回 \"hi\\\\n5!\"，显示的是转义后的结果 \"hi\\n5!\"\n\nstring.raw`hi\\u000a!`;\n// 实际返回 \"hi\\\\u000a!\"，显示的是转义后的结果 \"hi\\u000a!\"\n\n\n1\n2\n3\n4\n5\n\n\n如果原字符串的斜杠已经转义，那么string.raw()会进行再次转义。\n\nstring.raw`hi\\\\n`\n// 返回 \"hi\\\\\\\\n\"\n\nstring.raw`hi\\\\n` === \"hi\\\\\\\\n\" // true\n\n\n1\n2\n3\n4\n\n\nstring.raw()方法可以作为处理模板字符串的基本方法，它会将所有变量替换，而且对斜杠进行转义，方便下一步作为字符串来使用。\n\nstring.raw()本质上是一个正常的函数，只是专用于模板字符串的标签函数。如果写成正常函数的形式，它的第一个参数，应该是一个具有raw属性的对象，且raw属性的值应该是一个数组，对应模板字符串解析后的值。\n\n// `foo${1 + 2}bar`\n// 等同于\nstring.raw({ raw: ['foo', 'bar'] }, 1 + 2) // \"foo3bar\"\n\n\n1\n2\n3\n\n\n上面代码中，string.raw()方法的第一个参数是一个对象，它的raw属性等同于原始的模板字符串解析后得到的数组。\n\n作为函数，string.raw()的代码实现基本如下。\n\nstring.raw = function (strings, ...values) {\n  let output = '';\n  let index;\n  for (index = 0; index < values.length; index++) {\n    output += strings.raw[index] + values[index];\n  }\n\n  output += strings.raw[index]\n  return output;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n\n# 实例方法：codepointat()\n\njavascript 内部，字符以 utf-16 的格式储存，每个字符固定为2个字节。对于那些需要4个字节储存的字符（unicode 码点大于0xffff的字符），javascript 会认为它们是两个字符。\n\nvar s = \"𠮷\";\n\ns.length // 2\ns.charat(0) // ''\ns.charat(1) // ''\ns.charcodeat(0) // 55362\ns.charcodeat(1) // 57271\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n上面代码中，汉字“𠮷”（注意，这个字不是“吉祥”的“吉”）的码点是0x20bb7，utf-16 编码为0xd842 0xdfb7（十进制为55362 57271），需要4个字节储存。对于这种4个字节的字符，javascript 不能正确处理，字符串长度会误判为2，而且charat()方法无法读取整个字符，charcodeat()方法只能分别返回前两个字节和后两个字节的值。\n\nes6 提供了codepointat()方法，能够正确处理 4 个字节储存的字符，返回一个字符的码点。\n\nlet s = '𠮷a';\n\ns.codepointat(0) // 134071\ns.codepointat(1) // 57271\n\ns.codepointat(2) // 97\n\n\n1\n2\n3\n4\n5\n6\n\n\ncodepointat()方法的参数，是字符在字符串中的位置（从 0 开始）。上面代码中，javascript 将“𠮷a”视为三个字符，codepointat 方法在第一个字符上，正确地识别了“𠮷”，返回了它的十进制码点 134071（即十六进制的20bb7）。在第二个字符（即“𠮷”的后两个字节）和第三个字符“a”上，codepointat()方法的结果与charcodeat()方法相同。\n\n总之，codepointat()方法会正确返回 32 位的 utf-16 字符的码点。对于那些两个字节储存的常规字符，它的返回结果与charcodeat()方法相同。\n\ncodepointat()方法返回的是码点的十进制值，如果想要十六进制的值，可以使用tostring()方法转换一下。\n\nlet s = '𠮷a';\n\ns.codepointat(0).tostring(16) // \"20bb7\"\ns.codepointat(2).tostring(16) // \"61\"\n\n\n1\n2\n3\n4\n\n\n你可能注意到了，codepointat()方法的参数，仍然是不正确的。比如，上面代码中，字符a在字符串s的正确位置序号应该是 1，但是必须向codepointat()方法传入 2。解决这个问题的一个办法是使用for...of循环，因为它会正确识别 32 位的 utf-16 字符。\n\nlet s = '𠮷a';\nfor (let ch of s) {\n  console.log(ch.codepointat(0).tostring(16));\n}\n// 20bb7\n// 61\n\n\n1\n2\n3\n4\n5\n6\n\n\n另一种方法也可以，使用扩展运算符（...）进行展开运算。\n\nlet arr = [...'𠮷a']; // arr.length === 2\narr.foreach(\n  ch => console.log(ch.codepointat(0).tostring(16))\n);\n// 20bb7\n// 61\n\n\n1\n2\n3\n4\n5\n6\n\n\ncodepointat()方法是测试一个字符由两个字节还是由四个字节组成的最简单方法。\n\nfunction is32bit(c) {\n  return c.codepointat(0) > 0xffff;\n}\n\nis32bit(\"𠮷\") // true\nis32bit(\"a\") // false\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# 实例方法：normalize()\n\n许多欧洲语言有语调符号和重音符号。为了表示它们，unicode 提供了两种方法。一种是直接提供带重音符号的字符，比如o（\\u01d1）。另一种是提供合成符号（combining character），即原字符与重音符号的合成，两个字符合成一个字符，比如o（\\u004f）和ˇ（\\u030c）合成o（\\u004f\\u030c）。\n\n这两种表示方法，在视觉和语义上都等价，但是 javascript 不能识别。\n\n'\\u01d1'==='\\u004f\\u030c' //false\n\n'\\u01d1'.length // 1\n'\\u004f\\u030c'.length // 2\n\n\n1\n2\n3\n4\n\n\n上面代码表示，javascript 将合成字符视为两个字符，导致两种表示方法不相等。\n\nes6 提供字符串实例的normalize()方法，用来将字符的不同表示方法统一为同样的形式，这称为 unicode 正规化。\n\n'\\u01d1'.normalize() === '\\u004f\\u030c'.normalize()\n// true\n\n\n1\n2\n\n\nnormalize方法可以接受一个参数来指定normalize的方式，参数的四个可选值如下。\n\n * nfc，默认参数，表示“标准等价合成”（normalization form canonical composition），返回多个简单字符的合成字符。所谓“标准等价”指的是视觉和语义上的等价。\n * nfd，表示“标准等价分解”（normalization form canonical decomposition），即在标准等价的前提下，返回合成字符分解的多个简单字符。\n * nfkc，表示“兼容等价合成”（normalization form compatibility composition），返回合成字符。所谓“兼容等价”指的是语义上存在等价，但视觉上不等价，比如“囍”和“喜喜”。（这只是用来举例，normalize方法不能识别中文。）\n * nfkd，表示“兼容等价分解”（normalization form compatibility decomposition），即在兼容等价的前提下，返回合成字符分解的多个简单字符。\n\n'\\u004f\\u030c'.normalize('nfc').length // 1\n'\\u004f\\u030c'.normalize('nfd').length // 2\n\n\n1\n2\n\n\n上面代码表示，nfc参数返回字符的合成形式，nfd参数返回字符的分解形式。\n\n不过，normalize方法目前不能识别三个或三个以上字符的合成。这种情况下，还是只能使用正则表达式，通过 unicode 编号区间判断。\n\n\n# 实例方法：includes() 包含, startswith() 头部包含, endswith() 末尾包含\n\n传统上，javascript 只有indexof方法，可以用来确定一个字符串是否包含在另一个字符串中。es6 又提供了三种新方法。\n\n * includes()：返回布尔值，表示是否找到了参数字符串。\n * startswith()：返回布尔值，表示参数字符串是否在原字符串的头部。\n * endswith()：返回布尔值，表示参数字符串是否在原字符串的尾部。\n\nlet s = 'hello world!';\n\ns.startswith('hello') // true\ns.endswith('!') // true\ns.includes('o') // true\n\n\n1\n2\n3\n4\n5\n\n\n这三个方法都支持第二个参数，表示开始搜索的位置。\n\nlet s = 'hello world!';\n\ns.startswith('world', 6) // true\ns.endswith('hello', 5) // true\ns.includes('hello', 6) // false\n\n\n1\n2\n3\n4\n5\n\n\n上面代码表示，使用第二个参数n时，endswith的行为与其他两个方法有所不同。它针对前n个字符，而其他两个方法针对从第n个位置直到字符串结束。\n\n\n# 实例方法：repeat() 重复\n\nrepeat方法返回一个新字符串，表示将原字符串重复n次。\n\n'x'.repeat(3) // \"xxx\"\n'hello'.repeat(2) // \"hellohello\"\n'na'.repeat(0) // \"\"\n\n\n1\n2\n3\n\n\n参数如果是小数，会被取整。\n\n'na'.repeat(2.9) // \"nana\"\n\n\n1\n\n\n如果repeat的参数是负数或者infinity，会报错。\n\n'na'.repeat(infinity)\n// rangeerror\n'na'.repeat(-1)\n// rangeerror\n\n\n1\n2\n3\n4\n\n\n但是，如果参数是 0 到-1 之间的小数，则等同于 0，这是因为会先进行取整运算。0 到-1 之间的小数，取整以后等于-0，repeat视同为 0。\n\n'na'.repeat(-0.9) // \"\"\n\n\n1\n\n\n参数nan等同于 0。\n\n'na'.repeat(nan) // \"\"\n\n\n1\n\n\n如果repeat的参数是字符串，则会先转换成数字。\n\n'na'.repeat('na') // \"\"\n'na'.repeat('3') // \"nanana\"\n\n\n1\n2\n\n\n\n# 实例方法：padstart() 补全头部，padend() 补全末尾\n\nes2017 引入了字符串补全长度的功能。如果某个字符串不够指定长度，会在头部或尾部补全。padstart()用于头部补全，padend()用于尾部补全。\n\n'x'.padstart(5, 'ab') // 'ababx'\n'x'.padstart(4, 'ab') // 'abax'\n\n'x'.padend(5, 'ab') // 'xabab'\n'x'.padend(4, 'ab') // 'xaba'\n\n\n1\n2\n3\n4\n5\n\n\n上面代码中，padstart()和padend()一共接受两个参数，第一个参数是字符串补全生效的最大长度，第二个参数是用来补全的字符串。\n\n如果原字符串的长度，等于或大于最大长度，则字符串补全不生效，返回原字符串。\n\n'xxx'.padstart(2, 'ab') // 'xxx'\n'xxx'.padend(2, 'ab') // 'xxx'\n\n\n1\n2\n\n\n如果用来补全的字符串与原字符串，两者的长度之和超过了最大长度，则会截去超出位数的补全字符串。\n\n'abc'.padstart(10, '0123456789')\n// '0123456abc'\n\n\n1\n2\n\n\n如果省略第二个参数，默认使用空格补全长度。\n\n'x'.padstart(4) // '   x'\n'x'.padend(4) // 'x   '\n\n\n1\n2\n\n\npadstart()的常见用途是为数值补全指定位数。下面代码生成 10 位的数值字符串。\n\n'1'.padstart(10, '0') // \"0000000001\"\n'12'.padstart(10, '0') // \"0000000012\"\n'123456'.padstart(10, '0') // \"0000123456\"\n\n\n1\n2\n3\n\n\n另一个用途是提示字符串格式。\n\n'12'.padstart(10, 'yyyy-mm-dd') // \"yyyy-mm-12\"\n'09-12'.padstart(10, 'yyyy-mm-dd') // \"yyyy-09-12\"\n\n\n1\n2\n\n\n\n# 实例方法：trimstart() 修剪头部，trimend() 修剪末尾\n\nes2019 对字符串实例新增了trimstart()和trimend()这两个方法。它们的行为与trim()一致，trimstart()消除字符串头部的空格，trimend()消除尾部的空格。它们返回的都是新字符串，不会修改原始字符串。\n\nconst s = '  abc  ';\n\ns.trim() // \"abc\"\ns.trimstart() // \"abc  \"\ns.trimend() // \"  abc\"\n\n\n1\n2\n3\n4\n5\n\n\n上面代码中，trimstart()只消除头部的空格，保留尾部的空格。trimend()也是类似行为。\n\n除了空格键，这两个方法对字符串头部（或尾部）的 tab 键、换行符等不可见的空白符号也有效。\n\n浏览器还部署了额外的两个方法，trimleft()是trimstart()的别名，trimright()是trimend()的别名。\n\n\n# 实例方法：matchall()\n\nmatchall()方法返回一个正则表达式在当前字符串的所有匹配，详见《正则的扩展》的一章。",charsets:{cjk:!0}},{title:"字符串的扩展",frontmatter:{title:"字符串的扩展",date:"2020-02-09T16:00:29.000Z",permalink:"/pages/ca89eca8adeba5f4",author:"阮一峰",categories:["《ES6 教程》笔记"],tags:["ES6"],readingShow:"top"},regularPath:"/06.%E4%B9%A6%E7%B1%8D/05.%E3%80%8AES6%20%E6%95%99%E7%A8%8B%E3%80%8B%E7%AC%94%E8%AE%B0/04.%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%89%A9%E5%B1%95.html",relativePath:"06.书籍/05.《ES6 教程》笔记/04.字符串的扩展.md",key:"v-a7249d18",path:"/pages/ca89eca8adeba5f4/",headers:[{level:2,title:"字符的 Unicode 表示法",slug:"字符的-unicode-表示法",normalizedTitle:"字符的 unicode 表示法",charIndex:51},{level:2,title:"字符串的遍历器接口",slug:"字符串的遍历器接口",normalizedTitle:"字符串的遍历器接口",charIndex:786},{level:2,title:"直接输入 U+2028 和 U+2029",slug:"直接输入-u-2028-和-u-2029",normalizedTitle:"直接输入 u+2028 和 u+2029",charIndex:1281},{level:2,title:"JSON.stringify() 的改造",slug:"json-stringify-的改造",normalizedTitle:"json.stringify() 的改造",charIndex:2078},{level:2,title:"模板字符串",slug:"模板字符串",normalizedTitle:"模板字符串",charIndex:1998},{level:2,title:"实例：模板编译",slug:"实例-模板编译",normalizedTitle:"实例：模板编译",charIndex:5433},{level:2,title:"标签模板",slug:"标签模板",normalizedTitle:"标签模板",charIndex:7163},{level:2,title:"模板字符串的限制",slug:"模板字符串的限制",normalizedTitle:"模板字符串的限制",charIndex:11475}],excerpt:'<h1 id="字符串的扩展"><a class="header-anchor" href="#字符串的扩展">#</a> 字符串的扩展</h1>\n<p>本章介绍 ES6 对字符串的改造和增强，下一章介绍字符串对象的新增方法。</p>\n<h2 id="字符的-unicode-表示法"><a class="header-anchor" href="#字符的-unicode-表示法">#</a> 字符的 Unicode 表示法</h2>\n<p>ES6 加强了对 Unicode 的支持，允许采用<code>\\uxxxx</code>形式表示一个字符，其中<code>xxxx</code>表示字符的 Unicode 码点。</p>\n\x3c!--beforebegin--\x3e<div class="language-javascript line-numbers-mode">\x3c!--afterbegin--\x3e<pre v-pre class="language-javascript"><code><span class="token string">"\\u0061"</span>\n<span class="token comment">// "a"</span>\n</code></pre>\n<div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br></div>\x3c!--beforeend--\x3e</div>\x3c!--afterend--\x3e',lastUpdated:"2022/9/22 下午4:28:09",lastUpdatedTimestamp:1663835289e3,headersStr:"字符的 Unicode 表示法 字符串的遍历器接口 直接输入 U+2028 和 U+2029 JSON.stringify() 的改造 模板字符串 实例：模板编译 标签模板 模板字符串的限制",content:"# 字符串的扩展\n\n本章介绍 ES6 对字符串的改造和增强，下一章介绍字符串对象的新增方法。\n\n\n# 字符的 Unicode 表示法\n\nES6 加强了对 Unicode 的支持，允许采用\\uxxxx形式表示一个字符，其中xxxx表示字符的 Unicode 码点。\n\n\"\\u0061\"\n// \"a\"\n\n\n1\n2\n\n\n但是，这种表示法只限于码点在\\u0000~\\uFFFF之间的字符。超出这个范围的字符，必须用两个双字节的形式表示。\n\n\"\\uD842\\uDFB7\"\n// \"𠮷\"\n\n\"\\u20BB7\"\n// \" 7\"\n\n\n1\n2\n3\n4\n5\n\n\n上面代码表示，如果直接在\\u后面跟上超过0xFFFF的数值（比如\\u20BB7），JavaScript 会理解成\\u20BB+7。由于\\u20BB是一个不可打印字符，所以只会显示一个空格，后面跟着一个7。\n\nES6 对这一点做出了改进，只要将码点放入大括号，就能正确解读该字符。\n\n\"\\u{20BB7}\"\n// \"𠮷\"\n\n\"\\u{41}\\u{42}\\u{43}\"\n// \"ABC\"\n\nlet hello = 123;\nhell\\u{6F} // 123\n\n'\\u{1F680}' === '\\uD83D\\uDE80'\n// true\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n上面代码中，最后一个例子表明，大括号表示法与四字节的 UTF-16 编码是等价的。\n\n有了这种表示法之后，JavaScript 共有 6 种方法可以表示一个字符。\n\n'\\z' === 'z'  // true\n'\\172' === 'z' // true\n'\\x7A' === 'z' // true\n'\\u007A' === 'z' // true\n'\\u{7A}' === 'z' // true\n\n\n1\n2\n3\n4\n5\n\n\n\n# 字符串的遍历器接口\n\nES6 为字符串添加了遍历器接口（详见《Iterator》一章），使得字符串可以被for...of循环遍历。\n\nfor (let codePoint of 'foo') {\n  console.log(codePoint)\n}\n// \"f\"\n// \"o\"\n// \"o\"\n\n\n1\n2\n3\n4\n5\n6\n\n\n除了遍历字符串，这个遍历器最大的优点是可以识别大于0xFFFF的码点，传统的for循环无法识别这样的码点。\n\nlet text = String.fromCodePoint(0x20BB7);\n\nfor (let i = 0; i < text.length; i++) {\n  console.log(text[i]);\n}\n// \" \"\n// \" \"\n\nfor (let i of text) {\n  console.log(i);\n}\n// \"𠮷\"\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n上面代码中，字符串text只有一个字符，但是for循环会认为它包含两个字符（都不可打印），而for...of循环会正确识别出这一个字符。\n\n\n# 直接输入 U+2028 和 U+2029\n\nJavaScript 字符串允许直接输入字符，以及输入字符的转义形式。举例来说，“中”的 Unicode 码点是 U+4e2d，你可以直接在字符串里面输入这个汉字，也可以输入它的转义形式\\u4e2d，两者是等价的。\n\n'中' === '\\u4e2d' // true\n\n\n1\n\n\n但是，JavaScript 规定有5个字符，不能在字符串里面直接使用，只能使用转义形式。\n\n * U+005C：反斜杠（reverse solidus)\n * U+000D：回车（carriage return）\n * U+2028：行分隔符（line separator）\n * U+2029：段分隔符（paragraph separator）\n * U+000A：换行符（line feed）\n\n举例来说，字符串里面不能直接包含反斜杠，一定要转义写成\\\\或者\\u005c。\n\n这个规定本身没有问题，麻烦在于 JSON 格式允许字符串里面直接使用 U+2028（行分隔符）和 U+2029（段分隔符）。这样一来，服务器输出的 JSON 被JSON.parse解析，就有可能直接报错。\n\nconst json = '\"\\u2028\"';\nJSON.parse(json); // 可能报错\n\n\n1\n2\n\n\nJSON 格式已经冻结（RFC 7159），没法修改了。为了消除这个报错，ES2019 允许 JavaScript 字符串直接输入 U+2028（行分隔符）和 U+2029（段分隔符）。\n\nconst PS = eval(\"'\\u2029'\");\n\n\n1\n\n\n根据这个提案，上面的代码不会报错。\n\n注意，模板字符串现在就允许直接输入这两个字符。另外，正则表达式依然不允许直接输入这两个字符，这是没有问题的，因为 JSON 本来就不允许直接包含正则表达式。\n\n\n# JSON.stringify() 的改造\n\n根据标准，JSON 数据必须是 UTF-8 编码。但是，现在的JSON.stringify()方法有可能返回不符合 UTF-8 标准的字符串。\n\n具体来说，UTF-8 标准规定，0xD800到0xDFFF之间的码点，不能单独使用，必须配对使用。比如，\\uD834\\uDF06是两个码点，但是必须放在一起配对使用，代表字符𝌆。这是为了表示码点大于0xFFFF的字符的一种变通方法。单独使用\\uD834和\\uDFO6这两个码点是不合法的，或者颠倒顺序也不行，因为\\uDF06\\uD834并没有对应的字符。\n\nJSON.stringify()的问题在于，它可能返回0xD800到0xDFFF之间的单个码点。\n\nJSON.stringify('\\u{D834}') // \"\\u{D834}\"\n\n\n1\n\n\n为了确保返回的是合法的 UTF-8 字符，ES2019 改变了JSON.stringify()的行为。如果遇到0xD800到0xDFFF之间的单个码点，或者不存在的配对形式，它会返回转义字符串，留给应用自己决定下一步的处理。\n\nJSON.stringify('\\u{D834}') // \"\"\\\\uD834\"\"\nJSON.stringify('\\uDF06\\uD834') // \"\"\\\\udf06\\\\ud834\"\"\n\n\n1\n2\n\n\n\n# 模板字符串\n\n传统的 JavaScript 语言，输出模板通常是这样写的（下面使用了 jQuery 的方法）。\n\n$('#result').append(\n  'There are <b>' + basket.count + '</b> ' +\n  'items in your basket, ' +\n  '<em>' + basket.onSale +\n  '</em> are on sale!'\n);\n\n\n1\n2\n3\n4\n5\n6\n\n\n上面这种写法相当繁琐不方便，ES6 引入了模板字符串解决这个问题。\n\n$('#result').append(`\n  There are <b>${basket.count}</b> items\n   in your basket, <em>${basket.onSale}</em>\n  are on sale!\n`);\n\n\n1\n2\n3\n4\n5\n\n\n模板字符串（template string）是增强版的字符串，用反引号（`）标识。它可以当作普通字符串使用，也可以用来定义多行字符串，或者在字符串中嵌入变量。\n\n// 普通字符串\n`In JavaScript '\\n' is a line-feed.`\n\n// 多行字符串\n`In JavaScript this is\n not legal.`\n\nconsole.log(`string text line 1\nstring text line 2`);\n\n// 字符串中嵌入变量\nlet name = \"Bob\", time = \"today\";\n`Hello ${name}, how are you ${time}?`\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n上面代码中的模板字符串，都是用反引号表示。如果在模板字符串中需要使用反引号，则前面要用反斜杠转义。\n\nlet greeting = `\\`Yo\\` World!`;\n\n\n1\n\n\n如果使用模板字符串表示多行字符串，所有的空格和缩进都会被保留在输出之中。\n\n$('#list').html(`\n<ul>\n  <li>first</li>\n  <li>second</li>\n</ul>\n`);\n\n\n1\n2\n3\n4\n5\n6\n\n\n上面代码中，所有模板字符串的空格和换行，都是被保留的，比如<ul>标签前面会有一个换行。如果你不想要这个换行，可以使用trim方法消除它。\n\n$('#list').html(`\n<ul>\n  <li>first</li>\n  <li>second</li>\n</ul>\n`.trim());\n\n\n1\n2\n3\n4\n5\n6\n\n\n模板字符串中嵌入变量，需要将变量名写在${}之中。\n\nfunction authorize(user, action) {\n  if (!user.hasPrivilege(action)) {\n    throw new Error(\n      // 传统写法为\n      // 'User '\n      // + user.name\n      // + ' is not authorized to do '\n      // + action\n      // + '.'\n      `User ${user.name} is not authorized to do ${action}.`);\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n大括号内部可以放入任意的 JavaScript 表达式，可以进行运算，以及引用对象属性。\n\nlet x = 1;\nlet y = 2;\n\n`${x} + ${y} = ${x + y}`\n// \"1 + 2 = 3\"\n\n`${x} + ${y * 2} = ${x + y * 2}`\n// \"1 + 4 = 5\"\n\nlet obj = {x: 1, y: 2};\n`${obj.x + obj.y}`\n// \"3\"\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n模板字符串之中还能调用函数。\n\nfunction fn() {\n  return \"Hello World\";\n}\n\n`foo ${fn()} bar`\n// foo Hello World bar\n\n\n1\n2\n3\n4\n5\n6\n\n\n如果大括号中的值不是字符串，将按照一般的规则转为字符串。比如，大括号中是一个对象，将默认调用对象的toString方法。\n\n如果模板字符串中的变量没有声明，将报错。\n\n// 变量place没有声明\nlet msg = `Hello, ${place}`;\n// 报错\n\n\n1\n2\n3\n\n\n由于模板字符串的大括号内部，就是执行 JavaScript 代码，因此如果大括号内部是一个字符串，将会原样输出。\n\n`Hello ${'World'}`\n// \"Hello World\"\n\n\n1\n2\n\n\n模板字符串甚至还能嵌套。\n\nconst tmpl = addrs => `\n  <table>\n  ${addrs.map(addr => `\n    <tr><td>${addr.first}</td></tr>\n    <tr><td>${addr.last}</td></tr>\n  `).join('')}\n  </table>\n`;\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n上面代码中，模板字符串的变量之中，又嵌入了另一个模板字符串，使用方法如下。\n\nconst data = [\n    { first: '<Jane>', last: 'Bond' },\n    { first: 'Lars', last: '<Croft>' },\n];\n\nconsole.log(tmpl(data));\n// <table>\n//\n//   <tr><td><Jane></td></tr>\n//   <tr><td>Bond</td></tr>\n//\n//   <tr><td>Lars</td></tr>\n//   <tr><td><Croft></td></tr>\n//\n// </table>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n如果需要引用模板字符串本身，在需要时执行，可以写成函数。\n\nlet func = (name) => `Hello ${name}!`;\nfunc('Jack') // \"Hello Jack!\"\n\n\n1\n2\n\n\n上面代码中，模板字符串写成了一个函数的返回值。执行这个函数，就相当于执行这个模板字符串了。\n\n\n# 实例：模板编译\n\n下面，我们来看一个通过模板字符串，生成正式模板的实例。\n\nlet template = `\n<ul>\n  <% for(let i=0; i < data.supplies.length; i++) { %>\n    <li><%= data.supplies[i] %></li>\n  <% } %>\n</ul>\n`;\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n上面代码在模板字符串之中，放置了一个常规模板。该模板使用<%...%>放置 JavaScript 代码，使用<%= ... %>输出 JavaScript 表达式。\n\n怎么编译这个模板字符串呢？\n\n一种思路是将其转换为 JavaScript 表达式字符串。\n\necho('<ul>');\nfor(let i=0; i < data.supplies.length; i++) {\n  echo('<li>');\n  echo(data.supplies[i]);\n  echo('</li>');\n};\necho('</ul>');\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n这个转换使用正则表达式就行了。\n\nlet evalExpr = /<%=(.+?)%>/g;\nlet expr = /<%([\\s\\S]+?)%>/g;\n\ntemplate = template\n  .replace(evalExpr, '`); \\n  echo( $1 ); \\n  echo(`')\n  .replace(expr, '`); \\n $1 \\n  echo(`');\n\ntemplate = 'echo(`' + template + '`);';\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n然后，将template封装在一个函数里面返回，就可以了。\n\nlet script =\n`(function parse(data){\n  let output = \"\";\n\n  function echo(html){\n    output += html;\n  }\n\n  ${ template }\n\n  return output;\n})`;\n\nreturn script;\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n将上面的内容拼装成一个模板编译函数compile。\n\nfunction compile(template){\n  const evalExpr = /<%=(.+?)%>/g;\n  const expr = /<%([\\s\\S]+?)%>/g;\n\n  template = template\n    .replace(evalExpr, '`); \\n  echo( $1 ); \\n  echo(`')\n    .replace(expr, '`); \\n $1 \\n  echo(`');\n\n  template = 'echo(`' + template + '`);';\n\n  let script =\n  `(function parse(data){\n    let output = \"\";\n\n    function echo(html){\n      output += html;\n    }\n\n    ${ template }\n\n    return output;\n  })`;\n\n  return script;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n\n\ncompile函数的用法如下。\n\nlet parse = eval(compile(template));\ndiv.innerHTML = parse({ supplies: [ \"broom\", \"mop\", \"cleaner\" ] });\n//   <ul>\n//     <li>broom</li>\n//     <li>mop</li>\n//     <li>cleaner</li>\n//   </ul>\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# 标签模板\n\n模板字符串的功能，不仅仅是上面这些。它可以紧跟在一个函数名后面，该函数将被调用来处理这个模板字符串。这被称为“标签模板”功能（tagged template）。\n\nalert`123`\n// 等同于\nalert(123)\n\n\n1\n2\n3\n\n\n标签模板其实不是模板，而是函数调用的一种特殊形式。“标签”指的就是函数，紧跟在后面的模板字符串就是它的参数。\n\n但是，如果模板字符里面有变量，就不是简单的调用了，而是会将模板字符串先处理成多个参数，再调用函数。\n\nlet a = 5;\nlet b = 10;\n\ntag`Hello ${ a + b } world ${ a * b }`;\n// 等同于\ntag(['Hello ', ' world ', ''], 15, 50);\n\n\n1\n2\n3\n4\n5\n6\n\n\n上面代码中，模板字符串前面有一个标识名tag，它是一个函数。整个表达式的返回值，就是tag函数处理模板字符串后的返回值。\n\n函数tag依次会接收到多个参数。\n\nfunction tag(stringArr, value1, value2){\n  // ...\n}\n\n// 等同于\n\nfunction tag(stringArr, ...values){\n  // ...\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\ntag函数的第一个参数是一个数组，该数组的成员是模板字符串中那些没有变量替换的部分，也就是说，变量替换只发生在数组的第一个成员与第二个成员之间、第二个成员与第三个成员之间，以此类推。\n\ntag函数的其他参数，都是模板字符串各个变量被替换后的值。由于本例中，模板字符串含有两个变量，因此tag会接受到value1和value2两个参数。\n\ntag函数所有参数的实际值如下。\n\n * 第一个参数：['Hello ', ' world ', '']\n * 第二个参数: 15\n * 第三个参数：50\n\n也就是说，tag函数实际上以下面的形式调用。\n\ntag(['Hello ', ' world ', ''], 15, 50)\n\n\n1\n\n\n我们可以按照需要编写tag函数的代码。下面是tag函数的一种写法，以及运行结果。\n\nlet a = 5;\nlet b = 10;\n\nfunction tag(s, v1, v2) {\n  console.log(s[0]);\n  console.log(s[1]);\n  console.log(s[2]);\n  console.log(v1);\n  console.log(v2);\n\n  return \"OK\";\n}\n\ntag`Hello ${ a + b } world ${ a * b}`;\n// \"Hello \"\n// \" world \"\n// \"\"\n// 15\n// 50\n// \"OK\"\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n\n下面是一个更复杂的例子。\n\nlet total = 30;\nlet msg = passthru`The total is ${total} (${total*1.05} with tax)`;\n\nfunction passthru(literals) {\n  let result = '';\n  let i = 0;\n\n  while (i < literals.length) {\n    result += literals[i++];\n    if (i < arguments.length) {\n      result += arguments[i];\n    }\n  }\n\n  return result;\n}\n\nmsg // \"The total is 30 (31.5 with tax)\"\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\n上面这个例子展示了，如何将各个参数按照原来的位置拼合回去。\n\npassthru函数采用 rest 参数的写法如下。\n\nfunction passthru(literals, ...values) {\n  let output = \"\";\n  let index;\n  for (index = 0; index < values.length; index++) {\n    output += literals[index] + values[index];\n  }\n\n  output += literals[index]\n  return output;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n“标签模板”的一个重要应用，就是过滤 HTML 字符串，防止用户输入恶意内容。\n\nlet message =\n  SaferHTML`<p>${sender} has sent you a message.</p>`;\n\nfunction SaferHTML(templateData) {\n  let s = templateData[0];\n  for (let i = 1; i < arguments.length; i++) {\n    let arg = String(arguments[i]);\n\n    // Escape special characters in the substitution.\n    s += arg.replace(/&/g, \"&amp;\")\n            .replace(/</g, \"&lt;\")\n            .replace(/>/g, \"&gt;\");\n\n    // Don't escape special characters in the template.\n    s += templateData[i];\n  }\n  return s;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\n上面代码中，sender变量往往是用户提供的，经过SaferHTML函数处理，里面的特殊字符都会被转义。\n\nlet sender = '<script>alert(\"abc\")<\/script>'; // 恶意代码\nlet message = SaferHTML`<p>${sender} has sent you a message.</p>`;\n\nmessage\n// <p>&lt;script&gt;alert(\"abc\")&lt;/script&gt; has sent you a message.</p>\n\n\n1\n2\n3\n4\n5\n\n\n标签模板的另一个应用，就是多语言转换（国际化处理）。\n\ni18n`Welcome to ${siteName}, you are visitor number ${visitorNumber}!`\n// \"欢迎访问xxx，您是第xxxx位访问者！\"\n\n\n1\n2\n\n\n模板字符串本身并不能取代 Mustache 之类的模板库，因为没有条件判断和循环处理功能，但是通过标签函数，你可以自己添加这些功能。\n\n// 下面的hashTemplate函数\n// 是一个自定义的模板处理函数\nlet libraryHtml = hashTemplate`\n  <ul>\n    #for book in ${myBooks}\n      <li><i>#{book.title}</i> by #{book.author}</li>\n    #end\n  </ul>\n`;\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n除此之外，你甚至可以使用标签模板，在 JavaScript 语言之中嵌入其他语言。\n\njsx`\n  <div>\n    <input\n      ref='input'\n      onChange='${this.handleChange}'\n      defaultValue='${this.state.value}' />\n      ${this.state.value}\n   </div>\n`\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n上面的代码通过jsx函数，将一个 DOM 字符串转为 React 对象。你可以在 GitHub 找到jsx函数的具体实现。\n\n下面则是一个假想的例子，通过java函数，在 JavaScript 代码之中运行 Java 代码。\n\njava`\nclass HelloWorldApp {\n  public static void main(String[] args) {\n    System.out.println(\"Hello World!\"); // Display the string.\n  }\n}\n`\nHelloWorldApp.main();\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n模板处理函数的第一个参数（模板字符串数组），还有一个raw属性。\n\nconsole.log`123`\n// [\"123\", raw: Array[1]]\n\n\n1\n2\n\n\n上面代码中，console.log接受的参数，实际上是一个数组。该数组有一个raw属性，保存的是转义后的原字符串。\n\n请看下面的例子。\n\ntag`First line\\nSecond line`\n\nfunction tag(strings) {\n  console.log(strings.raw[0]);\n  // strings.raw[0] 为 \"First line\\\\nSecond line\"\n  // 打印输出 \"First line\\nSecond line\"\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n上面代码中，tag函数的第一个参数strings，有一个raw属性，也指向一个数组。该数组的成员与strings数组完全一致。比如，strings数组是[\"First line\\nSecond line\"]，那么strings.raw数组就是[\"First line\\\\nSecond line\"]。两者唯一的区别，就是字符串里面的斜杠都被转义了。比如，strings.raw 数组会将\\n视为\\\\和n两个字符，而不是换行符。这是为了方便取得转义之前的原始模板而设计的。\n\n\n# 模板字符串的限制\n\n前面提到标签模板里面，可以内嵌其他语言。但是，模板字符串默认会将字符串转义，导致无法嵌入其他语言。\n\n举例来说，标签模板里面可以嵌入 LaTEX 语言。\n\nfunction latex(strings) {\n  // ...\n}\n\nlet document = latex`\n\\newcommand{\\fun}{\\textbf{Fun!}}  // 正常工作\n\\newcommand{\\unicode}{\\textbf{Unicode!}} // 报错\n\\newcommand{\\xerxes}{\\textbf{King!}} // 报错\n\nBreve over the h goes \\u{h}ere // 报错\n`\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n上面代码中，变量document内嵌的模板字符串，对于 LaTEX 语言来说完全是合法的，但是 JavaScript 引擎会报错。原因就在于字符串的转义。\n\n模板字符串会将\\u00FF和\\u{42}当作 Unicode 字符进行转义，所以\\unicode解析时报错；而\\x56会被当作十六进制字符串转义，所以\\xerxes会报错。也就是说，\\u和\\x在 LaTEX 里面有特殊含义，但是 JavaScript 将它们转义了。\n\n为了解决这个问题，ES2018 放松了对标签模板里面的字符串转义的限制。如果遇到不合法的字符串转义，就返回undefined，而不是报错，并且从raw属性上面可以得到原始字符串。\n\nfunction tag(strs) {\n  strs[0] === undefined\n  strs.raw[0] === \"\\\\unicode and \\\\u{55}\";\n}\ntag`\\unicode and \\u{55}`\n\n\n1\n2\n3\n4\n5\n\n\n上面代码中，模板字符串原本是应该报错的，但是由于放松了对字符串转义的限制，所以不报错了，JavaScript 引擎将第一个字符设置为undefined，但是raw属性依然可以得到原始字符串，因此tag函数还是可以对原字符串进行处理。\n\n注意，这种对字符串转义的放松，只在标签模板解析字符串时生效，不是标签模板的场合，依然会报错。\n\nlet bad = `bad escape sequence: \\unicode`; // 报错\n\n\n1\n",normalizedContent:"# 字符串的扩展\n\n本章介绍 es6 对字符串的改造和增强，下一章介绍字符串对象的新增方法。\n\n\n# 字符的 unicode 表示法\n\nes6 加强了对 unicode 的支持，允许采用\\uxxxx形式表示一个字符，其中xxxx表示字符的 unicode 码点。\n\n\"\\u0061\"\n// \"a\"\n\n\n1\n2\n\n\n但是，这种表示法只限于码点在\\u0000~\\uffff之间的字符。超出这个范围的字符，必须用两个双字节的形式表示。\n\n\"\\ud842\\udfb7\"\n// \"𠮷\"\n\n\"\\u20bb7\"\n// \" 7\"\n\n\n1\n2\n3\n4\n5\n\n\n上面代码表示，如果直接在\\u后面跟上超过0xffff的数值（比如\\u20bb7），javascript 会理解成\\u20bb+7。由于\\u20bb是一个不可打印字符，所以只会显示一个空格，后面跟着一个7。\n\nes6 对这一点做出了改进，只要将码点放入大括号，就能正确解读该字符。\n\n\"\\u{20bb7}\"\n// \"𠮷\"\n\n\"\\u{41}\\u{42}\\u{43}\"\n// \"abc\"\n\nlet hello = 123;\nhell\\u{6f} // 123\n\n'\\u{1f680}' === '\\ud83d\\ude80'\n// true\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n上面代码中，最后一个例子表明，大括号表示法与四字节的 utf-16 编码是等价的。\n\n有了这种表示法之后，javascript 共有 6 种方法可以表示一个字符。\n\n'\\z' === 'z'  // true\n'\\172' === 'z' // true\n'\\x7a' === 'z' // true\n'\\u007a' === 'z' // true\n'\\u{7a}' === 'z' // true\n\n\n1\n2\n3\n4\n5\n\n\n\n# 字符串的遍历器接口\n\nes6 为字符串添加了遍历器接口（详见《iterator》一章），使得字符串可以被for...of循环遍历。\n\nfor (let codepoint of 'foo') {\n  console.log(codepoint)\n}\n// \"f\"\n// \"o\"\n// \"o\"\n\n\n1\n2\n3\n4\n5\n6\n\n\n除了遍历字符串，这个遍历器最大的优点是可以识别大于0xffff的码点，传统的for循环无法识别这样的码点。\n\nlet text = string.fromcodepoint(0x20bb7);\n\nfor (let i = 0; i < text.length; i++) {\n  console.log(text[i]);\n}\n// \" \"\n// \" \"\n\nfor (let i of text) {\n  console.log(i);\n}\n// \"𠮷\"\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n上面代码中，字符串text只有一个字符，但是for循环会认为它包含两个字符（都不可打印），而for...of循环会正确识别出这一个字符。\n\n\n# 直接输入 u+2028 和 u+2029\n\njavascript 字符串允许直接输入字符，以及输入字符的转义形式。举例来说，“中”的 unicode 码点是 u+4e2d，你可以直接在字符串里面输入这个汉字，也可以输入它的转义形式\\u4e2d，两者是等价的。\n\n'中' === '\\u4e2d' // true\n\n\n1\n\n\n但是，javascript 规定有5个字符，不能在字符串里面直接使用，只能使用转义形式。\n\n * u+005c：反斜杠（reverse solidus)\n * u+000d：回车（carriage return）\n * u+2028：行分隔符（line separator）\n * u+2029：段分隔符（paragraph separator）\n * u+000a：换行符（line feed）\n\n举例来说，字符串里面不能直接包含反斜杠，一定要转义写成\\\\或者\\u005c。\n\n这个规定本身没有问题，麻烦在于 json 格式允许字符串里面直接使用 u+2028（行分隔符）和 u+2029（段分隔符）。这样一来，服务器输出的 json 被json.parse解析，就有可能直接报错。\n\nconst json = '\"\\u2028\"';\njson.parse(json); // 可能报错\n\n\n1\n2\n\n\njson 格式已经冻结（rfc 7159），没法修改了。为了消除这个报错，es2019 允许 javascript 字符串直接输入 u+2028（行分隔符）和 u+2029（段分隔符）。\n\nconst ps = eval(\"'\\u2029'\");\n\n\n1\n\n\n根据这个提案，上面的代码不会报错。\n\n注意，模板字符串现在就允许直接输入这两个字符。另外，正则表达式依然不允许直接输入这两个字符，这是没有问题的，因为 json 本来就不允许直接包含正则表达式。\n\n\n# json.stringify() 的改造\n\n根据标准，json 数据必须是 utf-8 编码。但是，现在的json.stringify()方法有可能返回不符合 utf-8 标准的字符串。\n\n具体来说，utf-8 标准规定，0xd800到0xdfff之间的码点，不能单独使用，必须配对使用。比如，\\ud834\\udf06是两个码点，但是必须放在一起配对使用，代表字符𝌆。这是为了表示码点大于0xffff的字符的一种变通方法。单独使用\\ud834和\\udfo6这两个码点是不合法的，或者颠倒顺序也不行，因为\\udf06\\ud834并没有对应的字符。\n\njson.stringify()的问题在于，它可能返回0xd800到0xdfff之间的单个码点。\n\njson.stringify('\\u{d834}') // \"\\u{d834}\"\n\n\n1\n\n\n为了确保返回的是合法的 utf-8 字符，es2019 改变了json.stringify()的行为。如果遇到0xd800到0xdfff之间的单个码点，或者不存在的配对形式，它会返回转义字符串，留给应用自己决定下一步的处理。\n\njson.stringify('\\u{d834}') // \"\"\\\\ud834\"\"\njson.stringify('\\udf06\\ud834') // \"\"\\\\udf06\\\\ud834\"\"\n\n\n1\n2\n\n\n\n# 模板字符串\n\n传统的 javascript 语言，输出模板通常是这样写的（下面使用了 jquery 的方法）。\n\n$('#result').append(\n  'there are <b>' + basket.count + '</b> ' +\n  'items in your basket, ' +\n  '<em>' + basket.onsale +\n  '</em> are on sale!'\n);\n\n\n1\n2\n3\n4\n5\n6\n\n\n上面这种写法相当繁琐不方便，es6 引入了模板字符串解决这个问题。\n\n$('#result').append(`\n  there are <b>${basket.count}</b> items\n   in your basket, <em>${basket.onsale}</em>\n  are on sale!\n`);\n\n\n1\n2\n3\n4\n5\n\n\n模板字符串（template string）是增强版的字符串，用反引号（`）标识。它可以当作普通字符串使用，也可以用来定义多行字符串，或者在字符串中嵌入变量。\n\n// 普通字符串\n`in javascript '\\n' is a line-feed.`\n\n// 多行字符串\n`in javascript this is\n not legal.`\n\nconsole.log(`string text line 1\nstring text line 2`);\n\n// 字符串中嵌入变量\nlet name = \"bob\", time = \"today\";\n`hello ${name}, how are you ${time}?`\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n上面代码中的模板字符串，都是用反引号表示。如果在模板字符串中需要使用反引号，则前面要用反斜杠转义。\n\nlet greeting = `\\`yo\\` world!`;\n\n\n1\n\n\n如果使用模板字符串表示多行字符串，所有的空格和缩进都会被保留在输出之中。\n\n$('#list').html(`\n<ul>\n  <li>first</li>\n  <li>second</li>\n</ul>\n`);\n\n\n1\n2\n3\n4\n5\n6\n\n\n上面代码中，所有模板字符串的空格和换行，都是被保留的，比如<ul>标签前面会有一个换行。如果你不想要这个换行，可以使用trim方法消除它。\n\n$('#list').html(`\n<ul>\n  <li>first</li>\n  <li>second</li>\n</ul>\n`.trim());\n\n\n1\n2\n3\n4\n5\n6\n\n\n模板字符串中嵌入变量，需要将变量名写在${}之中。\n\nfunction authorize(user, action) {\n  if (!user.hasprivilege(action)) {\n    throw new error(\n      // 传统写法为\n      // 'user '\n      // + user.name\n      // + ' is not authorized to do '\n      // + action\n      // + '.'\n      `user ${user.name} is not authorized to do ${action}.`);\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n大括号内部可以放入任意的 javascript 表达式，可以进行运算，以及引用对象属性。\n\nlet x = 1;\nlet y = 2;\n\n`${x} + ${y} = ${x + y}`\n// \"1 + 2 = 3\"\n\n`${x} + ${y * 2} = ${x + y * 2}`\n// \"1 + 4 = 5\"\n\nlet obj = {x: 1, y: 2};\n`${obj.x + obj.y}`\n// \"3\"\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n模板字符串之中还能调用函数。\n\nfunction fn() {\n  return \"hello world\";\n}\n\n`foo ${fn()} bar`\n// foo hello world bar\n\n\n1\n2\n3\n4\n5\n6\n\n\n如果大括号中的值不是字符串，将按照一般的规则转为字符串。比如，大括号中是一个对象，将默认调用对象的tostring方法。\n\n如果模板字符串中的变量没有声明，将报错。\n\n// 变量place没有声明\nlet msg = `hello, ${place}`;\n// 报错\n\n\n1\n2\n3\n\n\n由于模板字符串的大括号内部，就是执行 javascript 代码，因此如果大括号内部是一个字符串，将会原样输出。\n\n`hello ${'world'}`\n// \"hello world\"\n\n\n1\n2\n\n\n模板字符串甚至还能嵌套。\n\nconst tmpl = addrs => `\n  <table>\n  ${addrs.map(addr => `\n    <tr><td>${addr.first}</td></tr>\n    <tr><td>${addr.last}</td></tr>\n  `).join('')}\n  </table>\n`;\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n上面代码中，模板字符串的变量之中，又嵌入了另一个模板字符串，使用方法如下。\n\nconst data = [\n    { first: '<jane>', last: 'bond' },\n    { first: 'lars', last: '<croft>' },\n];\n\nconsole.log(tmpl(data));\n// <table>\n//\n//   <tr><td><jane></td></tr>\n//   <tr><td>bond</td></tr>\n//\n//   <tr><td>lars</td></tr>\n//   <tr><td><croft></td></tr>\n//\n// </table>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n如果需要引用模板字符串本身，在需要时执行，可以写成函数。\n\nlet func = (name) => `hello ${name}!`;\nfunc('jack') // \"hello jack!\"\n\n\n1\n2\n\n\n上面代码中，模板字符串写成了一个函数的返回值。执行这个函数，就相当于执行这个模板字符串了。\n\n\n# 实例：模板编译\n\n下面，我们来看一个通过模板字符串，生成正式模板的实例。\n\nlet template = `\n<ul>\n  <% for(let i=0; i < data.supplies.length; i++) { %>\n    <li><%= data.supplies[i] %></li>\n  <% } %>\n</ul>\n`;\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n上面代码在模板字符串之中，放置了一个常规模板。该模板使用<%...%>放置 javascript 代码，使用<%= ... %>输出 javascript 表达式。\n\n怎么编译这个模板字符串呢？\n\n一种思路是将其转换为 javascript 表达式字符串。\n\necho('<ul>');\nfor(let i=0; i < data.supplies.length; i++) {\n  echo('<li>');\n  echo(data.supplies[i]);\n  echo('</li>');\n};\necho('</ul>');\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n这个转换使用正则表达式就行了。\n\nlet evalexpr = /<%=(.+?)%>/g;\nlet expr = /<%([\\s\\s]+?)%>/g;\n\ntemplate = template\n  .replace(evalexpr, '`); \\n  echo( $1 ); \\n  echo(`')\n  .replace(expr, '`); \\n $1 \\n  echo(`');\n\ntemplate = 'echo(`' + template + '`);';\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n然后，将template封装在一个函数里面返回，就可以了。\n\nlet script =\n`(function parse(data){\n  let output = \"\";\n\n  function echo(html){\n    output += html;\n  }\n\n  ${ template }\n\n  return output;\n})`;\n\nreturn script;\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n将上面的内容拼装成一个模板编译函数compile。\n\nfunction compile(template){\n  const evalexpr = /<%=(.+?)%>/g;\n  const expr = /<%([\\s\\s]+?)%>/g;\n\n  template = template\n    .replace(evalexpr, '`); \\n  echo( $1 ); \\n  echo(`')\n    .replace(expr, '`); \\n $1 \\n  echo(`');\n\n  template = 'echo(`' + template + '`);';\n\n  let script =\n  `(function parse(data){\n    let output = \"\";\n\n    function echo(html){\n      output += html;\n    }\n\n    ${ template }\n\n    return output;\n  })`;\n\n  return script;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n\n\ncompile函数的用法如下。\n\nlet parse = eval(compile(template));\ndiv.innerhtml = parse({ supplies: [ \"broom\", \"mop\", \"cleaner\" ] });\n//   <ul>\n//     <li>broom</li>\n//     <li>mop</li>\n//     <li>cleaner</li>\n//   </ul>\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# 标签模板\n\n模板字符串的功能，不仅仅是上面这些。它可以紧跟在一个函数名后面，该函数将被调用来处理这个模板字符串。这被称为“标签模板”功能（tagged template）。\n\nalert`123`\n// 等同于\nalert(123)\n\n\n1\n2\n3\n\n\n标签模板其实不是模板，而是函数调用的一种特殊形式。“标签”指的就是函数，紧跟在后面的模板字符串就是它的参数。\n\n但是，如果模板字符里面有变量，就不是简单的调用了，而是会将模板字符串先处理成多个参数，再调用函数。\n\nlet a = 5;\nlet b = 10;\n\ntag`hello ${ a + b } world ${ a * b }`;\n// 等同于\ntag(['hello ', ' world ', ''], 15, 50);\n\n\n1\n2\n3\n4\n5\n6\n\n\n上面代码中，模板字符串前面有一个标识名tag，它是一个函数。整个表达式的返回值，就是tag函数处理模板字符串后的返回值。\n\n函数tag依次会接收到多个参数。\n\nfunction tag(stringarr, value1, value2){\n  // ...\n}\n\n// 等同于\n\nfunction tag(stringarr, ...values){\n  // ...\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\ntag函数的第一个参数是一个数组，该数组的成员是模板字符串中那些没有变量替换的部分，也就是说，变量替换只发生在数组的第一个成员与第二个成员之间、第二个成员与第三个成员之间，以此类推。\n\ntag函数的其他参数，都是模板字符串各个变量被替换后的值。由于本例中，模板字符串含有两个变量，因此tag会接受到value1和value2两个参数。\n\ntag函数所有参数的实际值如下。\n\n * 第一个参数：['hello ', ' world ', '']\n * 第二个参数: 15\n * 第三个参数：50\n\n也就是说，tag函数实际上以下面的形式调用。\n\ntag(['hello ', ' world ', ''], 15, 50)\n\n\n1\n\n\n我们可以按照需要编写tag函数的代码。下面是tag函数的一种写法，以及运行结果。\n\nlet a = 5;\nlet b = 10;\n\nfunction tag(s, v1, v2) {\n  console.log(s[0]);\n  console.log(s[1]);\n  console.log(s[2]);\n  console.log(v1);\n  console.log(v2);\n\n  return \"ok\";\n}\n\ntag`hello ${ a + b } world ${ a * b}`;\n// \"hello \"\n// \" world \"\n// \"\"\n// 15\n// 50\n// \"ok\"\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n\n下面是一个更复杂的例子。\n\nlet total = 30;\nlet msg = passthru`the total is ${total} (${total*1.05} with tax)`;\n\nfunction passthru(literals) {\n  let result = '';\n  let i = 0;\n\n  while (i < literals.length) {\n    result += literals[i++];\n    if (i < arguments.length) {\n      result += arguments[i];\n    }\n  }\n\n  return result;\n}\n\nmsg // \"the total is 30 (31.5 with tax)\"\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\n上面这个例子展示了，如何将各个参数按照原来的位置拼合回去。\n\npassthru函数采用 rest 参数的写法如下。\n\nfunction passthru(literals, ...values) {\n  let output = \"\";\n  let index;\n  for (index = 0; index < values.length; index++) {\n    output += literals[index] + values[index];\n  }\n\n  output += literals[index]\n  return output;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n“标签模板”的一个重要应用，就是过滤 html 字符串，防止用户输入恶意内容。\n\nlet message =\n  saferhtml`<p>${sender} has sent you a message.</p>`;\n\nfunction saferhtml(templatedata) {\n  let s = templatedata[0];\n  for (let i = 1; i < arguments.length; i++) {\n    let arg = string(arguments[i]);\n\n    // escape special characters in the substitution.\n    s += arg.replace(/&/g, \"&amp;\")\n            .replace(/</g, \"&lt;\")\n            .replace(/>/g, \"&gt;\");\n\n    // don't escape special characters in the template.\n    s += templatedata[i];\n  }\n  return s;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\n上面代码中，sender变量往往是用户提供的，经过saferhtml函数处理，里面的特殊字符都会被转义。\n\nlet sender = '<script>alert(\"abc\")<\/script>'; // 恶意代码\nlet message = saferhtml`<p>${sender} has sent you a message.</p>`;\n\nmessage\n// <p>&lt;script&gt;alert(\"abc\")&lt;/script&gt; has sent you a message.</p>\n\n\n1\n2\n3\n4\n5\n\n\n标签模板的另一个应用，就是多语言转换（国际化处理）。\n\ni18n`welcome to ${sitename}, you are visitor number ${visitornumber}!`\n// \"欢迎访问xxx，您是第xxxx位访问者！\"\n\n\n1\n2\n\n\n模板字符串本身并不能取代 mustache 之类的模板库，因为没有条件判断和循环处理功能，但是通过标签函数，你可以自己添加这些功能。\n\n// 下面的hashtemplate函数\n// 是一个自定义的模板处理函数\nlet libraryhtml = hashtemplate`\n  <ul>\n    #for book in ${mybooks}\n      <li><i>#{book.title}</i> by #{book.author}</li>\n    #end\n  </ul>\n`;\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n除此之外，你甚至可以使用标签模板，在 javascript 语言之中嵌入其他语言。\n\njsx`\n  <div>\n    <input\n      ref='input'\n      onchange='${this.handlechange}'\n      defaultvalue='${this.state.value}' />\n      ${this.state.value}\n   </div>\n`\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n上面的代码通过jsx函数，将一个 dom 字符串转为 react 对象。你可以在 github 找到jsx函数的具体实现。\n\n下面则是一个假想的例子，通过java函数，在 javascript 代码之中运行 java 代码。\n\njava`\nclass helloworldapp {\n  public static void main(string[] args) {\n    system.out.println(\"hello world!\"); // display the string.\n  }\n}\n`\nhelloworldapp.main();\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n模板处理函数的第一个参数（模板字符串数组），还有一个raw属性。\n\nconsole.log`123`\n// [\"123\", raw: array[1]]\n\n\n1\n2\n\n\n上面代码中，console.log接受的参数，实际上是一个数组。该数组有一个raw属性，保存的是转义后的原字符串。\n\n请看下面的例子。\n\ntag`first line\\nsecond line`\n\nfunction tag(strings) {\n  console.log(strings.raw[0]);\n  // strings.raw[0] 为 \"first line\\\\nsecond line\"\n  // 打印输出 \"first line\\nsecond line\"\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n上面代码中，tag函数的第一个参数strings，有一个raw属性，也指向一个数组。该数组的成员与strings数组完全一致。比如，strings数组是[\"first line\\nsecond line\"]，那么strings.raw数组就是[\"first line\\\\nsecond line\"]。两者唯一的区别，就是字符串里面的斜杠都被转义了。比如，strings.raw 数组会将\\n视为\\\\和n两个字符，而不是换行符。这是为了方便取得转义之前的原始模板而设计的。\n\n\n# 模板字符串的限制\n\n前面提到标签模板里面，可以内嵌其他语言。但是，模板字符串默认会将字符串转义，导致无法嵌入其他语言。\n\n举例来说，标签模板里面可以嵌入 latex 语言。\n\nfunction latex(strings) {\n  // ...\n}\n\nlet document = latex`\n\\newcommand{\\fun}{\\textbf{fun!}}  // 正常工作\n\\newcommand{\\unicode}{\\textbf{unicode!}} // 报错\n\\newcommand{\\xerxes}{\\textbf{king!}} // 报错\n\nbreve over the h goes \\u{h}ere // 报错\n`\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n上面代码中，变量document内嵌的模板字符串，对于 latex 语言来说完全是合法的，但是 javascript 引擎会报错。原因就在于字符串的转义。\n\n模板字符串会将\\u00ff和\\u{42}当作 unicode 字符进行转义，所以\\unicode解析时报错；而\\x56会被当作十六进制字符串转义，所以\\xerxes会报错。也就是说，\\u和\\x在 latex 里面有特殊含义，但是 javascript 将它们转义了。\n\n为了解决这个问题，es2018 放松了对标签模板里面的字符串转义的限制。如果遇到不合法的字符串转义，就返回undefined，而不是报错，并且从raw属性上面可以得到原始字符串。\n\nfunction tag(strs) {\n  strs[0] === undefined\n  strs.raw[0] === \"\\\\unicode and \\\\u{55}\";\n}\ntag`\\unicode and \\u{55}`\n\n\n1\n2\n3\n4\n5\n\n\n上面代码中，模板字符串原本是应该报错的，但是由于放松了对字符串转义的限制，所以不报错了，javascript 引擎将第一个字符设置为undefined，但是raw属性依然可以得到原始字符串，因此tag函数还是可以对原字符串进行处理。\n\n注意，这种对字符串转义的放松，只在标签模板解析字符串时生效，不是标签模板的场合，依然会报错。\n\nlet bad = `bad escape sequence: \\unicode`; // 报错\n\n\n1\n",charsets:{cjk:!0}},{title:"正则的扩展",frontmatter:{title:"正则的扩展",date:"2020-02-09T16:00:29.000Z",permalink:"/pages/0473261a6ab0ee8c",author:"阮一峰",categories:["《ES6 教程》笔记"],tags:["ES6"],readingShow:"top"},regularPath:"/06.%E4%B9%A6%E7%B1%8D/05.%E3%80%8AES6%20%E6%95%99%E7%A8%8B%E3%80%8B%E7%AC%94%E8%AE%B0/06.%E6%AD%A3%E5%88%99%E7%9A%84%E6%89%A9%E5%B1%95.html",relativePath:"06.书籍/05.《ES6 教程》笔记/06.正则的扩展.md",key:"v-5f4e6602",path:"/pages/0473261a6ab0ee8c/",headers:[{level:2,title:"RegExp 构造函数",slug:"regexp-构造函数",normalizedTitle:"regexp 构造函数",charIndex:12},{level:2,title:"字符串的正则方法",slug:"字符串的正则方法",normalizedTitle:"字符串的正则方法",charIndex:614},{level:2,title:"u 修饰符",slug:"u-修饰符",normalizedTitle:"u 修饰符",charIndex:1001},{level:2,title:"RegExp.prototype.unicode 属性",slug:"regexp-prototype-unicode-属性",normalizedTitle:"regexp.prototype.unicode 属性",charIndex:2659},{level:2,title:"y 修饰符",slug:"y-修饰符",normalizedTitle:"y 修饰符",charIndex:2857},{level:2,title:"RegExp.prototype.sticky 属性",slug:"regexp-prototype-sticky-属性",normalizedTitle:"regexp.prototype.sticky 属性",charIndex:5123},{level:2,title:"RegExp.prototype.flags 属性",slug:"regexp-prototype-flags-属性",normalizedTitle:"regexp.prototype.flags 属性",charIndex:5244},{level:2,title:"s 修饰符：dotAll 模式",slug:"s-修饰符-dotall-模式",normalizedTitle:"s 修饰符：dotall 模式",charIndex:5445},{level:2,title:"后行断言",slug:"后行断言",normalizedTitle:"后行断言",charIndex:6245},{level:2,title:"Unicode 属性类",slug:"unicode-属性类",normalizedTitle:"unicode 属性类",charIndex:7842},{level:2,title:"具名组匹配",slug:"具名组匹配",normalizedTitle:"具名组匹配",charIndex:9210},{level:3,title:"简介",slug:"简介",normalizedTitle:"简介",charIndex:9220},{level:3,title:"解构赋值和替换",slug:"解构赋值和替换",normalizedTitle:"解构赋值和替换",charIndex:10371},{level:3,title:"引用",slug:"引用",normalizedTitle:"引用",charIndex:7630},{level:2,title:"String.prototype.matchAll()",slug:"string-prototype-matchall",normalizedTitle:"string.prototype.matchall()",charIndex:11613}],excerpt:'<h1 id="正则的扩展"><a class="header-anchor" href="#正则的扩展">#</a> 正则的扩展</h1>\n<h2 id="regexp-构造函数"><a class="header-anchor" href="#regexp-构造函数">#</a> RegExp 构造函数</h2>\n<p>在 ES5 中，<code>RegExp</code>构造函数的参数有两种情况。</p>\n<p>第一种情况是，参数是字符串，这时第二个参数表示正则表达式的修饰符（flag）。</p>\n\x3c!--beforebegin--\x3e<div class="language-javascript line-numbers-mode">\x3c!--afterbegin--\x3e<pre v-pre class="language-javascript"><code><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">\'xyz\'</span><span class="token punctuation">,</span> <span class="token string">\'i\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 等价于</span>\n<span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">xyz</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">;</span>\n</code></pre>\n<div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div>\x3c!--beforeend--\x3e</div>\x3c!--afterend--\x3e',lastUpdated:"2022/9/22 下午4:28:09",lastUpdatedTimestamp:1663835289e3,headersStr:"RegExp 构造函数 字符串的正则方法 u 修饰符 RegExp.prototype.unicode 属性 y 修饰符 RegExp.prototype.sticky 属性 RegExp.prototype.flags 属性 s 修饰符：dotAll 模式 后行断言 Unicode 属性类 具名组匹配 简介 解构赋值和替换 引用 String.prototype.matchAll()",content:"# 正则的扩展\n\n\n# RegExp 构造函数\n\n在 ES5 中，RegExp构造函数的参数有两种情况。\n\n第一种情况是，参数是字符串，这时第二个参数表示正则表达式的修饰符（flag）。\n\nvar regex = new RegExp('xyz', 'i');\n// 等价于\nvar regex = /xyz/i;\n\n\n1\n2\n3\n\n\n第二种情况是，参数是一个正则表示式，这时会返回一个原有正则表达式的拷贝。\n\nvar regex = new RegExp(/xyz/i);\n// 等价于\nvar regex = /xyz/i;\n\n\n1\n2\n3\n\n\n但是，ES5 不允许此时使用第二个参数添加修饰符，否则会报错。\n\nvar regex = new RegExp(/xyz/, 'i');\n// Uncaught TypeError: Cannot supply flags when constructing one RegExp from another\n\n\n1\n2\n\n\nES6 改变了这种行为。如果RegExp构造函数第一个参数是一个正则对象，那么可以使用第二个参数指定修饰符。而且，返回的正则表达式会忽略原有的正则表达式的修饰符，只使用新指定的修饰符。\n\nnew RegExp(/abc/ig, 'i').flags\n// \"i\"\n\n\n1\n2\n\n\n上面代码中，原有正则对象的修饰符是ig，它会被第二个参数i覆盖。\n\n\n# 字符串的正则方法\n\n字符串对象共有 4 个方法，可以使用正则表达式：match()、replace()、search()和split()。\n\nES6 将这 4 个方法，在语言内部全部调用RegExp的实例方法，从而做到所有与正则相关的方法，全都定义在RegExp对象上。\n\n * String.prototype.match 调用 RegExp.prototype[Symbol.match]\n * String.prototype.replace 调用 RegExp.prototype[Symbol.replace]\n * String.prototype.search 调用 RegExp.prototype[Symbol.search]\n * String.prototype.split 调用 RegExp.prototype[Symbol.split]\n\n\n# u 修饰符\n\nES6 对正则表达式添加了u修饰符，含义为“Unicode 模式”，用来正确处理大于\\uFFFF的 Unicode 字符。也就是说，会正确处理四个字节的 UTF-16 编码。\n\n/^\\uD83D/u.test('\\uD83D\\uDC2A') // false\n/^\\uD83D/.test('\\uD83D\\uDC2A') // true\n\n\n1\n2\n\n\n上面代码中，\\uD83D\\uDC2A是一个四个字节的 UTF-16 编码，代表一个字符。但是，ES5 不支持四个字节的 UTF-16 编码，会将其识别为两个字符，导致第二行代码结果为true。加了u修饰符以后，ES6 就会识别其为一个字符，所以第一行代码结果为false。\n\n一旦加上u修饰符号，就会修改下面这些正则表达式的行为。\n\n（1）点字符\n\n点（.）字符在正则表达式中，含义是除了换行符以外的任意单个字符。对于码点大于0xFFFF的 Unicode 字符，点字符不能识别，必须加上u修饰符。\n\nvar s = '𠮷';\n\n/^.$/.test(s) // false\n/^.$/u.test(s) // true\n\n\n1\n2\n3\n4\n\n\n上面代码表示，如果不添加u修饰符，正则表达式就会认为字符串为两个字符，从而匹配失败。\n\n（2）Unicode 字符表示法\n\nES6 新增了使用大括号表示 Unicode 字符，这种表示法在正则表达式中必须加上u修饰符，才能识别当中的大括号，否则会被解读为量词。\n\n/\\u{61}/.test('a') // false\n/\\u{61}/u.test('a') // true\n/\\u{20BB7}/u.test('𠮷') // true\n\n\n1\n2\n3\n\n\n上面代码表示，如果不加u修饰符，正则表达式无法识别\\u{61}这种表示法，只会认为这匹配 61 个连续的u。\n\n（3）量词\n\n使用u修饰符后，所有量词都会正确识别码点大于0xFFFF的 Unicode 字符。\n\n/a{2}/.test('aa') // true\n/a{2}/u.test('aa') // true\n/𠮷{2}/.test('𠮷𠮷') // false\n/𠮷{2}/u.test('𠮷𠮷') // true\n\n\n1\n2\n3\n4\n\n\n（4）预定义模式\n\nu修饰符也影响到预定义模式，能否正确识别码点大于0xFFFF的 Unicode 字符。\n\n/^\\S$/.test('𠮷') // false\n/^\\S$/u.test('𠮷') // true\n\n\n1\n2\n\n\n上面代码的\\S是预定义模式，匹配所有非空白字符。只有加了u修饰符，它才能正确匹配码点大于0xFFFF的 Unicode 字符。\n\n利用这一点，可以写出一个正确返回字符串长度的函数。\n\nfunction codePointLength(text) {\n  var result = text.match(/[\\s\\S]/gu);\n  return result ? result.length : 0;\n}\n\nvar s = '𠮷𠮷';\n\ns.length // 4\ncodePointLength(s) // 2\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n（5）i 修饰符\n\n有些 Unicode 字符的编码不同，但是字型很相近，比如，\\u004B与\\u212A都是大写的K。\n\n/[a-z]/i.test('\\u212A') // false\n/[a-z]/iu.test('\\u212A') // true\n\n\n1\n2\n\n\n上面代码中，不加u修饰符，就无法识别非规范的K字符。\n\n（6）转义\n\n没有u修饰符的情况下，正则中没有定义的转义（如逗号的转义\\,）无效，而在u模式会报错。\n\n/\\,/ // /\\,/\n/\\,/u // 报错\n\n\n1\n2\n\n\n上面代码中，没有u修饰符时，逗号前面的反斜杠是无效的，加了u修饰符就报错。\n\n\n# RegExp.prototype.unicode 属性\n\n正则实例对象新增unicode属性，表示是否设置了u修饰符。\n\nconst r1 = /hello/;\nconst r2 = /hello/u;\n\nr1.unicode // false\nr2.unicode // true\n\n\n1\n2\n3\n4\n5\n\n\n上面代码中，正则表达式是否设置了u修饰符，可以从unicode属性看出来。\n\n\n# y 修饰符\n\n除了u修饰符，ES6 还为正则表达式添加了y修饰符，叫做“粘连”（sticky）修饰符。\n\ny修饰符的作用与g修饰符类似，也是全局匹配，后一次匹配都从上一次匹配成功的下一个位置开始。不同之处在于，g修饰符只要剩余位置中存在匹配就可，而y修饰符确保匹配必须从剩余的第一个位置开始，这也就是“粘连”的涵义。\n\nvar s = 'aaa_aa_a';\nvar r1 = /a+/g;\nvar r2 = /a+/y;\n\nr1.exec(s) // [\"aaa\"]\nr2.exec(s) // [\"aaa\"]\n\nr1.exec(s) // [\"aa\"]\nr2.exec(s) // null\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n上面代码有两个正则表达式，一个使用g修饰符，另一个使用y修饰符。这两个正则表达式各执行了两次，第一次执行的时候，两者行为相同，剩余字符串都是_aa_a。由于g修饰没有位置要求，所以第二次执行会返回结果，而y修饰符要求匹配必须从头部开始，所以返回null。\n\n如果改一下正则表达式，保证每次都能头部匹配，y修饰符就会返回结果了。\n\nvar s = 'aaa_aa_a';\nvar r = /a+_/y;\n\nr.exec(s) // [\"aaa_\"]\nr.exec(s) // [\"aa_\"]\n\n\n1\n2\n3\n4\n5\n\n\n上面代码每次匹配，都是从剩余字符串的头部开始。\n\n使用lastIndex属性，可以更好地说明y修饰符。\n\nconst REGEX = /a/g;\n\n// 指定从2号位置（y）开始匹配\nREGEX.lastIndex = 2;\n\n// 匹配成功\nconst match = REGEX.exec('xaya');\n\n// 在3号位置匹配成功\nmatch.index // 3\n\n// 下一次匹配从4号位开始\nREGEX.lastIndex // 4\n\n// 4号位开始匹配失败\nREGEX.exec('xaya') // null\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n上面代码中，lastIndex属性指定每次搜索的开始位置，g修饰符从这个位置开始向后搜索，直到发现匹配为止。\n\ny修饰符同样遵守lastIndex属性，但是要求必须在lastIndex指定的位置发现匹配。\n\nconst REGEX = /a/y;\n\n// 指定从2号位置开始匹配\nREGEX.lastIndex = 2;\n\n// 不是粘连，匹配失败\nREGEX.exec('xaya') // null\n\n// 指定从3号位置开始匹配\nREGEX.lastIndex = 3;\n\n// 3号位置是粘连，匹配成功\nconst match = REGEX.exec('xaya');\nmatch.index // 3\nREGEX.lastIndex // 4\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n实际上，y修饰符号隐含了头部匹配的标志^。\n\n/b/y.exec('aba')\n// null\n\n\n1\n2\n\n\n上面代码由于不能保证头部匹配，所以返回null。y修饰符的设计本意，就是让头部匹配的标志^在全局匹配中都有效。\n\n下面是字符串对象的replace方法的例子。\n\nconst REGEX = /a/gy;\n'aaxa'.replace(REGEX, '-') // '--xa'\n\n\n1\n2\n\n\n上面代码中，最后一个a因为不是出现在下一次匹配的头部，所以不会被替换。\n\n单单一个y修饰符对match方法，只能返回第一个匹配，必须与g修饰符联用，才能返回所有匹配。\n\n'a1a2a3'.match(/a\\d/y) // [\"a1\"]\n'a1a2a3'.match(/a\\d/gy) // [\"a1\", \"a2\", \"a3\"]\n\n\n1\n2\n\n\ny修饰符的一个应用，是从字符串提取 token（词元），y修饰符确保了匹配之间不会有漏掉的字符。\n\nconst TOKEN_Y = /\\s*(\\+|[0-9]+)\\s*/y;\nconst TOKEN_G  = /\\s*(\\+|[0-9]+)\\s*/g;\n\ntokenize(TOKEN_Y, '3 + 4')\n// [ '3', '+', '4' ]\ntokenize(TOKEN_G, '3 + 4')\n// [ '3', '+', '4' ]\n\nfunction tokenize(TOKEN_REGEX, str) {\n  let result = [];\n  let match;\n  while (match = TOKEN_REGEX.exec(str)) {\n    result.push(match[1]);\n  }\n  return result;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n上面代码中，如果字符串里面没有非法字符，y修饰符与g修饰符的提取结果是一样的。但是，一旦出现非法字符，两者的行为就不一样了。\n\ntokenize(TOKEN_Y, '3x + 4')\n// [ '3' ]\ntokenize(TOKEN_G, '3x + 4')\n// [ '3', '+', '4' ]\n\n\n1\n2\n3\n4\n\n\n上面代码中，g修饰符会忽略非法字符，而y修饰符不会，这样就很容易发现错误。\n\n\n# RegExp.prototype.sticky 属性\n\n与y修饰符相匹配，ES6 的正则实例对象多了sticky属性，表示是否设置了y修饰符。\n\nvar r = /hello\\d/y;\nr.sticky // true\n\n\n1\n2\n\n\n\n# RegExp.prototype.flags 属性\n\nES6 为正则表达式新增了flags属性，会返回正则表达式的修饰符。\n\n// ES5 的 source 属性\n// 返回正则表达式的正文\n/abc/ig.source\n// \"abc\"\n\n// ES6 的 flags 属性\n// 返回正则表达式的修饰符\n/abc/ig.flags\n// 'gi'\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n\n# s 修饰符：dotAll 模式\n\n正则表达式中，点（.）是一个特殊字符，代表任意的单个字符，但是有两个例外。一个是四个字节的 UTF-16 字符，这个可以用u修饰符解决；另一个是行终止符（line terminator character）。\n\n所谓行终止符，就是该字符表示一行的终结。以下四个字符属于“行终止符”。\n\n * U+000A 换行符（\\n）\n * U+000D 回车符（\\r）\n * U+2028 行分隔符（line separator）\n * U+2029 段分隔符（paragraph separator）\n\n/foo.bar/.test('foo\\nbar')\n// false\n\n\n1\n2\n\n\n上面代码中，因为.不匹配\\n，所以正则表达式返回false。\n\n但是，很多时候我们希望匹配的是任意单个字符，这时有一种变通的写法。\n\n/foo[^]bar/.test('foo\\nbar')\n// true\n\n\n1\n2\n\n\n这种解决方案毕竟不太符合直觉，ES2018 引入s修饰符，使得.可以匹配任意单个字符。\n\n/foo.bar/s.test('foo\\nbar') // true\n\n\n1\n\n\n这被称为dotAll模式，即点（dot）代表一切字符。所以，正则表达式还引入了一个dotAll属性，返回一个布尔值，表示该正则表达式是否处在dotAll模式。\n\nconst re = /foo.bar/s;\n// 另一种写法\n// const re = new RegExp('foo.bar', 's');\n\nre.test('foo\\nbar') // true\nre.dotAll // true\nre.flags // 's'\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n/s修饰符和多行修饰符/m不冲突，两者一起使用的情况下，.匹配所有字符，而^和$匹配每一行的行首和行尾。\n\n\n# 后行断言\n\nJavaScript 语言的正则表达式，只支持先行断言（lookahead）和先行否定断言（negative lookahead），不支持后行断言（lookbehind）和后行否定断言（negative lookbehind）。ES2018 引入后行断言，V8 引擎 4.9 版（Chrome 62）已经支持。\n\n“先行断言”指的是，x只有在y前面才匹配，必须写成/x(?=y)/。比如，只匹配百分号之前的数字，要写成/\\d+(?=%)/。“先行否定断言”指的是，x只有不在y前面才匹配，必须写成/x(?!y)/。比如，只匹配不在百分号之前的数字，要写成/\\d+(?!%)/。\n\n/\\d+(?=%)/.exec('100% of US presidents have been male')  // [\"100\"]\n/\\d+(?!%)/.exec('that’s all 44 of them')                 // [\"44\"]\n\n\n1\n2\n\n\n上面两个字符串，如果互换正则表达式，就不会得到相同结果。另外，还可以看到，“先行断言”括号之中的部分（(?=%)），是不计入返回结果的。\n\n“后行断言”正好与“先行断言”相反，x只有在y后面才匹配，必须写成/(?<=y)x/。比如，只匹配美元符号之后的数字，要写成/(?<=\\$)\\d+/。“后行否定断言”则与“先行否定断言”相反，x只有不在y后面才匹配，必须写成/(?<!y)x/。比如，只匹配不在美元符号后面的数字，要写成/(?<!\\$)\\d+/。\n\n/(?<=\\$)\\d+/.exec('Benjamin Franklin is on the $100 bill')  // [\"100\"]\n/(?<!\\$)\\d+/.exec('it’s is worth about €90')                // [\"90\"]\n\n\n1\n2\n\n\n上面的例子中，“后行断言”的括号之中的部分（(?<=\\$)），也是不计入返回结果。\n\n下面的例子是使用后行断言进行字符串替换。\n\nconst RE_DOLLAR_PREFIX = /(?<=\\$)foo/g;\n'$foo %foo foo'.replace(RE_DOLLAR_PREFIX, 'bar');\n// '$bar %foo foo'\n\n\n1\n2\n3\n\n\n上面代码中，只有在美元符号后面的foo才会被替换。\n\n“后行断言”的实现，需要先匹配/(?<=y)x/的x，然后再回到左边，匹配y的部分。这种“先右后左”的执行顺序，与所有其他正则操作相反，导致了一些不符合预期的行为。\n\n首先，后行断言的组匹配，与正常情况下结果是不一样的。\n\n/(?<=(\\d+)(\\d+))$/.exec('1053') // [\"\", \"1\", \"053\"]\n/^(\\d+)(\\d+)$/.exec('1053') // [\"1053\", \"105\", \"3\"]\n\n\n1\n2\n\n\n上面代码中，需要捕捉两个组匹配。没有“后行断言”时，第一个括号是贪婪模式，第二个括号只能捕获一个字符，所以结果是105和3。而“后行断言”时，由于执行顺序是从右到左，第二个括号是贪婪模式，第一个括号只能捕获一个字符，所以结果是1和053。\n\n其次，“后行断言”的反斜杠引用，也与通常的顺序相反，必须放在对应的那个括号之前。\n\n/(?<=(o)d\\1)r/.exec('hodor')  // null\n/(?<=\\1d(o))r/.exec('hodor')  // [\"r\", \"o\"]\n\n\n1\n2\n\n\n上面代码中，如果后行断言的反斜杠引用（\\1）放在括号的后面，就不会得到匹配结果，必须放在前面才可以。因为后行断言是先从左到右扫描，发现匹配以后再回过头，从右到左完成反斜杠引用。\n\n\n# Unicode 属性类\n\nES2018 引入了一种新的类的写法\\p{...}和\\P{...}，允许正则表达式匹配符合 Unicode 某种属性的所有字符。\n\nconst regexGreekSymbol = /\\p{Script=Greek}/u;\nregexGreekSymbol.test('π') // true\n\n\n1\n2\n\n\n上面代码中，\\p{Script=Greek}指定匹配一个希腊文字母，所以匹配π成功。\n\nUnicode 属性类要指定属性名和属性值。\n\n\\p{UnicodePropertyName=UnicodePropertyValue}\n\n\n1\n\n\n对于某些属性，可以只写属性名，或者只写属性值。\n\n\\p{UnicodePropertyName}\n\\p{UnicodePropertyValue}\n\n\n1\n2\n\n\n\\P{…}是\\p{…}的反向匹配，即匹配不满足条件的字符。\n\n注意，这两种类只对 Unicode 有效，所以使用的时候一定要加上u修饰符。如果不加u修饰符，正则表达式使用\\p和\\P会报错，ECMAScript 预留了这两个类。\n\n由于 Unicode 的各种属性非常多，所以这种新的类的表达能力非常强。\n\nconst regex = /^\\p{Decimal_Number}+$/u;\nregex.test('𝟏𝟐𝟑𝟜𝟝𝟞𝟩𝟪𝟫𝟬𝟭𝟮𝟯𝟺𝟻𝟼') // true\n\n\n1\n2\n\n\n上面代码中，属性类指定匹配所有十进制字符，可以看到各种字型的十进制字符都会匹配成功。\n\n\\p{Number}甚至能匹配罗马数字。\n\n// 匹配所有数字\nconst regex = /^\\p{Number}+$/u;\nregex.test('²³¹¼½¾') // true\nregex.test('㉛㉜㉝') // true\nregex.test('ⅠⅡⅢⅣⅤⅥⅦⅧⅨⅩⅪⅫ') // true\n\n\n1\n2\n3\n4\n5\n\n\n下面是其他一些例子。\n\n// 匹配所有空格\n\\p{White_Space}\n\n// 匹配各种文字的所有字母，等同于 Unicode 版的 \\w\n[\\p{Alphabetic}\\p{Mark}\\p{Decimal_Number}\\p{Connector_Punctuation}\\p{Join_Control}]\n\n// 匹配各种文字的所有非字母的字符，等同于 Unicode 版的 \\W\n[^\\p{Alphabetic}\\p{Mark}\\p{Decimal_Number}\\p{Connector_Punctuation}\\p{Join_Control}]\n\n// 匹配 Emoji\n/\\p{Emoji_Modifier_Base}\\p{Emoji_Modifier}?|\\p{Emoji_Presentation}|\\p{Emoji}\\uFE0F/gu\n\n// 匹配所有的箭头字符\nconst regexArrows = /^\\p{Block=Arrows}+$/u;\nregexArrows.test('←↑→↓↔↕↖↗↘↙⇏⇐⇑⇒⇓⇔⇕⇖⇗⇘⇙⇧⇩') // true\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n\n# 具名组匹配\n\n\n# 简介\n\n正则表达式使用圆括号进行组匹配。\n\nconst RE_DATE = /(\\d{4})-(\\d{2})-(\\d{2})/;\n\n\n1\n\n\n上面代码中，正则表达式里面有三组圆括号。使用exec方法，就可以将这三组匹配结果提取出来。\n\nconst RE_DATE = /(\\d{4})-(\\d{2})-(\\d{2})/;\n\nconst matchObj = RE_DATE.exec('1999-12-31');\nconst year = matchObj[1]; // 1999\nconst month = matchObj[2]; // 12\nconst day = matchObj[3]; // 31\n\n\n1\n2\n3\n4\n5\n6\n\n\n组匹配的一个问题是，每一组的匹配含义不容易看出来，而且只能用数字序号（比如matchObj[1]）引用，要是组的顺序变了，引用的时候就必须修改序号。\n\nES2018 引入了具名组匹配（Named Capture Groups），允许为每一个组匹配指定一个名字，既便于阅读代码，又便于引用。\n\nconst RE_DATE = /(?<year>\\d{4})-(?<month>\\d{2})-(?<day>\\d{2})/;\n\nconst matchObj = RE_DATE.exec('1999-12-31');\nconst year = matchObj.groups.year; // 1999\nconst month = matchObj.groups.month; // 12\nconst day = matchObj.groups.day; // 31\n\n\n1\n2\n3\n4\n5\n6\n\n\n上面代码中，“具名组匹配”在圆括号内部，模式的头部添加“问号 + 尖括号 + 组名”（?<year>），然后就可以在exec方法返回结果的groups属性上引用该组名。同时，数字序号（matchObj[1]）依然有效。\n\n具名组匹配等于为每一组匹配加上了 ID，便于描述匹配的目的。如果组的顺序变了，也不用改变匹配后的处理代码。\n\n如果具名组没有匹配，那么对应的groups对象属性会是undefined。\n\nconst RE_OPT_A = /^(?<as>a+)?$/;\nconst matchObj = RE_OPT_A.exec('');\n\nmatchObj.groups.as // undefined\n'as' in matchObj.groups // true\n\n\n1\n2\n3\n4\n5\n\n\n上面代码中，具名组as没有找到匹配，那么matchObj.groups.as属性值就是undefined，并且as这个键名在groups是始终存在的。\n\n\n# 解构赋值和替换\n\n有了具名组匹配以后，可以使用解构赋值直接从匹配结果上为变量赋值。\n\nlet {groups: {one, two}} = /^(?<one>.*):(?<two>.*)$/u.exec('foo:bar');\none  // foo\ntwo  // bar\n\n\n1\n2\n3\n\n\n字符串替换时，使用$<组名>引用具名组。\n\nlet re = /(?<year>\\d{4})-(?<month>\\d{2})-(?<day>\\d{2})/u;\n\n'2015-01-02'.replace(re, '$<day>/$<month>/$<year>')\n// '02/01/2015'\n\n\n1\n2\n3\n4\n\n\n上面代码中，replace方法的第二个参数是一个字符串，而不是正则表达式。\n\nreplace方法的第二个参数也可以是函数，该函数的参数序列如下。\n\n'2015-01-02'.replace(re, (\n   matched, // 整个匹配结果 2015-01-02\n   capture1, // 第一个组匹配 2015\n   capture2, // 第二个组匹配 01\n   capture3, // 第三个组匹配 02\n   position, // 匹配开始的位置 0\n   S, // 原字符串 2015-01-02\n   groups // 具名组构成的一个对象 {year, month, day}\n ) => {\n let {day, month, year} = groups;\n return `${day}/${month}/${year}`;\n});\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n具名组匹配在原来的基础上，新增了最后一个函数参数：具名组构成的一个对象。函数内部可以直接对这个对象进行解构赋值。\n\n\n# 引用\n\n如果要在正则表达式内部引用某个“具名组匹配”，可以使用\\k<组名>的写法。\n\nconst RE_TWICE = /^(?<word>[a-z]+)!\\k<word>$/;\nRE_TWICE.test('abc!abc') // true\nRE_TWICE.test('abc!ab') // false\n\n\n1\n2\n3\n\n\n数字引用（\\1）依然有效。\n\nconst RE_TWICE = /^(?<word>[a-z]+)!\\1$/;\nRE_TWICE.test('abc!abc') // true\nRE_TWICE.test('abc!ab') // false\n\n\n1\n2\n3\n\n\n这两种引用语法还可以同时使用。\n\nconst RE_TWICE = /^(?<word>[a-z]+)!\\k<word>!\\1$/;\nRE_TWICE.test('abc!abc!abc') // true\nRE_TWICE.test('abc!abc!ab') // false\n\n\n1\n2\n3\n\n\n\n# String.prototype.matchAll()\n\n如果一个正则表达式在字符串里面有多个匹配，现在一般使用g修饰符或y修饰符，在循环里面逐一取出。\n\nvar regex = /t(e)(st(\\d?))/g;\nvar string = 'test1test2test3';\n\nvar matches = [];\nvar match;\nwhile (match = regex.exec(string)) {\n  matches.push(match);\n}\n\nmatches\n// [\n//   [\"test1\", \"e\", \"st1\", \"1\", index: 0, input: \"test1test2test3\"],\n//   [\"test2\", \"e\", \"st2\", \"2\", index: 5, input: \"test1test2test3\"],\n//   [\"test3\", \"e\", \"st3\", \"3\", index: 10, input: \"test1test2test3\"]\n// ]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n上面代码中，while循环取出每一轮的正则匹配，一共三轮。\n\nES2020 增加了String.prototype.matchAll()方法，可以一次性取出所有匹配。不过，它返回的是一个遍历器（Iterator），而不是数组。\n\nconst string = 'test1test2test3';\n\n// g 修饰符加不加都可以\nconst regex = /t(e)(st(\\d?))/g;\n\nfor (const match of string.matchAll(regex)) {\n  console.log(match);\n}\n// [\"test1\", \"e\", \"st1\", \"1\", index: 0, input: \"test1test2test3\"]\n// [\"test2\", \"e\", \"st2\", \"2\", index: 5, input: \"test1test2test3\"]\n// [\"test3\", \"e\", \"st3\", \"3\", index: 10, input: \"test1test2test3\"]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n上面代码中，由于string.matchAll(regex)返回的是遍历器，所以可以用for...of循环取出。相对于返回数组，返回遍历器的好处在于，如果匹配结果是一个很大的数组，那么遍历器比较节省资源。\n\n遍历器转为数组是非常简单的，使用...运算符和Array.from()方法就可以了。\n\n// 转为数组方法一\n[...string.matchAll(regex)]\n\n// 转为数组方法二\nArray.from(string.matchAll(regex))\n\n\n1\n2\n3\n4\n5\n",normalizedContent:"# 正则的扩展\n\n\n# regexp 构造函数\n\n在 es5 中，regexp构造函数的参数有两种情况。\n\n第一种情况是，参数是字符串，这时第二个参数表示正则表达式的修饰符（flag）。\n\nvar regex = new regexp('xyz', 'i');\n// 等价于\nvar regex = /xyz/i;\n\n\n1\n2\n3\n\n\n第二种情况是，参数是一个正则表示式，这时会返回一个原有正则表达式的拷贝。\n\nvar regex = new regexp(/xyz/i);\n// 等价于\nvar regex = /xyz/i;\n\n\n1\n2\n3\n\n\n但是，es5 不允许此时使用第二个参数添加修饰符，否则会报错。\n\nvar regex = new regexp(/xyz/, 'i');\n// uncaught typeerror: cannot supply flags when constructing one regexp from another\n\n\n1\n2\n\n\nes6 改变了这种行为。如果regexp构造函数第一个参数是一个正则对象，那么可以使用第二个参数指定修饰符。而且，返回的正则表达式会忽略原有的正则表达式的修饰符，只使用新指定的修饰符。\n\nnew regexp(/abc/ig, 'i').flags\n// \"i\"\n\n\n1\n2\n\n\n上面代码中，原有正则对象的修饰符是ig，它会被第二个参数i覆盖。\n\n\n# 字符串的正则方法\n\n字符串对象共有 4 个方法，可以使用正则表达式：match()、replace()、search()和split()。\n\nes6 将这 4 个方法，在语言内部全部调用regexp的实例方法，从而做到所有与正则相关的方法，全都定义在regexp对象上。\n\n * string.prototype.match 调用 regexp.prototype[symbol.match]\n * string.prototype.replace 调用 regexp.prototype[symbol.replace]\n * string.prototype.search 调用 regexp.prototype[symbol.search]\n * string.prototype.split 调用 regexp.prototype[symbol.split]\n\n\n# u 修饰符\n\nes6 对正则表达式添加了u修饰符，含义为“unicode 模式”，用来正确处理大于\\uffff的 unicode 字符。也就是说，会正确处理四个字节的 utf-16 编码。\n\n/^\\ud83d/u.test('\\ud83d\\udc2a') // false\n/^\\ud83d/.test('\\ud83d\\udc2a') // true\n\n\n1\n2\n\n\n上面代码中，\\ud83d\\udc2a是一个四个字节的 utf-16 编码，代表一个字符。但是，es5 不支持四个字节的 utf-16 编码，会将其识别为两个字符，导致第二行代码结果为true。加了u修饰符以后，es6 就会识别其为一个字符，所以第一行代码结果为false。\n\n一旦加上u修饰符号，就会修改下面这些正则表达式的行为。\n\n（1）点字符\n\n点（.）字符在正则表达式中，含义是除了换行符以外的任意单个字符。对于码点大于0xffff的 unicode 字符，点字符不能识别，必须加上u修饰符。\n\nvar s = '𠮷';\n\n/^.$/.test(s) // false\n/^.$/u.test(s) // true\n\n\n1\n2\n3\n4\n\n\n上面代码表示，如果不添加u修饰符，正则表达式就会认为字符串为两个字符，从而匹配失败。\n\n（2）unicode 字符表示法\n\nes6 新增了使用大括号表示 unicode 字符，这种表示法在正则表达式中必须加上u修饰符，才能识别当中的大括号，否则会被解读为量词。\n\n/\\u{61}/.test('a') // false\n/\\u{61}/u.test('a') // true\n/\\u{20bb7}/u.test('𠮷') // true\n\n\n1\n2\n3\n\n\n上面代码表示，如果不加u修饰符，正则表达式无法识别\\u{61}这种表示法，只会认为这匹配 61 个连续的u。\n\n（3）量词\n\n使用u修饰符后，所有量词都会正确识别码点大于0xffff的 unicode 字符。\n\n/a{2}/.test('aa') // true\n/a{2}/u.test('aa') // true\n/𠮷{2}/.test('𠮷𠮷') // false\n/𠮷{2}/u.test('𠮷𠮷') // true\n\n\n1\n2\n3\n4\n\n\n（4）预定义模式\n\nu修饰符也影响到预定义模式，能否正确识别码点大于0xffff的 unicode 字符。\n\n/^\\s$/.test('𠮷') // false\n/^\\s$/u.test('𠮷') // true\n\n\n1\n2\n\n\n上面代码的\\s是预定义模式，匹配所有非空白字符。只有加了u修饰符，它才能正确匹配码点大于0xffff的 unicode 字符。\n\n利用这一点，可以写出一个正确返回字符串长度的函数。\n\nfunction codepointlength(text) {\n  var result = text.match(/[\\s\\s]/gu);\n  return result ? result.length : 0;\n}\n\nvar s = '𠮷𠮷';\n\ns.length // 4\ncodepointlength(s) // 2\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n（5）i 修饰符\n\n有些 unicode 字符的编码不同，但是字型很相近，比如，\\u004b与\\u212a都是大写的k。\n\n/[a-z]/i.test('\\u212a') // false\n/[a-z]/iu.test('\\u212a') // true\n\n\n1\n2\n\n\n上面代码中，不加u修饰符，就无法识别非规范的k字符。\n\n（6）转义\n\n没有u修饰符的情况下，正则中没有定义的转义（如逗号的转义\\,）无效，而在u模式会报错。\n\n/\\,/ // /\\,/\n/\\,/u // 报错\n\n\n1\n2\n\n\n上面代码中，没有u修饰符时，逗号前面的反斜杠是无效的，加了u修饰符就报错。\n\n\n# regexp.prototype.unicode 属性\n\n正则实例对象新增unicode属性，表示是否设置了u修饰符。\n\nconst r1 = /hello/;\nconst r2 = /hello/u;\n\nr1.unicode // false\nr2.unicode // true\n\n\n1\n2\n3\n4\n5\n\n\n上面代码中，正则表达式是否设置了u修饰符，可以从unicode属性看出来。\n\n\n# y 修饰符\n\n除了u修饰符，es6 还为正则表达式添加了y修饰符，叫做“粘连”（sticky）修饰符。\n\ny修饰符的作用与g修饰符类似，也是全局匹配，后一次匹配都从上一次匹配成功的下一个位置开始。不同之处在于，g修饰符只要剩余位置中存在匹配就可，而y修饰符确保匹配必须从剩余的第一个位置开始，这也就是“粘连”的涵义。\n\nvar s = 'aaa_aa_a';\nvar r1 = /a+/g;\nvar r2 = /a+/y;\n\nr1.exec(s) // [\"aaa\"]\nr2.exec(s) // [\"aaa\"]\n\nr1.exec(s) // [\"aa\"]\nr2.exec(s) // null\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n上面代码有两个正则表达式，一个使用g修饰符，另一个使用y修饰符。这两个正则表达式各执行了两次，第一次执行的时候，两者行为相同，剩余字符串都是_aa_a。由于g修饰没有位置要求，所以第二次执行会返回结果，而y修饰符要求匹配必须从头部开始，所以返回null。\n\n如果改一下正则表达式，保证每次都能头部匹配，y修饰符就会返回结果了。\n\nvar s = 'aaa_aa_a';\nvar r = /a+_/y;\n\nr.exec(s) // [\"aaa_\"]\nr.exec(s) // [\"aa_\"]\n\n\n1\n2\n3\n4\n5\n\n\n上面代码每次匹配，都是从剩余字符串的头部开始。\n\n使用lastindex属性，可以更好地说明y修饰符。\n\nconst regex = /a/g;\n\n// 指定从2号位置（y）开始匹配\nregex.lastindex = 2;\n\n// 匹配成功\nconst match = regex.exec('xaya');\n\n// 在3号位置匹配成功\nmatch.index // 3\n\n// 下一次匹配从4号位开始\nregex.lastindex // 4\n\n// 4号位开始匹配失败\nregex.exec('xaya') // null\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n上面代码中，lastindex属性指定每次搜索的开始位置，g修饰符从这个位置开始向后搜索，直到发现匹配为止。\n\ny修饰符同样遵守lastindex属性，但是要求必须在lastindex指定的位置发现匹配。\n\nconst regex = /a/y;\n\n// 指定从2号位置开始匹配\nregex.lastindex = 2;\n\n// 不是粘连，匹配失败\nregex.exec('xaya') // null\n\n// 指定从3号位置开始匹配\nregex.lastindex = 3;\n\n// 3号位置是粘连，匹配成功\nconst match = regex.exec('xaya');\nmatch.index // 3\nregex.lastindex // 4\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n实际上，y修饰符号隐含了头部匹配的标志^。\n\n/b/y.exec('aba')\n// null\n\n\n1\n2\n\n\n上面代码由于不能保证头部匹配，所以返回null。y修饰符的设计本意，就是让头部匹配的标志^在全局匹配中都有效。\n\n下面是字符串对象的replace方法的例子。\n\nconst regex = /a/gy;\n'aaxa'.replace(regex, '-') // '--xa'\n\n\n1\n2\n\n\n上面代码中，最后一个a因为不是出现在下一次匹配的头部，所以不会被替换。\n\n单单一个y修饰符对match方法，只能返回第一个匹配，必须与g修饰符联用，才能返回所有匹配。\n\n'a1a2a3'.match(/a\\d/y) // [\"a1\"]\n'a1a2a3'.match(/a\\d/gy) // [\"a1\", \"a2\", \"a3\"]\n\n\n1\n2\n\n\ny修饰符的一个应用，是从字符串提取 token（词元），y修饰符确保了匹配之间不会有漏掉的字符。\n\nconst token_y = /\\s*(\\+|[0-9]+)\\s*/y;\nconst token_g  = /\\s*(\\+|[0-9]+)\\s*/g;\n\ntokenize(token_y, '3 + 4')\n// [ '3', '+', '4' ]\ntokenize(token_g, '3 + 4')\n// [ '3', '+', '4' ]\n\nfunction tokenize(token_regex, str) {\n  let result = [];\n  let match;\n  while (match = token_regex.exec(str)) {\n    result.push(match[1]);\n  }\n  return result;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n上面代码中，如果字符串里面没有非法字符，y修饰符与g修饰符的提取结果是一样的。但是，一旦出现非法字符，两者的行为就不一样了。\n\ntokenize(token_y, '3x + 4')\n// [ '3' ]\ntokenize(token_g, '3x + 4')\n// [ '3', '+', '4' ]\n\n\n1\n2\n3\n4\n\n\n上面代码中，g修饰符会忽略非法字符，而y修饰符不会，这样就很容易发现错误。\n\n\n# regexp.prototype.sticky 属性\n\n与y修饰符相匹配，es6 的正则实例对象多了sticky属性，表示是否设置了y修饰符。\n\nvar r = /hello\\d/y;\nr.sticky // true\n\n\n1\n2\n\n\n\n# regexp.prototype.flags 属性\n\nes6 为正则表达式新增了flags属性，会返回正则表达式的修饰符。\n\n// es5 的 source 属性\n// 返回正则表达式的正文\n/abc/ig.source\n// \"abc\"\n\n// es6 的 flags 属性\n// 返回正则表达式的修饰符\n/abc/ig.flags\n// 'gi'\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n\n# s 修饰符：dotall 模式\n\n正则表达式中，点（.）是一个特殊字符，代表任意的单个字符，但是有两个例外。一个是四个字节的 utf-16 字符，这个可以用u修饰符解决；另一个是行终止符（line terminator character）。\n\n所谓行终止符，就是该字符表示一行的终结。以下四个字符属于“行终止符”。\n\n * u+000a 换行符（\\n）\n * u+000d 回车符（\\r）\n * u+2028 行分隔符（line separator）\n * u+2029 段分隔符（paragraph separator）\n\n/foo.bar/.test('foo\\nbar')\n// false\n\n\n1\n2\n\n\n上面代码中，因为.不匹配\\n，所以正则表达式返回false。\n\n但是，很多时候我们希望匹配的是任意单个字符，这时有一种变通的写法。\n\n/foo[^]bar/.test('foo\\nbar')\n// true\n\n\n1\n2\n\n\n这种解决方案毕竟不太符合直觉，es2018 引入s修饰符，使得.可以匹配任意单个字符。\n\n/foo.bar/s.test('foo\\nbar') // true\n\n\n1\n\n\n这被称为dotall模式，即点（dot）代表一切字符。所以，正则表达式还引入了一个dotall属性，返回一个布尔值，表示该正则表达式是否处在dotall模式。\n\nconst re = /foo.bar/s;\n// 另一种写法\n// const re = new regexp('foo.bar', 's');\n\nre.test('foo\\nbar') // true\nre.dotall // true\nre.flags // 's'\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n/s修饰符和多行修饰符/m不冲突，两者一起使用的情况下，.匹配所有字符，而^和$匹配每一行的行首和行尾。\n\n\n# 后行断言\n\njavascript 语言的正则表达式，只支持先行断言（lookahead）和先行否定断言（negative lookahead），不支持后行断言（lookbehind）和后行否定断言（negative lookbehind）。es2018 引入后行断言，v8 引擎 4.9 版（chrome 62）已经支持。\n\n“先行断言”指的是，x只有在y前面才匹配，必须写成/x(?=y)/。比如，只匹配百分号之前的数字，要写成/\\d+(?=%)/。“先行否定断言”指的是，x只有不在y前面才匹配，必须写成/x(?!y)/。比如，只匹配不在百分号之前的数字，要写成/\\d+(?!%)/。\n\n/\\d+(?=%)/.exec('100% of us presidents have been male')  // [\"100\"]\n/\\d+(?!%)/.exec('that’s all 44 of them')                 // [\"44\"]\n\n\n1\n2\n\n\n上面两个字符串，如果互换正则表达式，就不会得到相同结果。另外，还可以看到，“先行断言”括号之中的部分（(?=%)），是不计入返回结果的。\n\n“后行断言”正好与“先行断言”相反，x只有在y后面才匹配，必须写成/(?<=y)x/。比如，只匹配美元符号之后的数字，要写成/(?<=\\$)\\d+/。“后行否定断言”则与“先行否定断言”相反，x只有不在y后面才匹配，必须写成/(?<!y)x/。比如，只匹配不在美元符号后面的数字，要写成/(?<!\\$)\\d+/。\n\n/(?<=\\$)\\d+/.exec('benjamin franklin is on the $100 bill')  // [\"100\"]\n/(?<!\\$)\\d+/.exec('it’s is worth about €90')                // [\"90\"]\n\n\n1\n2\n\n\n上面的例子中，“后行断言”的括号之中的部分（(?<=\\$)），也是不计入返回结果。\n\n下面的例子是使用后行断言进行字符串替换。\n\nconst re_dollar_prefix = /(?<=\\$)foo/g;\n'$foo %foo foo'.replace(re_dollar_prefix, 'bar');\n// '$bar %foo foo'\n\n\n1\n2\n3\n\n\n上面代码中，只有在美元符号后面的foo才会被替换。\n\n“后行断言”的实现，需要先匹配/(?<=y)x/的x，然后再回到左边，匹配y的部分。这种“先右后左”的执行顺序，与所有其他正则操作相反，导致了一些不符合预期的行为。\n\n首先，后行断言的组匹配，与正常情况下结果是不一样的。\n\n/(?<=(\\d+)(\\d+))$/.exec('1053') // [\"\", \"1\", \"053\"]\n/^(\\d+)(\\d+)$/.exec('1053') // [\"1053\", \"105\", \"3\"]\n\n\n1\n2\n\n\n上面代码中，需要捕捉两个组匹配。没有“后行断言”时，第一个括号是贪婪模式，第二个括号只能捕获一个字符，所以结果是105和3。而“后行断言”时，由于执行顺序是从右到左，第二个括号是贪婪模式，第一个括号只能捕获一个字符，所以结果是1和053。\n\n其次，“后行断言”的反斜杠引用，也与通常的顺序相反，必须放在对应的那个括号之前。\n\n/(?<=(o)d\\1)r/.exec('hodor')  // null\n/(?<=\\1d(o))r/.exec('hodor')  // [\"r\", \"o\"]\n\n\n1\n2\n\n\n上面代码中，如果后行断言的反斜杠引用（\\1）放在括号的后面，就不会得到匹配结果，必须放在前面才可以。因为后行断言是先从左到右扫描，发现匹配以后再回过头，从右到左完成反斜杠引用。\n\n\n# unicode 属性类\n\nes2018 引入了一种新的类的写法\\p{...}和\\p{...}，允许正则表达式匹配符合 unicode 某种属性的所有字符。\n\nconst regexgreeksymbol = /\\p{script=greek}/u;\nregexgreeksymbol.test('π') // true\n\n\n1\n2\n\n\n上面代码中，\\p{script=greek}指定匹配一个希腊文字母，所以匹配π成功。\n\nunicode 属性类要指定属性名和属性值。\n\n\\p{unicodepropertyname=unicodepropertyvalue}\n\n\n1\n\n\n对于某些属性，可以只写属性名，或者只写属性值。\n\n\\p{unicodepropertyname}\n\\p{unicodepropertyvalue}\n\n\n1\n2\n\n\n\\p{…}是\\p{…}的反向匹配，即匹配不满足条件的字符。\n\n注意，这两种类只对 unicode 有效，所以使用的时候一定要加上u修饰符。如果不加u修饰符，正则表达式使用\\p和\\p会报错，ecmascript 预留了这两个类。\n\n由于 unicode 的各种属性非常多，所以这种新的类的表达能力非常强。\n\nconst regex = /^\\p{decimal_number}+$/u;\nregex.test('𝟏𝟐𝟑𝟜𝟝𝟞𝟩𝟪𝟫𝟬𝟭𝟮𝟯𝟺𝟻𝟼') // true\n\n\n1\n2\n\n\n上面代码中，属性类指定匹配所有十进制字符，可以看到各种字型的十进制字符都会匹配成功。\n\n\\p{number}甚至能匹配罗马数字。\n\n// 匹配所有数字\nconst regex = /^\\p{number}+$/u;\nregex.test('²³¹¼½¾') // true\nregex.test('㉛㉜㉝') // true\nregex.test('ⅰⅱⅲⅳⅴⅵⅶⅷⅸⅹⅺⅻ') // true\n\n\n1\n2\n3\n4\n5\n\n\n下面是其他一些例子。\n\n// 匹配所有空格\n\\p{white_space}\n\n// 匹配各种文字的所有字母，等同于 unicode 版的 \\w\n[\\p{alphabetic}\\p{mark}\\p{decimal_number}\\p{connector_punctuation}\\p{join_control}]\n\n// 匹配各种文字的所有非字母的字符，等同于 unicode 版的 \\w\n[^\\p{alphabetic}\\p{mark}\\p{decimal_number}\\p{connector_punctuation}\\p{join_control}]\n\n// 匹配 emoji\n/\\p{emoji_modifier_base}\\p{emoji_modifier}?|\\p{emoji_presentation}|\\p{emoji}\\ufe0f/gu\n\n// 匹配所有的箭头字符\nconst regexarrows = /^\\p{block=arrows}+$/u;\nregexarrows.test('←↑→↓↔↕↖↗↘↙⇒⇐⇑⇒⇓⇔⇕⇖⇗⇘⇙⇧⇩') // true\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n\n# 具名组匹配\n\n\n# 简介\n\n正则表达式使用圆括号进行组匹配。\n\nconst re_date = /(\\d{4})-(\\d{2})-(\\d{2})/;\n\n\n1\n\n\n上面代码中，正则表达式里面有三组圆括号。使用exec方法，就可以将这三组匹配结果提取出来。\n\nconst re_date = /(\\d{4})-(\\d{2})-(\\d{2})/;\n\nconst matchobj = re_date.exec('1999-12-31');\nconst year = matchobj[1]; // 1999\nconst month = matchobj[2]; // 12\nconst day = matchobj[3]; // 31\n\n\n1\n2\n3\n4\n5\n6\n\n\n组匹配的一个问题是，每一组的匹配含义不容易看出来，而且只能用数字序号（比如matchobj[1]）引用，要是组的顺序变了，引用的时候就必须修改序号。\n\nes2018 引入了具名组匹配（named capture groups），允许为每一个组匹配指定一个名字，既便于阅读代码，又便于引用。\n\nconst re_date = /(?<year>\\d{4})-(?<month>\\d{2})-(?<day>\\d{2})/;\n\nconst matchobj = re_date.exec('1999-12-31');\nconst year = matchobj.groups.year; // 1999\nconst month = matchobj.groups.month; // 12\nconst day = matchobj.groups.day; // 31\n\n\n1\n2\n3\n4\n5\n6\n\n\n上面代码中，“具名组匹配”在圆括号内部，模式的头部添加“问号 + 尖括号 + 组名”（?<year>），然后就可以在exec方法返回结果的groups属性上引用该组名。同时，数字序号（matchobj[1]）依然有效。\n\n具名组匹配等于为每一组匹配加上了 id，便于描述匹配的目的。如果组的顺序变了，也不用改变匹配后的处理代码。\n\n如果具名组没有匹配，那么对应的groups对象属性会是undefined。\n\nconst re_opt_a = /^(?<as>a+)?$/;\nconst matchobj = re_opt_a.exec('');\n\nmatchobj.groups.as // undefined\n'as' in matchobj.groups // true\n\n\n1\n2\n3\n4\n5\n\n\n上面代码中，具名组as没有找到匹配，那么matchobj.groups.as属性值就是undefined，并且as这个键名在groups是始终存在的。\n\n\n# 解构赋值和替换\n\n有了具名组匹配以后，可以使用解构赋值直接从匹配结果上为变量赋值。\n\nlet {groups: {one, two}} = /^(?<one>.*):(?<two>.*)$/u.exec('foo:bar');\none  // foo\ntwo  // bar\n\n\n1\n2\n3\n\n\n字符串替换时，使用$<组名>引用具名组。\n\nlet re = /(?<year>\\d{4})-(?<month>\\d{2})-(?<day>\\d{2})/u;\n\n'2015-01-02'.replace(re, '$<day>/$<month>/$<year>')\n// '02/01/2015'\n\n\n1\n2\n3\n4\n\n\n上面代码中，replace方法的第二个参数是一个字符串，而不是正则表达式。\n\nreplace方法的第二个参数也可以是函数，该函数的参数序列如下。\n\n'2015-01-02'.replace(re, (\n   matched, // 整个匹配结果 2015-01-02\n   capture1, // 第一个组匹配 2015\n   capture2, // 第二个组匹配 01\n   capture3, // 第三个组匹配 02\n   position, // 匹配开始的位置 0\n   s, // 原字符串 2015-01-02\n   groups // 具名组构成的一个对象 {year, month, day}\n ) => {\n let {day, month, year} = groups;\n return `${day}/${month}/${year}`;\n});\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n具名组匹配在原来的基础上，新增了最后一个函数参数：具名组构成的一个对象。函数内部可以直接对这个对象进行解构赋值。\n\n\n# 引用\n\n如果要在正则表达式内部引用某个“具名组匹配”，可以使用\\k<组名>的写法。\n\nconst re_twice = /^(?<word>[a-z]+)!\\k<word>$/;\nre_twice.test('abc!abc') // true\nre_twice.test('abc!ab') // false\n\n\n1\n2\n3\n\n\n数字引用（\\1）依然有效。\n\nconst re_twice = /^(?<word>[a-z]+)!\\1$/;\nre_twice.test('abc!abc') // true\nre_twice.test('abc!ab') // false\n\n\n1\n2\n3\n\n\n这两种引用语法还可以同时使用。\n\nconst re_twice = /^(?<word>[a-z]+)!\\k<word>!\\1$/;\nre_twice.test('abc!abc!abc') // true\nre_twice.test('abc!abc!ab') // false\n\n\n1\n2\n3\n\n\n\n# string.prototype.matchall()\n\n如果一个正则表达式在字符串里面有多个匹配，现在一般使用g修饰符或y修饰符，在循环里面逐一取出。\n\nvar regex = /t(e)(st(\\d?))/g;\nvar string = 'test1test2test3';\n\nvar matches = [];\nvar match;\nwhile (match = regex.exec(string)) {\n  matches.push(match);\n}\n\nmatches\n// [\n//   [\"test1\", \"e\", \"st1\", \"1\", index: 0, input: \"test1test2test3\"],\n//   [\"test2\", \"e\", \"st2\", \"2\", index: 5, input: \"test1test2test3\"],\n//   [\"test3\", \"e\", \"st3\", \"3\", index: 10, input: \"test1test2test3\"]\n// ]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n上面代码中，while循环取出每一轮的正则匹配，一共三轮。\n\nes2020 增加了string.prototype.matchall()方法，可以一次性取出所有匹配。不过，它返回的是一个遍历器（iterator），而不是数组。\n\nconst string = 'test1test2test3';\n\n// g 修饰符加不加都可以\nconst regex = /t(e)(st(\\d?))/g;\n\nfor (const match of string.matchall(regex)) {\n  console.log(match);\n}\n// [\"test1\", \"e\", \"st1\", \"1\", index: 0, input: \"test1test2test3\"]\n// [\"test2\", \"e\", \"st2\", \"2\", index: 5, input: \"test1test2test3\"]\n// [\"test3\", \"e\", \"st3\", \"3\", index: 10, input: \"test1test2test3\"]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n上面代码中，由于string.matchall(regex)返回的是遍历器，所以可以用for...of循环取出。相对于返回数组，返回遍历器的好处在于，如果匹配结果是一个很大的数组，那么遍历器比较节省资源。\n\n遍历器转为数组是非常简单的，使用...运算符和array.from()方法就可以了。\n\n// 转为数组方法一\n[...string.matchall(regex)]\n\n// 转为数组方法二\narray.from(string.matchall(regex))\n\n\n1\n2\n3\n4\n5\n",charsets:{cjk:!0}},{title:"数值的扩展",frontmatter:{title:"数值的扩展",date:"2020-02-09T16:00:29.000Z",permalink:"/pages/5dfea9a0f2d1a392",author:"阮一峰",categories:["《ES6 教程》笔记"],tags:["ES6"],readingShow:"top"},regularPath:"/06.%E4%B9%A6%E7%B1%8D/05.%E3%80%8AES6%20%E6%95%99%E7%A8%8B%E3%80%8B%E7%AC%94%E8%AE%B0/07.%E6%95%B0%E5%80%BC%E7%9A%84%E6%89%A9%E5%B1%95.html",relativePath:"06.书籍/05.《ES6 教程》笔记/07.数值的扩展.md",key:"v-74e9cd39",path:"/pages/5dfea9a0f2d1a392/",headers:[{level:2,title:"二进制和八进制表示法",slug:"二进制和八进制表示法",normalizedTitle:"二进制和八进制表示法",charIndex:12},{level:2,title:"Number.isFinite() 是否为有限, Number.isNaN() 是否为NaN",slug:"number-isfinite-是否为有限-number-isnan-是否为nan",normalizedTitle:"number.isfinite() 是否为有限, number.isnan() 是否为nan",charIndex:508},{level:2,title:"Number.parseInt(), Number.parseFloat()",slug:"number-parseint-number-parsefloat",normalizedTitle:"number.parseint(), number.parsefloat()",charIndex:1690},{level:2,title:"Number.isInteger() 是否为整数",slug:"number-isinteger-是否为整数",normalizedTitle:"number.isinteger() 是否为整数",charIndex:2072},{level:2,title:"Number.EPSILON 用于浮点数误差检查",slug:"number-epsilon-用于浮点数误差检查",normalizedTitle:"number.epsilon 用于浮点数误差检查",charIndex:3060},{level:2,title:"安全整数和 Number.isSafeInteger()",slug:"安全整数和-number-issafeinteger",normalizedTitle:"安全整数和 number.issafeinteger()",charIndex:4277},{level:2,title:"Math 对象的扩展",slug:"math-对象的扩展",normalizedTitle:"math 对象的扩展",charIndex:6745},{level:3,title:"Math.trunc() 去除一个数的小数部分，返回整数部分",slug:"math-trunc-去除一个数的小数部分-返回整数部分",normalizedTitle:"math.trunc() 去除一个数的小数部分，返回整数部分",charIndex:6821},{level:3,title:"Math.sign() 判断一个数是正数、负数、还是零",slug:"math-sign-判断一个数是正数、负数、还是零",normalizedTitle:"math.sign() 判断一个数是正数、负数、还是零",charIndex:7441},{level:3,title:"Math.cbrt() 计算一个数的立方根",slug:"math-cbrt-计算一个数的立方根",normalizedTitle:"math.cbrt() 计算一个数的立方根",charIndex:8155},{level:3,title:"Math.clz32()",slug:"math-clz32",normalizedTitle:"math.clz32()",charIndex:8551},{level:3,title:"Math.imul()",slug:"math-imul",normalizedTitle:"math.imul()",charIndex:9529},{level:3,title:"Math.fround()",slug:"math-fround",normalizedTitle:"math.fround()",charIndex:10121},{level:3,title:"Math.hypot()",slug:"math-hypot",normalizedTitle:"math.hypot()",charIndex:11181},{level:3,title:"对数方法",slug:"对数方法",normalizedTitle:"对数方法",charIndex:11578},{level:3,title:"双曲函数方法",slug:"双曲函数方法",normalizedTitle:"双曲函数方法",charIndex:12907},{level:2,title:"指数运算符",slug:"指数运算符",normalizedTitle:"指数运算符",charIndex:13231},{level:2,title:"BigInt 数据类型",slug:"bigint-数据类型",normalizedTitle:"bigint 数据类型",charIndex:13734},{level:3,title:"简介",slug:"简介",normalizedTitle:"简介",charIndex:13750},{level:3,title:"BigInt 对象",slug:"bigint-对象",normalizedTitle:"bigint 对象",charIndex:15038},{level:3,title:"转换规则",slug:"转换规则",normalizedTitle:"转换规则",charIndex:15097},{level:3,title:"数学运算",slug:"数学运算",normalizedTitle:"数学运算",charIndex:17239},{level:3,title:"其他运算",slug:"其他运算",normalizedTitle:"其他运算",charIndex:18036}],excerpt:'<h1 id="数值的扩展"><a class="header-anchor" href="#数值的扩展">#</a> 数值的扩展</h1>\n<h2 id="二进制和八进制表示法"><a class="header-anchor" href="#二进制和八进制表示法">#</a> 二进制和八进制表示法</h2>\n<p>ES6 提供了二进制和八进制数值的新的写法，分别用前缀<code>0b</code>（或<code>0B</code>）和<code>0o</code>（或<code>0O</code>）表示。</p>\n\x3c!--beforebegin--\x3e<div class="language-javascript line-numbers-mode">\x3c!--afterbegin--\x3e<pre v-pre class="language-javascript"><code><span class="token number">0b111110111</span> <span class="token operator">===</span> <span class="token number">503</span> <span class="token comment">// true</span>\n<span class="token number">0o767</span> <span class="token operator">===</span> <span class="token number">503</span> <span class="token comment">// true</span>\n</code></pre>\n<div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br></div>\x3c!--beforeend--\x3e</div>\x3c!--afterend--\x3e',lastUpdated:"2022/9/22 下午4:28:09",lastUpdatedTimestamp:1663835289e3,headersStr:"二进制和八进制表示法 Number.isFinite() 是否为有限, Number.isNaN() 是否为NaN Number.parseInt(), Number.parseFloat() Number.isInteger() 是否为整数 Number.EPSILON 用于浮点数误差检查 安全整数和 Number.isSafeInteger() Math 对象的扩展 Math.trunc() 去除一个数的小数部分，返回整数部分 Math.sign() 判断一个数是正数、负数、还是零 Math.cbrt() 计算一个数的立方根 Math.clz32() Math.imul() Math.fround() Math.hypot() 对数方法 双曲函数方法 指数运算符 BigInt 数据类型 简介 BigInt 对象 转换规则 数学运算 其他运算",content:"# 数值的扩展\n\n\n# 二进制和八进制表示法\n\nES6 提供了二进制和八进制数值的新的写法，分别用前缀0b（或0B）和0o（或0O）表示。\n\n0b111110111 === 503 // true\n0o767 === 503 // true\n\n\n1\n2\n\n\n从 ES5 开始，在严格模式之中，八进制就不再允许使用前缀0表示，ES6 进一步明确，要使用前缀0o表示。\n\n// 非严格模式\n(function(){\n  console.log(0o11 === 011);\n})() // true\n\n// 严格模式\n(function(){\n  'use strict';\n  console.log(0o11 === 011);\n})() // Uncaught SyntaxError: Octal literals are not allowed in strict mode.\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n如果要将0b和0o前缀的字符串数值转为十进制，要使用Number方法。\n\nNumber('0b111')  // 7\nNumber('0o10')  // 8\n\n\n1\n2\n\n\n\n# Number.isFinite() 是否为有限, Number.isNaN() 是否为NaN\n\nES6 在Number对象上，新提供了Number.isFinite()和Number.isNaN()两个方法。\n\nNumber.isFinite()用来检查一个数值是否为有限的（finite），即不是Infinity。\n\nNumber.isFinite(15); // true\nNumber.isFinite(0.8); // true\nNumber.isFinite(NaN); // false\nNumber.isFinite(Infinity); // false\nNumber.isFinite(-Infinity); // false\nNumber.isFinite('foo'); // false\nNumber.isFinite('15'); // false\nNumber.isFinite(true); // false\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n注意，如果参数类型不是数值，Number.isFinite一律返回false。\n\nNumber.isNaN()用来检查一个值是否为NaN。\n\nNumber.isNaN(NaN) // true\nNumber.isNaN(15) // false\nNumber.isNaN('15') // false\nNumber.isNaN(true) // false\nNumber.isNaN(9/NaN) // true\nNumber.isNaN('true' / 0) // true\nNumber.isNaN('true' / 'true') // true\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n如果参数类型不是NaN，Number.isNaN一律返回false。\n\n它们与传统的全局方法isFinite()和isNaN()的区别在于，传统方法先调用Number()将非数值的值转为数值，再进行判断，而这两个新方法只对数值有效，Number.isFinite()对于非数值一律返回false, Number.isNaN()只有对于NaN才返回true，非NaN一律返回false。\n\nisFinite(25) // true\nisFinite(\"25\") // true\nNumber.isFinite(25) // true\nNumber.isFinite(\"25\") // false\n\nisNaN(NaN) // true\nisNaN(\"NaN\") // true\nNumber.isNaN(NaN) // true\nNumber.isNaN(\"NaN\") // false\nNumber.isNaN(1) // false\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n\n# Number.parseInt(), Number.parseFloat()\n\nES6 将全局方法parseInt()和parseFloat()，移植到Number对象上面，行为完全保持不变。\n\n// ES5的写法\nparseInt('12.34') // 12\nparseFloat('123.45#') // 123.45\n\n// ES6的写法\nNumber.parseInt('12.34') // 12\nNumber.parseFloat('123.45#') // 123.45\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n这样做的目的，是逐步减少全局性方法，使得语言逐步模块化。\n\nNumber.parseInt === parseInt // true\nNumber.parseFloat === parseFloat // true\n\n\n1\n2\n\n\n\n# Number.isInteger() 是否为整数\n\nNumber.isInteger()用来判断一个数值是否为整数。\n\nNumber.isInteger(25) // true\nNumber.isInteger(25.1) // false\n\n\n1\n2\n\n\nJavaScript 内部，整数和浮点数采用的是同样的储存方法，所以 25 和 25.0 被视为同一个值。\n\nNumber.isInteger(25) // true\nNumber.isInteger(25.0) // true\n\n\n1\n2\n\n\n如果参数不是数值，Number.isInteger返回false。\n\nNumber.isInteger() // false\nNumber.isInteger(null) // false\nNumber.isInteger('15') // false\nNumber.isInteger(true) // false\n\n\n1\n2\n3\n4\n\n\n注意，由于 JavaScript 采用 IEEE 754 标准，数值存储为64位双精度格式，数值精度最多可以达到 53 个二进制位（1 个隐藏位与 52 个有效位）。如果数值的精度超过这个限度，第54位及后面的位就会被丢弃，这种情况下，Number.isInteger可能会误判。\n\nNumber.isInteger(3.0000000000000002) // true\n\n\n1\n\n\n上面代码中，Number.isInteger的参数明明不是整数，但是会返回true。原因就是这个小数的精度达到了小数点后16个十进制位，转成二进制位超过了53个二进制位，导致最后的那个2被丢弃了。\n\n类似的情况还有，如果一个数值的绝对值小于Number.MIN_VALUE（5E-324），即小于 JavaScript 能够分辨的最小值，会被自动转为 0。这时，Number.isInteger也会误判。\n\nNumber.isInteger(5E-324) // false\nNumber.isInteger(5E-325) // true\n\n\n1\n2\n\n\n上面代码中，5E-325由于值太小，会被自动转为0，因此返回true。\n\n总之，如果对数据精度的要求较高，不建议使用Number.isInteger()判断一个数值是否为整数。\n\n\n# Number.EPSILON 用于浮点数误差检查\n\nES6 在Number对象上面，新增一个极小的常量Number.EPSILON。根据规格，它表示 1 与大于 1 的最小浮点数之间的差。\n\n对于 64 位浮点数来说，大于 1 的最小浮点数相当于二进制的1.00..001，小数点后面有连续 51 个零。这个值减去 1 之后，就等于 2 的 -52 次方。\n\nNumber.EPSILON === Math.pow(2, -52)\n// true\nNumber.EPSILON\n// 2.220446049250313e-16\nNumber.EPSILON.toFixed(20)\n// \"0.00000000000000022204\"\n\n\n1\n2\n3\n4\n5\n6\n\n\nNumber.EPSILON实际上是 JavaScript 能够表示的最小精度。误差如果小于这个值，就可以认为已经没有意义了，即不存在误差了。\n\n引入一个这么小的量的目的，在于为浮点数计算，设置一个误差范围。我们知道浮点数计算是不精确的。\n\n0.1 + 0.2\n// 0.30000000000000004\n\n0.1 + 0.2 - 0.3\n// 5.551115123125783e-17\n\n5.551115123125783e-17.toFixed(20)\n// '0.00000000000000005551'\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n上面代码解释了，为什么比较0.1 + 0.2与0.3得到的结果是false。\n\n0.1 + 0.2 === 0.3 // false\n\n\n1\n\n\nNumber.EPSILON可以用来设置“能够接受的误差范围”。比如，误差范围设为 2 的-50 次方（即Number.EPSILON * Math.pow(2, 2)），即如果两个浮点数的差小于这个值，我们就认为这两个浮点数相等。\n\n5.551115123125783e-17 < Number.EPSILON * Math.pow(2, 2)\n// true\n\n\n1\n2\n\n\n因此，Number.EPSILON的实质是一个可以接受的最小误差范围。\n\nfunction withinErrorMargin (left, right) {\n  return Math.abs(left - right) < Number.EPSILON * Math.pow(2, 2);\n}\n\n0.1 + 0.2 === 0.3 // false\nwithinErrorMargin(0.1 + 0.2, 0.3) // true\n\n1.1 + 1.3 === 2.4 // false\nwithinErrorMargin(1.1 + 1.3, 2.4) // true\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n上面的代码为浮点数运算，部署了一个误差检查函数。\n\n\n# 安全整数和 Number.isSafeInteger()\n\nJavaScript 能够准确表示的整数范围在-2^53到2^53之间（不含两个端点），超过这个范围，无法精确表示这个值。\n\nMath.pow(2, 53) // 9007199254740992\n\n9007199254740992  // 9007199254740992\n9007199254740993  // 9007199254740992\n\nMath.pow(2, 53) === Math.pow(2, 53) + 1\n// true\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n上面代码中，超出 2 的 53 次方之后，一个数就不精确了。\n\nES6 引入了Number.MAX_SAFE_INTEGER和Number.MIN_SAFE_INTEGER这两个常量，用来表示这个范围的上下限。\n\nNumber.MAX_SAFE_INTEGER === Math.pow(2, 53) - 1\n// true\nNumber.MAX_SAFE_INTEGER === 9007199254740991\n// true\n\nNumber.MIN_SAFE_INTEGER === -Number.MAX_SAFE_INTEGER\n// true\nNumber.MIN_SAFE_INTEGER === -9007199254740991\n// true\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n上面代码中，可以看到 JavaScript 能够精确表示的极限。\n\nNumber.isSafeInteger()则是用来判断一个整数是否落在这个范围之内。\n\nNumber.isSafeInteger('a') // false\nNumber.isSafeInteger(null) // false\nNumber.isSafeInteger(NaN) // false\nNumber.isSafeInteger(Infinity) // false\nNumber.isSafeInteger(-Infinity) // false\n\nNumber.isSafeInteger(3) // true\nNumber.isSafeInteger(1.2) // false\nNumber.isSafeInteger(9007199254740990) // true\nNumber.isSafeInteger(9007199254740992) // false\n\nNumber.isSafeInteger(Number.MIN_SAFE_INTEGER - 1) // false\nNumber.isSafeInteger(Number.MIN_SAFE_INTEGER) // true\nNumber.isSafeInteger(Number.MAX_SAFE_INTEGER) // true\nNumber.isSafeInteger(Number.MAX_SAFE_INTEGER + 1) // false\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n这个函数的实现很简单，就是跟安全整数的两个边界值比较一下。\n\nNumber.isSafeInteger = function (n) {\n  return (typeof n === 'number' &&\n    Math.round(n) === n &&\n    Number.MIN_SAFE_INTEGER <= n &&\n    n <= Number.MAX_SAFE_INTEGER);\n}\n\n\n1\n2\n3\n4\n5\n6\n\n\n实际使用这个函数时，需要注意。验证运算结果是否落在安全整数的范围内，不要只验证运算结果，而要同时验证参与运算的每个值。\n\nNumber.isSafeInteger(9007199254740993)\n// false\nNumber.isSafeInteger(990)\n// true\nNumber.isSafeInteger(9007199254740993 - 990)\n// true\n9007199254740993 - 990\n// 返回结果 9007199254740002\n// 正确答案应该是 9007199254740003\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n上面代码中，9007199254740993不是一个安全整数，但是Number.isSafeInteger会返回结果，显示计算结果是安全的。这是因为，这个数超出了精度范围，导致在计算机内部，以9007199254740992的形式储存。\n\n9007199254740993 === 9007199254740992\n// true\n\n\n1\n2\n\n\n所以，如果只验证运算结果是否为安全整数，很可能得到错误结果。下面的函数可以同时验证两个运算数和运算结果。\n\nfunction trusty (left, right, result) {\n  if (\n    Number.isSafeInteger(left) &&\n    Number.isSafeInteger(right) &&\n    Number.isSafeInteger(result)\n  ) {\n    return result;\n  }\n  throw new RangeError('Operation cannot be trusted!');\n}\n\ntrusty(9007199254740993, 990, 9007199254740993 - 990)\n// RangeError: Operation cannot be trusted!\n\ntrusty(1, 2, 3)\n// 3\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n\n# Math 对象的扩展\n\nES6 在 Math 对象上新增了 17 个与数学相关的方法。所有这些方法都是静态方法，只能在 Math 对象上调用。\n\n\n# Math.trunc() 去除一个数的小数部分，返回整数部分\n\nMath.trunc方法用于去除一个数的小数部分，返回整数部分。\n\nMath.trunc(4.1) // 4\nMath.trunc(4.9) // 4\nMath.trunc(-4.1) // -4\nMath.trunc(-4.9) // -4\nMath.trunc(-0.1234) // -0\n\n\n1\n2\n3\n4\n5\n\n\n对于非数值，Math.trunc内部使用Number方法将其先转为数值。\n\nMath.trunc('123.456') // 123\nMath.trunc(true) //1\nMath.trunc(false) // 0\nMath.trunc(null) // 0\n\n\n1\n2\n3\n4\n\n\n对于空值和无法截取整数的值，返回NaN。\n\nMath.trunc(NaN);      // NaN\nMath.trunc('foo');    // NaN\nMath.trunc();         // NaN\nMath.trunc(undefined) // NaN\n\n\n1\n2\n3\n4\n\n\n对于没有部署这个方法的环境，可以用下面的代码模拟。\n\nMath.trunc = Math.trunc || function(x) {\n  return x < 0 ? Math.ceil(x) : Math.floor(x);\n};\n\n\n1\n2\n3\n\n\n\n# Math.sign() 判断一个数是正数、负数、还是零\n\nMath.sign方法用来判断一个数到底是正数、负数、还是零。对于非数值，会先将其转换为数值。\n\n它会返回五种值。\n\n * 参数为正数，返回+1；\n * 参数为负数，返回-1；\n * 参数为 0，返回0；\n * 参数为-0，返回-0;\n * 其他值，返回NaN。\n\nMath.sign(-5) // -1\nMath.sign(5) // +1\nMath.sign(0) // +0\nMath.sign(-0) // -0\nMath.sign(NaN) // NaN\n\n\n1\n2\n3\n4\n5\n\n\n如果参数是非数值，会自动转为数值。对于那些无法转为数值的值，会返回NaN。\n\nMath.sign('')  // 0\nMath.sign(true)  // +1\nMath.sign(false)  // 0\nMath.sign(null)  // 0\nMath.sign('9')  // +1\nMath.sign('foo')  // NaN\nMath.sign()  // NaN\nMath.sign(undefined)  // NaN\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n对于没有部署这个方法的环境，可以用下面的代码模拟。\n\nMath.sign = Math.sign || function(x) {\n  x = +x; // convert to a number\n  if (x === 0 || isNaN(x)) {\n    return x;\n  }\n  return x > 0 ? 1 : -1;\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# Math.cbrt() 计算一个数的立方根\n\nMath.cbrt方法用于计算一个数的立方根。\n\nMath.cbrt(-1) // -1\nMath.cbrt(0)  // 0\nMath.cbrt(1)  // 1\nMath.cbrt(2)  // 1.2599210498948734\n\n\n1\n2\n3\n4\n\n\n对于非数值，Math.cbrt方法内部也是先使用Number方法将其转为数值。\n\nMath.cbrt('8') // 2\nMath.cbrt('hello') // NaN\n\n\n1\n2\n\n\n对于没有部署这个方法的环境，可以用下面的代码模拟。\n\nMath.cbrt = Math.cbrt || function(x) {\n  var y = Math.pow(Math.abs(x), 1/3);\n  return x < 0 ? -y : y;\n};\n\n\n1\n2\n3\n4\n\n\n\n# Math.clz32()\n\nMath.clz32()方法将参数转为 32 位无符号整数的形式，然后返回这个 32 位值里面有多少个前导 0。\n\nMath.clz32(0) // 32\nMath.clz32(1) // 31\nMath.clz32(1000) // 22\nMath.clz32(0b01000000000000000000000000000000) // 1\nMath.clz32(0b00100000000000000000000000000000) // 2\n\n\n1\n2\n3\n4\n5\n\n\n上面代码中，0 的二进制形式全为 0，所以有 32 个前导 0；1 的二进制形式是0b1，只占 1 位，所以 32 位之中有 31 个前导 0；1000 的二进制形式是0b1111101000，一共有 10 位，所以 32 位之中有 22 个前导 0。\n\nclz32这个函数名就来自”count leading zero bits in 32-bit binary representation of a number“（计算一个数的 32 位二进制形式的前导 0 的个数）的缩写。\n\n左移运算符（<<）与Math.clz32方法直接相关。\n\nMath.clz32(0) // 32\nMath.clz32(1) // 31\nMath.clz32(1 << 1) // 30\nMath.clz32(1 << 2) // 29\nMath.clz32(1 << 29) // 2\n\n\n1\n2\n3\n4\n5\n\n\n对于小数，Math.clz32方法只考虑整数部分。\n\nMath.clz32(3.2) // 30\nMath.clz32(3.9) // 30\n\n\n1\n2\n\n\n对于空值或其他类型的值，Math.clz32方法会将它们先转为数值，然后再计算。\n\nMath.clz32() // 32\nMath.clz32(NaN) // 32\nMath.clz32(Infinity) // 32\nMath.clz32(null) // 32\nMath.clz32('foo') // 32\nMath.clz32([]) // 32\nMath.clz32({}) // 32\nMath.clz32(true) // 31\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# Math.imul()\n\nMath.imul方法返回两个数以 32 位带符号整数形式相乘的结果，返回的也是一个 32 位的带符号整数。\n\nMath.imul(2, 4)   // 8\nMath.imul(-1, 8)  // -8\nMath.imul(-2, -2) // 4\n\n\n1\n2\n3\n\n\n如果只考虑最后 32 位，大多数情况下，Math.imul(a, b)与a * b的结果是相同的，即该方法等同于(a * b)|0的效果（超过 32 位的部分溢出）。之所以需要部署这个方法，是因为 JavaScript 有精度限制，超过 2 的 53 次方的值无法精确表示。这就是说，对于那些很大的数的乘法，低位数值往往都是不精确的，Math.imul方法可以返回正确的低位数值。\n\n(0x7fffffff * 0x7fffffff)|0 // 0\n\n\n1\n\n\n上面这个乘法算式，返回结果为 0。但是由于这两个二进制数的最低位都是 1，所以这个结果肯定是不正确的，因为根据二进制乘法，计算结果的二进制最低位应该也是 1。这个错误就是因为它们的乘积超过了 2 的 53 次方，JavaScript 无法保存额外的精度，就把低位的值都变成了 0。Math.imul方法可以返回正确的值 1。\n\nMath.imul(0x7fffffff, 0x7fffffff) // 1\n\n\n1\n\n\n\n# Math.fround()\n\nMath.fround方法返回一个数的32位单精度浮点数形式。\n\n对于32位单精度格式来说，数值精度是24个二进制位（1 位隐藏位与 23 位有效位），所以对于 -224 至 224 之间的整数（不含两个端点），返回结果与参数本身一致。\n\nMath.fround(0)   // 0\nMath.fround(1)   // 1\nMath.fround(2 ** 24 - 1)   // 16777215\n\n\n1\n2\n3\n\n\n如果参数的绝对值大于 224，返回的结果便开始丢失精度。\n\nMath.fround(2 ** 24)       // 16777216\nMath.fround(2 ** 24 + 1)   // 16777216\n\n\n1\n2\n\n\nMath.fround方法的主要作用，是将64位双精度浮点数转为32位单精度浮点数。如果小数的精度超过24个二进制位，返回值就会不同于原值，否则返回值不变（即与64位双精度值一致）。\n\n// 未丢失有效精度\nMath.fround(1.125) // 1.125\nMath.fround(7.25)  // 7.25\n\n// 丢失精度\nMath.fround(0.3)   // 0.30000001192092896\nMath.fround(0.7)   // 0.699999988079071\nMath.fround(1.0000000123) // 1\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n对于 NaN 和 Infinity，此方法返回原值。对于其它类型的非数值，Math.fround 方法会先将其转为数值，再返回单精度浮点数。\n\nMath.fround(NaN)      // NaN\nMath.fround(Infinity) // Infinity\n\nMath.fround('5')      // 5\nMath.fround(true)     // 1\nMath.fround(null)     // 0\nMath.fround([])       // 0\nMath.fround({})       // NaN\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n对于没有部署这个方法的环境，可以用下面的代码模拟。\n\nMath.fround = Math.fround || function (x) {\n  return new Float32Array([x])[0];\n};\n\n\n1\n2\n3\n\n\n\n# Math.hypot()\n\nMath.hypot方法返回所有参数的平方和的平方根。\n\nMath.hypot(3, 4);        // 5\nMath.hypot(3, 4, 5);     // 7.0710678118654755\nMath.hypot();            // 0\nMath.hypot(NaN);         // NaN\nMath.hypot(3, 4, 'foo'); // NaN\nMath.hypot(3, 4, '5');   // 7.0710678118654755\nMath.hypot(-3);          // 3\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n上面代码中，3 的平方加上 4 的平方，等于 5 的平方。\n\n如果参数不是数值，Math.hypot方法会将其转为数值。只要有一个参数无法转为数值，就会返回 NaN。\n\n\n# 对数方法\n\nES6 新增了 4 个对数相关方法。\n\n（1） Math.expm1()\n\nMath.expm1(x)返回 ex - 1，即Math.exp(x) - 1。\n\nMath.expm1(-1) // -0.6321205588285577\nMath.expm1(0)  // 0\nMath.expm1(1)  // 1.718281828459045\n\n\n1\n2\n3\n\n\n对于没有部署这个方法的环境，可以用下面的代码模拟。\n\nMath.expm1 = Math.expm1 || function(x) {\n  return Math.exp(x) - 1;\n};\n\n\n1\n2\n3\n\n\n（2）Math.log1p()\n\nMath.log1p(x)方法返回1 + x的自然对数，即Math.log(1 + x)。如果x小于-1，返回NaN。\n\nMath.log1p(1)  // 0.6931471805599453\nMath.log1p(0)  // 0\nMath.log1p(-1) // -Infinity\nMath.log1p(-2) // NaN\n\n\n1\n2\n3\n4\n\n\n对于没有部署这个方法的环境，可以用下面的代码模拟。\n\nMath.log1p = Math.log1p || function(x) {\n  return Math.log(1 + x);\n};\n\n\n1\n2\n3\n\n\n（3）Math.log10()\n\nMath.log10(x)返回以 10 为底的x的对数。如果x小于 0，则返回 NaN。\n\nMath.log10(2)      // 0.3010299956639812\nMath.log10(1)      // 0\nMath.log10(0)      // -Infinity\nMath.log10(-2)     // NaN\nMath.log10(100000) // 5\n\n\n1\n2\n3\n4\n5\n\n\n对于没有部署这个方法的环境，可以用下面的代码模拟。\n\nMath.log10 = Math.log10 || function(x) {\n  return Math.log(x) / Math.LN10;\n};\n\n\n1\n2\n3\n\n\n（4）Math.log2()\n\nMath.log2(x)返回以 2 为底的x的对数。如果x小于 0，则返回 NaN。\n\nMath.log2(3)       // 1.584962500721156\nMath.log2(2)       // 1\nMath.log2(1)       // 0\nMath.log2(0)       // -Infinity\nMath.log2(-2)      // NaN\nMath.log2(1024)    // 10\nMath.log2(1 << 29) // 29\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n对于没有部署这个方法的环境，可以用下面的代码模拟。\n\nMath.log2 = Math.log2 || function(x) {\n  return Math.log(x) / Math.LN2;\n};\n\n\n1\n2\n3\n\n\n\n# 双曲函数方法\n\nES6 新增了 6 个双曲函数方法。\n\n * Math.sinh(x) 返回x的双曲正弦（hyperbolic sine）\n * Math.cosh(x) 返回x的双曲余弦（hyperbolic cosine）\n * Math.tanh(x) 返回x的双曲正切（hyperbolic tangent）\n * Math.asinh(x) 返回x的反双曲正弦（inverse hyperbolic sine）\n * Math.acosh(x) 返回x的反双曲余弦（inverse hyperbolic cosine）\n * Math.atanh(x) 返回x的反双曲正切（inverse hyperbolic tangent）\n\n\n# 指数运算符\n\nES2016 新增了一个指数运算符（**）。\n\n2 ** 2 // 4\n2 ** 3 // 8\n\n\n1\n2\n\n\n这个运算符的一个特点是右结合，而不是常见的左结合。多个指数运算符连用时，是从最右边开始计算的。\n\n// 相当于 2 ** (3 ** 2)\n2 ** 3 ** 2\n// 512\n\n\n1\n2\n3\n\n\n上面代码中，首先计算的是第二个指数运算符，而不是第一个。\n\n指数运算符可以与等号结合，形成一个新的赋值运算符（**=）。\n\nlet a = 1.5;\na **= 2;\n// 等同于 a = a * a;\n\nlet b = 4;\nb **= 3;\n// 等同于 b = b * b * b;\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n注意，V8 引擎的指数运算符与Math.pow的实现不相同，对于特别大的运算结果，两者会有细微的差异。\n\nMath.pow(99, 99)\n// 3.697296376497263e+197\n\n99 ** 99\n// 3.697296376497268e+197\n\n\n1\n2\n3\n4\n5\n\n\n上面代码中，两个运算结果的最后一位有效数字是有差异的。\n\n\n# BigInt 数据类型\n\n\n# 简介\n\nJavaScript 所有数字都保存成 64 位浮点数，这给数值的表示带来了两大限制。一是数值的精度只能到 53 个二进制位（相当于 16 个十进制位），大于这个范围的整数，JavaScript 是无法精确表示的，这使得 JavaScript 不适合进行科学和金融方面的精确计算。二是大于或等于2的1024次方的数值，JavaScript 无法表示，会返回Infinity。\n\n// 超过 53 个二进制位的数值，无法保持精度\nMath.pow(2, 53) === Math.pow(2, 53) + 1 // true\n\n// 超过 2 的 1024 次方的数值，无法表示\nMath.pow(2, 1024) // Infinity\n\n\n1\n2\n3\n4\n5\n\n\nES2020 引入了一种新的数据类型 BigInt（大整数），来解决这个问题。BigInt 只用来表示整数，没有位数的限制，任何位数的整数都可以精确表示。\n\nconst a = 2172141653n;\nconst b = 15346349309n;\n\n// BigInt 可以保持精度\na * b // 33334444555566667777n\n\n// 普通整数无法保持精度\nNumber(a) * Number(b) // 33334444555566670000\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n为了与 Number 类型区别，BigInt 类型的数据必须添加后缀n。\n\n1234 // 普通整数\n1234n // BigInt\n\n// BigInt 的运算\n1n + 2n // 3n\n\n\n1\n2\n3\n4\n5\n\n\nBigInt 同样可以使用各种进制表示，都要加上后缀n。\n\n0b1101n // 二进制\n0o777n // 八进制\n0xFFn // 十六进制\n\n\n1\n2\n3\n\n\nBigInt 与普通整数是两种值，它们之间并不相等。\n\n42n === 42 // false\n\n\n1\n\n\ntypeof运算符对于 BigInt 类型的数据返回bigint。\n\ntypeof 123n // 'bigint'\n\n\n1\n\n\nBigInt 可以使用负号（-），但是不能使用正号（+），因为会与 asm.js 冲突。\n\n-42n // 正确\n+42n // 报错\n\n\n1\n2\n\n\nJavaScript 以前不能计算70的阶乘（即70!），因为超出了可以表示的精度。\n\nlet p = 1;\nfor (let i = 1; i <= 70; i++) {\n  p *= i;\n}\nconsole.log(p); // 1.197857166996989e+100\n\n\n1\n2\n3\n4\n5\n\n\n现在支持大整数了，就可以算了，浏览器的开发者工具运行下面代码，就OK。\n\nlet p = 1n;\nfor (let i = 1n; i <= 70n; i++) {\n  p *= i;\n}\nconsole.log(p); // 11978571...00000000n\n\n\n1\n2\n3\n4\n5\n\n\n\n# BigInt 对象\n\nJavaScript 原生提供BigInt对象，可以用作构造函数生成 BigInt 类型的数值。转换规则基本与Number()一致，将其他类型的值转为 BigInt。\n\nBigInt(123) // 123n\nBigInt('123') // 123n\nBigInt(false) // 0n\nBigInt(true) // 1n\n\n\n1\n2\n3\n4\n\n\nBigInt()构造函数必须有参数，而且参数必须可以正常转为数值，下面的用法都会报错。\n\nnew BigInt() // TypeError\nBigInt(undefined) //TypeError\nBigInt(null) // TypeError\nBigInt('123n') // SyntaxError\nBigInt('abc') // SyntaxError\n\n\n1\n2\n3\n4\n5\n\n\n上面代码中，尤其值得注意字符串123n无法解析成 Number 类型，所以会报错。\n\n参数如果是小数，也会报错。\n\nBigInt(1.5) // RangeError\nBigInt('1.5') // SyntaxError\n\n\n1\n2\n\n\nBigInt 对象继承了 Object 对象的两个实例方法。\n\n * BigInt.prototype.toString()\n * BigInt.prototype.valueOf()\n\n它还继承了 Number 对象的一个实例方法。\n\n * BigInt.prototype.toLocaleString()\n\n此外，还提供了三个静态方法。\n\n * BigInt.asUintN(width, BigInt)： 给定的 BigInt 转为 0 到 2width - 1 之间对应的值。\n * BigInt.asIntN(width, BigInt)：给定的 BigInt 转为 -2width - 1 到 2width - 1 - 1 之间对应的值。\n * BigInt.parseInt(string[, radix])：近似于Number.parseInt()，将一个字符串转换成指定进制的 BigInt。\n\nconst max = 2n ** (64n - 1n) - 1n;\n\nBigInt.asIntN(64, max)\n// 9223372036854775807n\nBigInt.asIntN(64, max + 1n)\n// -9223372036854775808n\nBigInt.asUintN(64, max + 1n)\n// 9223372036854775808n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n上面代码中，max是64位带符号的 BigInt 所能表示的最大值。如果对这个值加1n，BigInt.asIntN()将会返回一个负值，因为这时新增的一位将被解释为符号位。而BigInt.asUintN()方法由于不存在符号位，所以可以正确返回结果。\n\n如果BigInt.asIntN()和BigInt.asUintN()指定的位数，小于数值本身的位数，那么头部的位将被舍弃。\n\nconst max = 2n ** (64n - 1n) - 1n;\n\nBigInt.asIntN(32, max) // -1n\nBigInt.asUintN(32, max) // 4294967295n\n\n\n1\n2\n3\n4\n\n\n上面代码中，max是一个64位的 BigInt，如果转为32位，前面的32位都会被舍弃。\n\n下面是BigInt.parseInt()的例子。\n\n// Number.parseInt() 与 BigInt.parseInt() 的对比\nNumber.parseInt('9007199254740993', 10)\n// 9007199254740992\nBigInt.parseInt('9007199254740993', 10)\n// 9007199254740993n\n\n\n1\n2\n3\n4\n5\n\n\n上面代码中，由于有效数字超出了最大限度，Number.parseInt方法返回的结果是不精确的，而BigInt.parseInt方法正确返回了对应的 BigInt。\n\n对于二进制数组，BigInt 新增了两个类型BigUint64Array和BigInt64Array，这两种数据类型返回的都是64位 BigInt。DataView对象的实例方法DataView.prototype.getBigInt64()和DataView.prototype.getBigUint64()，返回的也是 BigInt。\n\n\n# 转换规则\n\n可以使用Boolean()、Number()和String()这三个方法，将 BigInt 可以转为布尔值、数值和字符串类型。\n\nBoolean(0n) // false\nBoolean(1n) // true\nNumber(1n)  // 1\nString(1n)  // \"1\"\n\n\n1\n2\n3\n4\n\n\n上面代码中，注意最后一个例子，转为字符串时后缀n会消失。\n\n另外，取反运算符（!）也可以将 BigInt 转为布尔值。\n\n!0n // true\n!1n // false\n\n\n1\n2\n\n\n\n# 数学运算\n\n数学运算方面，BigInt 类型的+、-、*和**这四个二元运算符，与 Number 类型的行为一致。除法运算/会舍去小数部分，返回一个整数。\n\n9n / 5n\n// 1n\n\n\n1\n2\n\n\n几乎所有的数值运算符都可以用在 BigInt，但是有两个例外。\n\n * 不带符号的右移位运算符>>>\n * 一元的求正运算符+\n\n上面两个运算符用在 BigInt 会报错。前者是因为>>>运算符是不带符号的，但是 BigInt 总是带有符号的，导致该运算无意义，完全等同于右移运算符>>。后者是因为一元运算符+在 asm.js 里面总是返回 Number 类型，为了不破坏 asm.js 就规定+1n会报错。\n\nBigInt 不能与普通数值进行混合运算。\n\n1n + 1.3 // 报错\n\n\n1\n\n\n上面代码报错是因为无论返回的是 BigInt 或 Number，都会导致丢失精度信息。比如(2n**53n + 1n) + 0.5这个表达式，如果返回 BigInt 类型，0.5这个小数部分会丢失；如果返回 Number 类型，有效精度只能保持 53 位，导致精度下降。\n\n同样的原因，如果一个标准库函数的参数预期是 Number 类型，但是得到的是一个 BigInt，就会报错。\n\n// 错误的写法\nMath.sqrt(4n) // 报错\n\n// 正确的写法\nMath.sqrt(Number(4n)) // 2\n\n\n1\n2\n3\n4\n5\n\n\n上面代码中，Math.sqrt的参数预期是 Number 类型，如果是 BigInt 就会报错，必须先用Number方法转一下类型，才能进行计算。\n\nasm.js 里面，|0跟在一个数值的后面会返回一个32位整数。根据不能与 Number 类型混合运算的规则，BigInt 如果与|0进行运算会报错。\n\n1n | 0 // 报错\n\n\n1\n\n\n\n# 其他运算\n\nBigInt 对应的布尔值，与 Number 类型一致，即0n会转为false，其他值转为true。\n\nif (0n) {\n  console.log('if');\n} else {\n  console.log('else');\n}\n// else\n\n\n1\n2\n3\n4\n5\n6\n\n\n上面代码中，0n对应false，所以会进入else子句。\n\n比较运算符（比如>）和相等运算符（==）允许 BigInt 与其他类型的值混合计算，因为这样做不会损失精度。\n\n0n < 1 // true\n0n < true // true\n0n == 0 // true\n0n == false // true\n0n === 0 // false\n\n\n1\n2\n3\n4\n5\n\n\nBigInt 与字符串混合运算时，会先转为字符串，再进行运算。\n\n'' + 123n // \"123\"\n\n\n1\n",normalizedContent:"# 数值的扩展\n\n\n# 二进制和八进制表示法\n\nes6 提供了二进制和八进制数值的新的写法，分别用前缀0b（或0b）和0o（或0o）表示。\n\n0b111110111 === 503 // true\n0o767 === 503 // true\n\n\n1\n2\n\n\n从 es5 开始，在严格模式之中，八进制就不再允许使用前缀0表示，es6 进一步明确，要使用前缀0o表示。\n\n// 非严格模式\n(function(){\n  console.log(0o11 === 011);\n})() // true\n\n// 严格模式\n(function(){\n  'use strict';\n  console.log(0o11 === 011);\n})() // uncaught syntaxerror: octal literals are not allowed in strict mode.\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n如果要将0b和0o前缀的字符串数值转为十进制，要使用number方法。\n\nnumber('0b111')  // 7\nnumber('0o10')  // 8\n\n\n1\n2\n\n\n\n# number.isfinite() 是否为有限, number.isnan() 是否为nan\n\nes6 在number对象上，新提供了number.isfinite()和number.isnan()两个方法。\n\nnumber.isfinite()用来检查一个数值是否为有限的（finite），即不是infinity。\n\nnumber.isfinite(15); // true\nnumber.isfinite(0.8); // true\nnumber.isfinite(nan); // false\nnumber.isfinite(infinity); // false\nnumber.isfinite(-infinity); // false\nnumber.isfinite('foo'); // false\nnumber.isfinite('15'); // false\nnumber.isfinite(true); // false\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n注意，如果参数类型不是数值，number.isfinite一律返回false。\n\nnumber.isnan()用来检查一个值是否为nan。\n\nnumber.isnan(nan) // true\nnumber.isnan(15) // false\nnumber.isnan('15') // false\nnumber.isnan(true) // false\nnumber.isnan(9/nan) // true\nnumber.isnan('true' / 0) // true\nnumber.isnan('true' / 'true') // true\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n如果参数类型不是nan，number.isnan一律返回false。\n\n它们与传统的全局方法isfinite()和isnan()的区别在于，传统方法先调用number()将非数值的值转为数值，再进行判断，而这两个新方法只对数值有效，number.isfinite()对于非数值一律返回false, number.isnan()只有对于nan才返回true，非nan一律返回false。\n\nisfinite(25) // true\nisfinite(\"25\") // true\nnumber.isfinite(25) // true\nnumber.isfinite(\"25\") // false\n\nisnan(nan) // true\nisnan(\"nan\") // true\nnumber.isnan(nan) // true\nnumber.isnan(\"nan\") // false\nnumber.isnan(1) // false\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n\n# number.parseint(), number.parsefloat()\n\nes6 将全局方法parseint()和parsefloat()，移植到number对象上面，行为完全保持不变。\n\n// es5的写法\nparseint('12.34') // 12\nparsefloat('123.45#') // 123.45\n\n// es6的写法\nnumber.parseint('12.34') // 12\nnumber.parsefloat('123.45#') // 123.45\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n这样做的目的，是逐步减少全局性方法，使得语言逐步模块化。\n\nnumber.parseint === parseint // true\nnumber.parsefloat === parsefloat // true\n\n\n1\n2\n\n\n\n# number.isinteger() 是否为整数\n\nnumber.isinteger()用来判断一个数值是否为整数。\n\nnumber.isinteger(25) // true\nnumber.isinteger(25.1) // false\n\n\n1\n2\n\n\njavascript 内部，整数和浮点数采用的是同样的储存方法，所以 25 和 25.0 被视为同一个值。\n\nnumber.isinteger(25) // true\nnumber.isinteger(25.0) // true\n\n\n1\n2\n\n\n如果参数不是数值，number.isinteger返回false。\n\nnumber.isinteger() // false\nnumber.isinteger(null) // false\nnumber.isinteger('15') // false\nnumber.isinteger(true) // false\n\n\n1\n2\n3\n4\n\n\n注意，由于 javascript 采用 ieee 754 标准，数值存储为64位双精度格式，数值精度最多可以达到 53 个二进制位（1 个隐藏位与 52 个有效位）。如果数值的精度超过这个限度，第54位及后面的位就会被丢弃，这种情况下，number.isinteger可能会误判。\n\nnumber.isinteger(3.0000000000000002) // true\n\n\n1\n\n\n上面代码中，number.isinteger的参数明明不是整数，但是会返回true。原因就是这个小数的精度达到了小数点后16个十进制位，转成二进制位超过了53个二进制位，导致最后的那个2被丢弃了。\n\n类似的情况还有，如果一个数值的绝对值小于number.min_value（5e-324），即小于 javascript 能够分辨的最小值，会被自动转为 0。这时，number.isinteger也会误判。\n\nnumber.isinteger(5e-324) // false\nnumber.isinteger(5e-325) // true\n\n\n1\n2\n\n\n上面代码中，5e-325由于值太小，会被自动转为0，因此返回true。\n\n总之，如果对数据精度的要求较高，不建议使用number.isinteger()判断一个数值是否为整数。\n\n\n# number.epsilon 用于浮点数误差检查\n\nes6 在number对象上面，新增一个极小的常量number.epsilon。根据规格，它表示 1 与大于 1 的最小浮点数之间的差。\n\n对于 64 位浮点数来说，大于 1 的最小浮点数相当于二进制的1.00..001，小数点后面有连续 51 个零。这个值减去 1 之后，就等于 2 的 -52 次方。\n\nnumber.epsilon === math.pow(2, -52)\n// true\nnumber.epsilon\n// 2.220446049250313e-16\nnumber.epsilon.tofixed(20)\n// \"0.00000000000000022204\"\n\n\n1\n2\n3\n4\n5\n6\n\n\nnumber.epsilon实际上是 javascript 能够表示的最小精度。误差如果小于这个值，就可以认为已经没有意义了，即不存在误差了。\n\n引入一个这么小的量的目的，在于为浮点数计算，设置一个误差范围。我们知道浮点数计算是不精确的。\n\n0.1 + 0.2\n// 0.30000000000000004\n\n0.1 + 0.2 - 0.3\n// 5.551115123125783e-17\n\n5.551115123125783e-17.tofixed(20)\n// '0.00000000000000005551'\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n上面代码解释了，为什么比较0.1 + 0.2与0.3得到的结果是false。\n\n0.1 + 0.2 === 0.3 // false\n\n\n1\n\n\nnumber.epsilon可以用来设置“能够接受的误差范围”。比如，误差范围设为 2 的-50 次方（即number.epsilon * math.pow(2, 2)），即如果两个浮点数的差小于这个值，我们就认为这两个浮点数相等。\n\n5.551115123125783e-17 < number.epsilon * math.pow(2, 2)\n// true\n\n\n1\n2\n\n\n因此，number.epsilon的实质是一个可以接受的最小误差范围。\n\nfunction withinerrormargin (left, right) {\n  return math.abs(left - right) < number.epsilon * math.pow(2, 2);\n}\n\n0.1 + 0.2 === 0.3 // false\nwithinerrormargin(0.1 + 0.2, 0.3) // true\n\n1.1 + 1.3 === 2.4 // false\nwithinerrormargin(1.1 + 1.3, 2.4) // true\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n上面的代码为浮点数运算，部署了一个误差检查函数。\n\n\n# 安全整数和 number.issafeinteger()\n\njavascript 能够准确表示的整数范围在-2^53到2^53之间（不含两个端点），超过这个范围，无法精确表示这个值。\n\nmath.pow(2, 53) // 9007199254740992\n\n9007199254740992  // 9007199254740992\n9007199254740993  // 9007199254740992\n\nmath.pow(2, 53) === math.pow(2, 53) + 1\n// true\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n上面代码中，超出 2 的 53 次方之后，一个数就不精确了。\n\nes6 引入了number.max_safe_integer和number.min_safe_integer这两个常量，用来表示这个范围的上下限。\n\nnumber.max_safe_integer === math.pow(2, 53) - 1\n// true\nnumber.max_safe_integer === 9007199254740991\n// true\n\nnumber.min_safe_integer === -number.max_safe_integer\n// true\nnumber.min_safe_integer === -9007199254740991\n// true\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n上面代码中，可以看到 javascript 能够精确表示的极限。\n\nnumber.issafeinteger()则是用来判断一个整数是否落在这个范围之内。\n\nnumber.issafeinteger('a') // false\nnumber.issafeinteger(null) // false\nnumber.issafeinteger(nan) // false\nnumber.issafeinteger(infinity) // false\nnumber.issafeinteger(-infinity) // false\n\nnumber.issafeinteger(3) // true\nnumber.issafeinteger(1.2) // false\nnumber.issafeinteger(9007199254740990) // true\nnumber.issafeinteger(9007199254740992) // false\n\nnumber.issafeinteger(number.min_safe_integer - 1) // false\nnumber.issafeinteger(number.min_safe_integer) // true\nnumber.issafeinteger(number.max_safe_integer) // true\nnumber.issafeinteger(number.max_safe_integer + 1) // false\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n这个函数的实现很简单，就是跟安全整数的两个边界值比较一下。\n\nnumber.issafeinteger = function (n) {\n  return (typeof n === 'number' &&\n    math.round(n) === n &&\n    number.min_safe_integer <= n &&\n    n <= number.max_safe_integer);\n}\n\n\n1\n2\n3\n4\n5\n6\n\n\n实际使用这个函数时，需要注意。验证运算结果是否落在安全整数的范围内，不要只验证运算结果，而要同时验证参与运算的每个值。\n\nnumber.issafeinteger(9007199254740993)\n// false\nnumber.issafeinteger(990)\n// true\nnumber.issafeinteger(9007199254740993 - 990)\n// true\n9007199254740993 - 990\n// 返回结果 9007199254740002\n// 正确答案应该是 9007199254740003\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n上面代码中，9007199254740993不是一个安全整数，但是number.issafeinteger会返回结果，显示计算结果是安全的。这是因为，这个数超出了精度范围，导致在计算机内部，以9007199254740992的形式储存。\n\n9007199254740993 === 9007199254740992\n// true\n\n\n1\n2\n\n\n所以，如果只验证运算结果是否为安全整数，很可能得到错误结果。下面的函数可以同时验证两个运算数和运算结果。\n\nfunction trusty (left, right, result) {\n  if (\n    number.issafeinteger(left) &&\n    number.issafeinteger(right) &&\n    number.issafeinteger(result)\n  ) {\n    return result;\n  }\n  throw new rangeerror('operation cannot be trusted!');\n}\n\ntrusty(9007199254740993, 990, 9007199254740993 - 990)\n// rangeerror: operation cannot be trusted!\n\ntrusty(1, 2, 3)\n// 3\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n\n# math 对象的扩展\n\nes6 在 math 对象上新增了 17 个与数学相关的方法。所有这些方法都是静态方法，只能在 math 对象上调用。\n\n\n# math.trunc() 去除一个数的小数部分，返回整数部分\n\nmath.trunc方法用于去除一个数的小数部分，返回整数部分。\n\nmath.trunc(4.1) // 4\nmath.trunc(4.9) // 4\nmath.trunc(-4.1) // -4\nmath.trunc(-4.9) // -4\nmath.trunc(-0.1234) // -0\n\n\n1\n2\n3\n4\n5\n\n\n对于非数值，math.trunc内部使用number方法将其先转为数值。\n\nmath.trunc('123.456') // 123\nmath.trunc(true) //1\nmath.trunc(false) // 0\nmath.trunc(null) // 0\n\n\n1\n2\n3\n4\n\n\n对于空值和无法截取整数的值，返回nan。\n\nmath.trunc(nan);      // nan\nmath.trunc('foo');    // nan\nmath.trunc();         // nan\nmath.trunc(undefined) // nan\n\n\n1\n2\n3\n4\n\n\n对于没有部署这个方法的环境，可以用下面的代码模拟。\n\nmath.trunc = math.trunc || function(x) {\n  return x < 0 ? math.ceil(x) : math.floor(x);\n};\n\n\n1\n2\n3\n\n\n\n# math.sign() 判断一个数是正数、负数、还是零\n\nmath.sign方法用来判断一个数到底是正数、负数、还是零。对于非数值，会先将其转换为数值。\n\n它会返回五种值。\n\n * 参数为正数，返回+1；\n * 参数为负数，返回-1；\n * 参数为 0，返回0；\n * 参数为-0，返回-0;\n * 其他值，返回nan。\n\nmath.sign(-5) // -1\nmath.sign(5) // +1\nmath.sign(0) // +0\nmath.sign(-0) // -0\nmath.sign(nan) // nan\n\n\n1\n2\n3\n4\n5\n\n\n如果参数是非数值，会自动转为数值。对于那些无法转为数值的值，会返回nan。\n\nmath.sign('')  // 0\nmath.sign(true)  // +1\nmath.sign(false)  // 0\nmath.sign(null)  // 0\nmath.sign('9')  // +1\nmath.sign('foo')  // nan\nmath.sign()  // nan\nmath.sign(undefined)  // nan\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n对于没有部署这个方法的环境，可以用下面的代码模拟。\n\nmath.sign = math.sign || function(x) {\n  x = +x; // convert to a number\n  if (x === 0 || isnan(x)) {\n    return x;\n  }\n  return x > 0 ? 1 : -1;\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# math.cbrt() 计算一个数的立方根\n\nmath.cbrt方法用于计算一个数的立方根。\n\nmath.cbrt(-1) // -1\nmath.cbrt(0)  // 0\nmath.cbrt(1)  // 1\nmath.cbrt(2)  // 1.2599210498948734\n\n\n1\n2\n3\n4\n\n\n对于非数值，math.cbrt方法内部也是先使用number方法将其转为数值。\n\nmath.cbrt('8') // 2\nmath.cbrt('hello') // nan\n\n\n1\n2\n\n\n对于没有部署这个方法的环境，可以用下面的代码模拟。\n\nmath.cbrt = math.cbrt || function(x) {\n  var y = math.pow(math.abs(x), 1/3);\n  return x < 0 ? -y : y;\n};\n\n\n1\n2\n3\n4\n\n\n\n# math.clz32()\n\nmath.clz32()方法将参数转为 32 位无符号整数的形式，然后返回这个 32 位值里面有多少个前导 0。\n\nmath.clz32(0) // 32\nmath.clz32(1) // 31\nmath.clz32(1000) // 22\nmath.clz32(0b01000000000000000000000000000000) // 1\nmath.clz32(0b00100000000000000000000000000000) // 2\n\n\n1\n2\n3\n4\n5\n\n\n上面代码中，0 的二进制形式全为 0，所以有 32 个前导 0；1 的二进制形式是0b1，只占 1 位，所以 32 位之中有 31 个前导 0；1000 的二进制形式是0b1111101000，一共有 10 位，所以 32 位之中有 22 个前导 0。\n\nclz32这个函数名就来自”count leading zero bits in 32-bit binary representation of a number“（计算一个数的 32 位二进制形式的前导 0 的个数）的缩写。\n\n左移运算符（<<）与math.clz32方法直接相关。\n\nmath.clz32(0) // 32\nmath.clz32(1) // 31\nmath.clz32(1 << 1) // 30\nmath.clz32(1 << 2) // 29\nmath.clz32(1 << 29) // 2\n\n\n1\n2\n3\n4\n5\n\n\n对于小数，math.clz32方法只考虑整数部分。\n\nmath.clz32(3.2) // 30\nmath.clz32(3.9) // 30\n\n\n1\n2\n\n\n对于空值或其他类型的值，math.clz32方法会将它们先转为数值，然后再计算。\n\nmath.clz32() // 32\nmath.clz32(nan) // 32\nmath.clz32(infinity) // 32\nmath.clz32(null) // 32\nmath.clz32('foo') // 32\nmath.clz32([]) // 32\nmath.clz32({}) // 32\nmath.clz32(true) // 31\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# math.imul()\n\nmath.imul方法返回两个数以 32 位带符号整数形式相乘的结果，返回的也是一个 32 位的带符号整数。\n\nmath.imul(2, 4)   // 8\nmath.imul(-1, 8)  // -8\nmath.imul(-2, -2) // 4\n\n\n1\n2\n3\n\n\n如果只考虑最后 32 位，大多数情况下，math.imul(a, b)与a * b的结果是相同的，即该方法等同于(a * b)|0的效果（超过 32 位的部分溢出）。之所以需要部署这个方法，是因为 javascript 有精度限制，超过 2 的 53 次方的值无法精确表示。这就是说，对于那些很大的数的乘法，低位数值往往都是不精确的，math.imul方法可以返回正确的低位数值。\n\n(0x7fffffff * 0x7fffffff)|0 // 0\n\n\n1\n\n\n上面这个乘法算式，返回结果为 0。但是由于这两个二进制数的最低位都是 1，所以这个结果肯定是不正确的，因为根据二进制乘法，计算结果的二进制最低位应该也是 1。这个错误就是因为它们的乘积超过了 2 的 53 次方，javascript 无法保存额外的精度，就把低位的值都变成了 0。math.imul方法可以返回正确的值 1。\n\nmath.imul(0x7fffffff, 0x7fffffff) // 1\n\n\n1\n\n\n\n# math.fround()\n\nmath.fround方法返回一个数的32位单精度浮点数形式。\n\n对于32位单精度格式来说，数值精度是24个二进制位（1 位隐藏位与 23 位有效位），所以对于 -224 至 224 之间的整数（不含两个端点），返回结果与参数本身一致。\n\nmath.fround(0)   // 0\nmath.fround(1)   // 1\nmath.fround(2 ** 24 - 1)   // 16777215\n\n\n1\n2\n3\n\n\n如果参数的绝对值大于 224，返回的结果便开始丢失精度。\n\nmath.fround(2 ** 24)       // 16777216\nmath.fround(2 ** 24 + 1)   // 16777216\n\n\n1\n2\n\n\nmath.fround方法的主要作用，是将64位双精度浮点数转为32位单精度浮点数。如果小数的精度超过24个二进制位，返回值就会不同于原值，否则返回值不变（即与64位双精度值一致）。\n\n// 未丢失有效精度\nmath.fround(1.125) // 1.125\nmath.fround(7.25)  // 7.25\n\n// 丢失精度\nmath.fround(0.3)   // 0.30000001192092896\nmath.fround(0.7)   // 0.699999988079071\nmath.fround(1.0000000123) // 1\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n对于 nan 和 infinity，此方法返回原值。对于其它类型的非数值，math.fround 方法会先将其转为数值，再返回单精度浮点数。\n\nmath.fround(nan)      // nan\nmath.fround(infinity) // infinity\n\nmath.fround('5')      // 5\nmath.fround(true)     // 1\nmath.fround(null)     // 0\nmath.fround([])       // 0\nmath.fround({})       // nan\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n对于没有部署这个方法的环境，可以用下面的代码模拟。\n\nmath.fround = math.fround || function (x) {\n  return new float32array([x])[0];\n};\n\n\n1\n2\n3\n\n\n\n# math.hypot()\n\nmath.hypot方法返回所有参数的平方和的平方根。\n\nmath.hypot(3, 4);        // 5\nmath.hypot(3, 4, 5);     // 7.0710678118654755\nmath.hypot();            // 0\nmath.hypot(nan);         // nan\nmath.hypot(3, 4, 'foo'); // nan\nmath.hypot(3, 4, '5');   // 7.0710678118654755\nmath.hypot(-3);          // 3\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n上面代码中，3 的平方加上 4 的平方，等于 5 的平方。\n\n如果参数不是数值，math.hypot方法会将其转为数值。只要有一个参数无法转为数值，就会返回 nan。\n\n\n# 对数方法\n\nes6 新增了 4 个对数相关方法。\n\n（1） math.expm1()\n\nmath.expm1(x)返回 ex - 1，即math.exp(x) - 1。\n\nmath.expm1(-1) // -0.6321205588285577\nmath.expm1(0)  // 0\nmath.expm1(1)  // 1.718281828459045\n\n\n1\n2\n3\n\n\n对于没有部署这个方法的环境，可以用下面的代码模拟。\n\nmath.expm1 = math.expm1 || function(x) {\n  return math.exp(x) - 1;\n};\n\n\n1\n2\n3\n\n\n（2）math.log1p()\n\nmath.log1p(x)方法返回1 + x的自然对数，即math.log(1 + x)。如果x小于-1，返回nan。\n\nmath.log1p(1)  // 0.6931471805599453\nmath.log1p(0)  // 0\nmath.log1p(-1) // -infinity\nmath.log1p(-2) // nan\n\n\n1\n2\n3\n4\n\n\n对于没有部署这个方法的环境，可以用下面的代码模拟。\n\nmath.log1p = math.log1p || function(x) {\n  return math.log(1 + x);\n};\n\n\n1\n2\n3\n\n\n（3）math.log10()\n\nmath.log10(x)返回以 10 为底的x的对数。如果x小于 0，则返回 nan。\n\nmath.log10(2)      // 0.3010299956639812\nmath.log10(1)      // 0\nmath.log10(0)      // -infinity\nmath.log10(-2)     // nan\nmath.log10(100000) // 5\n\n\n1\n2\n3\n4\n5\n\n\n对于没有部署这个方法的环境，可以用下面的代码模拟。\n\nmath.log10 = math.log10 || function(x) {\n  return math.log(x) / math.ln10;\n};\n\n\n1\n2\n3\n\n\n（4）math.log2()\n\nmath.log2(x)返回以 2 为底的x的对数。如果x小于 0，则返回 nan。\n\nmath.log2(3)       // 1.584962500721156\nmath.log2(2)       // 1\nmath.log2(1)       // 0\nmath.log2(0)       // -infinity\nmath.log2(-2)      // nan\nmath.log2(1024)    // 10\nmath.log2(1 << 29) // 29\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n对于没有部署这个方法的环境，可以用下面的代码模拟。\n\nmath.log2 = math.log2 || function(x) {\n  return math.log(x) / math.ln2;\n};\n\n\n1\n2\n3\n\n\n\n# 双曲函数方法\n\nes6 新增了 6 个双曲函数方法。\n\n * math.sinh(x) 返回x的双曲正弦（hyperbolic sine）\n * math.cosh(x) 返回x的双曲余弦（hyperbolic cosine）\n * math.tanh(x) 返回x的双曲正切（hyperbolic tangent）\n * math.asinh(x) 返回x的反双曲正弦（inverse hyperbolic sine）\n * math.acosh(x) 返回x的反双曲余弦（inverse hyperbolic cosine）\n * math.atanh(x) 返回x的反双曲正切（inverse hyperbolic tangent）\n\n\n# 指数运算符\n\nes2016 新增了一个指数运算符（**）。\n\n2 ** 2 // 4\n2 ** 3 // 8\n\n\n1\n2\n\n\n这个运算符的一个特点是右结合，而不是常见的左结合。多个指数运算符连用时，是从最右边开始计算的。\n\n// 相当于 2 ** (3 ** 2)\n2 ** 3 ** 2\n// 512\n\n\n1\n2\n3\n\n\n上面代码中，首先计算的是第二个指数运算符，而不是第一个。\n\n指数运算符可以与等号结合，形成一个新的赋值运算符（**=）。\n\nlet a = 1.5;\na **= 2;\n// 等同于 a = a * a;\n\nlet b = 4;\nb **= 3;\n// 等同于 b = b * b * b;\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n注意，v8 引擎的指数运算符与math.pow的实现不相同，对于特别大的运算结果，两者会有细微的差异。\n\nmath.pow(99, 99)\n// 3.697296376497263e+197\n\n99 ** 99\n// 3.697296376497268e+197\n\n\n1\n2\n3\n4\n5\n\n\n上面代码中，两个运算结果的最后一位有效数字是有差异的。\n\n\n# bigint 数据类型\n\n\n# 简介\n\njavascript 所有数字都保存成 64 位浮点数，这给数值的表示带来了两大限制。一是数值的精度只能到 53 个二进制位（相当于 16 个十进制位），大于这个范围的整数，javascript 是无法精确表示的，这使得 javascript 不适合进行科学和金融方面的精确计算。二是大于或等于2的1024次方的数值，javascript 无法表示，会返回infinity。\n\n// 超过 53 个二进制位的数值，无法保持精度\nmath.pow(2, 53) === math.pow(2, 53) + 1 // true\n\n// 超过 2 的 1024 次方的数值，无法表示\nmath.pow(2, 1024) // infinity\n\n\n1\n2\n3\n4\n5\n\n\nes2020 引入了一种新的数据类型 bigint（大整数），来解决这个问题。bigint 只用来表示整数，没有位数的限制，任何位数的整数都可以精确表示。\n\nconst a = 2172141653n;\nconst b = 15346349309n;\n\n// bigint 可以保持精度\na * b // 33334444555566667777n\n\n// 普通整数无法保持精度\nnumber(a) * number(b) // 33334444555566670000\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n为了与 number 类型区别，bigint 类型的数据必须添加后缀n。\n\n1234 // 普通整数\n1234n // bigint\n\n// bigint 的运算\n1n + 2n // 3n\n\n\n1\n2\n3\n4\n5\n\n\nbigint 同样可以使用各种进制表示，都要加上后缀n。\n\n0b1101n // 二进制\n0o777n // 八进制\n0xffn // 十六进制\n\n\n1\n2\n3\n\n\nbigint 与普通整数是两种值，它们之间并不相等。\n\n42n === 42 // false\n\n\n1\n\n\ntypeof运算符对于 bigint 类型的数据返回bigint。\n\ntypeof 123n // 'bigint'\n\n\n1\n\n\nbigint 可以使用负号（-），但是不能使用正号（+），因为会与 asm.js 冲突。\n\n-42n // 正确\n+42n // 报错\n\n\n1\n2\n\n\njavascript 以前不能计算70的阶乘（即70!），因为超出了可以表示的精度。\n\nlet p = 1;\nfor (let i = 1; i <= 70; i++) {\n  p *= i;\n}\nconsole.log(p); // 1.197857166996989e+100\n\n\n1\n2\n3\n4\n5\n\n\n现在支持大整数了，就可以算了，浏览器的开发者工具运行下面代码，就ok。\n\nlet p = 1n;\nfor (let i = 1n; i <= 70n; i++) {\n  p *= i;\n}\nconsole.log(p); // 11978571...00000000n\n\n\n1\n2\n3\n4\n5\n\n\n\n# bigint 对象\n\njavascript 原生提供bigint对象，可以用作构造函数生成 bigint 类型的数值。转换规则基本与number()一致，将其他类型的值转为 bigint。\n\nbigint(123) // 123n\nbigint('123') // 123n\nbigint(false) // 0n\nbigint(true) // 1n\n\n\n1\n2\n3\n4\n\n\nbigint()构造函数必须有参数，而且参数必须可以正常转为数值，下面的用法都会报错。\n\nnew bigint() // typeerror\nbigint(undefined) //typeerror\nbigint(null) // typeerror\nbigint('123n') // syntaxerror\nbigint('abc') // syntaxerror\n\n\n1\n2\n3\n4\n5\n\n\n上面代码中，尤其值得注意字符串123n无法解析成 number 类型，所以会报错。\n\n参数如果是小数，也会报错。\n\nbigint(1.5) // rangeerror\nbigint('1.5') // syntaxerror\n\n\n1\n2\n\n\nbigint 对象继承了 object 对象的两个实例方法。\n\n * bigint.prototype.tostring()\n * bigint.prototype.valueof()\n\n它还继承了 number 对象的一个实例方法。\n\n * bigint.prototype.tolocalestring()\n\n此外，还提供了三个静态方法。\n\n * bigint.asuintn(width, bigint)： 给定的 bigint 转为 0 到 2width - 1 之间对应的值。\n * bigint.asintn(width, bigint)：给定的 bigint 转为 -2width - 1 到 2width - 1 - 1 之间对应的值。\n * bigint.parseint(string[, radix])：近似于number.parseint()，将一个字符串转换成指定进制的 bigint。\n\nconst max = 2n ** (64n - 1n) - 1n;\n\nbigint.asintn(64, max)\n// 9223372036854775807n\nbigint.asintn(64, max + 1n)\n// -9223372036854775808n\nbigint.asuintn(64, max + 1n)\n// 9223372036854775808n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n上面代码中，max是64位带符号的 bigint 所能表示的最大值。如果对这个值加1n，bigint.asintn()将会返回一个负值，因为这时新增的一位将被解释为符号位。而bigint.asuintn()方法由于不存在符号位，所以可以正确返回结果。\n\n如果bigint.asintn()和bigint.asuintn()指定的位数，小于数值本身的位数，那么头部的位将被舍弃。\n\nconst max = 2n ** (64n - 1n) - 1n;\n\nbigint.asintn(32, max) // -1n\nbigint.asuintn(32, max) // 4294967295n\n\n\n1\n2\n3\n4\n\n\n上面代码中，max是一个64位的 bigint，如果转为32位，前面的32位都会被舍弃。\n\n下面是bigint.parseint()的例子。\n\n// number.parseint() 与 bigint.parseint() 的对比\nnumber.parseint('9007199254740993', 10)\n// 9007199254740992\nbigint.parseint('9007199254740993', 10)\n// 9007199254740993n\n\n\n1\n2\n3\n4\n5\n\n\n上面代码中，由于有效数字超出了最大限度，number.parseint方法返回的结果是不精确的，而bigint.parseint方法正确返回了对应的 bigint。\n\n对于二进制数组，bigint 新增了两个类型biguint64array和bigint64array，这两种数据类型返回的都是64位 bigint。dataview对象的实例方法dataview.prototype.getbigint64()和dataview.prototype.getbiguint64()，返回的也是 bigint。\n\n\n# 转换规则\n\n可以使用boolean()、number()和string()这三个方法，将 bigint 可以转为布尔值、数值和字符串类型。\n\nboolean(0n) // false\nboolean(1n) // true\nnumber(1n)  // 1\nstring(1n)  // \"1\"\n\n\n1\n2\n3\n4\n\n\n上面代码中，注意最后一个例子，转为字符串时后缀n会消失。\n\n另外，取反运算符（!）也可以将 bigint 转为布尔值。\n\n!0n // true\n!1n // false\n\n\n1\n2\n\n\n\n# 数学运算\n\n数学运算方面，bigint 类型的+、-、*和**这四个二元运算符，与 number 类型的行为一致。除法运算/会舍去小数部分，返回一个整数。\n\n9n / 5n\n// 1n\n\n\n1\n2\n\n\n几乎所有的数值运算符都可以用在 bigint，但是有两个例外。\n\n * 不带符号的右移位运算符>>>\n * 一元的求正运算符+\n\n上面两个运算符用在 bigint 会报错。前者是因为>>>运算符是不带符号的，但是 bigint 总是带有符号的，导致该运算无意义，完全等同于右移运算符>>。后者是因为一元运算符+在 asm.js 里面总是返回 number 类型，为了不破坏 asm.js 就规定+1n会报错。\n\nbigint 不能与普通数值进行混合运算。\n\n1n + 1.3 // 报错\n\n\n1\n\n\n上面代码报错是因为无论返回的是 bigint 或 number，都会导致丢失精度信息。比如(2n**53n + 1n) + 0.5这个表达式，如果返回 bigint 类型，0.5这个小数部分会丢失；如果返回 number 类型，有效精度只能保持 53 位，导致精度下降。\n\n同样的原因，如果一个标准库函数的参数预期是 number 类型，但是得到的是一个 bigint，就会报错。\n\n// 错误的写法\nmath.sqrt(4n) // 报错\n\n// 正确的写法\nmath.sqrt(number(4n)) // 2\n\n\n1\n2\n3\n4\n5\n\n\n上面代码中，math.sqrt的参数预期是 number 类型，如果是 bigint 就会报错，必须先用number方法转一下类型，才能进行计算。\n\nasm.js 里面，|0跟在一个数值的后面会返回一个32位整数。根据不能与 number 类型混合运算的规则，bigint 如果与|0进行运算会报错。\n\n1n | 0 // 报错\n\n\n1\n\n\n\n# 其他运算\n\nbigint 对应的布尔值，与 number 类型一致，即0n会转为false，其他值转为true。\n\nif (0n) {\n  console.log('if');\n} else {\n  console.log('else');\n}\n// else\n\n\n1\n2\n3\n4\n5\n6\n\n\n上面代码中，0n对应false，所以会进入else子句。\n\n比较运算符（比如>）和相等运算符（==）允许 bigint 与其他类型的值混合计算，因为这样做不会损失精度。\n\n0n < 1 // true\n0n < true // true\n0n == 0 // true\n0n == false // true\n0n === 0 // false\n\n\n1\n2\n3\n4\n5\n\n\nbigint 与字符串混合运算时，会先转为字符串，再进行运算。\n\n'' + 123n // \"123\"\n\n\n1\n",charsets:{cjk:!0}},{title:"函数的扩展",frontmatter:{title:"函数的扩展",date:"2020-02-09T16:00:29.000Z",permalink:"/pages/8ed309d668b20264",author:"阮一峰",categories:["《ES6 教程》笔记"],tags:["ES6"],readingShow:"top"},regularPath:"/06.%E4%B9%A6%E7%B1%8D/05.%E3%80%8AES6%20%E6%95%99%E7%A8%8B%E3%80%8B%E7%AC%94%E8%AE%B0/08.%E5%87%BD%E6%95%B0%E7%9A%84%E6%89%A9%E5%B1%95.html",relativePath:"06.书籍/05.《ES6 教程》笔记/08.函数的扩展.md",key:"v-565d8538",path:"/pages/8ed309d668b20264/",headers:[{level:2,title:"函数参数的默认值",slug:"函数参数的默认值",normalizedTitle:"函数参数的默认值",charIndex:12},{level:3,title:"基本用法",slug:"基本用法",normalizedTitle:"基本用法",charIndex:25},{level:3,title:"与解构赋值默认值结合使用",slug:"与解构赋值默认值结合使用",normalizedTitle:"与解构赋值默认值结合使用",charIndex:1543},{level:3,title:"参数默认值的位置",slug:"参数默认值的位置",normalizedTitle:"参数默认值的位置",charIndex:3183},{level:3,title:"函数的 length 属性",slug:"函数的-length-属性",normalizedTitle:"函数的 length 属性",charIndex:3874},{level:3,title:"作用域",slug:"作用域",normalizedTitle:"作用域",charIndex:4439},{level:3,title:"应用",slug:"应用",normalizedTitle:"应用",charIndex:6230},{level:2,title:"rest 参数",slug:"rest-参数",normalizedTitle:"rest 参数",charIndex:4243},{level:2,title:"严格模式",slug:"严格模式",normalizedTitle:"严格模式",charIndex:7903},{level:2,title:"name 属性",slug:"name-属性",normalizedTitle:"name 属性",charIndex:9120},{level:2,title:"箭头函数",slug:"箭头函数",normalizedTitle:"箭头函数",charIndex:9824},{level:3,title:"基本用法",slug:"基本用法-2",normalizedTitle:"基本用法",charIndex:25},{level:3,title:"使用注意点",slug:"使用注意点",normalizedTitle:"使用注意点",charIndex:11526},{level:3,title:"不适用场合",slug:"不适用场合",normalizedTitle:"不适用场合",charIndex:14619},{level:3,title:"嵌套的箭头函数",slug:"嵌套的箭头函数",normalizedTitle:"嵌套的箭头函数",charIndex:15264},{level:2,title:"尾调用优化",slug:"尾调用优化",normalizedTitle:"尾调用优化",charIndex:16453},{level:3,title:"什么是尾调用？",slug:"什么是尾调用",normalizedTitle:"什么是尾调用？",charIndex:16463},{level:3,title:"尾调用优化",slug:"尾调用优化-2",normalizedTitle:"尾调用优化",charIndex:16453},{level:3,title:"尾递归",slug:"尾递归",normalizedTitle:"尾递归",charIndex:18046},{level:3,title:"递归函数的改写",slug:"递归函数的改写",normalizedTitle:"递归函数的改写",charIndex:19198},{level:3,title:"严格模式",slug:"严格模式-2",normalizedTitle:"严格模式",charIndex:7903},{level:3,title:"尾递归优化的实现",slug:"尾递归优化的实现",normalizedTitle:"尾递归优化的实现",charIndex:20764},{level:2,title:"函数参数的尾逗号",slug:"函数参数的尾逗号",normalizedTitle:"函数参数的尾逗号",charIndex:22545},{level:2,title:"Function.prototype.toString()",slug:"function-prototype-tostring",normalizedTitle:"function.prototype.tostring()",charIndex:23110},{level:2,title:"catch 命令的参数省略",slug:"catch-命令的参数省略",normalizedTitle:"catch 命令的参数省略",charIndex:23500}],excerpt:'<h1 id="函数的扩展"><a class="header-anchor" href="#函数的扩展">#</a> 函数的扩展</h1>\n<h2 id="函数参数的默认值"><a class="header-anchor" href="#函数参数的默认值">#</a> 函数参数的默认值</h2>\n<h3 id="基本用法"><a class="header-anchor" href="#基本用法">#</a> 基本用法</h3>\n<p>ES6 之前，不能直接为函数的参数指定默认值，只能采用变通的方法。</p>\n\x3c!--beforebegin--\x3e<div class="language-javascript line-numbers-mode">\x3c!--afterbegin--\x3e<pre v-pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">log</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  y <span class="token operator">=</span> y <span class="token operator">||</span> <span class="token string">\'World\'</span><span class="token punctuation">;</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'Hello\'</span><span class="token punctuation">)</span> <span class="token comment">// Hello World</span>\n<span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'Hello\'</span><span class="token punctuation">,</span> <span class="token string">\'China\'</span><span class="token punctuation">)</span> <span class="token comment">// Hello China</span>\n<span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'Hello\'</span><span class="token punctuation">,</span> <span class="token string">\'\'</span><span class="token punctuation">)</span> <span class="token comment">// Hello World</span>\n</code></pre>\n<div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div>\x3c!--beforeend--\x3e</div>\x3c!--afterend--\x3e',lastUpdated:"2022/9/22 下午4:28:09",lastUpdatedTimestamp:1663835289e3,headersStr:"函数参数的默认值 基本用法 与解构赋值默认值结合使用 参数默认值的位置 函数的 length 属性 作用域 应用 rest 参数 严格模式 name 属性 箭头函数 基本用法 使用注意点 不适用场合 嵌套的箭头函数 尾调用优化 什么是尾调用？ 尾调用优化 尾递归 递归函数的改写 严格模式 尾递归优化的实现 函数参数的尾逗号 Function.prototype.toString() catch 命令的参数省略",content:"# 函数的扩展\n\n\n# 函数参数的默认值\n\n\n# 基本用法\n\nES6 之前，不能直接为函数的参数指定默认值，只能采用变通的方法。\n\nfunction log(x, y) {\n  y = y || 'World';\n  console.log(x, y);\n}\n\nlog('Hello') // Hello World\nlog('Hello', 'China') // Hello China\nlog('Hello', '') // Hello World\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n上面代码检查函数log的参数y有没有赋值，如果没有，则指定默认值为World。这种写法的缺点在于，如果参数y赋值了，但是对应的布尔值为false，则该赋值不起作用。就像上面代码的最后一行，参数y等于空字符，结果被改为默认值。\n\n为了避免这个问题，通常需要先判断一下参数y是否被赋值，如果没有，再等于默认值。\n\nif (typeof y === 'undefined') {\n  y = 'World';\n}\n\n\n1\n2\n3\n\n\nES6 允许为函数的参数设置默认值，即直接写在参数定义的后面。\n\nfunction log(x, y = 'World') {\n  console.log(x, y);\n}\n\nlog('Hello') // Hello World\nlog('Hello', 'China') // Hello China\nlog('Hello', '') // Hello\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n可以看到，ES6 的写法比 ES5 简洁许多，而且非常自然。下面是另一个例子。\n\nfunction Point(x = 0, y = 0) {\n  this.x = x;\n  this.y = y;\n}\n\nconst p = new Point();\np // { x: 0, y: 0 }\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n除了简洁，ES6 的写法还有两个好处：首先，阅读代码的人，可以立刻意识到哪些参数是可以省略的，不用查看函数体或文档；其次，有利于将来的代码优化，即使未来的版本在对外接口中，彻底拿掉这个参数，也不会导致以前的代码无法运行。\n\n参数变量是默认声明的，所以不能用let或const再次声明。\n\nfunction foo(x = 5) {\n  let x = 1; // error\n  const x = 2; // error\n}\n\n\n1\n2\n3\n4\n\n\n上面代码中，参数变量x是默认声明的，在函数体中，不能用let或const再次声明，否则会报错。\n\n使用参数默认值时，函数不能有同名参数。\n\n// 不报错\nfunction foo(x, x, y) {\n  // ...\n}\n\n// 报错\nfunction foo(x, x, y = 1) {\n  // ...\n}\n// SyntaxError: Duplicate parameter name not allowed in this context\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n另外，一个容易忽略的地方是，参数默认值不是传值的，而是每次都重新计算默认值表达式的值。也就是说，参数默认值是惰性求值的。\n\nlet x = 99;\nfunction foo(p = x + 1) {\n  console.log(p);\n}\n\nfoo() // 100\n\nx = 100;\nfoo() // 101\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n上面代码中，参数p的默认值是x + 1。这时，每次调用函数foo，都会重新计算x + 1，而不是默认p等于 100。\n\n\n# 与解构赋值默认值结合使用\n\n参数默认值可以与解构赋值的默认值，结合起来使用。\n\nfunction foo({x, y = 5}) {\n  console.log(x, y);\n}\n\nfoo({}) // undefined 5\nfoo({x: 1}) // 1 5\nfoo({x: 1, y: 2}) // 1 2\nfoo() // TypeError: Cannot read property 'x' of undefined\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n上面代码只使用了对象的解构赋值默认值，没有使用函数参数的默认值。只有当函数foo的参数是一个对象时，变量x和y才会通过解构赋值生成。如果函数foo调用时没提供参数，变量x和y就不会生成，从而报错。通过提供函数参数的默认值，就可以避免这种情况。\n\nfunction foo({x, y = 5} = {}) {\n  console.log(x, y);\n}\n\nfoo() // undefined 5\n\n\n1\n2\n3\n4\n5\n\n\n上面代码指定，如果没有提供参数，函数foo的参数默认为一个空对象。\n\n下面是另一个解构赋值默认值的例子。\n\nfunction fetch(url, { body = '', method = 'GET', headers = {} }) {\n  console.log(method);\n}\n\nfetch('http://example.com', {})\n// \"GET\"\n\nfetch('http://example.com')\n// 报错\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n上面代码中，如果函数fetch的第二个参数是一个对象，就可以为它的三个属性设置默认值。这种写法不能省略第二个参数，如果结合函数参数的默认值，就可以省略第二个参数。这时，就出现了双重默认值。\n\nfunction fetch(url, { body = '', method = 'GET', headers = {} } = {}) {\n  console.log(method);\n}\n\nfetch('http://example.com')\n// \"GET\"\n\n\n1\n2\n3\n4\n5\n6\n\n\n上面代码中，函数fetch没有第二个参数时，函数参数的默认值就会生效，然后才是解构赋值的默认值生效，变量method才会取到默认值GET。\n\n作为练习，请问下面两种写法有什么差别？\n\n// 写法一\nfunction m1({x = 0, y = 0} = {}) {\n  return [x, y];\n}\n\n// 写法二\nfunction m2({x, y} = { x: 0, y: 0 }) {\n  return [x, y];\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n上面两种写法都对函数的参数设定了默认值，区别是写法一函数参数的默认值是空对象，但是设置了对象解构赋值的默认值；写法二函数参数的默认值是一个有具体属性的对象，但是没有设置对象解构赋值的默认值。\n\n// 函数没有参数的情况\nm1() // [0, 0]\nm2() // [0, 0]\n\n// x 和 y 都有值的情况\nm1({x: 3, y: 8}) // [3, 8]\nm2({x: 3, y: 8}) // [3, 8]\n\n// x 有值，y 无值的情况\nm1({x: 3}) // [3, 0]\nm2({x: 3}) // [3, undefined]\n\n// x 和 y 都无值的情况\nm1({}) // [0, 0];\nm2({}) // [undefined, undefined]\n\nm1({z: 3}) // [0, 0]\nm2({z: 3}) // [undefined, undefined]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\n\n# 参数默认值的位置\n\n通常情况下，定义了默认值的参数，应该是函数的尾参数。因为这样比较容易看出来，到底省略了哪些参数。如果非尾部的参数设置默认值，实际上这个参数是没法省略的。\n\n// 例一\nfunction f(x = 1, y) {\n  return [x, y];\n}\n\nf() // [1, undefined]\nf(2) // [2, undefined])\nf(, 1) // 报错\nf(undefined, 1) // [1, 1]\n\n// 例二\nfunction f(x, y = 5, z) {\n  return [x, y, z];\n}\n\nf() // [undefined, 5, undefined]\nf(1) // [1, 5, undefined]\nf(1, ,2) // 报错\nf(1, undefined, 2) // [1, 5, 2]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\n上面代码中，有默认值的参数都不是尾参数。这时，无法只省略该参数，而不省略它后面的参数，除非显式输入undefined。\n\n如果传入undefined，将触发该参数等于默认值，null则没有这个效果。\n\nfunction foo(x = 5, y = 6) {\n  console.log(x, y);\n}\n\nfoo(undefined, null)\n// 5 null\n\n\n1\n2\n3\n4\n5\n6\n\n\n上面代码中，x参数对应undefined，结果触发了默认值，y参数等于null，就没有触发默认值。\n\n\n# 函数的 length 属性\n\n指定了默认值以后，函数的length属性，将返回没有指定默认值的参数个数。也就是说，指定了默认值后，length属性将失真。\n\n(function (a) {}).length // 1\n(function (a = 5) {}).length // 0\n(function (a, b, c = 5) {}).length // 2\n\n\n1\n2\n3\n\n\n上面代码中，length属性的返回值，等于函数的参数个数减去指定了默认值的参数个数。比如，上面最后一个函数，定义了 3 个参数，其中有一个参数c指定了默认值，因此length属性等于3减去1，最后得到2。\n\n这是因为**length属性的含义是，该函数预期传入的参数个数**。某个参数指定默认值以后，预期传入的参数个数就不包括这个参数了。同理，后文的 rest 参数也不会计入length属性。\n\n(function(...args) {}).length // 0\n\n\n1\n\n\n如果设置了默认值的参数不是尾参数，那么length属性也不再计入后面的参数了。\n\n(function (a = 0, b, c) {}).length // 0\n(function (a, b = 1, c) {}).length // 1\n\n\n1\n2\n\n\n\n# 作用域\n\n一旦设置了参数的默认值，函数进行声明初始化时，参数会形成一个单独的作用域（context）。等到初始化结束，这个作用域就会消失。这种语法行为，在不设置参数默认值时，是不会出现的。\n\nvar x = 1;\n\nfunction f(x, y = x) {\n  console.log(y);\n}\n\nf(2) // 2\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n上面代码中，参数y的默认值等于变量x。调用函数f时，参数形成一个单独的作用域。在这个作用域里面，默认值变量x指向第一个参数x，而不是全局变量x，所以输出是2。\n\n再看下面的例子。\n\nlet x = 1;\n\nfunction f(y = x) {\n  let x = 2;\n  console.log(y);\n}\n\nf() // 1\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n上面代码中，函数f调用时，参数y = x形成一个单独的作用域。这个作用域里面，变量x本身没有定义，所以指向外层的全局变量x。函数调用时，函数体内部的局部变量x影响不到默认值变量x。\n\n如果此时，全局变量x不存在，就会报错。\n\nfunction f(y = x) {\n  let x = 2;\n  console.log(y);\n}\n\nf() // ReferenceError: x is not defined\n\n\n1\n2\n3\n4\n5\n6\n\n\n下面这样写，也会报错。\n\nvar x = 1;\n\nfunction foo(x = x) {\n  // ...\n}\n\nfoo() // ReferenceError: x is not defined\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n上面代码中，参数x = x形成一个单独作用域。实际执行的是let x = x，由于暂时性死区的原因，这行代码会报错”x 未定义“。\n\n如果参数的默认值是一个函数，该函数的作用域也遵守这个规则。请看下面的例子。\n\nlet foo = 'outer';\n\nfunction bar(func = () => foo) {\n  let foo = 'inner';\n  console.log(func());\n}\n\nbar(); // outer\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n上面代码中，函数bar的参数func的默认值是一个匿名函数，返回值为变量foo。函数参数形成的单独作用域里面，并没有定义变量foo，所以foo指向外层的全局变量foo，因此输出outer。\n\n如果写成下面这样，就会报错。\n\nfunction bar(func = () => foo) {\n  let foo = 'inner';\n  console.log(func());\n}\n\nbar() // ReferenceError: foo is not defined\n\n\n1\n2\n3\n4\n5\n6\n\n\n上面代码中，匿名函数里面的foo指向函数外层，但是函数外层并没有声明变量foo，所以就报错了。\n\n下面是一个更复杂的例子。\n\nvar x = 1;\nfunction foo(x, y = function() { x = 2; }) {\n  var x = 3;\n  y();\n  console.log(x);\n}\n\nfoo() // 3\nx // 1\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n上面代码中，函数foo的参数形成一个单独作用域。这个作用域里面，首先声明了变量x，然后声明了变量y，y的默认值是一个匿名函数。这个匿名函数内部的变量x，指向同一个作用域的第一个参数x。函数foo内部又声明了一个内部变量x，该变量与第一个参数x由于不是同一个作用域，所以不是同一个变量，因此执行y后，内部变量x和外部全局变量x的值都没变。\n\n如果将var x = 3的var去除，函数foo的内部变量x就指向第一个参数x，与匿名函数内部的x是一致的，所以最后输出的就是2，而外层的全局变量x依然不受影响。\n\nvar x = 1;\nfunction foo(x, y = function() { x = 2; }) {\n  x = 3;\n  y();\n  console.log(x);\n}\n\nfoo() // 2\nx // 1\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n\n# 应用\n\n利用参数默认值，可以指定某一个参数不得省略，如果省略就抛出一个错误。\n\nfunction throwIfMissing() {\n  throw new Error('Missing parameter');\n}\n\nfunction foo(mustBeProvided = throwIfMissing()) {\n  return mustBeProvided;\n}\n\nfoo()\n// Error: Missing parameter\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n上面代码的foo函数，如果调用的时候没有参数，就会调用默认值throwIfMissing函数，从而抛出一个错误。\n\n从上面代码还可以看到，参数mustBeProvided的默认值等于throwIfMissing函数的运行结果（注意函数名throwIfMissing之后有一对圆括号），这表明参数的默认值不是在定义时执行，而是在运行时执行。如果参数已经赋值，默认值中的函数就不会运行。\n\n另外，可以将参数默认值设为undefined，表明这个参数是可以省略的。\n\nfunction foo(optional = undefined) { ··· }\n\n\n1\n\n\n\n# rest 参数\n\nES6 引入 rest 参数（形式为...变量名），用于获取函数的多余参数，这样就不需要使用arguments对象了。rest 参数搭配的变量是一个数组，该变量将多余的参数放入数组中。\n\nfunction add(...values) { // values是一个数组，该变量将多余的参数放入数组中\n  let sum = 0;\n\n  for (var val of values) {\n    sum += val;\n  }\n\n  return sum;\n}\n\nadd(2, 5, 3) // 10\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n上面代码的add函数是一个求和函数，利用 rest 参数，可以向该函数传入任意数目的参数。\n\n下面是一个 rest 参数代替arguments变量的例子。\n\n// arguments变量的写法\nfunction sortNumbers() {\n  return Array.prototype.slice.call(arguments).sort();\n}\n\n// rest参数的写法\nconst sortNumbers = (...numbers) => numbers.sort();\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n上面代码的两种写法，比较后可以发现，rest 参数的写法更自然也更简洁。\n\narguments对象不是数组，而是一个类似数组的对象。所以为了使用数组的方法，必须使用Array.prototype.slice.call先将其转为数组。rest 参数就不存在这个问题，它就是一个真正的数组，数组特有的方法都可以使用。下面是一个利用 rest 参数改写数组push方法的例子。\n\nfunction push(array, ...items) {\n  items.forEach(function(item) {\n    array.push(item);\n    console.log(item);\n  });\n}\n\nvar a = [];\npush(a, 1, 2, 3)\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n注意，rest 参数之后不能再有其他参数（即只能是最后一个参数），否则会报错。\n\n// 报错\nfunction f(a, ...b, c) {\n  // ...\n}\n\n\n1\n2\n3\n4\n\n\n函数的length属性，不包括 rest 参数。\n\n(function(a) {}).length  // 1\n(function(...a) {}).length  // 0\n(function(a, ...b) {}).length  // 1\n\n\n1\n2\n3\n\n\n\n# 严格模式\n\n从 ES5 开始，函数内部可以设定为严格模式。\n\nfunction doSomething(a, b) {\n  'use strict';\n  // code\n}\n\n\n1\n2\n3\n4\n\n\nES2016 做了一点修改，规定只要函数参数使用了默认值、解构赋值、或者扩展运算符，那么函数内部就不能显式设定为严格模式，否则会报错。\n\n// 报错\nfunction doSomething(a, b = a) {\n  'use strict';\n  // code\n}\n\n// 报错\nconst doSomething = function ({a, b}) {\n  'use strict';\n  // code\n};\n\n// 报错\nconst doSomething = (...a) => {\n  'use strict';\n  // code\n};\n\nconst obj = {\n  // 报错\n  doSomething({a, b}) {\n    'use strict';\n    // code\n  }\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n\n\n这样规定的原因是，函数内部的严格模式，同时适用于函数体和函数参数。但是，函数执行的时候，先执行函数参数，然后再执行函数体。这样就有一个不合理的地方，只有从函数体之中，才能知道参数是否应该以严格模式执行，但是参数却应该先于函数体执行。\n\n// 报错\nfunction doSomething(value = 070) {\n  'use strict';\n  return value;\n}\n\n\n1\n2\n3\n4\n5\n\n\n上面代码中，参数value的默认值是八进制数070，但是严格模式下不能用前缀0表示八进制，所以应该报错。但是实际上，JavaScript 引擎会先成功执行value = 070，然后进入函数体内部，发现需要用严格模式执行，这时才会报错。\n\n虽然可以先解析函数体代码，再执行参数代码，但是这样无疑就增加了复杂性。因此，标准索性禁止了这种用法，只要参数使用了默认值、解构赋值、或者扩展运算符，就不能显式指定严格模式。\n\n两种方法可以规避这种限制。第一种是设定全局性的严格模式，这是合法的。\n\n'use strict';\n\nfunction doSomething(a, b = a) {\n  // code\n}\n\n\n1\n2\n3\n4\n5\n\n\n第二种是把函数包在一个无参数的立即执行函数里面。\n\nconst doSomething = (function () {\n  'use strict';\n  return function(value = 42) {\n    return value;\n  };\n}());\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# name 属性\n\n函数的name属性，返回该函数的函数名。\n\nfunction foo() {}\nfoo.name // \"foo\"\n\n\n1\n2\n\n\n这个属性早就被浏览器广泛支持，但是直到 ES6，才将其写入了标准。\n\n需要注意的是，ES6 对这个属性的行为做出了一些修改。如果将一个匿名函数赋值给一个变量，ES5 的name属性，会返回空字符串，而 ES6 的name属性会返回实际的函数名。\n\nvar f = function () {};\n\n// ES5\nf.name // \"\"\n\n// ES6\nf.name // \"f\"\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n上面代码中，变量f等于一个匿名函数，ES5 和 ES6 的name属性返回的值不一样。\n\n如果将一个具名函数赋值给一个变量，则 ES5 和 ES6 的name属性都返回这个具名函数原本的名字。\n\nconst bar = function baz() {};\n\n// ES5\nbar.name // \"baz\"\n\n// ES6\nbar.name // \"baz\"\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\nFunction构造函数返回的函数实例，name属性的值为anonymous。\n\n(new Function).name // \"anonymous\"\n\n\n1\n\n\nbind返回的函数，name属性值会加上bound前缀。\n\nfunction foo() {};\nfoo.bind({}).name // \"bound foo\"\n\n(function(){}).bind({}).name // \"bound \"\n\n\n1\n2\n3\n4\n\n\n\n# 箭头函数\n\n\n# 基本用法\n\nES6 允许使用“箭头”（=>）定义函数。\n\nvar f = v => v;\n\n// 等同于\nvar f = function (v) {\n  return v;\n};\n\n\n1\n2\n3\n4\n5\n6\n\n\n如果箭头函数不需要参数或需要多个参数，就使用一个圆括号代表参数部分。\n\nvar f = () => 5;\n// 等同于\nvar f = function () { return 5 };\n\nvar sum = (num1, num2) => num1 + num2;\n// 等同于\nvar sum = function(num1, num2) {\n  return num1 + num2;\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n如果箭头函数的代码块部分多于一条语句，就要使用大括号将它们括起来，并且使用return语句返回。\n\nvar sum = (num1, num2) => { return num1 + num2; }\n\n\n1\n\n\n由于大括号被解释为代码块，所以如果箭头函数直接返回一个对象，必须在对象外面加上括号，否则会报错。\n\n// 报错\nlet getTempItem = id => { id: id, name: \"Temp\" };\n\n// 不报错\nlet getTempItem = id => ({ id: id, name: \"Temp\" });\n\n\n1\n2\n3\n4\n5\n\n\n下面是一种特殊情况，虽然可以运行，但会得到错误的结果。\n\nlet foo = () => { a: 1 };\nfoo() // undefined\n\n\n1\n2\n\n\n上面代码中，原始意图是返回一个对象{ a: 1 }，但是由于引擎认为大括号是代码块，所以执行了一行语句a: 1。这时，a可以被解释为语句的标签，因此实际执行的语句是1;，然后函数就结束了，没有返回值。\n\n如果箭头函数只有一行语句，且不需要返回值，可以采用下面的写法，就不用写大括号了。\n\nlet fn = () => void doesNotReturn();\n\n\n1\n\n\n箭头函数可以与变量解构结合使用。\n\nconst full = ({ first, last }) => first + ' ' + last;\n\n// 等同于\nfunction full(person) {\n  return person.first + ' ' + person.last;\n}\n\n\n1\n2\n3\n4\n5\n6\n\n\n箭头函数使得表达更加简洁。\n\nconst isEven = n => n % 2 === 0;\nconst square = n => n * n;\n\n\n1\n2\n\n\n上面代码只用了两行，就定义了两个简单的工具函数。如果不用箭头函数，可能就要占用多行，而且还不如现在这样写醒目。\n\n箭头函数的一个用处是简化回调函数。\n\n// 正常函数写法\n[1,2,3].map(function (x) {\n  return x * x;\n});\n\n// 箭头函数写法\n[1,2,3].map(x => x * x);\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n另一个例子是\n\n// 正常函数写法\nvar result = values.sort(function (a, b) {\n  return a - b;\n});\n\n// 箭头函数写法\nvar result = values.sort((a, b) => a - b);\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n下面是 rest 参数与箭头函数结合的例子。\n\nconst numbers = (...nums) => nums;\n\nnumbers(1, 2, 3, 4, 5)\n// [1,2,3,4,5]\n\nconst headAndTail = (head, ...tail) => [head, tail];\n\nheadAndTail(1, 2, 3, 4, 5)\n// [1,[2,3,4,5]]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n\n# 使用注意点\n\n箭头函数有几个使用注意点。\n\n（1）函数体内的**this对象**，就是定义时所在的对象，而不是使用时所在的对象。\n\n（2）不可以当作构造函数，也就是说，不可以使用new命令，否则会抛出一个错误。\n\n（3）不可以使用arguments对象，该对象在函数体内不存在。如果要用，可以用 rest 参数代替。\n\n（4）不可以使用yield命令，因此箭头函数不能用作 Generator 函数。\n\n上面四点中，第一点尤其值得注意。this对象的指向是可变的，但是在箭头函数中，它是固定的。\n\nfunction foo() {\n  setTimeout(() => {\n    console.log('id:', this.id);\n  }, 100);\n}\n\nvar id = 21;\n\nfoo.call({ id: 42 });\n// id: 42\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n上面代码中，setTimeout的参数是一个箭头函数，这个箭头函数的定义生效是在foo函数生成时，而它的真正执行要等到 100 毫秒后。如果是普通函数，执行时this应该指向全局对象window，这时应该输出21。但是，箭头函数导致this总是指向函数定义生效时所在的对象（本例是{id: 42}），所以输出的是42。\n\n箭头函数可以让setTimeout里面的this，绑定定义时所在的作用域，而不是指向运行时所在的作用域。下面是另一个例子。\n\nfunction Timer() {\n  this.s1 = 0;\n  this.s2 = 0;\n  // 箭头函数\n  setInterval(() => this.s1++, 1000);\n  // 普通函数\n  setInterval(function () {\n    this.s2++;\n  }, 1000);\n}\n\nvar timer = new Timer();\n\nsetTimeout(() => console.log('s1: ', timer.s1), 3100);\nsetTimeout(() => console.log('s2: ', timer.s2), 3100);\n// s1: 3\n// s2: 0\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n上面代码中，Timer函数内部设置了两个定时器，分别使用了箭头函数和普通函数。前者的this绑定定义时所在的作用域（即Timer函数），后者的this指向运行时所在的作用域（即全局对象）。所以，3100 毫秒之后，timer.s1被更新了 3 次，而timer.s2一次都没更新。\n\n箭头函数可以让this指向固定化，这种特性很有利于封装回调函数。下面是一个例子，DOM 事件的回调函数封装在一个对象里面。\n\nvar handler = {\n  id: '123456',\n\n  init: function() { // 注意这里不是使用箭头函数，如这里使用箭头函数将时this指向全局对象\n    document.addEventListener('click',\n      event => this.doSomething(event.type), false);\n  },\n\n  doSomething: function(type) {\n    console.log('Handling ' + type  + ' for ' + this.id);\n  }\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n上面代码的init方法中，使用了箭头函数，这导致这个箭头函数里面的this，总是指向handler对象。否则，回调函数运行时，this.doSomething这一行会报错，因为此时this指向document对象。\n\nthis指向的固定化，并不是因为箭头函数内部有绑定this的机制，实际原因是箭头函数根本没有自己的this，导致内部的this就是外层代码块的this。正是因为它没有this，所以也就不能用作构造函数。\n\n所以，箭头函数转成 ES5 的代码如下。\n\n// ES6\nfunction foo() {\n  setTimeout(() => {\n    console.log('id:', this.id);\n  }, 100);\n}\n\n// ES5\nfunction foo() {\n  var _this = this;\n\n  setTimeout(function () {\n    console.log('id:', _this.id);\n  }, 100);\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n上面代码中，转换后的 ES5 版本清楚地说明了，箭头函数里面根本没有自己的this，而是引用外层的this。\n\n请问下面的代码之中有几个this？\n\nfunction foo() {\n  return () => {\n    return () => {\n      return () => {\n        console.log('id:', this.id);\n      };\n    };\n  };\n}\n\nvar f = foo.call({id: 1});\n\nvar t1 = f.call({id: 2})()(); // id: 1\nvar t2 = f().call({id: 3})(); // id: 1\nvar t3 = f()().call({id: 4}); // id: 1\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n上面代码之中，只有一个this，就是函数foo的this，所以t1、t2、t3都输出同样的结果。因为所有的内层函数都是箭头函数，都没有自己的this，它们的this其实都是最外层foo函数的this。\n\n除了this，以下三个变量在箭头函数之中也是不存在的，指向外层函数的对应变量：arguments、super、new.target。\n\nfunction foo() {\n  setTimeout(() => {\n    console.log('args:', arguments);\n  }, 100);\n}\n\nfoo(2, 4, 6, 8)\n// args: [2, 4, 6, 8]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n上面代码中，箭头函数内部的变量arguments，其实是函数foo的arguments变量。\n\n另外，由于箭头函数没有自己的this，所以当然也就不能用call()、apply()、bind()这些方法去改变this的指向。\n\n(function() {\n  return [\n    (() => this.x).bind({ x: 'inner' })()\n  ];\n}).call({ x: 'outer' });\n// ['outer']\n\n\n1\n2\n3\n4\n5\n6\n\n\n上面代码中，箭头函数没有自己的this，所以bind方法无效，内部的this指向外部的this。\n\n长期以来，JavaScript 语言的this对象一直是一个令人头痛的问题，在对象方法中使用this，必须非常小心。箭头函数”绑定”this，很大程度上解决了这个困扰。\n\n\n# 不适用场合\n\n由于箭头函数使得this从“动态”变成“静态”，下面两个场合不应该使用箭头函数。\n\n第一个场合是定义对象的方法，且该方法内部包括this。\n\nconst cat = {\n  lives: 9,\n  jumps: () => {\n    this.lives--;\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n\n\n上面代码中，cat.jumps()方法是一个箭头函数，这是错误的。调用cat.jumps()时，如果是普通函数，该方法内部的this指向cat；如果写成上面那样的箭头函数，使得this指向全局对象，因此不会得到预期结果。这是因为对象不构成单独的作用域，导致jumps箭头函数定义时的作用域就是全局作用域。\n\n第二个场合是需要动态this的时候，也不应使用箭头函数。\n\nvar button = document.getElementById('press');\nbutton.addEventListener('click', () => {\n  this.classList.toggle('on');\n});\n\n\n1\n2\n3\n4\n\n\n上面代码运行时，点击按钮会报错，因为button的监听函数是一个箭头函数，导致里面的this就是全局对象。如果改成普通函数，this就会动态指向被点击的按钮对象。\n\n另外，如果函数体很复杂，有许多行，或者函数内部有大量的读写操作，不单纯是为了计算值，这时也不应该使用箭头函数，而是要使用普通函数，这样可以提高代码可读性。\n\n\n# 嵌套的箭头函数\n\n箭头函数内部，还可以再使用箭头函数。下面是一个 ES5 语法的多重嵌套函数。\n\nfunction insert(value) {\n  return {into: function (array) {\n    return {after: function (afterValue) {\n      array.splice(array.indexOf(afterValue) + 1, 0, value);\n      return array;\n    }};\n  }};\n}\n\ninsert(2).into([1, 3]).after(1); //[1, 2, 3]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n上面这个函数，可以使用箭头函数改写。\n\nlet insert = (value) => ({into: (array) => ({after: (afterValue) => {\n  array.splice(array.indexOf(afterValue) + 1, 0, value);\n  return array;\n}})});\n\ninsert(2).into([1, 3]).after(1); //[1, 2, 3]\n\n\n1\n2\n3\n4\n5\n6\n\n\n下面是一个部署管道机制（pipeline）的例子，即前一个函数的输出是后一个函数的输入。\n\nconst pipeline = (...funcs) =>\n  val => funcs.reduce((a, b) => b(a), val);\n\nconst plus1 = a => a + 1;\nconst mult2 = a => a * 2;\nconst addThenMult = pipeline(plus1, mult2);\n\naddThenMult(5)\n// 12\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n如果觉得上面的写法可读性比较差，也可以采用下面的写法。\n\nconst plus1 = a => a + 1;\nconst mult2 = a => a * 2;\n\nmult2(plus1(5))\n// 12\n\n\n1\n2\n3\n4\n5\n\n\n箭头函数还有一个功能，就是可以很方便地改写 λ 演算。\n\n// λ演算的写法\nfix = λf.(λx.f(λv.x(x)(v)))(λx.f(λv.x(x)(v)))\n\n// ES6的写法\nvar fix = f => (x => f(v => x(x)(v)))\n               (x => f(v => x(x)(v)));\n\n\n1\n2\n3\n4\n5\n6\n\n\n上面两种写法，几乎是一一对应的。由于 λ 演算对于计算机科学非常重要，这使得我们可以用 ES6 作为替代工具，探索计算机科学。\n\n\n# 尾调用优化\n\n\n# 什么是尾调用？\n\n尾调用（Tail Call）是函数式编程的一个重要概念，本身非常简单，一句话就能说清楚，就是指某个函数的最后一步是调用另一个函数。\n\nfunction f(x){\n  return g(x);\n}\n\n\n1\n2\n3\n\n\n上面代码中，函数f的最后一步是调用函数g，这就叫尾调用。\n\n以下三种情况，都不属于尾调用。\n\n// 情况一\nfunction f(x){\n  let y = g(x);\n  return y;\n}\n\n// 情况二\nfunction f(x){\n  return g(x) + 1;\n}\n\n// 情况三\nfunction f(x){\n  g(x);\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n上面代码中，情况一是调用函数g之后，还有赋值操作，所以不属于尾调用，即使语义完全一样。情况二也属于调用后还有操作，即使写在一行内。情况三等同于下面的代码。\n\nfunction f(x){\n  g(x);\n  return undefined;\n}\n\n\n1\n2\n3\n4\n\n\n尾调用不一定出现在函数尾部，只要是最后一步操作即可。\n\nfunction f(x) {\n  if (x > 0) {\n    return m(x)\n  }\n  return n(x);\n}\n\n\n1\n2\n3\n4\n5\n6\n\n\n上面代码中，函数m和n都属于尾调用，因为它们都是函数f的最后一步操作。\n\n\n# 尾调用优化\n\n尾调用之所以与其他调用不同，就在于它的特殊的调用位置。\n\n我们知道，函数调用会在内存形成一个“调用记录”，又称“调用帧”（call frame），保存调用位置和内部变量等信息。如果在函数A的内部调用函数B，那么在A的调用帧上方，还会形成一个B的调用帧。等到B运行结束，将结果返回到A，B的调用帧才会消失。如果函数B内部还调用函数C，那就还有一个C的调用帧，以此类推。所有的调用帧，就形成一个“调用栈”（call stack）。\n\n尾调用由于是函数的最后一步操作，所以不需要保留外层函数的调用帧，因为调用位置、内部变量等信息都不会再用到了，只要直接用内层函数的调用帧，取代外层函数的调用帧就可以了。\n\nfunction f() {\n  let m = 1;\n  let n = 2;\n  return g(m + n);\n}\nf();\n\n// 等同于\nfunction f() {\n  return g(3);\n}\nf();\n\n// 等同于\ng(3);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n上面代码中，如果函数g不是尾调用，函数f就需要保存内部变量m和n的值、g的调用位置等信息。但由于调用g之后，函数f就结束了，所以执行到最后一步，完全可以删除f(x)的调用帧，只保留g(3)的调用帧。\n\n这就叫做“尾调用优化”（Tail call optimization），即只保留内层函数的调用帧。如果所有函数都是尾调用，那么完全可以做到每次执行时，调用帧只有一项，这将大大节省内存。这就是“尾调用优化”的意义。\n\n注意，只有不再用到外层函数的内部变量，内层函数的调用帧才会取代外层函数的调用帧，否则就无法进行“尾调用优化”。\n\nfunction addOne(a){\n  var one = 1;\n  function inner(b){\n    return b + one;\n  }\n  return inner(a);\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n上面的函数不会进行尾调用优化，因为内层函数inner用到了外层函数addOne的内部变量one。\n\n注意，目前只有 Safari 浏览器支持尾调用优化，Chrome 和 Firefox 都不支持。\n\n\n# 尾递归\n\n函数调用自身，称为递归。如果尾调用自身，就称为尾递归。\n\n递归非常耗费内存，因为需要同时保存成千上百个调用帧，很容易发生“栈溢出”错误（stack overflow）。但对于尾递归来说，由于只存在一个调用帧，所以永远不会发生“栈溢出”错误。\n\nfunction factorial(n) {\n  if (n === 1) return 1;\n  return n * factorial(n - 1);\n}\n\nfactorial(5) // 120\n\n\n1\n2\n3\n4\n5\n6\n\n\n上面代码是一个阶乘函数，计算n的阶乘，最多需要保存n个调用记录，复杂度 O(n) 。\n\n如果改写成尾递归，只保留一个调用记录，复杂度 O(1) 。\n\nfunction factorial(n, total) {\n  if (n === 1) return total;\n  return factorial(n - 1, n * total);\n}\n\nfactorial(5, 1) // 120\n\n\n1\n2\n3\n4\n5\n6\n\n\n还有一个比较著名的例子，就是计算 Fibonacci 数列，也能充分说明尾递归优化的重要性。\n\n非尾递归的 Fibonacci 数列实现如下。\n\nfunction Fibonacci (n) {\n  if ( n <= 1 ) {return 1};\n\n  return Fibonacci(n - 1) + Fibonacci(n - 2);\n}\n\nFibonacci(10) // 89\nFibonacci(100) // 超时\nFibonacci(500) // 超时\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n尾递归优化过的 Fibonacci 数列实现如下。\n\nfunction Fibonacci2 (n , ac1 = 1 , ac2 = 1) {\n  if( n <= 1 ) {return ac2};\n\n  return Fibonacci2 (n - 1, ac2, ac1 + ac2);\n}\n\nFibonacci2(100) // 573147844013817200000\nFibonacci2(1000) // 7.0330367711422765e+208\nFibonacci2(10000) // Infinity\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n由此可见，“尾调用优化”对递归操作意义重大，所以一些函数式编程语言将其写入了语言规格。ES6 亦是如此，第一次明确规定，所有 ECMAScript 的实现，都必须部署“尾调用优化”。这就是说，ES6 中只要使用尾递归，就不会发生栈溢出（或者层层递归造成的超时），相对节省内存。\n\n\n# 递归函数的改写\n\n尾递归的实现，往往需要改写递归函数，确保最后一步只调用自身。做到这一点的方法，就是把所有用到的内部变量改写成函数的参数。比如上面的例子，阶乘函数 factorial 需要用到一个中间变量total，那就把这个中间变量改写成函数的参数。这样做的缺点就是不太直观，第一眼很难看出来，为什么计算5的阶乘，需要传入两个参数5和1？\n\n两个方法可以解决这个问题。方法一是在尾递归函数之外，再提供一个正常形式的函数。\n\nfunction tailFactorial(n, total) {\n  if (n === 1) return total;\n  return tailFactorial(n - 1, n * total);\n}\n\nfunction factorial(n) {\n  return tailFactorial(n, 1);\n}\n\nfactorial(5) // 120\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n上面代码通过一个正常形式的阶乘函数factorial，调用尾递归函数tailFactorial，看起来就正常多了。\n\n函数式编程有一个概念，叫做柯里化（currying），意思是将多参数的函数转换成单参数的形式。这里也可以使用柯里化。\n\nfunction currying(fn, n) {\n  return function (m) {\n    return fn.call(this, m, n);\n  };\n}\n\nfunction tailFactorial(n, total) {\n  if (n === 1) return total;\n  return tailFactorial(n - 1, n * total);\n}\n\nconst factorial = currying(tailFactorial, 1);\n\nfactorial(5) // 120\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n上面代码通过柯里化，将尾递归函数tailFactorial变为只接受一个参数的factorial。\n\n第二种方法就简单多了，就是采用 ES6 的函数默认值。\n\nfunction factorial(n, total = 1) {\n  if (n === 1) return total;\n  return factorial(n - 1, n * total);\n}\n\nfactorial(5) // 120\n\n\n1\n2\n3\n4\n5\n6\n\n\n上面代码中，参数total有默认值1，所以调用时不用提供这个值。\n\n总结一下，递归本质上是一种循环操作。纯粹的函数式编程语言没有循环操作命令，所有的循环都用递归实现，这就是为什么尾递归对这些语言极其重要。对于其他支持“尾调用优化”的语言（比如 Lua，ES6），只需要知道循环可以用递归代替，而一旦使用递归，就最好使用尾递归。\n\n\n# 严格模式\n\nES6 的尾调用优化只在严格模式下开启，正常模式是无效的。\n\n这是因为在正常模式下，函数内部有两个变量，可以跟踪函数的调用栈。\n\n * func.arguments：返回调用时函数的参数。\n * func.caller：返回调用当前函数的那个函数。\n\n尾调用优化发生时，函数的调用栈会改写，因此上面两个变量就会失真。严格模式禁用这两个变量，所以尾调用模式仅在严格模式下生效。\n\nfunction restricted() {\n  'use strict';\n  restricted.caller;    // 报错\n  restricted.arguments; // 报错\n}\nrestricted();\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# 尾递归优化的实现\n\n尾递归优化只在严格模式下生效，那么正常模式下，或者那些不支持该功能的环境中，有没有办法也使用尾递归优化呢？回答是可以的，就是自己实现尾递归优化。\n\n它的原理非常简单。尾递归之所以需要优化，原因是调用栈太多，造成溢出，那么只要减少调用栈，就不会溢出。怎么做可以减少调用栈呢？就是采用“循环”换掉“递归”。\n\n下面是一个正常的递归函数。\n\nfunction sum(x, y) {\n  if (y > 0) {\n    return sum(x + 1, y - 1);\n  } else {\n    return x;\n  }\n}\n\nsum(1, 100000)\n// Uncaught RangeError: Maximum call stack size exceeded(…)\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n上面代码中，sum是一个递归函数，参数x是需要累加的值，参数y控制递归次数。一旦指定sum递归 100000 次，就会报错，提示超出调用栈的最大次数。\n\n蹦床函数（trampoline）可以将递归执行转为循环执行。\n\nfunction trampoline(f) {\n  while (f && f instanceof Function) {\n    f = f();\n  }\n  return f;\n}\n\n\n1\n2\n3\n4\n5\n6\n\n\n上面就是蹦床函数的一个实现，它接受一个函数f作为参数。只要f执行后返回一个函数，就继续执行。注意，这里是返回一个函数，然后执行该函数，而不是函数里面调用函数，这样就避免了递归执行，从而就消除了调用栈过大的问题。\n\n然后，要做的就是将原来的递归函数，改写为每一步返回另一个函数。\n\nfunction sum(x, y) {\n  if (y > 0) {\n    return sum.bind(null, x + 1, y - 1);\n  } else {\n    return x;\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n上面代码中，sum函数的每次执行，都会返回自身的另一个版本。\n\n现在，使用蹦床函数执行sum，就不会发生调用栈溢出。\n\ntrampoline(sum(1, 100000))\n// 100001\n\n\n1\n2\n\n\n蹦床函数并不是真正的尾递归优化，下面的实现才是。\n\nfunction tco(f) {\n  var value;\n  var active = false;\n  var accumulated = [];\n\n  return function accumulator() {\n    accumulated.push(arguments);\n    if (!active) {\n      active = true;\n      while (accumulated.length) {\n        value = f.apply(this, accumulated.shift());\n      }\n      active = false;\n      return value;\n    }\n  };\n}\n\nvar sum = tco(function(x, y) {\n  if (y > 0) {\n    return sum(x + 1, y - 1)\n  }\n  else {\n    return x\n  }\n});\n\nsum(1, 100000)\n// 100001\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n\n\n上面代码中，tco函数是尾递归优化的实现，它的奥妙就在于状态变量active。默认情况下，这个变量是不激活的。一旦进入尾递归优化的过程，这个变量就激活了。然后，每一轮递归sum返回的都是undefined，所以就避免了递归执行；而accumulated数组存放每一轮sum执行的参数，总是有值的，这就保证了accumulator函数内部的while循环总是会执行。这样就很巧妙地将“递归”改成了“循环”，而后一轮的参数会取代前一轮的参数，保证了调用栈只有一层。\n\n\n# 函数参数的尾逗号\n\nES2017 允许函数的最后一个参数有尾逗号（trailing comma）。\n\n此前，函数定义和调用时，都不允许最后一个参数后面出现逗号。\n\nfunction clownsEverywhere(\n  param1,\n  param2\n) { /* ... */ }\n\nclownsEverywhere(\n  'foo',\n  'bar'\n);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n上面代码中，如果在param2或bar后面加一个逗号，就会报错。\n\n如果像上面这样，将参数写成多行（即每个参数占据一行），以后修改代码的时候，想为函数clownsEverywhere添加第三个参数，或者调整参数的次序，就势必要在原来最后一个参数后面添加一个逗号。这对于版本管理系统来说，就会显示添加逗号的那一行也发生了变动。这看上去有点冗余，因此新的语法允许定义和调用时，尾部直接有一个逗号。\n\nfunction clownsEverywhere(\n  param1,\n  param2,\n) { /* ... */ }\n\nclownsEverywhere(\n  'foo',\n  'bar',\n);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n这样的规定也使得，函数参数与数组和对象的尾逗号规则，保持一致了。\n\n\n# Function.prototype.toString()\n\nES2019 对函数实例的toString()方法做出了修改。\n\ntoString()方法返回函数代码本身，以前会省略注释和空格。\n\nfunction /* foo comment */ foo () {}\n\nfoo.toString()\n// function foo() {}\n\n\n1\n2\n3\n4\n\n\n上面代码中，函数foo的原始代码包含注释，函数名foo和圆括号之间有空格，但是toString()方法都把它们省略了。\n\n修改后的toString()方法，明确要求返回一模一样的原始代码。\n\nfunction /* foo comment */ foo () {}\n\nfoo.toString()\n// \"function /* foo comment */ foo () {}\"\n\n\n1\n2\n3\n4\n\n\n\n# catch 命令的参数省略\n\nJavaScript 语言的try...catch结构，以前明确要求catch命令后面必须跟参数，接受try代码块抛出的错误对象。\n\ntry {\n  // ...\n} catch (err) {\n  // 处理错误\n}\n\n\n1\n2\n3\n4\n5\n\n\n上面代码中，catch命令后面带有参数err。\n\n很多时候，catch代码块可能用不到这个参数。但是，为了保证语法正确，还是必须写。ES2019 做出了改变，允许catch语句省略参数。\n\ntry {\n  // ...\n} catch {\n  // ...\n}\n\n\n1\n2\n3\n4\n5\n",normalizedContent:"# 函数的扩展\n\n\n# 函数参数的默认值\n\n\n# 基本用法\n\nes6 之前，不能直接为函数的参数指定默认值，只能采用变通的方法。\n\nfunction log(x, y) {\n  y = y || 'world';\n  console.log(x, y);\n}\n\nlog('hello') // hello world\nlog('hello', 'china') // hello china\nlog('hello', '') // hello world\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n上面代码检查函数log的参数y有没有赋值，如果没有，则指定默认值为world。这种写法的缺点在于，如果参数y赋值了，但是对应的布尔值为false，则该赋值不起作用。就像上面代码的最后一行，参数y等于空字符，结果被改为默认值。\n\n为了避免这个问题，通常需要先判断一下参数y是否被赋值，如果没有，再等于默认值。\n\nif (typeof y === 'undefined') {\n  y = 'world';\n}\n\n\n1\n2\n3\n\n\nes6 允许为函数的参数设置默认值，即直接写在参数定义的后面。\n\nfunction log(x, y = 'world') {\n  console.log(x, y);\n}\n\nlog('hello') // hello world\nlog('hello', 'china') // hello china\nlog('hello', '') // hello\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n可以看到，es6 的写法比 es5 简洁许多，而且非常自然。下面是另一个例子。\n\nfunction point(x = 0, y = 0) {\n  this.x = x;\n  this.y = y;\n}\n\nconst p = new point();\np // { x: 0, y: 0 }\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n除了简洁，es6 的写法还有两个好处：首先，阅读代码的人，可以立刻意识到哪些参数是可以省略的，不用查看函数体或文档；其次，有利于将来的代码优化，即使未来的版本在对外接口中，彻底拿掉这个参数，也不会导致以前的代码无法运行。\n\n参数变量是默认声明的，所以不能用let或const再次声明。\n\nfunction foo(x = 5) {\n  let x = 1; // error\n  const x = 2; // error\n}\n\n\n1\n2\n3\n4\n\n\n上面代码中，参数变量x是默认声明的，在函数体中，不能用let或const再次声明，否则会报错。\n\n使用参数默认值时，函数不能有同名参数。\n\n// 不报错\nfunction foo(x, x, y) {\n  // ...\n}\n\n// 报错\nfunction foo(x, x, y = 1) {\n  // ...\n}\n// syntaxerror: duplicate parameter name not allowed in this context\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n另外，一个容易忽略的地方是，参数默认值不是传值的，而是每次都重新计算默认值表达式的值。也就是说，参数默认值是惰性求值的。\n\nlet x = 99;\nfunction foo(p = x + 1) {\n  console.log(p);\n}\n\nfoo() // 100\n\nx = 100;\nfoo() // 101\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n上面代码中，参数p的默认值是x + 1。这时，每次调用函数foo，都会重新计算x + 1，而不是默认p等于 100。\n\n\n# 与解构赋值默认值结合使用\n\n参数默认值可以与解构赋值的默认值，结合起来使用。\n\nfunction foo({x, y = 5}) {\n  console.log(x, y);\n}\n\nfoo({}) // undefined 5\nfoo({x: 1}) // 1 5\nfoo({x: 1, y: 2}) // 1 2\nfoo() // typeerror: cannot read property 'x' of undefined\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n上面代码只使用了对象的解构赋值默认值，没有使用函数参数的默认值。只有当函数foo的参数是一个对象时，变量x和y才会通过解构赋值生成。如果函数foo调用时没提供参数，变量x和y就不会生成，从而报错。通过提供函数参数的默认值，就可以避免这种情况。\n\nfunction foo({x, y = 5} = {}) {\n  console.log(x, y);\n}\n\nfoo() // undefined 5\n\n\n1\n2\n3\n4\n5\n\n\n上面代码指定，如果没有提供参数，函数foo的参数默认为一个空对象。\n\n下面是另一个解构赋值默认值的例子。\n\nfunction fetch(url, { body = '', method = 'get', headers = {} }) {\n  console.log(method);\n}\n\nfetch('http://example.com', {})\n// \"get\"\n\nfetch('http://example.com')\n// 报错\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n上面代码中，如果函数fetch的第二个参数是一个对象，就可以为它的三个属性设置默认值。这种写法不能省略第二个参数，如果结合函数参数的默认值，就可以省略第二个参数。这时，就出现了双重默认值。\n\nfunction fetch(url, { body = '', method = 'get', headers = {} } = {}) {\n  console.log(method);\n}\n\nfetch('http://example.com')\n// \"get\"\n\n\n1\n2\n3\n4\n5\n6\n\n\n上面代码中，函数fetch没有第二个参数时，函数参数的默认值就会生效，然后才是解构赋值的默认值生效，变量method才会取到默认值get。\n\n作为练习，请问下面两种写法有什么差别？\n\n// 写法一\nfunction m1({x = 0, y = 0} = {}) {\n  return [x, y];\n}\n\n// 写法二\nfunction m2({x, y} = { x: 0, y: 0 }) {\n  return [x, y];\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n上面两种写法都对函数的参数设定了默认值，区别是写法一函数参数的默认值是空对象，但是设置了对象解构赋值的默认值；写法二函数参数的默认值是一个有具体属性的对象，但是没有设置对象解构赋值的默认值。\n\n// 函数没有参数的情况\nm1() // [0, 0]\nm2() // [0, 0]\n\n// x 和 y 都有值的情况\nm1({x: 3, y: 8}) // [3, 8]\nm2({x: 3, y: 8}) // [3, 8]\n\n// x 有值，y 无值的情况\nm1({x: 3}) // [3, 0]\nm2({x: 3}) // [3, undefined]\n\n// x 和 y 都无值的情况\nm1({}) // [0, 0];\nm2({}) // [undefined, undefined]\n\nm1({z: 3}) // [0, 0]\nm2({z: 3}) // [undefined, undefined]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\n\n# 参数默认值的位置\n\n通常情况下，定义了默认值的参数，应该是函数的尾参数。因为这样比较容易看出来，到底省略了哪些参数。如果非尾部的参数设置默认值，实际上这个参数是没法省略的。\n\n// 例一\nfunction f(x = 1, y) {\n  return [x, y];\n}\n\nf() // [1, undefined]\nf(2) // [2, undefined])\nf(, 1) // 报错\nf(undefined, 1) // [1, 1]\n\n// 例二\nfunction f(x, y = 5, z) {\n  return [x, y, z];\n}\n\nf() // [undefined, 5, undefined]\nf(1) // [1, 5, undefined]\nf(1, ,2) // 报错\nf(1, undefined, 2) // [1, 5, 2]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\n上面代码中，有默认值的参数都不是尾参数。这时，无法只省略该参数，而不省略它后面的参数，除非显式输入undefined。\n\n如果传入undefined，将触发该参数等于默认值，null则没有这个效果。\n\nfunction foo(x = 5, y = 6) {\n  console.log(x, y);\n}\n\nfoo(undefined, null)\n// 5 null\n\n\n1\n2\n3\n4\n5\n6\n\n\n上面代码中，x参数对应undefined，结果触发了默认值，y参数等于null，就没有触发默认值。\n\n\n# 函数的 length 属性\n\n指定了默认值以后，函数的length属性，将返回没有指定默认值的参数个数。也就是说，指定了默认值后，length属性将失真。\n\n(function (a) {}).length // 1\n(function (a = 5) {}).length // 0\n(function (a, b, c = 5) {}).length // 2\n\n\n1\n2\n3\n\n\n上面代码中，length属性的返回值，等于函数的参数个数减去指定了默认值的参数个数。比如，上面最后一个函数，定义了 3 个参数，其中有一个参数c指定了默认值，因此length属性等于3减去1，最后得到2。\n\n这是因为**length属性的含义是，该函数预期传入的参数个数**。某个参数指定默认值以后，预期传入的参数个数就不包括这个参数了。同理，后文的 rest 参数也不会计入length属性。\n\n(function(...args) {}).length // 0\n\n\n1\n\n\n如果设置了默认值的参数不是尾参数，那么length属性也不再计入后面的参数了。\n\n(function (a = 0, b, c) {}).length // 0\n(function (a, b = 1, c) {}).length // 1\n\n\n1\n2\n\n\n\n# 作用域\n\n一旦设置了参数的默认值，函数进行声明初始化时，参数会形成一个单独的作用域（context）。等到初始化结束，这个作用域就会消失。这种语法行为，在不设置参数默认值时，是不会出现的。\n\nvar x = 1;\n\nfunction f(x, y = x) {\n  console.log(y);\n}\n\nf(2) // 2\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n上面代码中，参数y的默认值等于变量x。调用函数f时，参数形成一个单独的作用域。在这个作用域里面，默认值变量x指向第一个参数x，而不是全局变量x，所以输出是2。\n\n再看下面的例子。\n\nlet x = 1;\n\nfunction f(y = x) {\n  let x = 2;\n  console.log(y);\n}\n\nf() // 1\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n上面代码中，函数f调用时，参数y = x形成一个单独的作用域。这个作用域里面，变量x本身没有定义，所以指向外层的全局变量x。函数调用时，函数体内部的局部变量x影响不到默认值变量x。\n\n如果此时，全局变量x不存在，就会报错。\n\nfunction f(y = x) {\n  let x = 2;\n  console.log(y);\n}\n\nf() // referenceerror: x is not defined\n\n\n1\n2\n3\n4\n5\n6\n\n\n下面这样写，也会报错。\n\nvar x = 1;\n\nfunction foo(x = x) {\n  // ...\n}\n\nfoo() // referenceerror: x is not defined\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n上面代码中，参数x = x形成一个单独作用域。实际执行的是let x = x，由于暂时性死区的原因，这行代码会报错”x 未定义“。\n\n如果参数的默认值是一个函数，该函数的作用域也遵守这个规则。请看下面的例子。\n\nlet foo = 'outer';\n\nfunction bar(func = () => foo) {\n  let foo = 'inner';\n  console.log(func());\n}\n\nbar(); // outer\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n上面代码中，函数bar的参数func的默认值是一个匿名函数，返回值为变量foo。函数参数形成的单独作用域里面，并没有定义变量foo，所以foo指向外层的全局变量foo，因此输出outer。\n\n如果写成下面这样，就会报错。\n\nfunction bar(func = () => foo) {\n  let foo = 'inner';\n  console.log(func());\n}\n\nbar() // referenceerror: foo is not defined\n\n\n1\n2\n3\n4\n5\n6\n\n\n上面代码中，匿名函数里面的foo指向函数外层，但是函数外层并没有声明变量foo，所以就报错了。\n\n下面是一个更复杂的例子。\n\nvar x = 1;\nfunction foo(x, y = function() { x = 2; }) {\n  var x = 3;\n  y();\n  console.log(x);\n}\n\nfoo() // 3\nx // 1\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n上面代码中，函数foo的参数形成一个单独作用域。这个作用域里面，首先声明了变量x，然后声明了变量y，y的默认值是一个匿名函数。这个匿名函数内部的变量x，指向同一个作用域的第一个参数x。函数foo内部又声明了一个内部变量x，该变量与第一个参数x由于不是同一个作用域，所以不是同一个变量，因此执行y后，内部变量x和外部全局变量x的值都没变。\n\n如果将var x = 3的var去除，函数foo的内部变量x就指向第一个参数x，与匿名函数内部的x是一致的，所以最后输出的就是2，而外层的全局变量x依然不受影响。\n\nvar x = 1;\nfunction foo(x, y = function() { x = 2; }) {\n  x = 3;\n  y();\n  console.log(x);\n}\n\nfoo() // 2\nx // 1\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n\n# 应用\n\n利用参数默认值，可以指定某一个参数不得省略，如果省略就抛出一个错误。\n\nfunction throwifmissing() {\n  throw new error('missing parameter');\n}\n\nfunction foo(mustbeprovided = throwifmissing()) {\n  return mustbeprovided;\n}\n\nfoo()\n// error: missing parameter\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n上面代码的foo函数，如果调用的时候没有参数，就会调用默认值throwifmissing函数，从而抛出一个错误。\n\n从上面代码还可以看到，参数mustbeprovided的默认值等于throwifmissing函数的运行结果（注意函数名throwifmissing之后有一对圆括号），这表明参数的默认值不是在定义时执行，而是在运行时执行。如果参数已经赋值，默认值中的函数就不会运行。\n\n另外，可以将参数默认值设为undefined，表明这个参数是可以省略的。\n\nfunction foo(optional = undefined) { ··· }\n\n\n1\n\n\n\n# rest 参数\n\nes6 引入 rest 参数（形式为...变量名），用于获取函数的多余参数，这样就不需要使用arguments对象了。rest 参数搭配的变量是一个数组，该变量将多余的参数放入数组中。\n\nfunction add(...values) { // values是一个数组，该变量将多余的参数放入数组中\n  let sum = 0;\n\n  for (var val of values) {\n    sum += val;\n  }\n\n  return sum;\n}\n\nadd(2, 5, 3) // 10\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n上面代码的add函数是一个求和函数，利用 rest 参数，可以向该函数传入任意数目的参数。\n\n下面是一个 rest 参数代替arguments变量的例子。\n\n// arguments变量的写法\nfunction sortnumbers() {\n  return array.prototype.slice.call(arguments).sort();\n}\n\n// rest参数的写法\nconst sortnumbers = (...numbers) => numbers.sort();\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n上面代码的两种写法，比较后可以发现，rest 参数的写法更自然也更简洁。\n\narguments对象不是数组，而是一个类似数组的对象。所以为了使用数组的方法，必须使用array.prototype.slice.call先将其转为数组。rest 参数就不存在这个问题，它就是一个真正的数组，数组特有的方法都可以使用。下面是一个利用 rest 参数改写数组push方法的例子。\n\nfunction push(array, ...items) {\n  items.foreach(function(item) {\n    array.push(item);\n    console.log(item);\n  });\n}\n\nvar a = [];\npush(a, 1, 2, 3)\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n注意，rest 参数之后不能再有其他参数（即只能是最后一个参数），否则会报错。\n\n// 报错\nfunction f(a, ...b, c) {\n  // ...\n}\n\n\n1\n2\n3\n4\n\n\n函数的length属性，不包括 rest 参数。\n\n(function(a) {}).length  // 1\n(function(...a) {}).length  // 0\n(function(a, ...b) {}).length  // 1\n\n\n1\n2\n3\n\n\n\n# 严格模式\n\n从 es5 开始，函数内部可以设定为严格模式。\n\nfunction dosomething(a, b) {\n  'use strict';\n  // code\n}\n\n\n1\n2\n3\n4\n\n\nes2016 做了一点修改，规定只要函数参数使用了默认值、解构赋值、或者扩展运算符，那么函数内部就不能显式设定为严格模式，否则会报错。\n\n// 报错\nfunction dosomething(a, b = a) {\n  'use strict';\n  // code\n}\n\n// 报错\nconst dosomething = function ({a, b}) {\n  'use strict';\n  // code\n};\n\n// 报错\nconst dosomething = (...a) => {\n  'use strict';\n  // code\n};\n\nconst obj = {\n  // 报错\n  dosomething({a, b}) {\n    'use strict';\n    // code\n  }\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n\n\n这样规定的原因是，函数内部的严格模式，同时适用于函数体和函数参数。但是，函数执行的时候，先执行函数参数，然后再执行函数体。这样就有一个不合理的地方，只有从函数体之中，才能知道参数是否应该以严格模式执行，但是参数却应该先于函数体执行。\n\n// 报错\nfunction dosomething(value = 070) {\n  'use strict';\n  return value;\n}\n\n\n1\n2\n3\n4\n5\n\n\n上面代码中，参数value的默认值是八进制数070，但是严格模式下不能用前缀0表示八进制，所以应该报错。但是实际上，javascript 引擎会先成功执行value = 070，然后进入函数体内部，发现需要用严格模式执行，这时才会报错。\n\n虽然可以先解析函数体代码，再执行参数代码，但是这样无疑就增加了复杂性。因此，标准索性禁止了这种用法，只要参数使用了默认值、解构赋值、或者扩展运算符，就不能显式指定严格模式。\n\n两种方法可以规避这种限制。第一种是设定全局性的严格模式，这是合法的。\n\n'use strict';\n\nfunction dosomething(a, b = a) {\n  // code\n}\n\n\n1\n2\n3\n4\n5\n\n\n第二种是把函数包在一个无参数的立即执行函数里面。\n\nconst dosomething = (function () {\n  'use strict';\n  return function(value = 42) {\n    return value;\n  };\n}());\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# name 属性\n\n函数的name属性，返回该函数的函数名。\n\nfunction foo() {}\nfoo.name // \"foo\"\n\n\n1\n2\n\n\n这个属性早就被浏览器广泛支持，但是直到 es6，才将其写入了标准。\n\n需要注意的是，es6 对这个属性的行为做出了一些修改。如果将一个匿名函数赋值给一个变量，es5 的name属性，会返回空字符串，而 es6 的name属性会返回实际的函数名。\n\nvar f = function () {};\n\n// es5\nf.name // \"\"\n\n// es6\nf.name // \"f\"\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n上面代码中，变量f等于一个匿名函数，es5 和 es6 的name属性返回的值不一样。\n\n如果将一个具名函数赋值给一个变量，则 es5 和 es6 的name属性都返回这个具名函数原本的名字。\n\nconst bar = function baz() {};\n\n// es5\nbar.name // \"baz\"\n\n// es6\nbar.name // \"baz\"\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\nfunction构造函数返回的函数实例，name属性的值为anonymous。\n\n(new function).name // \"anonymous\"\n\n\n1\n\n\nbind返回的函数，name属性值会加上bound前缀。\n\nfunction foo() {};\nfoo.bind({}).name // \"bound foo\"\n\n(function(){}).bind({}).name // \"bound \"\n\n\n1\n2\n3\n4\n\n\n\n# 箭头函数\n\n\n# 基本用法\n\nes6 允许使用“箭头”（=>）定义函数。\n\nvar f = v => v;\n\n// 等同于\nvar f = function (v) {\n  return v;\n};\n\n\n1\n2\n3\n4\n5\n6\n\n\n如果箭头函数不需要参数或需要多个参数，就使用一个圆括号代表参数部分。\n\nvar f = () => 5;\n// 等同于\nvar f = function () { return 5 };\n\nvar sum = (num1, num2) => num1 + num2;\n// 等同于\nvar sum = function(num1, num2) {\n  return num1 + num2;\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n如果箭头函数的代码块部分多于一条语句，就要使用大括号将它们括起来，并且使用return语句返回。\n\nvar sum = (num1, num2) => { return num1 + num2; }\n\n\n1\n\n\n由于大括号被解释为代码块，所以如果箭头函数直接返回一个对象，必须在对象外面加上括号，否则会报错。\n\n// 报错\nlet gettempitem = id => { id: id, name: \"temp\" };\n\n// 不报错\nlet gettempitem = id => ({ id: id, name: \"temp\" });\n\n\n1\n2\n3\n4\n5\n\n\n下面是一种特殊情况，虽然可以运行，但会得到错误的结果。\n\nlet foo = () => { a: 1 };\nfoo() // undefined\n\n\n1\n2\n\n\n上面代码中，原始意图是返回一个对象{ a: 1 }，但是由于引擎认为大括号是代码块，所以执行了一行语句a: 1。这时，a可以被解释为语句的标签，因此实际执行的语句是1;，然后函数就结束了，没有返回值。\n\n如果箭头函数只有一行语句，且不需要返回值，可以采用下面的写法，就不用写大括号了。\n\nlet fn = () => void doesnotreturn();\n\n\n1\n\n\n箭头函数可以与变量解构结合使用。\n\nconst full = ({ first, last }) => first + ' ' + last;\n\n// 等同于\nfunction full(person) {\n  return person.first + ' ' + person.last;\n}\n\n\n1\n2\n3\n4\n5\n6\n\n\n箭头函数使得表达更加简洁。\n\nconst iseven = n => n % 2 === 0;\nconst square = n => n * n;\n\n\n1\n2\n\n\n上面代码只用了两行，就定义了两个简单的工具函数。如果不用箭头函数，可能就要占用多行，而且还不如现在这样写醒目。\n\n箭头函数的一个用处是简化回调函数。\n\n// 正常函数写法\n[1,2,3].map(function (x) {\n  return x * x;\n});\n\n// 箭头函数写法\n[1,2,3].map(x => x * x);\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n另一个例子是\n\n// 正常函数写法\nvar result = values.sort(function (a, b) {\n  return a - b;\n});\n\n// 箭头函数写法\nvar result = values.sort((a, b) => a - b);\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n下面是 rest 参数与箭头函数结合的例子。\n\nconst numbers = (...nums) => nums;\n\nnumbers(1, 2, 3, 4, 5)\n// [1,2,3,4,5]\n\nconst headandtail = (head, ...tail) => [head, tail];\n\nheadandtail(1, 2, 3, 4, 5)\n// [1,[2,3,4,5]]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n\n# 使用注意点\n\n箭头函数有几个使用注意点。\n\n（1）函数体内的**this对象**，就是定义时所在的对象，而不是使用时所在的对象。\n\n（2）不可以当作构造函数，也就是说，不可以使用new命令，否则会抛出一个错误。\n\n（3）不可以使用arguments对象，该对象在函数体内不存在。如果要用，可以用 rest 参数代替。\n\n（4）不可以使用yield命令，因此箭头函数不能用作 generator 函数。\n\n上面四点中，第一点尤其值得注意。this对象的指向是可变的，但是在箭头函数中，它是固定的。\n\nfunction foo() {\n  settimeout(() => {\n    console.log('id:', this.id);\n  }, 100);\n}\n\nvar id = 21;\n\nfoo.call({ id: 42 });\n// id: 42\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n上面代码中，settimeout的参数是一个箭头函数，这个箭头函数的定义生效是在foo函数生成时，而它的真正执行要等到 100 毫秒后。如果是普通函数，执行时this应该指向全局对象window，这时应该输出21。但是，箭头函数导致this总是指向函数定义生效时所在的对象（本例是{id: 42}），所以输出的是42。\n\n箭头函数可以让settimeout里面的this，绑定定义时所在的作用域，而不是指向运行时所在的作用域。下面是另一个例子。\n\nfunction timer() {\n  this.s1 = 0;\n  this.s2 = 0;\n  // 箭头函数\n  setinterval(() => this.s1++, 1000);\n  // 普通函数\n  setinterval(function () {\n    this.s2++;\n  }, 1000);\n}\n\nvar timer = new timer();\n\nsettimeout(() => console.log('s1: ', timer.s1), 3100);\nsettimeout(() => console.log('s2: ', timer.s2), 3100);\n// s1: 3\n// s2: 0\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n上面代码中，timer函数内部设置了两个定时器，分别使用了箭头函数和普通函数。前者的this绑定定义时所在的作用域（即timer函数），后者的this指向运行时所在的作用域（即全局对象）。所以，3100 毫秒之后，timer.s1被更新了 3 次，而timer.s2一次都没更新。\n\n箭头函数可以让this指向固定化，这种特性很有利于封装回调函数。下面是一个例子，dom 事件的回调函数封装在一个对象里面。\n\nvar handler = {\n  id: '123456',\n\n  init: function() { // 注意这里不是使用箭头函数，如这里使用箭头函数将时this指向全局对象\n    document.addeventlistener('click',\n      event => this.dosomething(event.type), false);\n  },\n\n  dosomething: function(type) {\n    console.log('handling ' + type  + ' for ' + this.id);\n  }\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n上面代码的init方法中，使用了箭头函数，这导致这个箭头函数里面的this，总是指向handler对象。否则，回调函数运行时，this.dosomething这一行会报错，因为此时this指向document对象。\n\nthis指向的固定化，并不是因为箭头函数内部有绑定this的机制，实际原因是箭头函数根本没有自己的this，导致内部的this就是外层代码块的this。正是因为它没有this，所以也就不能用作构造函数。\n\n所以，箭头函数转成 es5 的代码如下。\n\n// es6\nfunction foo() {\n  settimeout(() => {\n    console.log('id:', this.id);\n  }, 100);\n}\n\n// es5\nfunction foo() {\n  var _this = this;\n\n  settimeout(function () {\n    console.log('id:', _this.id);\n  }, 100);\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n上面代码中，转换后的 es5 版本清楚地说明了，箭头函数里面根本没有自己的this，而是引用外层的this。\n\n请问下面的代码之中有几个this？\n\nfunction foo() {\n  return () => {\n    return () => {\n      return () => {\n        console.log('id:', this.id);\n      };\n    };\n  };\n}\n\nvar f = foo.call({id: 1});\n\nvar t1 = f.call({id: 2})()(); // id: 1\nvar t2 = f().call({id: 3})(); // id: 1\nvar t3 = f()().call({id: 4}); // id: 1\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n上面代码之中，只有一个this，就是函数foo的this，所以t1、t2、t3都输出同样的结果。因为所有的内层函数都是箭头函数，都没有自己的this，它们的this其实都是最外层foo函数的this。\n\n除了this，以下三个变量在箭头函数之中也是不存在的，指向外层函数的对应变量：arguments、super、new.target。\n\nfunction foo() {\n  settimeout(() => {\n    console.log('args:', arguments);\n  }, 100);\n}\n\nfoo(2, 4, 6, 8)\n// args: [2, 4, 6, 8]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n上面代码中，箭头函数内部的变量arguments，其实是函数foo的arguments变量。\n\n另外，由于箭头函数没有自己的this，所以当然也就不能用call()、apply()、bind()这些方法去改变this的指向。\n\n(function() {\n  return [\n    (() => this.x).bind({ x: 'inner' })()\n  ];\n}).call({ x: 'outer' });\n// ['outer']\n\n\n1\n2\n3\n4\n5\n6\n\n\n上面代码中，箭头函数没有自己的this，所以bind方法无效，内部的this指向外部的this。\n\n长期以来，javascript 语言的this对象一直是一个令人头痛的问题，在对象方法中使用this，必须非常小心。箭头函数”绑定”this，很大程度上解决了这个困扰。\n\n\n# 不适用场合\n\n由于箭头函数使得this从“动态”变成“静态”，下面两个场合不应该使用箭头函数。\n\n第一个场合是定义对象的方法，且该方法内部包括this。\n\nconst cat = {\n  lives: 9,\n  jumps: () => {\n    this.lives--;\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n\n\n上面代码中，cat.jumps()方法是一个箭头函数，这是错误的。调用cat.jumps()时，如果是普通函数，该方法内部的this指向cat；如果写成上面那样的箭头函数，使得this指向全局对象，因此不会得到预期结果。这是因为对象不构成单独的作用域，导致jumps箭头函数定义时的作用域就是全局作用域。\n\n第二个场合是需要动态this的时候，也不应使用箭头函数。\n\nvar button = document.getelementbyid('press');\nbutton.addeventlistener('click', () => {\n  this.classlist.toggle('on');\n});\n\n\n1\n2\n3\n4\n\n\n上面代码运行时，点击按钮会报错，因为button的监听函数是一个箭头函数，导致里面的this就是全局对象。如果改成普通函数，this就会动态指向被点击的按钮对象。\n\n另外，如果函数体很复杂，有许多行，或者函数内部有大量的读写操作，不单纯是为了计算值，这时也不应该使用箭头函数，而是要使用普通函数，这样可以提高代码可读性。\n\n\n# 嵌套的箭头函数\n\n箭头函数内部，还可以再使用箭头函数。下面是一个 es5 语法的多重嵌套函数。\n\nfunction insert(value) {\n  return {into: function (array) {\n    return {after: function (aftervalue) {\n      array.splice(array.indexof(aftervalue) + 1, 0, value);\n      return array;\n    }};\n  }};\n}\n\ninsert(2).into([1, 3]).after(1); //[1, 2, 3]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n上面这个函数，可以使用箭头函数改写。\n\nlet insert = (value) => ({into: (array) => ({after: (aftervalue) => {\n  array.splice(array.indexof(aftervalue) + 1, 0, value);\n  return array;\n}})});\n\ninsert(2).into([1, 3]).after(1); //[1, 2, 3]\n\n\n1\n2\n3\n4\n5\n6\n\n\n下面是一个部署管道机制（pipeline）的例子，即前一个函数的输出是后一个函数的输入。\n\nconst pipeline = (...funcs) =>\n  val => funcs.reduce((a, b) => b(a), val);\n\nconst plus1 = a => a + 1;\nconst mult2 = a => a * 2;\nconst addthenmult = pipeline(plus1, mult2);\n\naddthenmult(5)\n// 12\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n如果觉得上面的写法可读性比较差，也可以采用下面的写法。\n\nconst plus1 = a => a + 1;\nconst mult2 = a => a * 2;\n\nmult2(plus1(5))\n// 12\n\n\n1\n2\n3\n4\n5\n\n\n箭头函数还有一个功能，就是可以很方便地改写 λ 演算。\n\n// λ演算的写法\nfix = λf.(λx.f(λv.x(x)(v)))(λx.f(λv.x(x)(v)))\n\n// es6的写法\nvar fix = f => (x => f(v => x(x)(v)))\n               (x => f(v => x(x)(v)));\n\n\n1\n2\n3\n4\n5\n6\n\n\n上面两种写法，几乎是一一对应的。由于 λ 演算对于计算机科学非常重要，这使得我们可以用 es6 作为替代工具，探索计算机科学。\n\n\n# 尾调用优化\n\n\n# 什么是尾调用？\n\n尾调用（tail call）是函数式编程的一个重要概念，本身非常简单，一句话就能说清楚，就是指某个函数的最后一步是调用另一个函数。\n\nfunction f(x){\n  return g(x);\n}\n\n\n1\n2\n3\n\n\n上面代码中，函数f的最后一步是调用函数g，这就叫尾调用。\n\n以下三种情况，都不属于尾调用。\n\n// 情况一\nfunction f(x){\n  let y = g(x);\n  return y;\n}\n\n// 情况二\nfunction f(x){\n  return g(x) + 1;\n}\n\n// 情况三\nfunction f(x){\n  g(x);\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n上面代码中，情况一是调用函数g之后，还有赋值操作，所以不属于尾调用，即使语义完全一样。情况二也属于调用后还有操作，即使写在一行内。情况三等同于下面的代码。\n\nfunction f(x){\n  g(x);\n  return undefined;\n}\n\n\n1\n2\n3\n4\n\n\n尾调用不一定出现在函数尾部，只要是最后一步操作即可。\n\nfunction f(x) {\n  if (x > 0) {\n    return m(x)\n  }\n  return n(x);\n}\n\n\n1\n2\n3\n4\n5\n6\n\n\n上面代码中，函数m和n都属于尾调用，因为它们都是函数f的最后一步操作。\n\n\n# 尾调用优化\n\n尾调用之所以与其他调用不同，就在于它的特殊的调用位置。\n\n我们知道，函数调用会在内存形成一个“调用记录”，又称“调用帧”（call frame），保存调用位置和内部变量等信息。如果在函数a的内部调用函数b，那么在a的调用帧上方，还会形成一个b的调用帧。等到b运行结束，将结果返回到a，b的调用帧才会消失。如果函数b内部还调用函数c，那就还有一个c的调用帧，以此类推。所有的调用帧，就形成一个“调用栈”（call stack）。\n\n尾调用由于是函数的最后一步操作，所以不需要保留外层函数的调用帧，因为调用位置、内部变量等信息都不会再用到了，只要直接用内层函数的调用帧，取代外层函数的调用帧就可以了。\n\nfunction f() {\n  let m = 1;\n  let n = 2;\n  return g(m + n);\n}\nf();\n\n// 等同于\nfunction f() {\n  return g(3);\n}\nf();\n\n// 等同于\ng(3);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n上面代码中，如果函数g不是尾调用，函数f就需要保存内部变量m和n的值、g的调用位置等信息。但由于调用g之后，函数f就结束了，所以执行到最后一步，完全可以删除f(x)的调用帧，只保留g(3)的调用帧。\n\n这就叫做“尾调用优化”（tail call optimization），即只保留内层函数的调用帧。如果所有函数都是尾调用，那么完全可以做到每次执行时，调用帧只有一项，这将大大节省内存。这就是“尾调用优化”的意义。\n\n注意，只有不再用到外层函数的内部变量，内层函数的调用帧才会取代外层函数的调用帧，否则就无法进行“尾调用优化”。\n\nfunction addone(a){\n  var one = 1;\n  function inner(b){\n    return b + one;\n  }\n  return inner(a);\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n上面的函数不会进行尾调用优化，因为内层函数inner用到了外层函数addone的内部变量one。\n\n注意，目前只有 safari 浏览器支持尾调用优化，chrome 和 firefox 都不支持。\n\n\n# 尾递归\n\n函数调用自身，称为递归。如果尾调用自身，就称为尾递归。\n\n递归非常耗费内存，因为需要同时保存成千上百个调用帧，很容易发生“栈溢出”错误（stack overflow）。但对于尾递归来说，由于只存在一个调用帧，所以永远不会发生“栈溢出”错误。\n\nfunction factorial(n) {\n  if (n === 1) return 1;\n  return n * factorial(n - 1);\n}\n\nfactorial(5) // 120\n\n\n1\n2\n3\n4\n5\n6\n\n\n上面代码是一个阶乘函数，计算n的阶乘，最多需要保存n个调用记录，复杂度 o(n) 。\n\n如果改写成尾递归，只保留一个调用记录，复杂度 o(1) 。\n\nfunction factorial(n, total) {\n  if (n === 1) return total;\n  return factorial(n - 1, n * total);\n}\n\nfactorial(5, 1) // 120\n\n\n1\n2\n3\n4\n5\n6\n\n\n还有一个比较著名的例子，就是计算 fibonacci 数列，也能充分说明尾递归优化的重要性。\n\n非尾递归的 fibonacci 数列实现如下。\n\nfunction fibonacci (n) {\n  if ( n <= 1 ) {return 1};\n\n  return fibonacci(n - 1) + fibonacci(n - 2);\n}\n\nfibonacci(10) // 89\nfibonacci(100) // 超时\nfibonacci(500) // 超时\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n尾递归优化过的 fibonacci 数列实现如下。\n\nfunction fibonacci2 (n , ac1 = 1 , ac2 = 1) {\n  if( n <= 1 ) {return ac2};\n\n  return fibonacci2 (n - 1, ac2, ac1 + ac2);\n}\n\nfibonacci2(100) // 573147844013817200000\nfibonacci2(1000) // 7.0330367711422765e+208\nfibonacci2(10000) // infinity\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n由此可见，“尾调用优化”对递归操作意义重大，所以一些函数式编程语言将其写入了语言规格。es6 亦是如此，第一次明确规定，所有 ecmascript 的实现，都必须部署“尾调用优化”。这就是说，es6 中只要使用尾递归，就不会发生栈溢出（或者层层递归造成的超时），相对节省内存。\n\n\n# 递归函数的改写\n\n尾递归的实现，往往需要改写递归函数，确保最后一步只调用自身。做到这一点的方法，就是把所有用到的内部变量改写成函数的参数。比如上面的例子，阶乘函数 factorial 需要用到一个中间变量total，那就把这个中间变量改写成函数的参数。这样做的缺点就是不太直观，第一眼很难看出来，为什么计算5的阶乘，需要传入两个参数5和1？\n\n两个方法可以解决这个问题。方法一是在尾递归函数之外，再提供一个正常形式的函数。\n\nfunction tailfactorial(n, total) {\n  if (n === 1) return total;\n  return tailfactorial(n - 1, n * total);\n}\n\nfunction factorial(n) {\n  return tailfactorial(n, 1);\n}\n\nfactorial(5) // 120\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n上面代码通过一个正常形式的阶乘函数factorial，调用尾递归函数tailfactorial，看起来就正常多了。\n\n函数式编程有一个概念，叫做柯里化（currying），意思是将多参数的函数转换成单参数的形式。这里也可以使用柯里化。\n\nfunction currying(fn, n) {\n  return function (m) {\n    return fn.call(this, m, n);\n  };\n}\n\nfunction tailfactorial(n, total) {\n  if (n === 1) return total;\n  return tailfactorial(n - 1, n * total);\n}\n\nconst factorial = currying(tailfactorial, 1);\n\nfactorial(5) // 120\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n上面代码通过柯里化，将尾递归函数tailfactorial变为只接受一个参数的factorial。\n\n第二种方法就简单多了，就是采用 es6 的函数默认值。\n\nfunction factorial(n, total = 1) {\n  if (n === 1) return total;\n  return factorial(n - 1, n * total);\n}\n\nfactorial(5) // 120\n\n\n1\n2\n3\n4\n5\n6\n\n\n上面代码中，参数total有默认值1，所以调用时不用提供这个值。\n\n总结一下，递归本质上是一种循环操作。纯粹的函数式编程语言没有循环操作命令，所有的循环都用递归实现，这就是为什么尾递归对这些语言极其重要。对于其他支持“尾调用优化”的语言（比如 lua，es6），只需要知道循环可以用递归代替，而一旦使用递归，就最好使用尾递归。\n\n\n# 严格模式\n\nes6 的尾调用优化只在严格模式下开启，正常模式是无效的。\n\n这是因为在正常模式下，函数内部有两个变量，可以跟踪函数的调用栈。\n\n * func.arguments：返回调用时函数的参数。\n * func.caller：返回调用当前函数的那个函数。\n\n尾调用优化发生时，函数的调用栈会改写，因此上面两个变量就会失真。严格模式禁用这两个变量，所以尾调用模式仅在严格模式下生效。\n\nfunction restricted() {\n  'use strict';\n  restricted.caller;    // 报错\n  restricted.arguments; // 报错\n}\nrestricted();\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# 尾递归优化的实现\n\n尾递归优化只在严格模式下生效，那么正常模式下，或者那些不支持该功能的环境中，有没有办法也使用尾递归优化呢？回答是可以的，就是自己实现尾递归优化。\n\n它的原理非常简单。尾递归之所以需要优化，原因是调用栈太多，造成溢出，那么只要减少调用栈，就不会溢出。怎么做可以减少调用栈呢？就是采用“循环”换掉“递归”。\n\n下面是一个正常的递归函数。\n\nfunction sum(x, y) {\n  if (y > 0) {\n    return sum(x + 1, y - 1);\n  } else {\n    return x;\n  }\n}\n\nsum(1, 100000)\n// uncaught rangeerror: maximum call stack size exceeded(…)\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n上面代码中，sum是一个递归函数，参数x是需要累加的值，参数y控制递归次数。一旦指定sum递归 100000 次，就会报错，提示超出调用栈的最大次数。\n\n蹦床函数（trampoline）可以将递归执行转为循环执行。\n\nfunction trampoline(f) {\n  while (f && f instanceof function) {\n    f = f();\n  }\n  return f;\n}\n\n\n1\n2\n3\n4\n5\n6\n\n\n上面就是蹦床函数的一个实现，它接受一个函数f作为参数。只要f执行后返回一个函数，就继续执行。注意，这里是返回一个函数，然后执行该函数，而不是函数里面调用函数，这样就避免了递归执行，从而就消除了调用栈过大的问题。\n\n然后，要做的就是将原来的递归函数，改写为每一步返回另一个函数。\n\nfunction sum(x, y) {\n  if (y > 0) {\n    return sum.bind(null, x + 1, y - 1);\n  } else {\n    return x;\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n上面代码中，sum函数的每次执行，都会返回自身的另一个版本。\n\n现在，使用蹦床函数执行sum，就不会发生调用栈溢出。\n\ntrampoline(sum(1, 100000))\n// 100001\n\n\n1\n2\n\n\n蹦床函数并不是真正的尾递归优化，下面的实现才是。\n\nfunction tco(f) {\n  var value;\n  var active = false;\n  var accumulated = [];\n\n  return function accumulator() {\n    accumulated.push(arguments);\n    if (!active) {\n      active = true;\n      while (accumulated.length) {\n        value = f.apply(this, accumulated.shift());\n      }\n      active = false;\n      return value;\n    }\n  };\n}\n\nvar sum = tco(function(x, y) {\n  if (y > 0) {\n    return sum(x + 1, y - 1)\n  }\n  else {\n    return x\n  }\n});\n\nsum(1, 100000)\n// 100001\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n\n\n上面代码中，tco函数是尾递归优化的实现，它的奥妙就在于状态变量active。默认情况下，这个变量是不激活的。一旦进入尾递归优化的过程，这个变量就激活了。然后，每一轮递归sum返回的都是undefined，所以就避免了递归执行；而accumulated数组存放每一轮sum执行的参数，总是有值的，这就保证了accumulator函数内部的while循环总是会执行。这样就很巧妙地将“递归”改成了“循环”，而后一轮的参数会取代前一轮的参数，保证了调用栈只有一层。\n\n\n# 函数参数的尾逗号\n\nes2017 允许函数的最后一个参数有尾逗号（trailing comma）。\n\n此前，函数定义和调用时，都不允许最后一个参数后面出现逗号。\n\nfunction clownseverywhere(\n  param1,\n  param2\n) { /* ... */ }\n\nclownseverywhere(\n  'foo',\n  'bar'\n);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n上面代码中，如果在param2或bar后面加一个逗号，就会报错。\n\n如果像上面这样，将参数写成多行（即每个参数占据一行），以后修改代码的时候，想为函数clownseverywhere添加第三个参数，或者调整参数的次序，就势必要在原来最后一个参数后面添加一个逗号。这对于版本管理系统来说，就会显示添加逗号的那一行也发生了变动。这看上去有点冗余，因此新的语法允许定义和调用时，尾部直接有一个逗号。\n\nfunction clownseverywhere(\n  param1,\n  param2,\n) { /* ... */ }\n\nclownseverywhere(\n  'foo',\n  'bar',\n);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n这样的规定也使得，函数参数与数组和对象的尾逗号规则，保持一致了。\n\n\n# function.prototype.tostring()\n\nes2019 对函数实例的tostring()方法做出了修改。\n\ntostring()方法返回函数代码本身，以前会省略注释和空格。\n\nfunction /* foo comment */ foo () {}\n\nfoo.tostring()\n// function foo() {}\n\n\n1\n2\n3\n4\n\n\n上面代码中，函数foo的原始代码包含注释，函数名foo和圆括号之间有空格，但是tostring()方法都把它们省略了。\n\n修改后的tostring()方法，明确要求返回一模一样的原始代码。\n\nfunction /* foo comment */ foo () {}\n\nfoo.tostring()\n// \"function /* foo comment */ foo () {}\"\n\n\n1\n2\n3\n4\n\n\n\n# catch 命令的参数省略\n\njavascript 语言的try...catch结构，以前明确要求catch命令后面必须跟参数，接受try代码块抛出的错误对象。\n\ntry {\n  // ...\n} catch (err) {\n  // 处理错误\n}\n\n\n1\n2\n3\n4\n5\n\n\n上面代码中，catch命令后面带有参数err。\n\n很多时候，catch代码块可能用不到这个参数。但是，为了保证语法正确，还是必须写。es2019 做出了改变，允许catch语句省略参数。\n\ntry {\n  // ...\n} catch {\n  // ...\n}\n\n\n1\n2\n3\n4\n5\n",charsets:{cjk:!0}},{title:"对象的新增方法",frontmatter:{title:"对象的新增方法",date:"2020-02-09T16:00:29.000Z",permalink:"/pages/e85e68947502cf90",author:"阮一峰",categories:["《ES6 教程》笔记"],tags:["ES6"],readingShow:"top"},regularPath:"/06.%E4%B9%A6%E7%B1%8D/05.%E3%80%8AES6%20%E6%95%99%E7%A8%8B%E3%80%8B%E7%AC%94%E8%AE%B0/11.%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%96%B0%E5%A2%9E%E6%96%B9%E6%B3%95.html",relativePath:"06.书籍/05.《ES6 教程》笔记/11.对象的新增方法.md",key:"v-75857508",path:"/pages/e85e68947502cf90/",headers:[{level:2,title:"Object.is()",slug:"object-is",normalizedTitle:"object.is()",charIndex:36},{level:2,title:"Object.assign()",slug:"object-assign",normalizedTitle:"object.assign()",charIndex:829},{level:3,title:"基本用法",slug:"基本用法",normalizedTitle:"基本用法",charIndex:849},{level:3,title:"注意点",slug:"注意点",normalizedTitle:"注意点",charIndex:2867},{level:3,title:"常见用途",slug:"常见用途",normalizedTitle:"常见用途",charIndex:3937},{level:2,title:"Object.getOwnPropertyDescriptors()",slug:"object-getownpropertydescriptors",normalizedTitle:"object.getownpropertydescriptors()",charIndex:5719},{level:2,title:"__proto__属性，Object.setPrototypeOf()，Object.getPrototypeOf()",slug:"proto-属性-object-setprototypeof-object-getprototypeof",normalizedTitle:"__proto__属性，object.setprototypeof()，object.getprototypeof()",charIndex:9059},{level:3,title:"__proto__属性",slug:"proto-属性",normalizedTitle:"__proto__属性",charIndex:9059},{level:3,title:"Object.setPrototypeOf()",slug:"object-setprototypeof",normalizedTitle:"object.setprototypeof()",charIndex:9071},{level:3,title:"Object.getPrototypeOf()",slug:"object-getprototypeof",normalizedTitle:"object.getprototypeof()",charIndex:9095},{level:2,title:"Object.keys()，Object.values()，Object.entries()",slug:"object-keys-object-values-object-entries",normalizedTitle:"object.keys()，object.values()，object.entries()",charIndex:12688},{level:3,title:"Object.keys()",slug:"object-keys",normalizedTitle:"object.keys()",charIndex:12688},{level:3,title:"Object.values()",slug:"object-values",normalizedTitle:"object.values()",charIndex:12702},{level:3,title:"Object.entries()",slug:"object-entries",normalizedTitle:"object.entries()",charIndex:12718},{level:2,title:"Object.fromEntries()",slug:"object-fromentries",normalizedTitle:"object.fromentries()",charIndex:15639}],excerpt:'<h1 id="对象的新增方法"><a class="header-anchor" href="#对象的新增方法">#</a> 对象的新增方法</h1>\n<p>本章介绍 Object 对象的新增方法。</p>\n<h2 id="object-is"><a class="header-anchor" href="#object-is">#</a> Object.is()</h2>\n<p>ES5 比较两个值是否相等，只有两个运算符：相等运算符（<code>==</code>）和严格相等运算符（<code>===</code>）。它们都有缺点，前者会自动转换数据类型，后者的<code>NaN</code>不等于自身，以及<code>+0</code>等于<code>-0</code>。JavaScript 缺乏一种运算，在所有环境中，只要两个值是一样的，它们就应该相等。</p>\n<p>ES6 提出“Same-value equality”（同值相等）算法，用来解决这个问题。<code>Object.is</code>就是部署这个算法的新方法。它用来比较两个值是否严格相等，与严格比较运算符（===）的行为基本一致。</p>\n',lastUpdated:"2022/9/22 下午4:28:09",lastUpdatedTimestamp:1663835289e3,headersStr:"Object.is() Object.assign() 基本用法 注意点 常见用途 Object.getOwnPropertyDescriptors() __proto__属性，Object.setPrototypeOf()，Object.getPrototypeOf() __proto__属性 Object.setPrototypeOf() Object.getPrototypeOf() Object.keys()，Object.values()，Object.entries() Object.keys() Object.values() Object.entries() Object.fromEntries()",content:"# 对象的新增方法\n\n本章介绍 Object 对象的新增方法。\n\n\n# Object.is()\n\nES5 比较两个值是否相等，只有两个运算符：相等运算符（==）和严格相等运算符（===）。它们都有缺点，前者会自动转换数据类型，后者的NaN不等于自身，以及+0等于-0。JavaScript 缺乏一种运算，在所有环境中，只要两个值是一样的，它们就应该相等。\n\nES6 提出“Same-value equality”（同值相等）算法，用来解决这个问题。Object.is就是部署这个算法的新方法。它用来比较两个值是否严格相等，与严格比较运算符（===）的行为基本一致。\n\nObject.is('foo', 'foo')\n// true\nObject.is({}, {})\n// false\n\n\n1\n2\n3\n4\n\n\n不同之处只有两个：一是+0不等于-0，二是NaN等于自身。\n\n+0 === -0 //true\nNaN === NaN // false\n\nObject.is(+0, -0) // false\nObject.is(NaN, NaN) // true\n\n\n1\n2\n3\n4\n5\n\n\nES5 可以通过下面的代码，部署Object.is。\n\nObject.defineProperty(Object, 'is', {\n  value: function(x, y) {\n    if (x === y) {\n      // 针对+0 不等于 -0的情况\n      return x !== 0 || 1 / x === 1 / y;\n    }\n    // 针对NaN的情况\n    return x !== x && y !== y;\n  },\n  configurable: true,\n  enumerable: false,\n  writable: true\n});\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n\n# Object.assign()\n\n\n# 基本用法\n\nObject.assign方法用于对象的合并，将源对象（source）的所有可枚举属性，复制到目标对象（target）。\n\nconst target = { a: 1 };\n\nconst source1 = { b: 2 };\nconst source2 = { c: 3 };\n\nObject.assign(target, source1, source2);\ntarget // {a:1, b:2, c:3}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\nObject.assign方法的第一个参数是目标对象，后面的参数都是源对象。\n\n注意，如果目标对象与源对象有同名属性，或多个源对象有同名属性，则后面的属性会覆盖前面的属性。\n\nconst target = { a: 1, b: 1 };\n\nconst source1 = { b: 2, c: 2 };\nconst source2 = { c: 3 };\n\nObject.assign(target, source1, source2);\ntarget // {a:1, b:2, c:3}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n如果只有一个参数，Object.assign会直接返回该参数。\n\nconst obj = {a: 1};\nObject.assign(obj) === obj // true\n\n\n1\n2\n\n\n如果该参数不是对象，则会先转成对象，然后返回。\n\ntypeof Object.assign(2) // \"object\"\n\n\n1\n\n\n由于undefined和null无法转成对象，所以如果它们作为参数，就会报错。\n\nObject.assign(undefined) // 报错\nObject.assign(null) // 报错\n\n\n1\n2\n\n\n如果非对象参数出现在源对象的位置（即非首参数），那么处理规则有所不同。首先，这些参数都会转成对象，如果无法转成对象，就会跳过。这意味着，如果undefined和null不在首参数，就不会报错。\n\nlet obj = {a: 1};\nObject.assign(obj, undefined) === obj // true\nObject.assign(obj, null) === obj // true\n\n\n1\n2\n3\n\n\n其他类型的值（即数值、字符串和布尔值）不在首参数，也不会报错。但是，除了字符串会以数组形式，拷贝入目标对象，其他值都不会产生效果。\n\nconst v1 = 'abc';\nconst v2 = true;\nconst v3 = 10;\n\nconst obj = Object.assign({}, v1, v2, v3);\nconsole.log(obj); // { \"0\": \"a\", \"1\": \"b\", \"2\": \"c\" }\n\n\n1\n2\n3\n4\n5\n6\n\n\n上面代码中，v1、v2、v3分别是字符串、布尔值和数值，结果只有字符串合入目标对象（以字符数组的形式），数值和布尔值都会被忽略。这是因为只有字符串的包装对象，会产生可枚举属性。\n\nObject(true) // {[[PrimitiveValue]]: true}\nObject(10)  //  {[[PrimitiveValue]]: 10}\nObject('abc') // {0: \"a\", 1: \"b\", 2: \"c\", length: 3, [[PrimitiveValue]]: \"abc\"}\n\n\n1\n2\n3\n\n\n上面代码中，布尔值、数值、字符串分别转成对应的包装对象，可以看到它们的原始值都在包装对象的内部属性[[PrimitiveValue]]上面，这个属性是不会被Object.assign拷贝的。只有字符串的包装对象，会产生可枚举的实义属性，那些属性则会被拷贝。\n\nObject.assign拷贝的属性是有限制的，只拷贝源对象的自身属性（不拷贝继承属性），也不拷贝不可枚举的属性（enumerable: false）。\n\nObject.assign({b: 'c'},\n  Object.defineProperty({}, 'invisible', {\n    enumerable: false,\n    value: 'hello'\n  })\n)\n// { b: 'c' }\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n上面代码中，Object.assign要拷贝的对象只有一个不可枚举属性invisible，这个属性并没有被拷贝进去。\n\n属性名为 Symbol 值的属性，也会被Object.assign拷贝。\n\nObject.assign({ a: 'b' }, { [Symbol('c')]: 'd' })\n// { a: 'b', Symbol(c): 'd' }\n\n\n1\n2\n\n\n\n# 注意点\n\n（1）浅拷贝\n\nObject.assign方法实行的是浅拷贝，而不是深拷贝。也就是说，如果源对象某个属性的值是对象，那么目标对象拷贝得到的是这个对象的引用。\n\nconst obj1 = {a: {b: 1}};\nconst obj2 = Object.assign({}, obj1);\n\nobj1.a.b = 2;\nobj2.a.b // 2\n\n\n1\n2\n3\n4\n5\n\n\n上面代码中，源对象obj1的a属性的值是一个对象，Object.assign拷贝得到的是这个对象的引用。这个对象的任何变化，都会反映到目标对象上面。\n\n（2）同名属性的替换\n\n对于这种嵌套的对象，一旦遇到同名属性，Object.assign的处理方法是替换，而不是添加。\n\nconst target = { a: { b: 'c', d: 'e' } }\nconst source = { a: { b: 'hello' } }\nObject.assign(target, source)\n// { a: { b: 'hello' } }\n\n\n1\n2\n3\n4\n\n\n上面代码中，target对象的a属性被source对象的a属性整个替换掉了，而不会得到{ a: { b: 'hello', d: 'e' } }的结果。这通常不是开发者想要的，需要特别小心。\n\n一些函数库提供Object.assign的定制版本（比如 Lodash 的_.defaultsDeep方法），可以得到深拷贝的合并。\n\n（3）数组的处理\n\nObject.assign可以用来处理数组，但是会把数组视为对象。\n\nObject.assign([1, 2, 3], [4, 5])\n// [4, 5, 3]\n\n\n1\n2\n\n\n上面代码中，Object.assign把数组视为属性名为 0、1、2 的对象，因此源数组的 0 号属性4覆盖了目标数组的 0 号属性1。\n\n（4）取值函数的处理\n\nObject.assign只能进行值的复制，如果要复制的值是一个取值函数，那么将求值后再复制。\n\nconst source = {\n  get foo() { return 1 }\n};\nconst target = {};\n\nObject.assign(target, source)\n// { foo: 1 }\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n上面代码中，source对象的foo属性是一个取值函数，Object.assign不会复制这个取值函数，只会拿到值以后，将这个值复制过去。\n\n\n# 常见用途\n\nObject.assign方法有很多用处。\n\n（1）为对象添加属性\n\nclass Point {\n  constructor(x, y) {\n    Object.assign(this, {x, y});\n  }\n}\n\n\n1\n2\n3\n4\n5\n\n\n上面方法通过Object.assign方法，将x属性和y属性添加到Point类的对象实例。\n\n（2）为对象添加方法\n\nObject.assign(SomeClass.prototype, {\n  someMethod(arg1, arg2) {\n    ···\n  },\n  anotherMethod() {\n    ···\n  }\n});\n\n// 等同于下面的写法\nSomeClass.prototype.someMethod = function (arg1, arg2) {\n  ···\n};\nSomeClass.prototype.anotherMethod = function () {\n  ···\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n上面代码使用了对象属性的简洁表示法，直接将两个函数放在大括号中，再使用assign方法添加到SomeClass.prototype之中。\n\n（3）克隆对象\n\nfunction clone(origin) {\n  return Object.assign({}, origin);\n}\n\n\n1\n2\n3\n\n\n上面代码将原始对象拷贝到一个空对象，就得到了原始对象的克隆。\n\n不过，采用这种方法克隆，只能克隆原始对象自身的值，不能克隆它继承的值。如果想要保持继承链，可以采用下面的代码。\n\nfunction clone(origin) {\n  let originProto = Object.getPrototypeOf(origin);\n  return Object.assign(Object.create(originProto), origin);\n}\n\n\n1\n2\n3\n4\n\n\n（4）合并多个对象\n\n将多个对象合并到某个对象。\n\nconst merge =\n  (target, ...sources) => Object.assign(target, ...sources);\n\n\n1\n2\n\n\n如果希望合并后返回一个新对象，可以改写上面函数，对一个空对象合并。\n\nconst merge =\n  (...sources) => Object.assign({}, ...sources);\n\n\n1\n2\n\n\n（5）为属性指定默认值\n\nconst DEFAULTS = {\n  logLevel: 0,\n  outputFormat: 'html'\n};\n\nfunction processContent(options) {\n  options = Object.assign({}, DEFAULTS, options);\n  console.log(options);\n  // ...\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n上面代码中，DEFAULTS对象是默认值，options对象是用户提供的参数。Object.assign方法将DEFAULTS和options合并成一个新对象，如果两者有同名属性，则options的属性值会覆盖DEFAULTS的属性值。\n\n注意，由于存在浅拷贝的问题，DEFAULTS对象和options对象的所有属性的值，最好都是简单类型，不要指向另一个对象。否则，DEFAULTS对象的该属性很可能不起作用。\n\nconst DEFAULTS = {\n  url: {\n    host: 'example.com',\n    port: 7070\n  },\n};\n\nprocessContent({ url: {port: 8000} })\n// {\n//   url: {port: 8000}\n// }\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n上面代码的原意是将url.port改成 8000，url.host不变。实际结果却是options.url覆盖掉DEFAULTS.url，所以url.host就不存在了。\n\n\n# Object.getOwnPropertyDescriptors()\n\nES5 的Object.getOwnPropertyDescriptor()方法会返回某个对象属性的描述对象（descriptor）。ES2017 引入了Object.getOwnPropertyDescriptors()方法，返回指定对象所有自身属性（非继承属性）的描述对象。\n\nconst obj = {\n  foo: 123,\n  get bar() { return 'abc' }\n};\n\nObject.getOwnPropertyDescriptors(obj)\n// { foo:\n//    { value: 123,\n//      writable: true,\n//      enumerable: true,\n//      configurable: true },\n//   bar:\n//    { get: [Function: get bar],\n//      set: undefined,\n//      enumerable: true,\n//      configurable: true } }\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n上面代码中，Object.getOwnPropertyDescriptors()方法返回一个对象，所有原对象的属性名都是该对象的属性名，对应的属性值就是该属性的描述对象。\n\n该方法的实现非常容易。\n\nfunction getOwnPropertyDescriptors(obj) {\n  const result = {};\n  for (let key of Reflect.ownKeys(obj)) {\n    result[key] = Object.getOwnPropertyDescriptor(obj, key);\n  }\n  return result;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n该方法的引入目的，主要是为了解决Object.assign()无法正确拷贝get属性和set属性的问题。\n\nconst source = {\n  set foo(value) {\n    console.log(value);\n  }\n};\n\nconst target1 = {};\nObject.assign(target1, source);\n\nObject.getOwnPropertyDescriptor(target1, 'foo')\n// { value: undefined,\n//   writable: true,\n//   enumerable: true,\n//   configurable: true }\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n上面代码中，source对象的foo属性的值是一个赋值函数，Object.assign方法将这个属性拷贝给target1对象，结果该属性的值变成了undefined。这是因为Object.assign方法总是拷贝一个属性的值，而不会拷贝它背后的赋值方法或取值方法。\n\n这时，Object.getOwnPropertyDescriptors()方法配合Object.defineProperties()方法，就可以实现正确拷贝。\n\nconst source = {\n  set foo(value) {\n    console.log(value);\n  }\n};\n\nconst target2 = {};\nObject.defineProperties(target2, Object.getOwnPropertyDescriptors(source));\nObject.getOwnPropertyDescriptor(target2, 'foo')\n// { get: undefined,\n//   set: [Function: set foo],\n//   enumerable: true,\n//   configurable: true }\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n上面代码中，两个对象合并的逻辑可以写成一个函数。\n\nconst shallowMerge = (target, source) => Object.defineProperties(\n  target,\n  Object.getOwnPropertyDescriptors(source)\n);\n\n\n1\n2\n3\n4\n\n\nObject.getOwnPropertyDescriptors()方法的另一个用处，是配合Object.create()方法，将对象属性克隆到一个新对象。这属于浅拷贝。\n\nconst clone = Object.create(Object.getPrototypeOf(obj),\n  Object.getOwnPropertyDescriptors(obj));\n\n// 或者\n\nconst shallowClone = (obj) => Object.create(\n  Object.getPrototypeOf(obj),\n  Object.getOwnPropertyDescriptors(obj)\n);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n上面代码会克隆对象obj。\n\n另外，Object.getOwnPropertyDescriptors()方法可以实现一个对象继承另一个对象。以前，继承另一个对象，常常写成下面这样。\n\nconst obj = {\n  __proto__: prot,\n  foo: 123,\n};\n\n\n1\n2\n3\n4\n\n\nES6 规定__proto__只有浏览器要部署，其他环境不用部署。如果去除__proto__，上面代码就要改成下面这样。\n\nconst obj = Object.create(prot);\nobj.foo = 123;\n\n// 或者\n\nconst obj = Object.assign(\n  Object.create(prot),\n  {\n    foo: 123,\n  }\n);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n有了Object.getOwnPropertyDescriptors()，我们就有了另一种写法。\n\nconst obj = Object.create(\n  prot,\n  Object.getOwnPropertyDescriptors({\n    foo: 123,\n  })\n);\n\n\n1\n2\n3\n4\n5\n6\n\n\nObject.getOwnPropertyDescriptors()也可以用来实现 Mixin（混入）模式。\n\nlet mix = (object) => ({\n  with: (...mixins) => mixins.reduce(\n    (c, mixin) => Object.create(\n      c, Object.getOwnPropertyDescriptors(mixin)\n    ), object)\n});\n\n// multiple mixins example\nlet a = {a: 'a'};\nlet b = {b: 'b'};\nlet c = {c: 'c'};\nlet d = mix(c).with(a, b);\n\nd.c // \"c\"\nd.b // \"b\"\nd.a // \"a\"\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n上面代码返回一个新的对象d，代表了对象a和b被混入了对象c的操作。\n\n出于完整性的考虑，Object.getOwnPropertyDescriptors()进入标准以后，以后还会新增Reflect.getOwnPropertyDescriptors()方法。\n\n\n# __proto__属性，Object.setPrototypeOf()，Object.getPrototypeOf()\n\nJavaScript 语言的对象继承是通过原型链实现的。ES6 提供了更多原型对象的操作方法。\n\n\n# __proto__属性\n\n__proto__属性（前后各两个下划线），用来读取或设置当前对象的prototype对象。目前，所有浏览器（包括 IE11）都部署了这个属性。\n\n// es5 的写法\nconst obj = {\n  method: function() { ... }\n};\nobj.__proto__ = someOtherObj;\n\n// es6 的写法\nvar obj = Object.create(someOtherObj);\nobj.method = function() { ... };\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n该属性没有写入 ES6 的正文，而是写入了附录，原因是__proto__前后的双下划线，说明它本质上是一个内部属性，而不是一个正式的对外的 API，只是由于浏览器广泛支持，才被加入了 ES6。标准明确规定，只有浏览器必须部署这个属性，其他运行环境不一定需要部署，而且新的代码最好认为这个属性是不存在的。因此，无论从语义的角度，还是从兼容性的角度，都不要使用这个属性，而是使用下面的Object.setPrototypeOf()（写操作）、Object.getPrototypeOf()（读操作）、Object.create()（生成操作）代替。\n\n实现上，__proto__调用的是Object.prototype.__proto__，具体实现如下。\n\nObject.defineProperty(Object.prototype, '__proto__', {\n  get() {\n    let _thisObj = Object(this);\n    return Object.getPrototypeOf(_thisObj);\n  },\n  set(proto) {\n    if (this === undefined || this === null) {\n      throw new TypeError();\n    }\n    if (!isObject(this)) {\n      return undefined;\n    }\n    if (!isObject(proto)) {\n      return undefined;\n    }\n    let status = Reflect.setPrototypeOf(this, proto);\n    if (!status) {\n      throw new TypeError();\n    }\n  },\n});\n\nfunction isObject(value) {\n  return Object(value) === value;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n\n\n如果一个对象本身部署了__proto__属性，该属性的值就是对象的原型。\n\nObject.getPrototypeOf({ __proto__: null })\n// null\n\n\n1\n2\n\n\n\n# Object.setPrototypeOf()\n\nObject.setPrototypeOf方法的作用与__proto__相同，用来设置一个对象的prototype对象，返回参数对象本身。它是 ES6 正式推荐的设置原型对象的方法。\n\n// 格式\nObject.setPrototypeOf(object, prototype)\n\n// 用法\nconst o = Object.setPrototypeOf({}, null);\n\n\n1\n2\n3\n4\n5\n\n\n该方法等同于下面的函数。\n\nfunction setPrototypeOf(obj, proto) {\n  obj.__proto__ = proto;\n  return obj;\n}\n\n\n1\n2\n3\n4\n\n\n下面是一个例子。\n\nlet proto = {};\nlet obj = { x: 10 };\nObject.setPrototypeOf(obj, proto);\n\nproto.y = 20;\nproto.z = 40;\n\nobj.x // 10\nobj.y // 20\nobj.z // 40\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n上面代码将proto对象设为obj对象的原型，所以从obj对象可以读取proto对象的属性。\n\n如果第一个参数不是对象，会自动转为对象。但是由于返回的还是第一个参数，所以这个操作不会产生任何效果。\n\nObject.setPrototypeOf(1, {}) === 1 // true\nObject.setPrototypeOf('foo', {}) === 'foo' // true\nObject.setPrototypeOf(true, {}) === true // true\n\n\n1\n2\n3\n\n\n由于undefined和null无法转为对象，所以如果第一个参数是undefined或null，就会报错。\n\nObject.setPrototypeOf(undefined, {})\n// TypeError: Object.setPrototypeOf called on null or undefined\n\nObject.setPrototypeOf(null, {})\n// TypeError: Object.setPrototypeOf called on null or undefined\n\n\n1\n2\n3\n4\n5\n\n\n\n# Object.getPrototypeOf()\n\n该方法与Object.setPrototypeOf方法配套，用于读取一个对象的原型对象。\n\nObject.getPrototypeOf(obj);\n\n\n1\n\n\n下面是一个例子。\n\nfunction Rectangle() {\n  // ...\n}\n\nconst rec = new Rectangle();\n\nObject.getPrototypeOf(rec) === Rectangle.prototype\n// true\n\nObject.setPrototypeOf(rec, Object.prototype);\nObject.getPrototypeOf(rec) === Rectangle.prototype\n// false\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n如果参数不是对象，会被自动转为对象。\n\n// 等同于 Object.getPrototypeOf(Number(1))\nObject.getPrototypeOf(1)\n// Number {[[PrimitiveValue]]: 0}\n\n// 等同于 Object.getPrototypeOf(String('foo'))\nObject.getPrototypeOf('foo')\n// String {length: 0, [[PrimitiveValue]]: \"\"}\n\n// 等同于 Object.getPrototypeOf(Boolean(true))\nObject.getPrototypeOf(true)\n// Boolean {[[PrimitiveValue]]: false}\n\nObject.getPrototypeOf(1) === Number.prototype // true\nObject.getPrototypeOf('foo') === String.prototype // true\nObject.getPrototypeOf(true) === Boolean.prototype // true\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n如果参数是undefined或null，它们无法转为对象，所以会报错。\n\nObject.getPrototypeOf(null)\n// TypeError: Cannot convert undefined or null to object\n\nObject.getPrototypeOf(undefined)\n// TypeError: Cannot convert undefined or null to object\n\n\n1\n2\n3\n4\n5\n\n\n\n# Object.keys()，Object.values()，Object.entries()\n\n\n# Object.keys()\n\nES5 引入了Object.keys方法，返回一个数组，成员是参数对象自身的（不含继承的）所有可遍历（enumerable）属性的键名。\n\nvar obj = { foo: 'bar', baz: 42 };\nObject.keys(obj)\n// [\"foo\", \"baz\"]\n\n\n1\n2\n3\n\n\nES2017 引入了跟Object.keys配套的Object.values和Object.entries，作为遍历一个对象的补充手段，供for...of循环使用。\n\nlet {keys, values, entries} = Object;\nlet obj = { a: 1, b: 2, c: 3 };\n\nfor (let key of keys(obj)) {\n  console.log(key); // 'a', 'b', 'c'\n}\n\nfor (let value of values(obj)) {\n  console.log(value); // 1, 2, 3\n}\n\nfor (let [key, value] of entries(obj)) {\n  console.log([key, value]); // ['a', 1], ['b', 2], ['c', 3]\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n\n# Object.values()\n\nObject.values方法返回一个数组，成员是参数对象自身的（不含继承的）所有可遍历（enumerable）属性的键值。\n\nconst obj = { foo: 'bar', baz: 42 };\nObject.values(obj)\n// [\"bar\", 42]\n\n\n1\n2\n3\n\n\n返回数组的成员顺序，与本章的《属性的遍历》部分介绍的排列规则一致。\n\nconst obj = { 100: 'a', 2: 'b', 7: 'c' };\nObject.values(obj)\n// [\"b\", \"c\", \"a\"]\n\n\n1\n2\n3\n\n\n上面代码中，属性名为数值的属性，是按照数值大小，从小到大遍历的，因此返回的顺序是b、c、a。\n\nObject.values只返回对象自身的可遍历属性。\n\nconst obj = Object.create({}, {p: {value: 42}});\nObject.values(obj) // []\n\n\n1\n2\n\n\n上面代码中，Object.create方法的第二个参数添加的对象属性（属性p），如果不显式声明，默认是不可遍历的，因为p的属性描述对象的enumerable默认是false，Object.values不会返回这个属性。只要把enumerable改成true，Object.values就会返回属性p的值。\n\nconst obj = Object.create({}, {p:\n  {\n    value: 42,\n    enumerable: true\n  }\n});\nObject.values(obj) // [42]\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\nObject.values会过滤属性名为 Symbol 值的属性。\n\nObject.values({ [Symbol()]: 123, foo: 'abc' });\n// ['abc']\n\n\n1\n2\n\n\n如果Object.values方法的参数是一个字符串，会返回各个字符组成的一个数组。\n\nObject.values('foo')\n// ['f', 'o', 'o']\n\n\n1\n2\n\n\n上面代码中，字符串会先转成一个类似数组的对象。字符串的每个字符，就是该对象的一个属性。因此，Object.values返回每个属性的键值，就是各个字符组成的一个数组。\n\n如果参数不是对象，Object.values会先将其转为对象。由于数值和布尔值的包装对象，都不会为实例添加非继承的属性。所以，Object.values会返回空数组。\n\nObject.values(42) // []\nObject.values(true) // []\n\n\n1\n2\n\n\n\n# Object.entries()\n\nObject.entries()方法返回一个数组，成员是参数对象自身的（不含继承的）所有可遍历（enumerable）属性的键值对数组。\n\nconst obj = { foo: 'bar', baz: 42 };\nObject.entries(obj)\n// [ [\"foo\", \"bar\"], [\"baz\", 42] ]\n\n\n1\n2\n3\n\n\n除了返回值不一样，该方法的行为与Object.values基本一致。\n\n如果原对象的属性名是一个 Symbol 值，该属性会被忽略。\n\nObject.entries({ [Symbol()]: 123, foo: 'abc' });\n// [ [ 'foo', 'abc' ] ]\n\n\n1\n2\n\n\n上面代码中，原对象有两个属性，Object.entries只输出属性名非 Symbol 值的属性。将来可能会有Reflect.ownEntries()方法，返回对象自身的所有属性。\n\nObject.entries的基本用途是遍历对象的属性。\n\nlet obj = { one: 1, two: 2 };\nfor (let [k, v] of Object.entries(obj)) {\n  console.log(\n    `${JSON.stringify(k)}: ${JSON.stringify(v)}`\n  );\n}\n// \"one\": 1\n// \"two\": 2\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\nObject.entries方法的另一个用处是，将对象转为真正的Map结构。\n\nconst obj = { foo: 'bar', baz: 42 };\nconst map = new Map(Object.entries(obj));\nmap // Map { foo: \"bar\", baz: 42 }\n\n\n1\n2\n3\n\n\n自己实现Object.entries方法，非常简单。\n\n// Generator函数的版本\nfunction* entries(obj) {\n  for (let key of Object.keys(obj)) {\n    yield [key, obj[key]];\n  }\n}\n\n// 非Generator函数的版本\nfunction entries(obj) {\n  let arr = [];\n  for (let key of Object.keys(obj)) {\n    arr.push([key, obj[key]]);\n  }\n  return arr;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n\n# Object.fromEntries()\n\nObject.fromEntries()方法是Object.entries()的逆操作，用于将一个键值对数组转为对象。\n\nObject.fromEntries([\n  ['foo', 'bar'],\n  ['baz', 42]\n])\n// { foo: \"bar\", baz: 42 }\n\n\n1\n2\n3\n4\n5\n\n\n该方法的主要目的，是将键值对的数据结构还原为对象，因此特别适合将 Map 结构转为对象。\n\n// 例一\nconst entries = new Map([\n  ['foo', 'bar'],\n  ['baz', 42]\n]);\n\nObject.fromEntries(entries)\n// { foo: \"bar\", baz: 42 }\n\n// 例二\nconst map = new Map().set('foo', true).set('bar', false);\nObject.fromEntries(map)\n// { foo: true, bar: false }\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n该方法的一个用处是配合URLSearchParams对象，将查询字符串转为对象。\n\nObject.fromEntries(new URLSearchParams('foo=bar&baz=qux'))\n// { foo: \"bar\", baz: \"qux\" }\n\n\n1\n2\n",normalizedContent:"# 对象的新增方法\n\n本章介绍 object 对象的新增方法。\n\n\n# object.is()\n\nes5 比较两个值是否相等，只有两个运算符：相等运算符（==）和严格相等运算符（===）。它们都有缺点，前者会自动转换数据类型，后者的nan不等于自身，以及+0等于-0。javascript 缺乏一种运算，在所有环境中，只要两个值是一样的，它们就应该相等。\n\nes6 提出“same-value equality”（同值相等）算法，用来解决这个问题。object.is就是部署这个算法的新方法。它用来比较两个值是否严格相等，与严格比较运算符（===）的行为基本一致。\n\nobject.is('foo', 'foo')\n// true\nobject.is({}, {})\n// false\n\n\n1\n2\n3\n4\n\n\n不同之处只有两个：一是+0不等于-0，二是nan等于自身。\n\n+0 === -0 //true\nnan === nan // false\n\nobject.is(+0, -0) // false\nobject.is(nan, nan) // true\n\n\n1\n2\n3\n4\n5\n\n\nes5 可以通过下面的代码，部署object.is。\n\nobject.defineproperty(object, 'is', {\n  value: function(x, y) {\n    if (x === y) {\n      // 针对+0 不等于 -0的情况\n      return x !== 0 || 1 / x === 1 / y;\n    }\n    // 针对nan的情况\n    return x !== x && y !== y;\n  },\n  configurable: true,\n  enumerable: false,\n  writable: true\n});\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n\n# object.assign()\n\n\n# 基本用法\n\nobject.assign方法用于对象的合并，将源对象（source）的所有可枚举属性，复制到目标对象（target）。\n\nconst target = { a: 1 };\n\nconst source1 = { b: 2 };\nconst source2 = { c: 3 };\n\nobject.assign(target, source1, source2);\ntarget // {a:1, b:2, c:3}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\nobject.assign方法的第一个参数是目标对象，后面的参数都是源对象。\n\n注意，如果目标对象与源对象有同名属性，或多个源对象有同名属性，则后面的属性会覆盖前面的属性。\n\nconst target = { a: 1, b: 1 };\n\nconst source1 = { b: 2, c: 2 };\nconst source2 = { c: 3 };\n\nobject.assign(target, source1, source2);\ntarget // {a:1, b:2, c:3}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n如果只有一个参数，object.assign会直接返回该参数。\n\nconst obj = {a: 1};\nobject.assign(obj) === obj // true\n\n\n1\n2\n\n\n如果该参数不是对象，则会先转成对象，然后返回。\n\ntypeof object.assign(2) // \"object\"\n\n\n1\n\n\n由于undefined和null无法转成对象，所以如果它们作为参数，就会报错。\n\nobject.assign(undefined) // 报错\nobject.assign(null) // 报错\n\n\n1\n2\n\n\n如果非对象参数出现在源对象的位置（即非首参数），那么处理规则有所不同。首先，这些参数都会转成对象，如果无法转成对象，就会跳过。这意味着，如果undefined和null不在首参数，就不会报错。\n\nlet obj = {a: 1};\nobject.assign(obj, undefined) === obj // true\nobject.assign(obj, null) === obj // true\n\n\n1\n2\n3\n\n\n其他类型的值（即数值、字符串和布尔值）不在首参数，也不会报错。但是，除了字符串会以数组形式，拷贝入目标对象，其他值都不会产生效果。\n\nconst v1 = 'abc';\nconst v2 = true;\nconst v3 = 10;\n\nconst obj = object.assign({}, v1, v2, v3);\nconsole.log(obj); // { \"0\": \"a\", \"1\": \"b\", \"2\": \"c\" }\n\n\n1\n2\n3\n4\n5\n6\n\n\n上面代码中，v1、v2、v3分别是字符串、布尔值和数值，结果只有字符串合入目标对象（以字符数组的形式），数值和布尔值都会被忽略。这是因为只有字符串的包装对象，会产生可枚举属性。\n\nobject(true) // {[[primitivevalue]]: true}\nobject(10)  //  {[[primitivevalue]]: 10}\nobject('abc') // {0: \"a\", 1: \"b\", 2: \"c\", length: 3, [[primitivevalue]]: \"abc\"}\n\n\n1\n2\n3\n\n\n上面代码中，布尔值、数值、字符串分别转成对应的包装对象，可以看到它们的原始值都在包装对象的内部属性[[primitivevalue]]上面，这个属性是不会被object.assign拷贝的。只有字符串的包装对象，会产生可枚举的实义属性，那些属性则会被拷贝。\n\nobject.assign拷贝的属性是有限制的，只拷贝源对象的自身属性（不拷贝继承属性），也不拷贝不可枚举的属性（enumerable: false）。\n\nobject.assign({b: 'c'},\n  object.defineproperty({}, 'invisible', {\n    enumerable: false,\n    value: 'hello'\n  })\n)\n// { b: 'c' }\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n上面代码中，object.assign要拷贝的对象只有一个不可枚举属性invisible，这个属性并没有被拷贝进去。\n\n属性名为 symbol 值的属性，也会被object.assign拷贝。\n\nobject.assign({ a: 'b' }, { [symbol('c')]: 'd' })\n// { a: 'b', symbol(c): 'd' }\n\n\n1\n2\n\n\n\n# 注意点\n\n（1）浅拷贝\n\nobject.assign方法实行的是浅拷贝，而不是深拷贝。也就是说，如果源对象某个属性的值是对象，那么目标对象拷贝得到的是这个对象的引用。\n\nconst obj1 = {a: {b: 1}};\nconst obj2 = object.assign({}, obj1);\n\nobj1.a.b = 2;\nobj2.a.b // 2\n\n\n1\n2\n3\n4\n5\n\n\n上面代码中，源对象obj1的a属性的值是一个对象，object.assign拷贝得到的是这个对象的引用。这个对象的任何变化，都会反映到目标对象上面。\n\n（2）同名属性的替换\n\n对于这种嵌套的对象，一旦遇到同名属性，object.assign的处理方法是替换，而不是添加。\n\nconst target = { a: { b: 'c', d: 'e' } }\nconst source = { a: { b: 'hello' } }\nobject.assign(target, source)\n// { a: { b: 'hello' } }\n\n\n1\n2\n3\n4\n\n\n上面代码中，target对象的a属性被source对象的a属性整个替换掉了，而不会得到{ a: { b: 'hello', d: 'e' } }的结果。这通常不是开发者想要的，需要特别小心。\n\n一些函数库提供object.assign的定制版本（比如 lodash 的_.defaultsdeep方法），可以得到深拷贝的合并。\n\n（3）数组的处理\n\nobject.assign可以用来处理数组，但是会把数组视为对象。\n\nobject.assign([1, 2, 3], [4, 5])\n// [4, 5, 3]\n\n\n1\n2\n\n\n上面代码中，object.assign把数组视为属性名为 0、1、2 的对象，因此源数组的 0 号属性4覆盖了目标数组的 0 号属性1。\n\n（4）取值函数的处理\n\nobject.assign只能进行值的复制，如果要复制的值是一个取值函数，那么将求值后再复制。\n\nconst source = {\n  get foo() { return 1 }\n};\nconst target = {};\n\nobject.assign(target, source)\n// { foo: 1 }\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n上面代码中，source对象的foo属性是一个取值函数，object.assign不会复制这个取值函数，只会拿到值以后，将这个值复制过去。\n\n\n# 常见用途\n\nobject.assign方法有很多用处。\n\n（1）为对象添加属性\n\nclass point {\n  constructor(x, y) {\n    object.assign(this, {x, y});\n  }\n}\n\n\n1\n2\n3\n4\n5\n\n\n上面方法通过object.assign方法，将x属性和y属性添加到point类的对象实例。\n\n（2）为对象添加方法\n\nobject.assign(someclass.prototype, {\n  somemethod(arg1, arg2) {\n    ···\n  },\n  anothermethod() {\n    ···\n  }\n});\n\n// 等同于下面的写法\nsomeclass.prototype.somemethod = function (arg1, arg2) {\n  ···\n};\nsomeclass.prototype.anothermethod = function () {\n  ···\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n上面代码使用了对象属性的简洁表示法，直接将两个函数放在大括号中，再使用assign方法添加到someclass.prototype之中。\n\n（3）克隆对象\n\nfunction clone(origin) {\n  return object.assign({}, origin);\n}\n\n\n1\n2\n3\n\n\n上面代码将原始对象拷贝到一个空对象，就得到了原始对象的克隆。\n\n不过，采用这种方法克隆，只能克隆原始对象自身的值，不能克隆它继承的值。如果想要保持继承链，可以采用下面的代码。\n\nfunction clone(origin) {\n  let originproto = object.getprototypeof(origin);\n  return object.assign(object.create(originproto), origin);\n}\n\n\n1\n2\n3\n4\n\n\n（4）合并多个对象\n\n将多个对象合并到某个对象。\n\nconst merge =\n  (target, ...sources) => object.assign(target, ...sources);\n\n\n1\n2\n\n\n如果希望合并后返回一个新对象，可以改写上面函数，对一个空对象合并。\n\nconst merge =\n  (...sources) => object.assign({}, ...sources);\n\n\n1\n2\n\n\n（5）为属性指定默认值\n\nconst defaults = {\n  loglevel: 0,\n  outputformat: 'html'\n};\n\nfunction processcontent(options) {\n  options = object.assign({}, defaults, options);\n  console.log(options);\n  // ...\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n上面代码中，defaults对象是默认值，options对象是用户提供的参数。object.assign方法将defaults和options合并成一个新对象，如果两者有同名属性，则options的属性值会覆盖defaults的属性值。\n\n注意，由于存在浅拷贝的问题，defaults对象和options对象的所有属性的值，最好都是简单类型，不要指向另一个对象。否则，defaults对象的该属性很可能不起作用。\n\nconst defaults = {\n  url: {\n    host: 'example.com',\n    port: 7070\n  },\n};\n\nprocesscontent({ url: {port: 8000} })\n// {\n//   url: {port: 8000}\n// }\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n上面代码的原意是将url.port改成 8000，url.host不变。实际结果却是options.url覆盖掉defaults.url，所以url.host就不存在了。\n\n\n# object.getownpropertydescriptors()\n\nes5 的object.getownpropertydescriptor()方法会返回某个对象属性的描述对象（descriptor）。es2017 引入了object.getownpropertydescriptors()方法，返回指定对象所有自身属性（非继承属性）的描述对象。\n\nconst obj = {\n  foo: 123,\n  get bar() { return 'abc' }\n};\n\nobject.getownpropertydescriptors(obj)\n// { foo:\n//    { value: 123,\n//      writable: true,\n//      enumerable: true,\n//      configurable: true },\n//   bar:\n//    { get: [function: get bar],\n//      set: undefined,\n//      enumerable: true,\n//      configurable: true } }\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n上面代码中，object.getownpropertydescriptors()方法返回一个对象，所有原对象的属性名都是该对象的属性名，对应的属性值就是该属性的描述对象。\n\n该方法的实现非常容易。\n\nfunction getownpropertydescriptors(obj) {\n  const result = {};\n  for (let key of reflect.ownkeys(obj)) {\n    result[key] = object.getownpropertydescriptor(obj, key);\n  }\n  return result;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n该方法的引入目的，主要是为了解决object.assign()无法正确拷贝get属性和set属性的问题。\n\nconst source = {\n  set foo(value) {\n    console.log(value);\n  }\n};\n\nconst target1 = {};\nobject.assign(target1, source);\n\nobject.getownpropertydescriptor(target1, 'foo')\n// { value: undefined,\n//   writable: true,\n//   enumerable: true,\n//   configurable: true }\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n上面代码中，source对象的foo属性的值是一个赋值函数，object.assign方法将这个属性拷贝给target1对象，结果该属性的值变成了undefined。这是因为object.assign方法总是拷贝一个属性的值，而不会拷贝它背后的赋值方法或取值方法。\n\n这时，object.getownpropertydescriptors()方法配合object.defineproperties()方法，就可以实现正确拷贝。\n\nconst source = {\n  set foo(value) {\n    console.log(value);\n  }\n};\n\nconst target2 = {};\nobject.defineproperties(target2, object.getownpropertydescriptors(source));\nobject.getownpropertydescriptor(target2, 'foo')\n// { get: undefined,\n//   set: [function: set foo],\n//   enumerable: true,\n//   configurable: true }\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n上面代码中，两个对象合并的逻辑可以写成一个函数。\n\nconst shallowmerge = (target, source) => object.defineproperties(\n  target,\n  object.getownpropertydescriptors(source)\n);\n\n\n1\n2\n3\n4\n\n\nobject.getownpropertydescriptors()方法的另一个用处，是配合object.create()方法，将对象属性克隆到一个新对象。这属于浅拷贝。\n\nconst clone = object.create(object.getprototypeof(obj),\n  object.getownpropertydescriptors(obj));\n\n// 或者\n\nconst shallowclone = (obj) => object.create(\n  object.getprototypeof(obj),\n  object.getownpropertydescriptors(obj)\n);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n上面代码会克隆对象obj。\n\n另外，object.getownpropertydescriptors()方法可以实现一个对象继承另一个对象。以前，继承另一个对象，常常写成下面这样。\n\nconst obj = {\n  __proto__: prot,\n  foo: 123,\n};\n\n\n1\n2\n3\n4\n\n\nes6 规定__proto__只有浏览器要部署，其他环境不用部署。如果去除__proto__，上面代码就要改成下面这样。\n\nconst obj = object.create(prot);\nobj.foo = 123;\n\n// 或者\n\nconst obj = object.assign(\n  object.create(prot),\n  {\n    foo: 123,\n  }\n);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n有了object.getownpropertydescriptors()，我们就有了另一种写法。\n\nconst obj = object.create(\n  prot,\n  object.getownpropertydescriptors({\n    foo: 123,\n  })\n);\n\n\n1\n2\n3\n4\n5\n6\n\n\nobject.getownpropertydescriptors()也可以用来实现 mixin（混入）模式。\n\nlet mix = (object) => ({\n  with: (...mixins) => mixins.reduce(\n    (c, mixin) => object.create(\n      c, object.getownpropertydescriptors(mixin)\n    ), object)\n});\n\n// multiple mixins example\nlet a = {a: 'a'};\nlet b = {b: 'b'};\nlet c = {c: 'c'};\nlet d = mix(c).with(a, b);\n\nd.c // \"c\"\nd.b // \"b\"\nd.a // \"a\"\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n上面代码返回一个新的对象d，代表了对象a和b被混入了对象c的操作。\n\n出于完整性的考虑，object.getownpropertydescriptors()进入标准以后，以后还会新增reflect.getownpropertydescriptors()方法。\n\n\n# __proto__属性，object.setprototypeof()，object.getprototypeof()\n\njavascript 语言的对象继承是通过原型链实现的。es6 提供了更多原型对象的操作方法。\n\n\n# __proto__属性\n\n__proto__属性（前后各两个下划线），用来读取或设置当前对象的prototype对象。目前，所有浏览器（包括 ie11）都部署了这个属性。\n\n// es5 的写法\nconst obj = {\n  method: function() { ... }\n};\nobj.__proto__ = someotherobj;\n\n// es6 的写法\nvar obj = object.create(someotherobj);\nobj.method = function() { ... };\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n该属性没有写入 es6 的正文，而是写入了附录，原因是__proto__前后的双下划线，说明它本质上是一个内部属性，而不是一个正式的对外的 api，只是由于浏览器广泛支持，才被加入了 es6。标准明确规定，只有浏览器必须部署这个属性，其他运行环境不一定需要部署，而且新的代码最好认为这个属性是不存在的。因此，无论从语义的角度，还是从兼容性的角度，都不要使用这个属性，而是使用下面的object.setprototypeof()（写操作）、object.getprototypeof()（读操作）、object.create()（生成操作）代替。\n\n实现上，__proto__调用的是object.prototype.__proto__，具体实现如下。\n\nobject.defineproperty(object.prototype, '__proto__', {\n  get() {\n    let _thisobj = object(this);\n    return object.getprototypeof(_thisobj);\n  },\n  set(proto) {\n    if (this === undefined || this === null) {\n      throw new typeerror();\n    }\n    if (!isobject(this)) {\n      return undefined;\n    }\n    if (!isobject(proto)) {\n      return undefined;\n    }\n    let status = reflect.setprototypeof(this, proto);\n    if (!status) {\n      throw new typeerror();\n    }\n  },\n});\n\nfunction isobject(value) {\n  return object(value) === value;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n\n\n如果一个对象本身部署了__proto__属性，该属性的值就是对象的原型。\n\nobject.getprototypeof({ __proto__: null })\n// null\n\n\n1\n2\n\n\n\n# object.setprototypeof()\n\nobject.setprototypeof方法的作用与__proto__相同，用来设置一个对象的prototype对象，返回参数对象本身。它是 es6 正式推荐的设置原型对象的方法。\n\n// 格式\nobject.setprototypeof(object, prototype)\n\n// 用法\nconst o = object.setprototypeof({}, null);\n\n\n1\n2\n3\n4\n5\n\n\n该方法等同于下面的函数。\n\nfunction setprototypeof(obj, proto) {\n  obj.__proto__ = proto;\n  return obj;\n}\n\n\n1\n2\n3\n4\n\n\n下面是一个例子。\n\nlet proto = {};\nlet obj = { x: 10 };\nobject.setprototypeof(obj, proto);\n\nproto.y = 20;\nproto.z = 40;\n\nobj.x // 10\nobj.y // 20\nobj.z // 40\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n上面代码将proto对象设为obj对象的原型，所以从obj对象可以读取proto对象的属性。\n\n如果第一个参数不是对象，会自动转为对象。但是由于返回的还是第一个参数，所以这个操作不会产生任何效果。\n\nobject.setprototypeof(1, {}) === 1 // true\nobject.setprototypeof('foo', {}) === 'foo' // true\nobject.setprototypeof(true, {}) === true // true\n\n\n1\n2\n3\n\n\n由于undefined和null无法转为对象，所以如果第一个参数是undefined或null，就会报错。\n\nobject.setprototypeof(undefined, {})\n// typeerror: object.setprototypeof called on null or undefined\n\nobject.setprototypeof(null, {})\n// typeerror: object.setprototypeof called on null or undefined\n\n\n1\n2\n3\n4\n5\n\n\n\n# object.getprototypeof()\n\n该方法与object.setprototypeof方法配套，用于读取一个对象的原型对象。\n\nobject.getprototypeof(obj);\n\n\n1\n\n\n下面是一个例子。\n\nfunction rectangle() {\n  // ...\n}\n\nconst rec = new rectangle();\n\nobject.getprototypeof(rec) === rectangle.prototype\n// true\n\nobject.setprototypeof(rec, object.prototype);\nobject.getprototypeof(rec) === rectangle.prototype\n// false\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n如果参数不是对象，会被自动转为对象。\n\n// 等同于 object.getprototypeof(number(1))\nobject.getprototypeof(1)\n// number {[[primitivevalue]]: 0}\n\n// 等同于 object.getprototypeof(string('foo'))\nobject.getprototypeof('foo')\n// string {length: 0, [[primitivevalue]]: \"\"}\n\n// 等同于 object.getprototypeof(boolean(true))\nobject.getprototypeof(true)\n// boolean {[[primitivevalue]]: false}\n\nobject.getprototypeof(1) === number.prototype // true\nobject.getprototypeof('foo') === string.prototype // true\nobject.getprototypeof(true) === boolean.prototype // true\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n如果参数是undefined或null，它们无法转为对象，所以会报错。\n\nobject.getprototypeof(null)\n// typeerror: cannot convert undefined or null to object\n\nobject.getprototypeof(undefined)\n// typeerror: cannot convert undefined or null to object\n\n\n1\n2\n3\n4\n5\n\n\n\n# object.keys()，object.values()，object.entries()\n\n\n# object.keys()\n\nes5 引入了object.keys方法，返回一个数组，成员是参数对象自身的（不含继承的）所有可遍历（enumerable）属性的键名。\n\nvar obj = { foo: 'bar', baz: 42 };\nobject.keys(obj)\n// [\"foo\", \"baz\"]\n\n\n1\n2\n3\n\n\nes2017 引入了跟object.keys配套的object.values和object.entries，作为遍历一个对象的补充手段，供for...of循环使用。\n\nlet {keys, values, entries} = object;\nlet obj = { a: 1, b: 2, c: 3 };\n\nfor (let key of keys(obj)) {\n  console.log(key); // 'a', 'b', 'c'\n}\n\nfor (let value of values(obj)) {\n  console.log(value); // 1, 2, 3\n}\n\nfor (let [key, value] of entries(obj)) {\n  console.log([key, value]); // ['a', 1], ['b', 2], ['c', 3]\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n\n# object.values()\n\nobject.values方法返回一个数组，成员是参数对象自身的（不含继承的）所有可遍历（enumerable）属性的键值。\n\nconst obj = { foo: 'bar', baz: 42 };\nobject.values(obj)\n// [\"bar\", 42]\n\n\n1\n2\n3\n\n\n返回数组的成员顺序，与本章的《属性的遍历》部分介绍的排列规则一致。\n\nconst obj = { 100: 'a', 2: 'b', 7: 'c' };\nobject.values(obj)\n// [\"b\", \"c\", \"a\"]\n\n\n1\n2\n3\n\n\n上面代码中，属性名为数值的属性，是按照数值大小，从小到大遍历的，因此返回的顺序是b、c、a。\n\nobject.values只返回对象自身的可遍历属性。\n\nconst obj = object.create({}, {p: {value: 42}});\nobject.values(obj) // []\n\n\n1\n2\n\n\n上面代码中，object.create方法的第二个参数添加的对象属性（属性p），如果不显式声明，默认是不可遍历的，因为p的属性描述对象的enumerable默认是false，object.values不会返回这个属性。只要把enumerable改成true，object.values就会返回属性p的值。\n\nconst obj = object.create({}, {p:\n  {\n    value: 42,\n    enumerable: true\n  }\n});\nobject.values(obj) // [42]\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\nobject.values会过滤属性名为 symbol 值的属性。\n\nobject.values({ [symbol()]: 123, foo: 'abc' });\n// ['abc']\n\n\n1\n2\n\n\n如果object.values方法的参数是一个字符串，会返回各个字符组成的一个数组。\n\nobject.values('foo')\n// ['f', 'o', 'o']\n\n\n1\n2\n\n\n上面代码中，字符串会先转成一个类似数组的对象。字符串的每个字符，就是该对象的一个属性。因此，object.values返回每个属性的键值，就是各个字符组成的一个数组。\n\n如果参数不是对象，object.values会先将其转为对象。由于数值和布尔值的包装对象，都不会为实例添加非继承的属性。所以，object.values会返回空数组。\n\nobject.values(42) // []\nobject.values(true) // []\n\n\n1\n2\n\n\n\n# object.entries()\n\nobject.entries()方法返回一个数组，成员是参数对象自身的（不含继承的）所有可遍历（enumerable）属性的键值对数组。\n\nconst obj = { foo: 'bar', baz: 42 };\nobject.entries(obj)\n// [ [\"foo\", \"bar\"], [\"baz\", 42] ]\n\n\n1\n2\n3\n\n\n除了返回值不一样，该方法的行为与object.values基本一致。\n\n如果原对象的属性名是一个 symbol 值，该属性会被忽略。\n\nobject.entries({ [symbol()]: 123, foo: 'abc' });\n// [ [ 'foo', 'abc' ] ]\n\n\n1\n2\n\n\n上面代码中，原对象有两个属性，object.entries只输出属性名非 symbol 值的属性。将来可能会有reflect.ownentries()方法，返回对象自身的所有属性。\n\nobject.entries的基本用途是遍历对象的属性。\n\nlet obj = { one: 1, two: 2 };\nfor (let [k, v] of object.entries(obj)) {\n  console.log(\n    `${json.stringify(k)}: ${json.stringify(v)}`\n  );\n}\n// \"one\": 1\n// \"two\": 2\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\nobject.entries方法的另一个用处是，将对象转为真正的map结构。\n\nconst obj = { foo: 'bar', baz: 42 };\nconst map = new map(object.entries(obj));\nmap // map { foo: \"bar\", baz: 42 }\n\n\n1\n2\n3\n\n\n自己实现object.entries方法，非常简单。\n\n// generator函数的版本\nfunction* entries(obj) {\n  for (let key of object.keys(obj)) {\n    yield [key, obj[key]];\n  }\n}\n\n// 非generator函数的版本\nfunction entries(obj) {\n  let arr = [];\n  for (let key of object.keys(obj)) {\n    arr.push([key, obj[key]]);\n  }\n  return arr;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n\n# object.fromentries()\n\nobject.fromentries()方法是object.entries()的逆操作，用于将一个键值对数组转为对象。\n\nobject.fromentries([\n  ['foo', 'bar'],\n  ['baz', 42]\n])\n// { foo: \"bar\", baz: 42 }\n\n\n1\n2\n3\n4\n5\n\n\n该方法的主要目的，是将键值对的数据结构还原为对象，因此特别适合将 map 结构转为对象。\n\n// 例一\nconst entries = new map([\n  ['foo', 'bar'],\n  ['baz', 42]\n]);\n\nobject.fromentries(entries)\n// { foo: \"bar\", baz: 42 }\n\n// 例二\nconst map = new map().set('foo', true).set('bar', false);\nobject.fromentries(map)\n// { foo: true, bar: false }\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n该方法的一个用处是配合urlsearchparams对象，将查询字符串转为对象。\n\nobject.fromentries(new urlsearchparams('foo=bar&baz=qux'))\n// { foo: \"bar\", baz: \"qux\" }\n\n\n1\n2\n",charsets:{cjk:!0}},{title:"数组的扩展",frontmatter:{title:"数组的扩展",date:"2020-02-09T16:00:29.000Z",permalink:"/pages/e34009d60d8bc4b2",author:"阮一峰",categories:["《ES6 教程》笔记"],tags:["ES6"],readingShow:"top"},regularPath:"/06.%E4%B9%A6%E7%B1%8D/05.%E3%80%8AES6%20%E6%95%99%E7%A8%8B%E3%80%8B%E7%AC%94%E8%AE%B0/09.%E6%95%B0%E7%BB%84%E7%9A%84%E6%89%A9%E5%B1%95.html",relativePath:"06.书籍/05.《ES6 教程》笔记/09.数组的扩展.md",key:"v-51792eb2",path:"/pages/e34009d60d8bc4b2/",headers:[{level:2,title:"扩展运算符",slug:"扩展运算符",normalizedTitle:"扩展运算符",charIndex:12},{level:3,title:"含义",slug:"含义",normalizedTitle:"含义",charIndex:22},{level:3,title:"替代函数的 apply 方法",slug:"替代函数的-apply-方法",normalizedTitle:"替代函数的 apply 方法",charIndex:1036},{level:3,title:"扩展运算符的应用",slug:"扩展运算符的应用",normalizedTitle:"扩展运算符的应用",charIndex:2002},{level:2,title:"Array.from()",slug:"array-from",normalizedTitle:"array.from()",charIndex:5585},{level:2,title:"Array.of() 总是返回参数值组成的数组",slug:"array-of-总是返回参数值组成的数组",normalizedTitle:"array.of() 总是返回参数值组成的数组",charIndex:8479},{level:2,title:"数组实例的 copyWithin()",slug:"数组实例的-copywithin",normalizedTitle:"数组实例的 copywithin()",charIndex:9153},{level:2,title:"数组实例的 find() 和 findIndex()",slug:"数组实例的-find-和-findindex",normalizedTitle:"数组实例的 find() 和 findindex()",charIndex:10190},{level:2,title:"数组实例的 fill()",slug:"数组实例的-fill",normalizedTitle:"数组实例的 fill()",charIndex:11109},{level:2,title:"数组实例的 entries()，keys() 和 values()",slug:"数组实例的-entries-keys-和-values",normalizedTitle:"数组实例的 entries()，keys() 和 values()",charIndex:11674},{level:2,title:"数组实例的 includes()",slug:"数组实例的-includes",normalizedTitle:"数组实例的 includes()",charIndex:12418},{level:2,title:"数组实例的 flat()，flatMap()",slug:"数组实例的-flat-flatmap",normalizedTitle:"数组实例的 flat()，flatmap()",charIndex:13583},{level:2,title:"数组的空位",slug:"数组的空位",normalizedTitle:"数组的空位",charIndex:14764},{level:2,title:"Array.prototype.sort() 的排序稳定性",slug:"array-prototype-sort-的排序稳定性",normalizedTitle:"array.prototype.sort() 的排序稳定性",charIndex:16595}],excerpt:'<h1 id="数组的扩展"><a class="header-anchor" href="#数组的扩展">#</a> 数组的扩展</h1>\n<h2 id="扩展运算符"><a class="header-anchor" href="#扩展运算符">#</a> 扩展运算符</h2>\n<h3 id="含义"><a class="header-anchor" href="#含义">#</a> 含义</h3>\n<p>扩展运算符（spread）是三个点（<code>...</code>）。它好比 rest 参数的逆运算，<strong>将一个数组转为用逗号分隔的参数序列</strong>。</p>\n\x3c!--beforebegin--\x3e<div class="language-javascript line-numbers-mode">\x3c!--afterbegin--\x3e<pre v-pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n<span class="token comment">// 1 2 3</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>\n<span class="token comment">// 1 2 3 4 5</span>\n\n<span class="token punctuation">[</span><span class="token operator">...</span>document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">\'div\'</span><span class="token punctuation">)</span><span class="token punctuation">]</span>\n<span class="token comment">// [&lt;div>, &lt;div>, &lt;div>]</span>\n</code></pre>\n<div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div>\x3c!--beforeend--\x3e</div>\x3c!--afterend--\x3e',lastUpdated:"2022/9/22 下午4:28:09",lastUpdatedTimestamp:1663835289e3,headersStr:"扩展运算符 含义 替代函数的 apply 方法 扩展运算符的应用 Array.from() Array.of() 总是返回参数值组成的数组 数组实例的 copyWithin() 数组实例的 find() 和 findIndex() 数组实例的 fill() 数组实例的 entries()，keys() 和 values() 数组实例的 includes() 数组实例的 flat()，flatMap() 数组的空位 Array.prototype.sort() 的排序稳定性",content:"# 数组的扩展\n\n\n# 扩展运算符\n\n\n# 含义\n\n扩展运算符（spread）是三个点（...）。它好比 rest 参数的逆运算，将一个数组转为用逗号分隔的参数序列。\n\nconsole.log(...[1, 2, 3])\n// 1 2 3\n\nconsole.log(1, ...[2, 3, 4], 5)\n// 1 2 3 4 5\n\n[...document.querySelectorAll('div')]\n// [<div>, <div>, <div>]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n该运算符主要用于函数调用。\n\nfunction push(array, ...items) {\n  array.push(...items);\n}\n\nfunction add(x, y) {\n  return x + y;\n}\n\nconst numbers = [4, 38];\nadd(...numbers) // 42\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n上面代码中，array.push(...items)和add(...numbers)这两行，都是函数的调用，它们都使用了扩展运算符。该运算符将一个数组，变为参数序列。\n\n扩展运算符与正常的函数参数可以结合使用，非常灵活。\n\nfunction f(v, w, x, y, z) { }\nconst args = [0, 1];\nf(-1, ...args, 2, ...[3]);\n\n\n1\n2\n3\n\n\n扩展运算符后面还可以放置表达式。\n\nconst arr = [\n  ...(x > 0 ? ['a'] : []),\n  'b',\n];\n\n\n1\n2\n3\n4\n\n\n如果扩展运算符后面是一个空数组，则不产生任何效果。\n\n[...[], 1]\n// [1]\n\n\n1\n2\n\n\n注意，只有函数调用时，扩展运算符才可以放在圆括号中，否则会报错。\n\n(...[1, 2])\n// Uncaught SyntaxError: Unexpected number\n\nconsole.log((...[1, 2]))\n// Uncaught SyntaxError: Unexpected number\n\nconsole.log(...[1, 2])\n// 1 2\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n上面三种情况，扩展运算符都放在圆括号里面，但是前两种情况会报错，因为扩展运算符所在的括号不是函数调用。\n\n\n# 替代函数的 apply 方法\n\n由于扩展运算符可以展开数组，所以不再需要apply方法，将数组转为函数的参数了。\n\n// ES5 的写法\nfunction f(x, y, z) {\n  // ...\n}\nvar args = [0, 1, 2];\nf.apply(null, args);\n\n// ES6的写法\nfunction f(x, y, z) {\n  // ...\n}\nlet args = [0, 1, 2];\nf(...args);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n下面是扩展运算符取代apply方法的一个实际的例子，应用Math.max方法，简化求出一个数组最大元素的写法。\n\n// ES5 的写法\nMath.max.apply(null, [14, 3, 77])\n\n// ES6 的写法\nMath.max(...[14, 3, 77])\n\n// 等同于\nMath.max(14, 3, 77);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n上面代码中，由于 JavaScript 不提供求数组最大元素的函数，所以只能套用Math.max函数，将数组转为一个参数序列，然后求最大值。有了扩展运算符以后，就可以直接用Math.max了。\n\n另一个例子是通过push函数，将一个数组添加到另一个数组的尾部。\n\n// ES5的 写法\nvar arr1 = [0, 1, 2];\nvar arr2 = [3, 4, 5];\nArray.prototype.push.apply(arr1, arr2);\n\n// ES6 的写法\nlet arr1 = [0, 1, 2];\nlet arr2 = [3, 4, 5];\narr1.push(...arr2);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n上面代码的 ES5 写法中，push方法的参数不能是数组，所以只好通过apply方法变通使用push方法。有了扩展运算符，就可以直接将数组传入push方法。\n\n下面是另外一个例子。\n\n// ES5\nnew (Date.bind.apply(Date, [null, 2015, 1, 1]))\n// ES6\nnew Date(...[2015, 1, 1]);\n\n\n1\n2\n3\n4\n\n\n\n# 扩展运算符的应用\n\n（1）复制数组\n\n数组是复合的数据类型，直接复制的话，只是复制了指向底层数据结构的指针，而不是克隆一个全新的数组。\n\nconst a1 = [1, 2];\nconst a2 = a1;\n\na2[0] = 2;\na1 // [2, 2]\n\n\n1\n2\n3\n4\n5\n\n\n上面代码中，a2并不是a1的克隆，而是指向同一份数据的另一个指针。修改a2，会直接导致a1的变化。\n\nES5 只能用变通方法来复制数组。\n\nconst a1 = [1, 2];\nconst a2 = a1.concat();\n\na2[0] = 2;\na1 // [1, 2]\n\n\n1\n2\n3\n4\n5\n\n\n上面代码中，a1会返回原数组的克隆，再修改a2就不会对a1产生影响。\n\n扩展运算符提供了复制数组的简便写法。\n\nconst a1 = [1, 2];\n// 写法一\nconst a2 = [...a1];\n// 写法二\nconst [...a2] = a1;\n\n\n1\n2\n3\n4\n5\n\n\n上面的两种写法，a2都是a1的克隆。\n\n（2）合并数组\n\n扩展运算符提供了数组合并的新写法。\n\nconst arr1 = ['a', 'b'];\nconst arr2 = ['c'];\nconst arr3 = ['d', 'e'];\n\n// ES5 的合并数组\narr1.concat(arr2, arr3);\n// [ 'a', 'b', 'c', 'd', 'e' ]\n\n// ES6 的合并数组\n[...arr1, ...arr2, ...arr3]\n// [ 'a', 'b', 'c', 'd', 'e' ]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n不过，这两种方法都是浅拷贝，使用的时候需要注意。\n\nconst a1 = [{ foo: 1 }];\nconst a2 = [{ bar: 2 }];\n\nconst a3 = a1.concat(a2);\nconst a4 = [...a1, ...a2];\n\na3[0] === a1[0] // true\na4[0] === a1[0] // true\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n上面代码中，a3和a4是用两种不同方法合并而成的新数组，但是它们的成员都是对原数组成员的引用，这就是浅拷贝。如果修改了引用指向的值，会同步反映到新数组。\n\n（3）与解构赋值结合\n\n扩展运算符可以与解构赋值结合起来，用于生成数组。\n\n// ES5\na = list[0], rest = list.slice(1)\n// ES6\n[a, ...rest] = list\n\n\n1\n2\n3\n4\n\n\n下面是另外一些例子。\n\nconst [first, ...rest] = [1, 2, 3, 4, 5];\nfirst // 1\nrest  // [2, 3, 4, 5]\n\nconst [first, ...rest] = [];\nfirst // undefined\nrest  // []\n\nconst [first, ...rest] = [\"foo\"];\nfirst  // \"foo\"\nrest   // []\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n如果将扩展运算符用于数组赋值，只能放在参数的最后一位，否则会报错。\n\nconst [...butLast, last] = [1, 2, 3, 4, 5];\n// 报错\n\nconst [first, ...middle, last] = [1, 2, 3, 4, 5];\n// 报错\n\n\n1\n2\n3\n4\n5\n\n\n（4）字符串\n\n扩展运算符还可以将字符串转为真正的数组。\n\n[...'hello']\n// [ \"h\", \"e\", \"l\", \"l\", \"o\" ]\n\n\n1\n2\n\n\n上面的写法，有一个重要的好处，那就是能够正确识别四个字节的 Unicode 字符。\n\n'x\\uD83D\\uDE80y'.length // 4\n[...'x\\uD83D\\uDE80y'].length // 3\n\n\n1\n2\n\n\n上面代码的第一种写法，JavaScript 会将四个字节的 Unicode 字符，识别为 2 个字符，采用扩展运算符就没有这个问题。因此，正确返回字符串长度的函数，可以像下面这样写。\n\nfunction length(str) {\n  return [...str].length;\n}\n\nlength('x\\uD83D\\uDE80y') // 3\n\n\n1\n2\n3\n4\n5\n\n\n凡是涉及到操作四个字节的 Unicode 字符的函数，都有这个问题。因此，最好都用扩展运算符改写。\n\nlet str = 'x\\uD83D\\uDE80y';\n\nstr.split('').reverse().join('')\n// 'y\\uDE80\\uD83Dx'\n\n[...str].reverse().join('')\n// 'y\\uD83D\\uDE80x'\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n上面代码中，如果不用扩展运算符，字符串的reverse操作就不正确。\n\n（5）实现了 Iterator 接口的对象\n\n任何定义了遍历器（Iterator）接口的对象（参阅 Iterator 一章），都可以用扩展运算符转为真正的数组。\n\nlet nodeList = document.querySelectorAll('div');\nlet array = [...nodeList];\n\n\n1\n2\n\n\n上面代码中，querySelectorAll方法返回的是一个NodeList对象。它不是数组，而是一个类似数组的对象。这时，扩展运算符可以将其转为真正的数组，原因就在于NodeList对象实现了 Iterator 。\n\nNumber.prototype[Symbol.iterator] = function*() {\n  let i = 0;\n  let num = this.valueOf();\n  while (i < num) {\n    yield i++;\n  }\n}\n\nconsole.log([...5]) // [0, 1, 2, 3, 4]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n上面代码中，先定义了Number对象的遍历器接口，扩展运算符将5自动转成Number实例以后，就会调用这个接口，就会返回自定义的结果。\n\n对于那些没有部署 Iterator 接口的类似数组的对象，扩展运算符就无法将其转为真正的数组。\n\nlet arrayLike = {\n  '0': 'a',\n  '1': 'b',\n  '2': 'c',\n  length: 3\n};\n\n// TypeError: Cannot spread non-iterable object.\nlet arr = [...arrayLike];\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n上面代码中，arrayLike是一个类似数组的对象，但是没有部署 Iterator 接口，扩展运算符就会报错。这时，可以改为使用Array.from方法将arrayLike转为真正的数组。\n\n（6）Map 和 Set 结构，Generator 函数\n\n扩展运算符内部调用的是数据结构的 Iterator 接口，因此只要具有 Iterator 接口的对象，都可以使用扩展运算符，比如 Map 结构。\n\nlet map = new Map([\n  [1, 'one'],\n  [2, 'two'],\n  [3, 'three'],\n]);\n\nlet arr = [...map.keys()]; // [1, 2, 3]\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\nGenerator 函数运行后，返回一个遍历器对象，因此也可以使用扩展运算符。\n\nconst go = function*(){\n  yield 1;\n  yield 2;\n  yield 3;\n};\n\n[...go()] // [1, 2, 3]\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n上面代码中，变量go是一个 Generator 函数，执行后返回的是一个遍历器对象，对这个遍历器对象执行扩展运算符，就会将内部遍历得到的值，转为一个数组。\n\n如果对没有 Iterator 接口的对象，使用扩展运算符，将会报错。\n\nconst obj = {a: 1, b: 2};\nlet arr = [...obj]; // TypeError: Cannot spread non-iterable object\n\n\n1\n2\n\n\n\n# Array.from()\n\nArray.from方法用于将两类对象转为真正的数组：类似数组的对象（array-like object）和可遍历（iterable）的对象（包括 ES6 新增的数据结构 Set 和 Map）。\n\n下面是一个类似数组的对象，Array.from将它转为真正的数组。\n\nlet arrayLike = {\n    '0': 'a',\n    '1': 'b',\n    '2': 'c',\n    length: 3\n};\n\n// ES5的写法\nvar arr1 = [].slice.call(arrayLike); // ['a', 'b', 'c']\n\n// ES6的写法\nlet arr2 = Array.from(arrayLike); // ['a', 'b', 'c']\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n实际应用中，常见的类似数组的对象是 DOM 操作返回的 NodeList 集合，以及函数内部的arguments对象。Array.from都可以将它们转为真正的数组。\n\n// NodeList对象\nlet ps = document.querySelectorAll('p');\nArray.from(ps).filter(p => {\n  return p.textContent.length > 100;\n});\n\n// arguments对象\nfunction foo() {\n  var args = Array.from(arguments);\n  // ...\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n上面代码中，querySelectorAll方法返回的是一个类似数组的对象，可以将这个对象转为真正的数组，再使用filter方法。\n\n只要是部署了 Iterator 接口的数据结构，Array.from都能将其转为数组。\n\nArray.from('hello')\n// ['h', 'e', 'l', 'l', 'o']\n\nlet namesSet = new Set(['a', 'b'])\nArray.from(namesSet) // ['a', 'b']\n\n\n1\n2\n3\n4\n5\n\n\n上面代码中，字符串和 Set 结构都具有 Iterator 接口，因此可以被Array.from转为真正的数组。\n\n如果参数是一个真正的数组，Array.from会返回一个一模一样的新数组。\n\nArray.from([1, 2, 3])\n// [1, 2, 3]\n\n\n1\n2\n\n\n值得提醒的是，扩展运算符（...）也可以将某些数据结构转为数组。\n\n// arguments对象\nfunction foo() {\n  const args = [...arguments];\n}\n\n// NodeList对象\n[...document.querySelectorAll('div')]\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n扩展运算符背后调用的是遍历器接口（Symbol.iterator），如果一个对象没有部署这个接口，就无法转换。Array.from方法还支持类似数组的对象。所谓类似数组的对象，本质特征只有一点，即必须有length属性。因此，任何有length属性的对象，都可以通过Array.from方法转为数组，而此时扩展运算符就无法转换。\n\nArray.from({ length: 3 });\n// [ undefined, undefined, undefined ]\n\n\n1\n2\n\n\n上面代码中，Array.from返回了一个具有三个成员的数组，每个位置的值都是undefined。扩展运算符转换不了这个对象。\n\n对于还没有部署该方法的浏览器，可以用Array.prototype.slice方法替代。\n\nconst toArray = (() =>\n  Array.from ? Array.from : obj => [].slice.call(obj)\n)();\n\n\n1\n2\n3\n\n\nArray.from还可以接受第二个参数，作用类似于数组的map方法，用来对每个元素进行处理，将处理后的值放入返回的数组。\n\nArray.from(arrayLike, x => x * x);\n// 等同于\nArray.from(arrayLike).map(x => x * x);\n\nArray.from([1, 2, 3], (x) => x * x)\n// [1, 4, 9]\n\n\n1\n2\n3\n4\n5\n6\n\n\n下面的例子是取出一组 DOM 节点的文本内容。\n\nlet spans = document.querySelectorAll('span.name');\n\n// map()\nlet names1 = Array.prototype.map.call(spans, s => s.textContent);\n\n// Array.from()\nlet names2 = Array.from(spans, s => s.textContent)\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n下面的例子将数组中布尔值为false的成员转为0。\n\nArray.from([1, , 2, , 3], (n) => n || 0)\n// [1, 0, 2, 0, 3]\n\n\n1\n2\n\n\n另一个例子是返回各种数据的类型。\n\nfunction typesOf () {\n  return Array.from(arguments, value => typeof value)\n}\ntypesOf(null, [], NaN)\n// ['object', 'object', 'number']\n\n\n1\n2\n3\n4\n5\n\n\n如果map函数里面用到了this关键字，还可以传入Array.from的第三个参数，用来绑定this。\n\nArray.from()可以将各种值转为真正的数组，并且还提供map功能。这实际上意味着，只要有一个原始的数据结构，你就可以先对它的值进行处理，然后转成规范的数组结构，进而就可以使用数量众多的数组方法。\n\nArray.from({ length: 2 }, () => 'jack')\n// ['jack', 'jack']\n\n\n1\n2\n\n\n上面代码中，Array.from的第一个参数指定了第二个参数运行的次数。这种特性可以让该方法的用法变得非常灵活。\n\nArray.from()的另一个应用是，将字符串转为数组，然后返回字符串的长度。因为它能正确处理各种 Unicode 字符，可以避免 JavaScript 将大于\\uFFFF的 Unicode 字符，算作两个字符的 bug。\n\nfunction countSymbols(string) {\n  return Array.from(string).length;\n}\n\n\n1\n2\n3\n\n\n\n# Array.of() 总是返回参数值组成的数组\n\nArray.of方法用于将一组值，转换为数组。\n\nArray.of(3, 11, 8) // [3,11,8]\nArray.of(3) // [3]\nArray.of(3).length // 1\n\n\n1\n2\n3\n\n\n这个方法的主要目的，是弥补数组构造函数Array()的不足。因为参数个数的不同，会导致Array()的行为有差异。\n\nArray() // []\nArray(3) // [, , ,]\nArray(3, 11, 8) // [3, 11, 8]\n\n\n1\n2\n3\n\n\n上面代码中，Array方法没有参数、一个参数、三个参数时，返回结果都不一样。只有当参数个数不少于 2 个时，Array()才会返回由参数组成的新数组。参数个数只有一个时，实际上是指定数组的长度。\n\nArray.of基本上可以用来替代Array()或new Array()，并且不存在由于参数不同而导致的重载。它的行为非常统一。\n\nArray.of() // []\nArray.of(undefined) // [undefined]\nArray.of(1) // [1]\nArray.of(1, 2) // [1, 2]\n\n\n1\n2\n3\n4\n\n\nArray.of总是返回参数值组成的数组。如果没有参数，就返回一个空数组。\n\nArray.of方法可以用下面的代码模拟实现。\n\nfunction ArrayOf(){\n  return [].slice.call(arguments);\n}\n\n\n1\n2\n3\n\n\n\n# 数组实例的 copyWithin()\n\n数组实例的copyWithin()方法，在当前数组内部，将指定位置的成员复制到其他位置（会覆盖原有成员），然后返回当前数组。也就是说，使用这个方法，会修改当前数组。\n\nArray.prototype.copyWithin(target, start = 0, end = this.length)\n\n\n1\n\n\n它接受三个参数。\n\n * target（必需）：从该位置开始替换数据。如果为负值，表示倒数。\n * start（可选）：从该位置开始读取数据，默认为 0。如果为负值，表示从末尾开始计算。\n * end（可选）：到该位置前停止读取数据，默认等于数组长度。如果为负值，表示从末尾开始计算。\n\n这三个参数都应该是数值，如果不是，会自动转为数值。\n\n[1, 2, 3, 4, 5].copyWithin(0, 3)\n// [4, 5, 3, 4, 5]\n\n\n1\n2\n\n\n上面代码表示将从 3 号位直到数组结束的成员（4 和 5），复制到从 0 号位开始的位置，结果覆盖了原来的 1 和 2。\n\n下面是更多例子。\n\n// 将3号位复制到0号位\n[1, 2, 3, 4, 5].copyWithin(0, 3, 4)\n// [4, 2, 3, 4, 5]\n\n// -2相当于3号位，-1相当于4号位\n[1, 2, 3, 4, 5].copyWithin(0, -2, -1)\n// [4, 2, 3, 4, 5]\n\n// 将3号位复制到0号位\n[].copyWithin.call({length: 5, 3: 1}, 0, 3)\n// {0: 1, 3: 1, length: 5}\n\n// 将2号位到数组结束，复制到0号位\nlet i32a = new Int32Array([1, 2, 3, 4, 5]);\ni32a.copyWithin(0, 2);\n// Int32Array [3, 4, 5, 4, 5]\n\n// 对于没有部署 TypedArray 的 copyWithin 方法的平台\n// 需要采用下面的写法\n[].copyWithin.call(new Int32Array([1, 2, 3, 4, 5]), 0, 3, 4);\n// Int32Array [4, 2, 3, 4, 5]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n\n\n\n# 数组实例的 find() 和 findIndex()\n\n数组实例的find方法，用于找出第一个符合条件的数组成员。它的参数是一个回调函数，所有数组成员依次执行该回调函数，直到找出第一个返回值为true的成员，然后返回该成员。如果没有符合条件的成员，则返回undefined。\n\n[1, 4, -5, 10].find((n) => n < 0)\n// -5\n\n\n1\n2\n\n\n上面代码找出数组中第一个小于 0 的成员。\n\n[1, 5, 10, 15].find(function(value, index, arr) {\n  return value > 9;\n}) // 10\n\n\n1\n2\n3\n\n\n上面代码中，find方法的回调函数可以接受三个参数，依次为当前的值、当前的位置和原数组。\n\n数组实例的findIndex方法的用法与find方法非常类似，返回第一个符合条件的数组成员的位置，如果所有成员都不符合条件，则返回-1。\n\n[1, 5, 10, 15].findIndex(function(value, index, arr) {\n  return value > 9;\n}) // 2\n\n\n1\n2\n3\n\n\n这两个方法都可以接受第二个参数，用来绑定回调函数的this对象。\n\nfunction f(v){\n  return v > this.age;\n}\nlet person = {name: 'John', age: 20};\n[10, 12, 26, 15].find(f, person);    // 26\n\n\n1\n2\n3\n4\n5\n\n\n上面的代码中，find函数接收了第二个参数person对象，回调函数中的this对象指向person对象。\n\n另外，这两个方法都可以发现NaN，弥补了数组的indexOf方法的不足。\n\n[NaN].indexOf(NaN)\n// -1\n\n[NaN].findIndex(y => Object.is(NaN, y))\n// 0\n\n\n1\n2\n3\n4\n5\n\n\n上面代码中，indexOf方法无法识别数组的NaN成员，但是findIndex方法可以借助Object.is方法做到。\n\n\n# 数组实例的 fill()\n\nfill方法使用给定值，填充一个数组。\n\n['a', 'b', 'c'].fill(7)\n// [7, 7, 7]\n\nnew Array(3).fill(7)\n// [7, 7, 7]\n\n\n1\n2\n3\n4\n5\n\n\n上面代码表明，fill方法用于空数组的初始化非常方便。数组中已有的元素，会被全部抹去。\n\nfill方法还可以接受第二个和第三个参数，用于指定填充的起始位置和结束位置。\n\n['a', 'b', 'c'].fill(7, 1, 2)\n// ['a', 7, 'c']\n\n\n1\n2\n\n\n上面代码表示，fill方法从 1 号位开始，向原数组填充 7，到 2 号位之前结束。\n\n注意，如果填充的类型为对象，那么被赋值的是同一个内存地址的对象，而不是深拷贝对象。\n\nlet arr = new Array(3).fill({name: \"Mike\"});\narr[0].name = \"Ben\";\narr\n// [{name: \"Ben\"}, {name: \"Ben\"}, {name: \"Ben\"}]\n\nlet arr = new Array(3).fill([]);\narr[0].push(5);\narr\n// [[5], [5], [5]]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n\n# 数组实例的 entries()，keys() 和 values()\n\nES6 提供三个新的方法——entries()，keys()和values()——用于遍历数组。它们都返回一个遍历器对象（详见《Iterator》一章），可以用for...of循环进行遍历，唯一的区别是keys()是对键名的遍历、values()是对键值的遍历，entries()是对键值对的遍历。\n\nfor (let index of ['a', 'b'].keys()) {\n  console.log(index);\n}\n// 0\n// 1\n\nfor (let elem of ['a', 'b'].values()) {\n  console.log(elem);\n}\n// 'a'\n// 'b'\n\nfor (let [index, elem] of ['a', 'b'].entries()) {\n  console.log(index, elem);\n}\n// 0 \"a\"\n// 1 \"b\"\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n如果不使用for...of循环，可以手动调用遍历器对象的next方法，进行遍历。\n\nlet letter = ['a', 'b', 'c'];\nlet entries = letter.entries();\nconsole.log(entries.next().value); // [0, 'a']\nconsole.log(entries.next().value); // [1, 'b']\nconsole.log(entries.next().value); // [2, 'c']\n\n\n1\n2\n3\n4\n5\n\n\n\n# 数组实例的 includes()\n\nArray.prototype.includes方法返回一个布尔值，表示某个数组是否包含给定的值，与字符串的includes方法类似。ES2016 引入了该方法。\n\n[1, 2, 3].includes(2)     // true\n[1, 2, 3].includes(4)     // false\n[1, 2, NaN].includes(NaN) // true\n\n\n1\n2\n3\n\n\n该方法的第二个参数表示搜索的起始位置，默认为0。如果第二个参数为负数，则表示倒数的位置，如果这时它大于数组长度（比如第二个参数为-4，但数组长度为3），则会重置为从0开始。\n\n[1, 2, 3].includes(3, 3);  // false\n[1, 2, 3].includes(3, -1); // true\n\n\n1\n2\n\n\n没有该方法之前，我们通常使用数组的indexOf方法，检查是否包含某个值。\n\nif (arr.indexOf(el) !== -1) {\n  // ...\n}\n\n\n1\n2\n3\n\n\nindexOf方法有两个缺点，一是不够语义化，它的含义是找到参数值的第一个出现位置，所以要去比较是否不等于-1，表达起来不够直观。二是，它内部使用严格相等运算符（===）进行判断，这会导致对NaN的误判。\n\n[NaN].indexOf(NaN)\n// -1\n\n\n1\n2\n\n\nincludes使用的是不一样的判断算法，就没有这个问题。\n\n[NaN].includes(NaN)\n// true\n\n\n1\n2\n\n\n下面代码用来检查当前环境是否支持该方法，如果不支持，部署一个简易的替代版本。\n\nconst contains = (() =>\n  Array.prototype.includes\n    ? (arr, value) => arr.includes(value)\n    : (arr, value) => arr.some(el => el === value)\n)();\ncontains(['foo', 'bar'], 'baz'); // => false\n\n\n1\n2\n3\n4\n5\n6\n\n\n另外，Map 和 Set 数据结构有一个has方法，需要注意与includes区分。\n\n * Map 结构的has方法，是用来查找键名的，比如Map.prototype.has(key)、WeakMap.prototype.has(key)、Reflect.has(target, propertyKey)。\n * Set 结构的has方法，是用来查找值的，比如Set.prototype.has(value)、WeakSet.prototype.has(value)。\n\n\n# 数组实例的 flat()，flatMap()\n\n数组的成员有时还是数组，Array.prototype.flat()用于将嵌套的数组“拉平”，变成一维的数组。该方法返回一个新数组，对原数据没有影响。\n\n[1, 2, [3, 4]].flat()\n// [1, 2, 3, 4]\n\n\n1\n2\n\n\n上面代码中，原数组的成员里面有一个数组，flat()方法将子数组的成员取出来，添加在原来的位置。\n\nflat()默认只会“拉平”一层，如果想要“拉平”多层的嵌套数组，可以将flat()方法的参数写成一个整数，表示想要拉平的层数，默认为1。\n\n[1, 2, [3, [4, 5]]].flat()\n// [1, 2, 3, [4, 5]]\n\n[1, 2, [3, [4, 5]]].flat(2)\n// [1, 2, 3, 4, 5]\n\n\n1\n2\n3\n4\n5\n\n\n上面代码中，flat()的参数为2，表示要“拉平”两层的嵌套数组。\n\n如果不管有多少层嵌套，都要转成一维数组，可以用Infinity关键字作为参数。\n\n[1, [2, [3]]].flat(Infinity)\n// [1, 2, 3]\n\n\n1\n2\n\n\n如果原数组有空位，flat()方法会跳过空位。\n\n[1, 2, , 4, 5].flat()\n// [1, 2, 4, 5]\n\n\n1\n2\n\n\nflatMap()方法对原数组的每个成员执行一个函数（相当于执行Array.prototype.map()），然后对返回值组成的数组执行flat()方法。该方法返回一个新数组，不改变原数组。\n\n// 相当于 [2, 3, 4].map(x => [x, x*2]).flat()\n[2, 3, 4].flatMap((x) => [x, x * 2])\n// [2, 4, 3, 6, 4, 8]\n\n\n1\n2\n3\n\n\nflatMap()只能展开一层数组。\n\n// 相当于 [[[2]], [[4]], [[6]], [[8]]].flat()\n[1, 2, 3, 4].flatMap(x => [[x * 2]])\n// [[2], [4], [6], [8]]\n\n\n1\n2\n3\n\n\n上面代码中，遍历函数返回的是一个双层的数组，但是默认只能展开一层，因此flatMap()返回的还是一个嵌套数组。\n\nflatMap()方法的参数是一个遍历函数，该函数可以接受三个参数，分别是当前数组成员、当前数组成员的位置（从零开始）、原数组。\n\narr.flatMap(function callback(currentValue[, index[, array]]) {\n  // ...\n}[, thisArg])\n\n\n1\n2\n3\n\n\nflatMap()方法还可以有第二个参数，用来绑定遍历函数里面的this。\n\n\n# 数组的空位\n\n数组的空位指，数组的某一个位置没有任何值。比如，Array构造函数返回的数组都是空位。\n\nArray(3) // [, , ,]\n\n\n1\n\n\n上面代码中，Array(3)返回一个具有 3 个空位的数组。\n\n注意，空位不是undefined，一个位置的值等于undefined，依然是有值的。空位是没有任何值，in运算符可以说明这一点。\n\n0 in [undefined, undefined, undefined] // true\n0 in [, , ,] // false\n\n\n1\n2\n\n\n上面代码说明，第一个数组的 0 号位置是有值的，第二个数组的 0 号位置没有值。\n\nES5 对空位的处理，已经很不一致了，大多数情况下会忽略空位。\n\n * forEach(), filter(), reduce(), every() 和some()都会跳过空位。\n * map()会跳过空位，但会保留这个值\n * join()和toString()会将空位视为undefined，而undefined和null会被处理成空字符串。\n\n// forEach方法\n[,'a'].forEach((x,i) => console.log(i)); // 1\n\n// filter方法\n['a',,'b'].filter(x => true) // ['a','b']\n\n// every方法\n[,'a'].every(x => x==='a') // true\n\n// reduce方法\n[1,,2].reduce((x,y) => x+y) // 3\n\n// some方法\n[,'a'].some(x => x !== 'a') // false\n\n// map方法\n[,'a'].map(x => 1) // [,1]\n\n// join方法\n[,'a',undefined,null].join('#') // \"#a##\"\n\n// toString方法\n[,'a',undefined,null].toString() // \",a,,\"\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n\n\nES6 则是明确将空位转为undefined。\n\nArray.from方法会将数组的空位，转为undefined，也就是说，这个方法不会忽略空位。\n\nArray.from(['a',,'b'])\n// [ \"a\", undefined, \"b\" ]\n\n\n1\n2\n\n\n扩展运算符（...）也会将空位转为undefined。\n\n[...['a',,'b']]\n// [ \"a\", undefined, \"b\" ]\n\n\n1\n2\n\n\ncopyWithin()会连空位一起拷贝。\n\n[,'a','b',,].copyWithin(2,0) // [,\"a\",,\"a\"]\n\n\n1\n\n\nfill()会将空位视为正常的数组位置。\n\nnew Array(3).fill('a') // [\"a\",\"a\",\"a\"]\n\n\n1\n\n\nfor...of循环也会遍历空位。\n\nlet arr = [, ,];\nfor (let i of arr) {\n  console.log(1);\n}\n// 1\n// 1\n\n\n1\n2\n3\n4\n5\n6\n\n\n上面代码中，数组arr有两个空位，for...of并没有忽略它们。如果改成map方法遍历，空位是会跳过的。\n\nentries()、keys()、values()、find()和findIndex()会将空位处理成undefined。\n\n// entries()\n[...[,'a'].entries()] // [[0,undefined], [1,\"a\"]]\n\n// keys()\n[...[,'a'].keys()] // [0,1]\n\n// values()\n[...[,'a'].values()] // [undefined,\"a\"]\n\n// find()\n[,'a'].find(x => true) // undefined\n\n// findIndex()\n[,'a'].findIndex(x => true) // 0\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n由于空位的处理规则非常不统一，所以建议避免出现空位。\n\n\n# Array.prototype.sort() 的排序稳定性\n\n排序稳定性（stable sorting）是排序算法的重要属性，指的是排序关键字相同的项目，排序前后的顺序不变。\n\nconst arr = [\n  'peach',\n  'straw',\n  'apple',\n  'spork'\n];\n\nconst stableSorting = (s1, s2) => {\n  if (s1[0] < s2[0]) return -1;\n  return 1;\n};\n\narr.sort(stableSorting)\n// [\"apple\", \"peach\", \"straw\", \"spork\"]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n上面代码对数组arr按照首字母进行排序。排序结果中，straw在spork的前面，跟原始顺序一致，所以排序算法stableSorting是稳定排序。\n\nconst unstableSorting = (s1, s2) => {\n  if (s1[0] <= s2[0]) return -1;\n  return 1;\n};\n\narr.sort(unstableSorting)\n// [\"apple\", \"peach\", \"spork\", \"straw\"]\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n上面代码中，排序结果是spork在straw前面，跟原始顺序相反，所以排序算法unstableSorting是不稳定的。\n\n常见的排序算法之中，插入排序、合并排序、冒泡排序等都是稳定的，堆排序、快速排序等是不稳定的。不稳定排序的主要缺点是，多重排序时可能会产生问题。假设有一个姓和名的列表，要求按照“姓氏为主要关键字，名字为次要关键字”进行排序。开发者可能会先按名字排序，再按姓氏进行排序。如果排序算法是稳定的，这样就可以达到“先姓氏，后名字”的排序效果。如果是不稳定的，就不行。\n\n早先的 ECMAScript 没有规定，Array.prototype.sort()的默认排序算法是否稳定，留给浏览器自己决定，这导致某些实现是不稳定的。ES2019 明确规定，Array.prototype.sort()的默认排序算法必须稳定。这个规定已经做到了，现在 JavaScript 各个主要实现的默认排序算法都是稳定的。",normalizedContent:"# 数组的扩展\n\n\n# 扩展运算符\n\n\n# 含义\n\n扩展运算符（spread）是三个点（...）。它好比 rest 参数的逆运算，将一个数组转为用逗号分隔的参数序列。\n\nconsole.log(...[1, 2, 3])\n// 1 2 3\n\nconsole.log(1, ...[2, 3, 4], 5)\n// 1 2 3 4 5\n\n[...document.queryselectorall('div')]\n// [<div>, <div>, <div>]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n该运算符主要用于函数调用。\n\nfunction push(array, ...items) {\n  array.push(...items);\n}\n\nfunction add(x, y) {\n  return x + y;\n}\n\nconst numbers = [4, 38];\nadd(...numbers) // 42\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n上面代码中，array.push(...items)和add(...numbers)这两行，都是函数的调用，它们都使用了扩展运算符。该运算符将一个数组，变为参数序列。\n\n扩展运算符与正常的函数参数可以结合使用，非常灵活。\n\nfunction f(v, w, x, y, z) { }\nconst args = [0, 1];\nf(-1, ...args, 2, ...[3]);\n\n\n1\n2\n3\n\n\n扩展运算符后面还可以放置表达式。\n\nconst arr = [\n  ...(x > 0 ? ['a'] : []),\n  'b',\n];\n\n\n1\n2\n3\n4\n\n\n如果扩展运算符后面是一个空数组，则不产生任何效果。\n\n[...[], 1]\n// [1]\n\n\n1\n2\n\n\n注意，只有函数调用时，扩展运算符才可以放在圆括号中，否则会报错。\n\n(...[1, 2])\n// uncaught syntaxerror: unexpected number\n\nconsole.log((...[1, 2]))\n// uncaught syntaxerror: unexpected number\n\nconsole.log(...[1, 2])\n// 1 2\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n上面三种情况，扩展运算符都放在圆括号里面，但是前两种情况会报错，因为扩展运算符所在的括号不是函数调用。\n\n\n# 替代函数的 apply 方法\n\n由于扩展运算符可以展开数组，所以不再需要apply方法，将数组转为函数的参数了。\n\n// es5 的写法\nfunction f(x, y, z) {\n  // ...\n}\nvar args = [0, 1, 2];\nf.apply(null, args);\n\n// es6的写法\nfunction f(x, y, z) {\n  // ...\n}\nlet args = [0, 1, 2];\nf(...args);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n下面是扩展运算符取代apply方法的一个实际的例子，应用math.max方法，简化求出一个数组最大元素的写法。\n\n// es5 的写法\nmath.max.apply(null, [14, 3, 77])\n\n// es6 的写法\nmath.max(...[14, 3, 77])\n\n// 等同于\nmath.max(14, 3, 77);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n上面代码中，由于 javascript 不提供求数组最大元素的函数，所以只能套用math.max函数，将数组转为一个参数序列，然后求最大值。有了扩展运算符以后，就可以直接用math.max了。\n\n另一个例子是通过push函数，将一个数组添加到另一个数组的尾部。\n\n// es5的 写法\nvar arr1 = [0, 1, 2];\nvar arr2 = [3, 4, 5];\narray.prototype.push.apply(arr1, arr2);\n\n// es6 的写法\nlet arr1 = [0, 1, 2];\nlet arr2 = [3, 4, 5];\narr1.push(...arr2);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n上面代码的 es5 写法中，push方法的参数不能是数组，所以只好通过apply方法变通使用push方法。有了扩展运算符，就可以直接将数组传入push方法。\n\n下面是另外一个例子。\n\n// es5\nnew (date.bind.apply(date, [null, 2015, 1, 1]))\n// es6\nnew date(...[2015, 1, 1]);\n\n\n1\n2\n3\n4\n\n\n\n# 扩展运算符的应用\n\n（1）复制数组\n\n数组是复合的数据类型，直接复制的话，只是复制了指向底层数据结构的指针，而不是克隆一个全新的数组。\n\nconst a1 = [1, 2];\nconst a2 = a1;\n\na2[0] = 2;\na1 // [2, 2]\n\n\n1\n2\n3\n4\n5\n\n\n上面代码中，a2并不是a1的克隆，而是指向同一份数据的另一个指针。修改a2，会直接导致a1的变化。\n\nes5 只能用变通方法来复制数组。\n\nconst a1 = [1, 2];\nconst a2 = a1.concat();\n\na2[0] = 2;\na1 // [1, 2]\n\n\n1\n2\n3\n4\n5\n\n\n上面代码中，a1会返回原数组的克隆，再修改a2就不会对a1产生影响。\n\n扩展运算符提供了复制数组的简便写法。\n\nconst a1 = [1, 2];\n// 写法一\nconst a2 = [...a1];\n// 写法二\nconst [...a2] = a1;\n\n\n1\n2\n3\n4\n5\n\n\n上面的两种写法，a2都是a1的克隆。\n\n（2）合并数组\n\n扩展运算符提供了数组合并的新写法。\n\nconst arr1 = ['a', 'b'];\nconst arr2 = ['c'];\nconst arr3 = ['d', 'e'];\n\n// es5 的合并数组\narr1.concat(arr2, arr3);\n// [ 'a', 'b', 'c', 'd', 'e' ]\n\n// es6 的合并数组\n[...arr1, ...arr2, ...arr3]\n// [ 'a', 'b', 'c', 'd', 'e' ]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n不过，这两种方法都是浅拷贝，使用的时候需要注意。\n\nconst a1 = [{ foo: 1 }];\nconst a2 = [{ bar: 2 }];\n\nconst a3 = a1.concat(a2);\nconst a4 = [...a1, ...a2];\n\na3[0] === a1[0] // true\na4[0] === a1[0] // true\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n上面代码中，a3和a4是用两种不同方法合并而成的新数组，但是它们的成员都是对原数组成员的引用，这就是浅拷贝。如果修改了引用指向的值，会同步反映到新数组。\n\n（3）与解构赋值结合\n\n扩展运算符可以与解构赋值结合起来，用于生成数组。\n\n// es5\na = list[0], rest = list.slice(1)\n// es6\n[a, ...rest] = list\n\n\n1\n2\n3\n4\n\n\n下面是另外一些例子。\n\nconst [first, ...rest] = [1, 2, 3, 4, 5];\nfirst // 1\nrest  // [2, 3, 4, 5]\n\nconst [first, ...rest] = [];\nfirst // undefined\nrest  // []\n\nconst [first, ...rest] = [\"foo\"];\nfirst  // \"foo\"\nrest   // []\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n如果将扩展运算符用于数组赋值，只能放在参数的最后一位，否则会报错。\n\nconst [...butlast, last] = [1, 2, 3, 4, 5];\n// 报错\n\nconst [first, ...middle, last] = [1, 2, 3, 4, 5];\n// 报错\n\n\n1\n2\n3\n4\n5\n\n\n（4）字符串\n\n扩展运算符还可以将字符串转为真正的数组。\n\n[...'hello']\n// [ \"h\", \"e\", \"l\", \"l\", \"o\" ]\n\n\n1\n2\n\n\n上面的写法，有一个重要的好处，那就是能够正确识别四个字节的 unicode 字符。\n\n'x\\ud83d\\ude80y'.length // 4\n[...'x\\ud83d\\ude80y'].length // 3\n\n\n1\n2\n\n\n上面代码的第一种写法，javascript 会将四个字节的 unicode 字符，识别为 2 个字符，采用扩展运算符就没有这个问题。因此，正确返回字符串长度的函数，可以像下面这样写。\n\nfunction length(str) {\n  return [...str].length;\n}\n\nlength('x\\ud83d\\ude80y') // 3\n\n\n1\n2\n3\n4\n5\n\n\n凡是涉及到操作四个字节的 unicode 字符的函数，都有这个问题。因此，最好都用扩展运算符改写。\n\nlet str = 'x\\ud83d\\ude80y';\n\nstr.split('').reverse().join('')\n// 'y\\ude80\\ud83dx'\n\n[...str].reverse().join('')\n// 'y\\ud83d\\ude80x'\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n上面代码中，如果不用扩展运算符，字符串的reverse操作就不正确。\n\n（5）实现了 iterator 接口的对象\n\n任何定义了遍历器（iterator）接口的对象（参阅 iterator 一章），都可以用扩展运算符转为真正的数组。\n\nlet nodelist = document.queryselectorall('div');\nlet array = [...nodelist];\n\n\n1\n2\n\n\n上面代码中，queryselectorall方法返回的是一个nodelist对象。它不是数组，而是一个类似数组的对象。这时，扩展运算符可以将其转为真正的数组，原因就在于nodelist对象实现了 iterator 。\n\nnumber.prototype[symbol.iterator] = function*() {\n  let i = 0;\n  let num = this.valueof();\n  while (i < num) {\n    yield i++;\n  }\n}\n\nconsole.log([...5]) // [0, 1, 2, 3, 4]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n上面代码中，先定义了number对象的遍历器接口，扩展运算符将5自动转成number实例以后，就会调用这个接口，就会返回自定义的结果。\n\n对于那些没有部署 iterator 接口的类似数组的对象，扩展运算符就无法将其转为真正的数组。\n\nlet arraylike = {\n  '0': 'a',\n  '1': 'b',\n  '2': 'c',\n  length: 3\n};\n\n// typeerror: cannot spread non-iterable object.\nlet arr = [...arraylike];\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n上面代码中，arraylike是一个类似数组的对象，但是没有部署 iterator 接口，扩展运算符就会报错。这时，可以改为使用array.from方法将arraylike转为真正的数组。\n\n（6）map 和 set 结构，generator 函数\n\n扩展运算符内部调用的是数据结构的 iterator 接口，因此只要具有 iterator 接口的对象，都可以使用扩展运算符，比如 map 结构。\n\nlet map = new map([\n  [1, 'one'],\n  [2, 'two'],\n  [3, 'three'],\n]);\n\nlet arr = [...map.keys()]; // [1, 2, 3]\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\ngenerator 函数运行后，返回一个遍历器对象，因此也可以使用扩展运算符。\n\nconst go = function*(){\n  yield 1;\n  yield 2;\n  yield 3;\n};\n\n[...go()] // [1, 2, 3]\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n上面代码中，变量go是一个 generator 函数，执行后返回的是一个遍历器对象，对这个遍历器对象执行扩展运算符，就会将内部遍历得到的值，转为一个数组。\n\n如果对没有 iterator 接口的对象，使用扩展运算符，将会报错。\n\nconst obj = {a: 1, b: 2};\nlet arr = [...obj]; // typeerror: cannot spread non-iterable object\n\n\n1\n2\n\n\n\n# array.from()\n\narray.from方法用于将两类对象转为真正的数组：类似数组的对象（array-like object）和可遍历（iterable）的对象（包括 es6 新增的数据结构 set 和 map）。\n\n下面是一个类似数组的对象，array.from将它转为真正的数组。\n\nlet arraylike = {\n    '0': 'a',\n    '1': 'b',\n    '2': 'c',\n    length: 3\n};\n\n// es5的写法\nvar arr1 = [].slice.call(arraylike); // ['a', 'b', 'c']\n\n// es6的写法\nlet arr2 = array.from(arraylike); // ['a', 'b', 'c']\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n实际应用中，常见的类似数组的对象是 dom 操作返回的 nodelist 集合，以及函数内部的arguments对象。array.from都可以将它们转为真正的数组。\n\n// nodelist对象\nlet ps = document.queryselectorall('p');\narray.from(ps).filter(p => {\n  return p.textcontent.length > 100;\n});\n\n// arguments对象\nfunction foo() {\n  var args = array.from(arguments);\n  // ...\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n上面代码中，queryselectorall方法返回的是一个类似数组的对象，可以将这个对象转为真正的数组，再使用filter方法。\n\n只要是部署了 iterator 接口的数据结构，array.from都能将其转为数组。\n\narray.from('hello')\n// ['h', 'e', 'l', 'l', 'o']\n\nlet namesset = new set(['a', 'b'])\narray.from(namesset) // ['a', 'b']\n\n\n1\n2\n3\n4\n5\n\n\n上面代码中，字符串和 set 结构都具有 iterator 接口，因此可以被array.from转为真正的数组。\n\n如果参数是一个真正的数组，array.from会返回一个一模一样的新数组。\n\narray.from([1, 2, 3])\n// [1, 2, 3]\n\n\n1\n2\n\n\n值得提醒的是，扩展运算符（...）也可以将某些数据结构转为数组。\n\n// arguments对象\nfunction foo() {\n  const args = [...arguments];\n}\n\n// nodelist对象\n[...document.queryselectorall('div')]\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n扩展运算符背后调用的是遍历器接口（symbol.iterator），如果一个对象没有部署这个接口，就无法转换。array.from方法还支持类似数组的对象。所谓类似数组的对象，本质特征只有一点，即必须有length属性。因此，任何有length属性的对象，都可以通过array.from方法转为数组，而此时扩展运算符就无法转换。\n\narray.from({ length: 3 });\n// [ undefined, undefined, undefined ]\n\n\n1\n2\n\n\n上面代码中，array.from返回了一个具有三个成员的数组，每个位置的值都是undefined。扩展运算符转换不了这个对象。\n\n对于还没有部署该方法的浏览器，可以用array.prototype.slice方法替代。\n\nconst toarray = (() =>\n  array.from ? array.from : obj => [].slice.call(obj)\n)();\n\n\n1\n2\n3\n\n\narray.from还可以接受第二个参数，作用类似于数组的map方法，用来对每个元素进行处理，将处理后的值放入返回的数组。\n\narray.from(arraylike, x => x * x);\n// 等同于\narray.from(arraylike).map(x => x * x);\n\narray.from([1, 2, 3], (x) => x * x)\n// [1, 4, 9]\n\n\n1\n2\n3\n4\n5\n6\n\n\n下面的例子是取出一组 dom 节点的文本内容。\n\nlet spans = document.queryselectorall('span.name');\n\n// map()\nlet names1 = array.prototype.map.call(spans, s => s.textcontent);\n\n// array.from()\nlet names2 = array.from(spans, s => s.textcontent)\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n下面的例子将数组中布尔值为false的成员转为0。\n\narray.from([1, , 2, , 3], (n) => n || 0)\n// [1, 0, 2, 0, 3]\n\n\n1\n2\n\n\n另一个例子是返回各种数据的类型。\n\nfunction typesof () {\n  return array.from(arguments, value => typeof value)\n}\ntypesof(null, [], nan)\n// ['object', 'object', 'number']\n\n\n1\n2\n3\n4\n5\n\n\n如果map函数里面用到了this关键字，还可以传入array.from的第三个参数，用来绑定this。\n\narray.from()可以将各种值转为真正的数组，并且还提供map功能。这实际上意味着，只要有一个原始的数据结构，你就可以先对它的值进行处理，然后转成规范的数组结构，进而就可以使用数量众多的数组方法。\n\narray.from({ length: 2 }, () => 'jack')\n// ['jack', 'jack']\n\n\n1\n2\n\n\n上面代码中，array.from的第一个参数指定了第二个参数运行的次数。这种特性可以让该方法的用法变得非常灵活。\n\narray.from()的另一个应用是，将字符串转为数组，然后返回字符串的长度。因为它能正确处理各种 unicode 字符，可以避免 javascript 将大于\\uffff的 unicode 字符，算作两个字符的 bug。\n\nfunction countsymbols(string) {\n  return array.from(string).length;\n}\n\n\n1\n2\n3\n\n\n\n# array.of() 总是返回参数值组成的数组\n\narray.of方法用于将一组值，转换为数组。\n\narray.of(3, 11, 8) // [3,11,8]\narray.of(3) // [3]\narray.of(3).length // 1\n\n\n1\n2\n3\n\n\n这个方法的主要目的，是弥补数组构造函数array()的不足。因为参数个数的不同，会导致array()的行为有差异。\n\narray() // []\narray(3) // [, , ,]\narray(3, 11, 8) // [3, 11, 8]\n\n\n1\n2\n3\n\n\n上面代码中，array方法没有参数、一个参数、三个参数时，返回结果都不一样。只有当参数个数不少于 2 个时，array()才会返回由参数组成的新数组。参数个数只有一个时，实际上是指定数组的长度。\n\narray.of基本上可以用来替代array()或new array()，并且不存在由于参数不同而导致的重载。它的行为非常统一。\n\narray.of() // []\narray.of(undefined) // [undefined]\narray.of(1) // [1]\narray.of(1, 2) // [1, 2]\n\n\n1\n2\n3\n4\n\n\narray.of总是返回参数值组成的数组。如果没有参数，就返回一个空数组。\n\narray.of方法可以用下面的代码模拟实现。\n\nfunction arrayof(){\n  return [].slice.call(arguments);\n}\n\n\n1\n2\n3\n\n\n\n# 数组实例的 copywithin()\n\n数组实例的copywithin()方法，在当前数组内部，将指定位置的成员复制到其他位置（会覆盖原有成员），然后返回当前数组。也就是说，使用这个方法，会修改当前数组。\n\narray.prototype.copywithin(target, start = 0, end = this.length)\n\n\n1\n\n\n它接受三个参数。\n\n * target（必需）：从该位置开始替换数据。如果为负值，表示倒数。\n * start（可选）：从该位置开始读取数据，默认为 0。如果为负值，表示从末尾开始计算。\n * end（可选）：到该位置前停止读取数据，默认等于数组长度。如果为负值，表示从末尾开始计算。\n\n这三个参数都应该是数值，如果不是，会自动转为数值。\n\n[1, 2, 3, 4, 5].copywithin(0, 3)\n// [4, 5, 3, 4, 5]\n\n\n1\n2\n\n\n上面代码表示将从 3 号位直到数组结束的成员（4 和 5），复制到从 0 号位开始的位置，结果覆盖了原来的 1 和 2。\n\n下面是更多例子。\n\n// 将3号位复制到0号位\n[1, 2, 3, 4, 5].copywithin(0, 3, 4)\n// [4, 2, 3, 4, 5]\n\n// -2相当于3号位，-1相当于4号位\n[1, 2, 3, 4, 5].copywithin(0, -2, -1)\n// [4, 2, 3, 4, 5]\n\n// 将3号位复制到0号位\n[].copywithin.call({length: 5, 3: 1}, 0, 3)\n// {0: 1, 3: 1, length: 5}\n\n// 将2号位到数组结束，复制到0号位\nlet i32a = new int32array([1, 2, 3, 4, 5]);\ni32a.copywithin(0, 2);\n// int32array [3, 4, 5, 4, 5]\n\n// 对于没有部署 typedarray 的 copywithin 方法的平台\n// 需要采用下面的写法\n[].copywithin.call(new int32array([1, 2, 3, 4, 5]), 0, 3, 4);\n// int32array [4, 2, 3, 4, 5]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n\n\n\n# 数组实例的 find() 和 findindex()\n\n数组实例的find方法，用于找出第一个符合条件的数组成员。它的参数是一个回调函数，所有数组成员依次执行该回调函数，直到找出第一个返回值为true的成员，然后返回该成员。如果没有符合条件的成员，则返回undefined。\n\n[1, 4, -5, 10].find((n) => n < 0)\n// -5\n\n\n1\n2\n\n\n上面代码找出数组中第一个小于 0 的成员。\n\n[1, 5, 10, 15].find(function(value, index, arr) {\n  return value > 9;\n}) // 10\n\n\n1\n2\n3\n\n\n上面代码中，find方法的回调函数可以接受三个参数，依次为当前的值、当前的位置和原数组。\n\n数组实例的findindex方法的用法与find方法非常类似，返回第一个符合条件的数组成员的位置，如果所有成员都不符合条件，则返回-1。\n\n[1, 5, 10, 15].findindex(function(value, index, arr) {\n  return value > 9;\n}) // 2\n\n\n1\n2\n3\n\n\n这两个方法都可以接受第二个参数，用来绑定回调函数的this对象。\n\nfunction f(v){\n  return v > this.age;\n}\nlet person = {name: 'john', age: 20};\n[10, 12, 26, 15].find(f, person);    // 26\n\n\n1\n2\n3\n4\n5\n\n\n上面的代码中，find函数接收了第二个参数person对象，回调函数中的this对象指向person对象。\n\n另外，这两个方法都可以发现nan，弥补了数组的indexof方法的不足。\n\n[nan].indexof(nan)\n// -1\n\n[nan].findindex(y => object.is(nan, y))\n// 0\n\n\n1\n2\n3\n4\n5\n\n\n上面代码中，indexof方法无法识别数组的nan成员，但是findindex方法可以借助object.is方法做到。\n\n\n# 数组实例的 fill()\n\nfill方法使用给定值，填充一个数组。\n\n['a', 'b', 'c'].fill(7)\n// [7, 7, 7]\n\nnew array(3).fill(7)\n// [7, 7, 7]\n\n\n1\n2\n3\n4\n5\n\n\n上面代码表明，fill方法用于空数组的初始化非常方便。数组中已有的元素，会被全部抹去。\n\nfill方法还可以接受第二个和第三个参数，用于指定填充的起始位置和结束位置。\n\n['a', 'b', 'c'].fill(7, 1, 2)\n// ['a', 7, 'c']\n\n\n1\n2\n\n\n上面代码表示，fill方法从 1 号位开始，向原数组填充 7，到 2 号位之前结束。\n\n注意，如果填充的类型为对象，那么被赋值的是同一个内存地址的对象，而不是深拷贝对象。\n\nlet arr = new array(3).fill({name: \"mike\"});\narr[0].name = \"ben\";\narr\n// [{name: \"ben\"}, {name: \"ben\"}, {name: \"ben\"}]\n\nlet arr = new array(3).fill([]);\narr[0].push(5);\narr\n// [[5], [5], [5]]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n\n# 数组实例的 entries()，keys() 和 values()\n\nes6 提供三个新的方法——entries()，keys()和values()——用于遍历数组。它们都返回一个遍历器对象（详见《iterator》一章），可以用for...of循环进行遍历，唯一的区别是keys()是对键名的遍历、values()是对键值的遍历，entries()是对键值对的遍历。\n\nfor (let index of ['a', 'b'].keys()) {\n  console.log(index);\n}\n// 0\n// 1\n\nfor (let elem of ['a', 'b'].values()) {\n  console.log(elem);\n}\n// 'a'\n// 'b'\n\nfor (let [index, elem] of ['a', 'b'].entries()) {\n  console.log(index, elem);\n}\n// 0 \"a\"\n// 1 \"b\"\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n如果不使用for...of循环，可以手动调用遍历器对象的next方法，进行遍历。\n\nlet letter = ['a', 'b', 'c'];\nlet entries = letter.entries();\nconsole.log(entries.next().value); // [0, 'a']\nconsole.log(entries.next().value); // [1, 'b']\nconsole.log(entries.next().value); // [2, 'c']\n\n\n1\n2\n3\n4\n5\n\n\n\n# 数组实例的 includes()\n\narray.prototype.includes方法返回一个布尔值，表示某个数组是否包含给定的值，与字符串的includes方法类似。es2016 引入了该方法。\n\n[1, 2, 3].includes(2)     // true\n[1, 2, 3].includes(4)     // false\n[1, 2, nan].includes(nan) // true\n\n\n1\n2\n3\n\n\n该方法的第二个参数表示搜索的起始位置，默认为0。如果第二个参数为负数，则表示倒数的位置，如果这时它大于数组长度（比如第二个参数为-4，但数组长度为3），则会重置为从0开始。\n\n[1, 2, 3].includes(3, 3);  // false\n[1, 2, 3].includes(3, -1); // true\n\n\n1\n2\n\n\n没有该方法之前，我们通常使用数组的indexof方法，检查是否包含某个值。\n\nif (arr.indexof(el) !== -1) {\n  // ...\n}\n\n\n1\n2\n3\n\n\nindexof方法有两个缺点，一是不够语义化，它的含义是找到参数值的第一个出现位置，所以要去比较是否不等于-1，表达起来不够直观。二是，它内部使用严格相等运算符（===）进行判断，这会导致对nan的误判。\n\n[nan].indexof(nan)\n// -1\n\n\n1\n2\n\n\nincludes使用的是不一样的判断算法，就没有这个问题。\n\n[nan].includes(nan)\n// true\n\n\n1\n2\n\n\n下面代码用来检查当前环境是否支持该方法，如果不支持，部署一个简易的替代版本。\n\nconst contains = (() =>\n  array.prototype.includes\n    ? (arr, value) => arr.includes(value)\n    : (arr, value) => arr.some(el => el === value)\n)();\ncontains(['foo', 'bar'], 'baz'); // => false\n\n\n1\n2\n3\n4\n5\n6\n\n\n另外，map 和 set 数据结构有一个has方法，需要注意与includes区分。\n\n * map 结构的has方法，是用来查找键名的，比如map.prototype.has(key)、weakmap.prototype.has(key)、reflect.has(target, propertykey)。\n * set 结构的has方法，是用来查找值的，比如set.prototype.has(value)、weakset.prototype.has(value)。\n\n\n# 数组实例的 flat()，flatmap()\n\n数组的成员有时还是数组，array.prototype.flat()用于将嵌套的数组“拉平”，变成一维的数组。该方法返回一个新数组，对原数据没有影响。\n\n[1, 2, [3, 4]].flat()\n// [1, 2, 3, 4]\n\n\n1\n2\n\n\n上面代码中，原数组的成员里面有一个数组，flat()方法将子数组的成员取出来，添加在原来的位置。\n\nflat()默认只会“拉平”一层，如果想要“拉平”多层的嵌套数组，可以将flat()方法的参数写成一个整数，表示想要拉平的层数，默认为1。\n\n[1, 2, [3, [4, 5]]].flat()\n// [1, 2, 3, [4, 5]]\n\n[1, 2, [3, [4, 5]]].flat(2)\n// [1, 2, 3, 4, 5]\n\n\n1\n2\n3\n4\n5\n\n\n上面代码中，flat()的参数为2，表示要“拉平”两层的嵌套数组。\n\n如果不管有多少层嵌套，都要转成一维数组，可以用infinity关键字作为参数。\n\n[1, [2, [3]]].flat(infinity)\n// [1, 2, 3]\n\n\n1\n2\n\n\n如果原数组有空位，flat()方法会跳过空位。\n\n[1, 2, , 4, 5].flat()\n// [1, 2, 4, 5]\n\n\n1\n2\n\n\nflatmap()方法对原数组的每个成员执行一个函数（相当于执行array.prototype.map()），然后对返回值组成的数组执行flat()方法。该方法返回一个新数组，不改变原数组。\n\n// 相当于 [2, 3, 4].map(x => [x, x*2]).flat()\n[2, 3, 4].flatmap((x) => [x, x * 2])\n// [2, 4, 3, 6, 4, 8]\n\n\n1\n2\n3\n\n\nflatmap()只能展开一层数组。\n\n// 相当于 [[[2]], [[4]], [[6]], [[8]]].flat()\n[1, 2, 3, 4].flatmap(x => [[x * 2]])\n// [[2], [4], [6], [8]]\n\n\n1\n2\n3\n\n\n上面代码中，遍历函数返回的是一个双层的数组，但是默认只能展开一层，因此flatmap()返回的还是一个嵌套数组。\n\nflatmap()方法的参数是一个遍历函数，该函数可以接受三个参数，分别是当前数组成员、当前数组成员的位置（从零开始）、原数组。\n\narr.flatmap(function callback(currentvalue[, index[, array]]) {\n  // ...\n}[, thisarg])\n\n\n1\n2\n3\n\n\nflatmap()方法还可以有第二个参数，用来绑定遍历函数里面的this。\n\n\n# 数组的空位\n\n数组的空位指，数组的某一个位置没有任何值。比如，array构造函数返回的数组都是空位。\n\narray(3) // [, , ,]\n\n\n1\n\n\n上面代码中，array(3)返回一个具有 3 个空位的数组。\n\n注意，空位不是undefined，一个位置的值等于undefined，依然是有值的。空位是没有任何值，in运算符可以说明这一点。\n\n0 in [undefined, undefined, undefined] // true\n0 in [, , ,] // false\n\n\n1\n2\n\n\n上面代码说明，第一个数组的 0 号位置是有值的，第二个数组的 0 号位置没有值。\n\nes5 对空位的处理，已经很不一致了，大多数情况下会忽略空位。\n\n * foreach(), filter(), reduce(), every() 和some()都会跳过空位。\n * map()会跳过空位，但会保留这个值\n * join()和tostring()会将空位视为undefined，而undefined和null会被处理成空字符串。\n\n// foreach方法\n[,'a'].foreach((x,i) => console.log(i)); // 1\n\n// filter方法\n['a',,'b'].filter(x => true) // ['a','b']\n\n// every方法\n[,'a'].every(x => x==='a') // true\n\n// reduce方法\n[1,,2].reduce((x,y) => x+y) // 3\n\n// some方法\n[,'a'].some(x => x !== 'a') // false\n\n// map方法\n[,'a'].map(x => 1) // [,1]\n\n// join方法\n[,'a',undefined,null].join('#') // \"#a##\"\n\n// tostring方法\n[,'a',undefined,null].tostring() // \",a,,\"\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n\n\nes6 则是明确将空位转为undefined。\n\narray.from方法会将数组的空位，转为undefined，也就是说，这个方法不会忽略空位。\n\narray.from(['a',,'b'])\n// [ \"a\", undefined, \"b\" ]\n\n\n1\n2\n\n\n扩展运算符（...）也会将空位转为undefined。\n\n[...['a',,'b']]\n// [ \"a\", undefined, \"b\" ]\n\n\n1\n2\n\n\ncopywithin()会连空位一起拷贝。\n\n[,'a','b',,].copywithin(2,0) // [,\"a\",,\"a\"]\n\n\n1\n\n\nfill()会将空位视为正常的数组位置。\n\nnew array(3).fill('a') // [\"a\",\"a\",\"a\"]\n\n\n1\n\n\nfor...of循环也会遍历空位。\n\nlet arr = [, ,];\nfor (let i of arr) {\n  console.log(1);\n}\n// 1\n// 1\n\n\n1\n2\n3\n4\n5\n6\n\n\n上面代码中，数组arr有两个空位，for...of并没有忽略它们。如果改成map方法遍历，空位是会跳过的。\n\nentries()、keys()、values()、find()和findindex()会将空位处理成undefined。\n\n// entries()\n[...[,'a'].entries()] // [[0,undefined], [1,\"a\"]]\n\n// keys()\n[...[,'a'].keys()] // [0,1]\n\n// values()\n[...[,'a'].values()] // [undefined,\"a\"]\n\n// find()\n[,'a'].find(x => true) // undefined\n\n// findindex()\n[,'a'].findindex(x => true) // 0\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n由于空位的处理规则非常不统一，所以建议避免出现空位。\n\n\n# array.prototype.sort() 的排序稳定性\n\n排序稳定性（stable sorting）是排序算法的重要属性，指的是排序关键字相同的项目，排序前后的顺序不变。\n\nconst arr = [\n  'peach',\n  'straw',\n  'apple',\n  'spork'\n];\n\nconst stablesorting = (s1, s2) => {\n  if (s1[0] < s2[0]) return -1;\n  return 1;\n};\n\narr.sort(stablesorting)\n// [\"apple\", \"peach\", \"straw\", \"spork\"]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n上面代码对数组arr按照首字母进行排序。排序结果中，straw在spork的前面，跟原始顺序一致，所以排序算法stablesorting是稳定排序。\n\nconst unstablesorting = (s1, s2) => {\n  if (s1[0] <= s2[0]) return -1;\n  return 1;\n};\n\narr.sort(unstablesorting)\n// [\"apple\", \"peach\", \"spork\", \"straw\"]\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n上面代码中，排序结果是spork在straw前面，跟原始顺序相反，所以排序算法unstablesorting是不稳定的。\n\n常见的排序算法之中，插入排序、合并排序、冒泡排序等都是稳定的，堆排序、快速排序等是不稳定的。不稳定排序的主要缺点是，多重排序时可能会产生问题。假设有一个姓和名的列表，要求按照“姓氏为主要关键字，名字为次要关键字”进行排序。开发者可能会先按名字排序，再按姓氏进行排序。如果排序算法是稳定的，这样就可以达到“先姓氏，后名字”的排序效果。如果是不稳定的，就不行。\n\n早先的 ecmascript 没有规定，array.prototype.sort()的默认排序算法是否稳定，留给浏览器自己决定，这导致某些实现是不稳定的。es2019 明确规定，array.prototype.sort()的默认排序算法必须稳定。这个规定已经做到了，现在 javascript 各个主要实现的默认排序算法都是稳定的。",charsets:{cjk:!0}},{title:"Symbol",frontmatter:{title:"Symbol",date:"2020-02-09T16:00:29.000Z",permalink:"/pages/02c86eb2792f3262",author:"阮一峰",categories:["《ES6 教程》笔记"],tags:["ES6"],readingShow:"top"},regularPath:"/06.%E4%B9%A6%E7%B1%8D/05.%E3%80%8AES6%20%E6%95%99%E7%A8%8B%E3%80%8B%E7%AC%94%E8%AE%B0/12.Symbol.html",relativePath:"06.书籍/05.《ES6 教程》笔记/12.Symbol.md",key:"v-0dc1aff3",path:"/pages/02c86eb2792f3262/",headers:[{level:2,title:"概述",slug:"概述",normalizedTitle:"概述",charIndex:13},{level:2,title:"Symbol.prototype.description",slug:"symbol-prototype-description",normalizedTitle:"symbol.prototype.description",charIndex:1989},{level:2,title:"作为属性名的 Symbol",slug:"作为属性名的-symbol",normalizedTitle:"作为属性名的 symbol",charIndex:2361},{level:2,title:"实例：消除魔术字符串",slug:"实例-消除魔术字符串",normalizedTitle:"实例：消除魔术字符串",charIndex:4025},{level:2,title:"属性名的遍历",slug:"属性名的遍历",normalizedTitle:"属性名的遍历",charIndex:5150},{level:2,title:"Symbol.for()，Symbol.keyFor()",slug:"symbol-for-symbol-keyfor",normalizedTitle:"symbol.for()，symbol.keyfor()",charIndex:6973},{level:2,title:"实例：模块的 Singleton 模式",slug:"实例-模块的-singleton-模式",normalizedTitle:"实例：模块的 singleton 模式",charIndex:8487},{level:2,title:"内置的 Symbol 值",slug:"内置的-symbol-值",normalizedTitle:"内置的 symbol 值",charIndex:9655},{level:3,title:"Symbol.hasInstance",slug:"symbol-hasinstance",normalizedTitle:"symbol.hasinstance",charIndex:9733},{level:3,title:"Symbol.isConcatSpreadable",slug:"symbol-isconcatspreadable",normalizedTitle:"symbol.isconcatspreadable",charIndex:10473},{level:3,title:"Symbol.species",slug:"symbol-species",normalizedTitle:"symbol.species",charIndex:11782},{level:3,title:"Symbol.match",slug:"symbol-match",normalizedTitle:"symbol.match",charIndex:13261},{level:3,title:"Symbol.replace",slug:"symbol-replace",normalizedTitle:"symbol.replace",charIndex:13572},{level:3,title:"Symbol.search",slug:"symbol-search",normalizedTitle:"symbol.search",charIndex:13999},{level:3,title:"Symbol.split",slug:"symbol-split",normalizedTitle:"symbol.split",charIndex:14375},{level:3,title:"Symbol.iterator",slug:"symbol-iterator",normalizedTitle:"symbol.iterator",charIndex:15135},{level:3,title:"Symbol.toPrimitive",slug:"symbol-toprimitive",normalizedTitle:"symbol.toprimitive",charIndex:15768},{level:3,title:"Symbol.toStringTag",slug:"symbol-tostringtag",normalizedTitle:"symbol.tostringtag",charIndex:16374},{level:3,title:"Symbol.unscopables",slug:"symbol-unscopables",normalizedTitle:"symbol.unscopables",charIndex:17756}],excerpt:'<h1 id="symbol"><a class="header-anchor" href="#symbol">#</a> Symbol</h1>\n<h2 id="概述"><a class="header-anchor" href="#概述">#</a> 概述</h2>\n<p>ES5 的对象属性名都是字符串，这容易造成属性名的冲突。比如，你使用了一个他人提供的对象，但又想为这个对象添加新的方法（mixin 模式），新方法的名字就有可能与现有方法产生冲突。如果有一种机制，<strong>保证每个属性的名字都是独一无二</strong>的就好了，这样就从根本上防止属性名的冲突。这就是 ES6 引入<code>Symbol</code>的原因。</p>\n',lastUpdated:"2022/9/22 下午4:28:09",lastUpdatedTimestamp:1663835289e3,headersStr:"概述 Symbol.prototype.description 作为属性名的 Symbol 实例：消除魔术字符串 属性名的遍历 Symbol.for()，Symbol.keyFor() 实例：模块的 Singleton 模式 内置的 Symbol 值 Symbol.hasInstance Symbol.isConcatSpreadable Symbol.species Symbol.match Symbol.replace Symbol.search Symbol.split Symbol.iterator Symbol.toPrimitive Symbol.toStringTag Symbol.unscopables",content:"# Symbol\n\n\n# 概述\n\nES5 的对象属性名都是字符串，这容易造成属性名的冲突。比如，你使用了一个他人提供的对象，但又想为这个对象添加新的方法（mixin 模式），新方法的名字就有可能与现有方法产生冲突。如果有一种机制，保证每个属性的名字都是独一无二的就好了，这样就从根本上防止属性名的冲突。这就是 ES6 引入Symbol的原因。\n\nES6 引入了一种新的原始数据类型Symbol，表示独一无二的值。它是 JavaScript 语言的第七种数据类型，前六种是：undefined、null、布尔值（Boolean）、字符串（String）、数值（Number）、对象（Object）。\n\nSymbol 值通过Symbol函数生成。这就是说，**对象的属性名现在可以有两种类型，一种是原来就有的字符串，另一种就是新增的 Symbol 类型。**凡是属性名属于 Symbol 类型，就都是独一无二的，可以保证不会与其他属性名产生冲突。\n\nlet s = Symbol();\n\ntypeof s\n// \"symbol\"\n\n\n1\n2\n3\n4\n\n\n上面代码中，变量s就是一个独一无二的值。typeof运算符的结果，表明变量s是 Symbol 数据类型，而不是字符串之类的其他类型。\n\n注意，Symbol函数前不能使用new命令，否则会报错。这是因为生成的 Symbol 是一个原始类型的值，不是对象。也就是说，由于 Symbol 值不是对象，所以不能添加属性。基本上，它是一种类似于字符串的数据类型。\n\nSymbol函数可以接受一个字符串作为参数，表示对 Symbol 实例的描述，主要是为了在控制台显示，或者转为字符串时，比较容易区分。\n\nlet s1 = Symbol('foo');\nlet s2 = Symbol('bar');\n\ns1 // Symbol(foo)\ns2 // Symbol(bar)\n\ns1.toString() // \"Symbol(foo)\"\ns2.toString() // \"Symbol(bar)\"\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n上面代码中，s1和s2是两个 Symbol 值。如果不加参数，它们在控制台的输出都是Symbol()，不利于区分。有了参数以后，就等于为它们加上了描述，输出的时候就能够分清，到底是哪一个值。\n\n如果 Symbol 的参数是一个对象，就会调用该对象的toString方法，将其转为字符串，然后才生成一个 Symbol 值。\n\nconst obj = {\n  toString() {\n    return 'abc';\n  }\n};\nconst sym = Symbol(obj);\nsym // Symbol(abc)\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n注意，Symbol函数的参数只是表示对当前 Symbol 值的描述，因此相同参数的Symbol函数的返回值是不相等的。\n\n// 没有参数的情况\nlet s1 = Symbol();\nlet s2 = Symbol();\n\ns1 === s2 // false\n\n// 有参数的情况\nlet s1 = Symbol('foo');\nlet s2 = Symbol('foo');\n\ns1 === s2 // false\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n上面代码中，s1和s2都是Symbol函数的返回值，而且参数相同，但是它们是不相等的。\n\nSymbol 值不能与其他类型的值进行运算，会报错。\n\nlet sym = Symbol('My symbol');\n\n\"your symbol is \" + sym\n// TypeError: can't convert symbol to string\n`your symbol is ${sym}`\n// TypeError: can't convert symbol to string\n\n\n1\n2\n3\n4\n5\n6\n\n\n但是，Symbol 值可以显式转为字符串。\n\nlet sym = Symbol('My symbol');\n\nString(sym) // 'Symbol(My symbol)'\nsym.toString() // 'Symbol(My symbol)'\n\n\n1\n2\n3\n4\n\n\n另外，Symbol 值也可以转为布尔值，但是不能转为数值。\n\nlet sym = Symbol();\nBoolean(sym) // true\n!sym  // false\n\nif (sym) {\n  // ...\n}\n\nNumber(sym) // TypeError\nsym + 2 // TypeError\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n\n# Symbol.prototype.description\n\n创建 Symbol 的时候，可以添加一个描述。\n\nconst sym = Symbol('foo');\n\n\n1\n\n\n上面代码中，sym的描述就是字符串foo。\n\n但是，读取这个描述需要将 Symbol 显式转为字符串，即下面的写法。\n\nconst sym = Symbol('foo');\n\nString(sym) // \"Symbol(foo)\"\nsym.toString() // \"Symbol(foo)\"\n\n\n1\n2\n3\n4\n\n\n上面的用法不是很方便。ES2019 提供了一个实例属性description，直接返回 Symbol 的描述。\n\nconst sym = Symbol('foo');\n\nsym.description // \"foo\"\n\n\n1\n2\n3\n\n\n\n# 作为属性名的 Symbol\n\n由于每一个 Symbol 值都是不相等的，这意味着 Symbol 值可以作为标识符，用于对象的属性名，就能保证不会出现同名的属性。这对于一个对象由多个模块构成的情况非常有用，能防止某一个键被不小心改写或覆盖。\n\nlet mySymbol = Symbol();\n\n// 第一种写法\nlet a = {};\na[mySymbol] = 'Hello!';\n\n// 第二种写法\nlet a = {\n  [mySymbol]: 'Hello!'\n};\n\n// 第三种写法\nlet a = {};\nObject.defineProperty(a, mySymbol, { value: 'Hello!' });\n\n// 以上写法都得到同样结果\na[mySymbol] // \"Hello!\"\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n上面代码通过方括号结构和Object.defineProperty，将对象的属性名指定为一个 Symbol 值。\n\n注意，Symbol 值作为对象属性名时，不能用点运算符。\n\nconst mySymbol = Symbol();\nconst a = {};\n\na.mySymbol = 'Hello!';\na[mySymbol] // undefined\na['mySymbol'] // \"Hello!\"\n\n\n1\n2\n3\n4\n5\n6\n\n\n上面代码中，因为点运算符后面总是字符串，所以不会读取mySymbol作为标识名所指代的那个值，导致a的属性名实际上是一个字符串，而不是一个 Symbol 值。\n\n同理，在对象的内部，使用 Symbol 值定义属性时，Symbol 值必须放在方括号之中。\n\nlet s = Symbol();\n\nlet obj = {\n  [s]: function (arg) { ... }\n};\n\nobj[s](123);\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n上面代码中，如果s不放在方括号中，该属性的键名就是字符串s，而不是s所代表的那个 Symbol 值。\n\n采用增强的对象写法，上面代码的obj对象可以写得更简洁一些。\n\nlet obj = {\n  [s](arg) { ... }\n};\n\n\n1\n2\n3\n\n\nSymbol 类型还可以用于定义一组常量，保证这组常量的值都是不相等的。\n\nconst log = {};\n\nlog.levels = {\n  DEBUG: Symbol('debug'),\n  INFO: Symbol('info'),\n  WARN: Symbol('warn')\n};\nconsole.log(log.levels.DEBUG, 'debug message');\nconsole.log(log.levels.INFO, 'info message');\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n下面是另外一个例子。\n\nconst COLOR_RED    = Symbol();\nconst COLOR_GREEN  = Symbol();\n\nfunction getComplement(color) {\n  switch (color) {\n    case COLOR_RED:\n      return COLOR_GREEN;\n    case COLOR_GREEN:\n      return COLOR_RED;\n    default:\n      throw new Error('Undefined color');\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n常量使用 Symbol 值最大的好处，就是其他任何值都不可能有相同的值了，因此可以保证上面的switch语句会按设计的方式工作。\n\n还有一点需要注意，Symbol 值作为属性名时，该属性还是公开属性，不是私有属性。\n\n\n# 实例：消除魔术字符串\n\n魔术字符串指的是，在代码之中多次出现、与代码形成强耦合的某一个具体的字符串或者数值。风格良好的代码，应该尽量消除魔术字符串，改由含义清晰的变量代替。\n\nfunction getArea(shape, options) {\n  let area = 0;\n\n  switch (shape) {\n    case 'Triangle': // 魔术字符串\n      area = .5 * options.width * options.height;\n      break;\n    /* ... more code ... */\n  }\n\n  return area;\n}\n\ngetArea('Triangle', { width: 100, height: 100 }); // 魔术字符串\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n上面代码中，字符串Triangle就是一个魔术字符串。它多次出现，与代码形成“强耦合”，不利于将来的修改和维护。\n\n> 笔记：\n> \n> Triangle字符串在代码中出现多次，如果后期想修改这个字符串需要修改很多处，不利于维护。\n\n常用的消除魔术字符串的方法，就是把它写成一个变量。\n\nconst shapeType = {\n  triangle: 'Triangle'\n};\n\nfunction getArea(shape, options) {\n  let area = 0;\n  switch (shape) {\n    case shapeType.triangle:\n      area = .5 * options.width * options.height;\n      break;\n  }\n  return area;\n}\n\ngetArea(shapeType.triangle, { width: 100, height: 100 });\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n上面代码中，我们把Triangle写成shapeType对象的triangle属性，这样就消除了强耦合。\n\n如果仔细分析，可以发现shapeType.triangle等于哪个值并不重要，只要确保不会跟其他shapeType属性的值冲突即可。因此，这里就很适合改用 Symbol 值。\n\nconst shapeType = {\n  triangle: Symbol()\n};\n\n\n1\n2\n3\n\n\n上面代码中，除了将shapeType.triangle的值设为一个 Symbol，其他地方都不用修改。\n\n\n# 属性名的遍历\n\nSymbol 作为属性名，遍历对象的时候，该属性不会出现在for...in、for...of循环中，也不会被Object.keys()、Object.getOwnPropertyNames()、JSON.stringify()返回。\n\n但是，它也不是私有属性，有一个**Object.getOwnPropertySymbols()方法，可以获取指定对象的所有 Symbol 属性名**。该方法返回一个数组，成员是当前对象的所有用作属性名的 Symbol 值。\n\nconst obj = {};\nlet a = Symbol('a');\nlet b = Symbol('b');\n\nobj[a] = 'Hello';\nobj[b] = 'World';\n\nconst objectSymbols = Object.getOwnPropertySymbols(obj);\n\nobjectSymbols\n// [Symbol(a), Symbol(b)]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n上面代码是Object.getOwnPropertySymbols()方法的示例，可以获取所有 Symbol 属性名。\n\n下面是另一个例子，Object.getOwnPropertySymbols()方法与for...in循环、Object.getOwnPropertyNames方法进行对比的例子。\n\nconst obj = {};\nconst foo = Symbol('foo');\n\nobj[foo] = 'bar';\n\nfor (let i in obj) {\n  console.log(i); // 无输出\n}\n\nObject.getOwnPropertyNames(obj) // []\nObject.getOwnPropertySymbols(obj) // [Symbol(foo)]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n上面代码中，使用for...in循环和Object.getOwnPropertyNames()方法都得不到 Symbol 键名，需要使用Object.getOwnPropertySymbols()方法。\n\n另一个新的 API，Reflect.ownKeys()方法可以返回所有类型的键名，包括常规键名和 Symbol 键名。\n\nlet obj = {\n  [Symbol('my_key')]: 1,\n  enum: 2,\n  nonEnum: 3\n};\n\nReflect.ownKeys(obj)\n//  [\"enum\", \"nonEnum\", Symbol(my_key)]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n由于以 Symbol 值作为键名，不会被常规方法遍历得到。我们可以利用这个特性，为对象定义一些非私有的、但又希望只用于内部的方法。\n\nlet size = Symbol('size');\n\nclass Collection {\n  constructor() {\n    this[size] = 0;\n  }\n\n  add(item) {\n    this[this[size]] = item;\n    this[size]++;\n  }\n\n  static sizeOf(instance) {\n    return instance[size];\n  }\n}\n\nlet x = new Collection();\nCollection.sizeOf(x) // 0\n\nx.add('foo');\nCollection.sizeOf(x) // 1\n\nObject.keys(x) // ['0']\nObject.getOwnPropertyNames(x) // ['0']\nObject.getOwnPropertySymbols(x) // [Symbol(size)]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n\n\n上面代码中，对象x的size属性是一个 Symbol 值，所以Object.keys(x)、Object.getOwnPropertyNames(x)都无法获取它。这就造成了一种非私有的内部方法的效果。\n\n\n# Symbol.for()，Symbol.keyFor()\n\n有时，我们希望重新使用同一个 Symbol 值，Symbol.for()方法可以做到这一点。它接受一个字符串作为参数，然后搜索有没有以该参数作为名称的 Symbol 值。如果有，就返回这个 Symbol 值，否则就新建一个以该字符串为名称的 Symbol 值，并将其注册到全局。\n\nlet s1 = Symbol.for('foo');\nlet s2 = Symbol.for('foo');\n\ns1 === s2 // true\n\n\n1\n2\n3\n4\n\n\n上面代码中，s1和s2都是 Symbol 值，但是它们都是同样参数的Symbol.for方法生成的，所以实际上是同一个值。\n\nSymbol.for()与Symbol()这两种写法，都会生成新的 Symbol。它们的区别是，前者会被登记在全局环境中供搜索，后者不会。Symbol.for()不会每次调用就返回一个新的 Symbol 类型的值，而是会先检查给定的key是否已经存在，如果不存在才会新建一个值。比如，如果你调用Symbol.for(\"cat\")30 次，每次都会返回同一个 Symbol 值，但是调用Symbol(\"cat\")30 次，会返回 30 个不同的 Symbol 值。\n\nSymbol.for(\"bar\") === Symbol.for(\"bar\")\n// true\n\nSymbol(\"bar\") === Symbol(\"bar\")\n// false\n\n\n1\n2\n3\n4\n5\n\n\n上面代码中，由于Symbol()写法没有登记机制，所以每次调用都会返回一个不同的值。\n\nSymbol.keyFor()方法返回一个已登记的 Symbol 类型值的key。\n\nlet s1 = Symbol.for(\"foo\");\nSymbol.keyFor(s1) // \"foo\"\n\nlet s2 = Symbol(\"foo\");\nSymbol.keyFor(s2) // undefined\n\n\n1\n2\n3\n4\n5\n\n\n上面代码中，变量s2属于未登记的 Symbol 值，所以返回undefined。\n\n注意，Symbol.for()为 Symbol 值登记的名字，是全局环境的，不管有没有在全局环境运行。\n\nfunction foo() {\n  return Symbol.for('bar');\n}\n\nconst x = foo();\nconst y = Symbol.for('bar');\nconsole.log(x === y); // true\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n上面代码中，Symbol.for('bar')是函数内部运行的，但是生成的 Symbol 值是登记在全局环境的。所以，第二次运行Symbol.for('bar')可以取到这个 Symbol 值。\n\nSymbol.for()的这个全局登记特性，可以用在不同的 iframe 或 service worker 中取到同一个值。\n\niframe = document.createElement('iframe');\niframe.src = String(window.location);\ndocument.body.appendChild(iframe);\n\niframe.contentWindow.Symbol.for('foo') === Symbol.for('foo')\n// true\n\n\n1\n2\n3\n4\n5\n6\n\n\n上面代码中，iframe 窗口生成的 Symbol 值，可以在主页面得到。\n\n\n# 实例：模块的 Singleton 模式\n\nSingleton 模式指的是调用一个类，任何时候返回的都是同一个实例。\n\n对于 Node 来说，模块文件可以看成是一个类。怎么保证每次执行这个模块文件，返回的都是同一个实例呢？\n\n很容易想到，可以把实例放到顶层对象global。\n\n// mod.js\nfunction A() {\n  this.foo = 'hello';\n}\n\nif (!global._foo) {\n  global._foo = new A();\n}\n\nmodule.exports = global._foo;\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n然后，加载上面的mod.js。\n\nconst a = require('./mod.js');\nconsole.log(a.foo);\n\n\n1\n2\n\n\n上面代码中，变量a任何时候加载的都是A的同一个实例。\n\n但是，这里有一个问题，全局变量global._foo是可写的，任何文件都可以修改。\n\nglobal._foo = { foo: 'world' };\n\nconst a = require('./mod.js');\nconsole.log(a.foo);\n\n\n1\n2\n3\n4\n\n\n上面的代码，会使得加载mod.js的脚本都失真。\n\n为了防止这种情况出现，我们就可以使用 Symbol。\n\n// mod.js\nconst FOO_KEY = Symbol.for('foo');\n\nfunction A() {\n  this.foo = 'hello';\n}\n\nif (!global[FOO_KEY]) {\n  global[FOO_KEY] = new A();\n}\n\nmodule.exports = global[FOO_KEY];\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n上面代码中，可以保证global[FOO_KEY]不会被无意间覆盖，但还是可以被改写。\n\nglobal[Symbol.for('foo')] = { foo: 'world' };\n\nconst a = require('./mod.js');\n\n\n1\n2\n3\n\n\n如果键名使用Symbol方法生成，那么外部将无法引用这个值，当然也就无法改写。\n\n// mod.js\nconst FOO_KEY = Symbol('foo');\n\n// 后面代码相同 ……\n\n\n1\n2\n3\n4\n\n\n上面代码将导致其他脚本都无法引用FOO_KEY。但这样也有一个问题，就是如果多次执行这个脚本，每次得到的FOO_KEY都是不一样的。虽然 Node 会将脚本的执行结果缓存，一般情况下，不会多次执行同一个脚本，但是用户可以手动清除缓存，所以也不是绝对可靠。\n\n\n# 内置的 Symbol 值\n\n除了定义自己使用的 Symbol 值以外，ES6 还提供了 11 个内置的 Symbol 值，指向语言内部使用的方法。\n\n\n# Symbol.hasInstance\n\n对象的Symbol.hasInstance属性，指向一个内部方法。当其他对象使用instanceof运算符，判断是否为该对象的实例时，会调用这个方法。比如，foo instanceof Foo在语言内部，实际调用的是Foo[Symbol.hasInstance](foo)。\n\nclass MyClass {\n  [Symbol.hasInstance](foo) {\n    return foo instanceof Array;\n  }\n}\n\n[1, 2, 3] instanceof new MyClass() // true\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n上面代码中，MyClass是一个类，new MyClass()会返回一个实例。该实例的Symbol.hasInstance方法，会在进行instanceof运算时自动调用，判断左侧的运算子是否为Array的实例。\n\n下面是另一个例子。\n\nclass Even {\n  static [Symbol.hasInstance](obj) {\n    return Number(obj) % 2 === 0;\n  }\n}\n\n// 等同于\nconst Even = {\n  [Symbol.hasInstance](obj) {\n    return Number(obj) % 2 === 0;\n  }\n};\n\n1 instanceof Even // false\n2 instanceof Even // true\n12345 instanceof Even // false\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n\n# Symbol.isConcatSpreadable\n\n对象的Symbol.isConcatSpreadable属性等于一个布尔值，表示该对象用于Array.prototype.concat()时，是否可以展开。\n\nlet arr1 = ['c', 'd'];\n['a', 'b'].concat(arr1, 'e') // ['a', 'b', 'c', 'd', 'e']\narr1[Symbol.isConcatSpreadable] // undefined\n\nlet arr2 = ['c', 'd'];\narr2[Symbol.isConcatSpreadable] = false;\n['a', 'b'].concat(arr2, 'e') // ['a', 'b', ['c','d'], 'e']\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n上面代码说明，数组的默认行为是可以展开，Symbol.isConcatSpreadable默认等于undefined。该属性等于true时，也有展开的效果。\n\n类似数组的对象正好相反，默认不展开。它的Symbol.isConcatSpreadable属性设为true，才可以展开。\n\nlet obj = {length: 2, 0: 'c', 1: 'd'};\n['a', 'b'].concat(obj, 'e') // ['a', 'b', obj, 'e']\n\nobj[Symbol.isConcatSpreadable] = true;\n['a', 'b'].concat(obj, 'e') // ['a', 'b', 'c', 'd', 'e']\n\n\n1\n2\n3\n4\n5\n\n\nSymbol.isConcatSpreadable属性也可以定义在类里面。\n\nclass A1 extends Array {\n  constructor(args) {\n    super(args);\n    this[Symbol.isConcatSpreadable] = true;\n  }\n}\nclass A2 extends Array {\n  constructor(args) {\n    super(args);\n  }\n  get [Symbol.isConcatSpreadable] () {\n    return false;\n  }\n}\nlet a1 = new A1();\na1[0] = 3;\na1[1] = 4;\nlet a2 = new A2();\na2[0] = 5;\na2[1] = 6;\n[1, 2].concat(a1).concat(a2)\n// [1, 2, 3, 4, [5, 6]]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n\n\n上面代码中，类A1是可展开的，类A2是不可展开的，所以使用concat时有不一样的结果。\n\n注意，Symbol.isConcatSpreadable的位置差异，A1是定义在实例上，A2是定义在类本身，效果相同。\n\n\n# Symbol.species\n\n对象的Symbol.species属性，指向一个构造函数。创建衍生对象时，会使用该属性。\n\nclass MyArray extends Array {\n}\n\nconst a = new MyArray(1, 2, 3);\nconst b = a.map(x => x);\nconst c = a.filter(x => x > 1);\n\nb instanceof MyArray // true\nc instanceof MyArray // true\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n上面代码中，子类MyArray继承了父类Array，a是MyArray的实例，b和c是a的衍生对象。你可能会认为，b和c都是调用数组方法生成的，所以应该是数组（Array的实例），但实际上它们也是MyArray的实例。\n\nSymbol.species属性就是为了解决这个问题而提供的。现在，我们可以为MyArray设置Symbol.species属性。\n\nclass MyArray extends Array {\n  static get [Symbol.species]() { return Array; }\n}\n\n\n1\n2\n3\n\n\n上面代码中，由于定义了Symbol.species属性，创建衍生对象时就会使用这个属性返回的函数，作为构造函数。这个例子也说明，定义Symbol.species属性要采用get取值器。默认的Symbol.species属性等同于下面的写法。\n\nstatic get [Symbol.species]() {\n  return this;\n}\n\n\n1\n2\n3\n\n\n现在，再来看前面的例子。\n\nclass MyArray extends Array {\n  static get [Symbol.species]() { return Array; }\n}\n\nconst a = new MyArray();\nconst b = a.map(x => x);\n\nb instanceof MyArray // false\nb instanceof Array // true\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n上面代码中，a.map(x => x)生成的衍生对象，就不是MyArray的实例，而直接就是Array的实例。\n\n再看一个例子。\n\nclass T1 extends Promise {\n}\n\nclass T2 extends Promise {\n  static get [Symbol.species]() {\n    return Promise;\n  }\n}\n\nnew T1(r => r()).then(v => v) instanceof T1 // true\nnew T2(r => r()).then(v => v) instanceof T2 // false\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n上面代码中，T2定义了Symbol.species属性，T1没有。结果就导致了创建衍生对象时（then方法），T1调用的是自身的构造方法，而T2调用的是Promise的构造方法。\n\n总之，Symbol.species的作用在于，实例对象在运行过程中，需要再次调用自身的构造函数时，会调用该属性指定的构造函数。它主要的用途是，有些类库是在基类的基础上修改的，那么子类使用继承的方法时，作者可能希望返回基类的实例，而不是子类的实例。\n\n\n# Symbol.match\n\n对象的Symbol.match属性，指向一个函数。当执行str.match(myObject)时，如果该属性存在，会调用它，返回该方法的返回值。\n\nString.prototype.match(regexp)\n// 等同于\nregexp[Symbol.match](this)\n\nclass MyMatcher {\n  [Symbol.match](string) {\n    return 'hello world'.indexOf(string);\n  }\n}\n\n'e'.match(new MyMatcher()) // 1\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n\n# Symbol.replace\n\n对象的Symbol.replace属性，指向一个方法，当该对象被String.prototype.replace方法调用时，会返回该方法的返回值。\n\nString.prototype.replace(searchValue, replaceValue)\n// 等同于\nsearchValue[Symbol.replace](this, replaceValue)\n\n\n1\n2\n3\n\n\n下面是一个例子。\n\nconst x = {};\nx[Symbol.replace] = (...s) => console.log(s);\n\n'Hello'.replace(x, 'World') // [\"Hello\", \"World\"]\n\n\n1\n2\n3\n4\n\n\nSymbol.replace方法会收到两个参数，第一个参数是replace方法正在作用的对象，上面例子是Hello，第二个参数是替换后的值，上面例子是World。\n\n\n# Symbol.search\n\n对象的Symbol.search属性，指向一个方法，当该对象被String.prototype.search方法调用时，会返回该方法的返回值。\n\nString.prototype.search(regexp)\n// 等同于\nregexp[Symbol.search](this)\n\nclass MySearch {\n  constructor(value) {\n    this.value = value;\n  }\n  [Symbol.search](string) {\n    return string.indexOf(this.value);\n  }\n}\n'foobar'.search(new MySearch('foo')) // 0\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n\n# Symbol.split\n\n对象的Symbol.split属性，指向一个方法，当该对象被String.prototype.split方法调用时，会返回该方法的返回值。\n\nString.prototype.split(separator, limit)\n// 等同于\nseparator[Symbol.split](this, limit)\n\n\n1\n2\n3\n\n\n下面是一个例子。\n\nclass MySplitter {\n  constructor(value) {\n    this.value = value;\n  }\n  [Symbol.split](string) {\n    let index = string.indexOf(this.value);\n    if (index === -1) {\n      return string;\n    }\n    return [\n      string.substr(0, index),\n      string.substr(index + this.value.length)\n    ];\n  }\n}\n\n'foobar'.split(new MySplitter('foo'))\n// ['', 'bar']\n\n'foobar'.split(new MySplitter('bar'))\n// ['foo', '']\n\n'foobar'.split(new MySplitter('baz'))\n// 'foobar'\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n\n\n上面方法使用Symbol.split方法，重新定义了字符串对象的split方法的行为，\n\n\n# Symbol.iterator\n\n对象的Symbol.iterator属性，指向该对象的默认遍历器方法。\n\nconst myIterable = {};\nmyIterable[Symbol.iterator] = function* () {\n  yield 1;\n  yield 2;\n  yield 3;\n};\n\n[...myIterable] // [1, 2, 3]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n对象进行for...of循环时，会调用Symbol.iterator方法，返回该对象的默认遍历器，详细介绍参见《Iterator 和 for...of 循环》一章。\n\nclass Collection {\n  *[Symbol.iterator]() {\n    let i = 0;\n    while(this[i] !== undefined) {\n      yield this[i];\n      ++i;\n    }\n  }\n}\n\nlet myCollection = new Collection();\nmyCollection[0] = 1;\nmyCollection[1] = 2;\n\nfor(let value of myCollection) {\n  console.log(value);\n}\n// 1\n// 2\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\n\n# Symbol.toPrimitive\n\n对象的Symbol.toPrimitive属性，指向一个方法。该对象被转为原始类型的值时，会调用这个方法，返回该对象对应的原始类型值。\n\nSymbol.toPrimitive被调用时，会接受一个字符串参数，表示当前运算的模式，一共有三种模式。\n\n * Number：该场合需要转成数值\n * String：该场合需要转成字符串\n * Default：该场合可以转成数值，也可以转成字符串\n\nlet obj = {\n  [Symbol.toPrimitive](hint) {\n    switch (hint) {\n      case 'number':\n        return 123;\n      case 'string':\n        return 'str';\n      case 'default':\n        return 'default';\n      default:\n        throw new Error();\n     }\n   }\n};\n\n2 * obj // 246\n3 + obj // '3default'\nobj == 'default' // true\nString(obj) // 'str'\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\n\n# Symbol.toStringTag\n\n对象的Symbol.toStringTag属性，指向一个方法。在该对象上面调用Object.prototype.toString方法时，如果这个属性存在，它的返回值会出现在toString方法返回的字符串之中，表示对象的类型。也就是说，这个属性可以用来定制[object Object]或[object Array]中object后面的那个字符串。\n\n// 例一\n({[Symbol.toStringTag]: 'Foo'}.toString())\n// \"[object Foo]\"\n\n// 例二\nclass Collection {\n  get [Symbol.toStringTag]() {\n    return 'xxx';\n  }\n}\nlet x = new Collection();\nObject.prototype.toString.call(x) // \"[object xxx]\"\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\nES6 新增内置对象的Symbol.toStringTag属性值如下。\n\n * JSON[Symbol.toStringTag]：'JSON'\n * Math[Symbol.toStringTag]：'Math'\n * Module 对象M[Symbol.toStringTag]：'Module'\n * ArrayBuffer.prototype[Symbol.toStringTag]：'ArrayBuffer'\n * DataView.prototype[Symbol.toStringTag]：'DataView'\n * Map.prototype[Symbol.toStringTag]：'Map'\n * Promise.prototype[Symbol.toStringTag]：'Promise'\n * Set.prototype[Symbol.toStringTag]：'Set'\n * %TypedArray%.prototype[Symbol.toStringTag]：'Uint8Array'等\n * WeakMap.prototype[Symbol.toStringTag]：'WeakMap'\n * WeakSet.prototype[Symbol.toStringTag]：'WeakSet'\n * %MapIteratorPrototype%[Symbol.toStringTag]：'Map Iterator'\n * %SetIteratorPrototype%[Symbol.toStringTag]：'Set Iterator'\n * %StringIteratorPrototype%[Symbol.toStringTag]：'String Iterator'\n * Symbol.prototype[Symbol.toStringTag]：'Symbol'\n * Generator.prototype[Symbol.toStringTag]：'Generator'\n * GeneratorFunction.prototype[Symbol.toStringTag]：'GeneratorFunction'\n\n\n# Symbol.unscopables\n\n对象的Symbol.unscopables属性，指向一个对象。该对象指定了使用with关键字时，哪些属性会被with环境排除。\n\nArray.prototype[Symbol.unscopables]\n// {\n//   copyWithin: true,\n//   entries: true,\n//   fill: true,\n//   find: true,\n//   findIndex: true,\n//   includes: true,\n//   keys: true\n// }\n\nObject.keys(Array.prototype[Symbol.unscopables])\n// ['copyWithin', 'entries', 'fill', 'find', 'findIndex', 'includes', 'keys']\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n上面代码说明，数组有 7 个属性，会被with命令排除。\n\n// 没有 unscopables 时\nclass MyClass {\n  foo() { return 1; }\n}\n\nvar foo = function () { return 2; };\n\nwith (MyClass.prototype) {\n  foo(); // 1\n}\n\n// 有 unscopables 时\nclass MyClass {\n  foo() { return 1; }\n  get [Symbol.unscopables]() {\n    return { foo: true };\n  }\n}\n\nvar foo = function () { return 2; };\n\nwith (MyClass.prototype) {\n  foo(); // 2\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n\n\n上面代码通过指定Symbol.unscopables属性，使得with语法块不会在当前作用域寻找foo属性，即foo将指向外层作用域的变量。",normalizedContent:"# symbol\n\n\n# 概述\n\nes5 的对象属性名都是字符串，这容易造成属性名的冲突。比如，你使用了一个他人提供的对象，但又想为这个对象添加新的方法（mixin 模式），新方法的名字就有可能与现有方法产生冲突。如果有一种机制，保证每个属性的名字都是独一无二的就好了，这样就从根本上防止属性名的冲突。这就是 es6 引入symbol的原因。\n\nes6 引入了一种新的原始数据类型symbol，表示独一无二的值。它是 javascript 语言的第七种数据类型，前六种是：undefined、null、布尔值（boolean）、字符串（string）、数值（number）、对象（object）。\n\nsymbol 值通过symbol函数生成。这就是说，**对象的属性名现在可以有两种类型，一种是原来就有的字符串，另一种就是新增的 symbol 类型。**凡是属性名属于 symbol 类型，就都是独一无二的，可以保证不会与其他属性名产生冲突。\n\nlet s = symbol();\n\ntypeof s\n// \"symbol\"\n\n\n1\n2\n3\n4\n\n\n上面代码中，变量s就是一个独一无二的值。typeof运算符的结果，表明变量s是 symbol 数据类型，而不是字符串之类的其他类型。\n\n注意，symbol函数前不能使用new命令，否则会报错。这是因为生成的 symbol 是一个原始类型的值，不是对象。也就是说，由于 symbol 值不是对象，所以不能添加属性。基本上，它是一种类似于字符串的数据类型。\n\nsymbol函数可以接受一个字符串作为参数，表示对 symbol 实例的描述，主要是为了在控制台显示，或者转为字符串时，比较容易区分。\n\nlet s1 = symbol('foo');\nlet s2 = symbol('bar');\n\ns1 // symbol(foo)\ns2 // symbol(bar)\n\ns1.tostring() // \"symbol(foo)\"\ns2.tostring() // \"symbol(bar)\"\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n上面代码中，s1和s2是两个 symbol 值。如果不加参数，它们在控制台的输出都是symbol()，不利于区分。有了参数以后，就等于为它们加上了描述，输出的时候就能够分清，到底是哪一个值。\n\n如果 symbol 的参数是一个对象，就会调用该对象的tostring方法，将其转为字符串，然后才生成一个 symbol 值。\n\nconst obj = {\n  tostring() {\n    return 'abc';\n  }\n};\nconst sym = symbol(obj);\nsym // symbol(abc)\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n注意，symbol函数的参数只是表示对当前 symbol 值的描述，因此相同参数的symbol函数的返回值是不相等的。\n\n// 没有参数的情况\nlet s1 = symbol();\nlet s2 = symbol();\n\ns1 === s2 // false\n\n// 有参数的情况\nlet s1 = symbol('foo');\nlet s2 = symbol('foo');\n\ns1 === s2 // false\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n上面代码中，s1和s2都是symbol函数的返回值，而且参数相同，但是它们是不相等的。\n\nsymbol 值不能与其他类型的值进行运算，会报错。\n\nlet sym = symbol('my symbol');\n\n\"your symbol is \" + sym\n// typeerror: can't convert symbol to string\n`your symbol is ${sym}`\n// typeerror: can't convert symbol to string\n\n\n1\n2\n3\n4\n5\n6\n\n\n但是，symbol 值可以显式转为字符串。\n\nlet sym = symbol('my symbol');\n\nstring(sym) // 'symbol(my symbol)'\nsym.tostring() // 'symbol(my symbol)'\n\n\n1\n2\n3\n4\n\n\n另外，symbol 值也可以转为布尔值，但是不能转为数值。\n\nlet sym = symbol();\nboolean(sym) // true\n!sym  // false\n\nif (sym) {\n  // ...\n}\n\nnumber(sym) // typeerror\nsym + 2 // typeerror\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n\n# symbol.prototype.description\n\n创建 symbol 的时候，可以添加一个描述。\n\nconst sym = symbol('foo');\n\n\n1\n\n\n上面代码中，sym的描述就是字符串foo。\n\n但是，读取这个描述需要将 symbol 显式转为字符串，即下面的写法。\n\nconst sym = symbol('foo');\n\nstring(sym) // \"symbol(foo)\"\nsym.tostring() // \"symbol(foo)\"\n\n\n1\n2\n3\n4\n\n\n上面的用法不是很方便。es2019 提供了一个实例属性description，直接返回 symbol 的描述。\n\nconst sym = symbol('foo');\n\nsym.description // \"foo\"\n\n\n1\n2\n3\n\n\n\n# 作为属性名的 symbol\n\n由于每一个 symbol 值都是不相等的，这意味着 symbol 值可以作为标识符，用于对象的属性名，就能保证不会出现同名的属性。这对于一个对象由多个模块构成的情况非常有用，能防止某一个键被不小心改写或覆盖。\n\nlet mysymbol = symbol();\n\n// 第一种写法\nlet a = {};\na[mysymbol] = 'hello!';\n\n// 第二种写法\nlet a = {\n  [mysymbol]: 'hello!'\n};\n\n// 第三种写法\nlet a = {};\nobject.defineproperty(a, mysymbol, { value: 'hello!' });\n\n// 以上写法都得到同样结果\na[mysymbol] // \"hello!\"\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n上面代码通过方括号结构和object.defineproperty，将对象的属性名指定为一个 symbol 值。\n\n注意，symbol 值作为对象属性名时，不能用点运算符。\n\nconst mysymbol = symbol();\nconst a = {};\n\na.mysymbol = 'hello!';\na[mysymbol] // undefined\na['mysymbol'] // \"hello!\"\n\n\n1\n2\n3\n4\n5\n6\n\n\n上面代码中，因为点运算符后面总是字符串，所以不会读取mysymbol作为标识名所指代的那个值，导致a的属性名实际上是一个字符串，而不是一个 symbol 值。\n\n同理，在对象的内部，使用 symbol 值定义属性时，symbol 值必须放在方括号之中。\n\nlet s = symbol();\n\nlet obj = {\n  [s]: function (arg) { ... }\n};\n\nobj[s](123);\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n上面代码中，如果s不放在方括号中，该属性的键名就是字符串s，而不是s所代表的那个 symbol 值。\n\n采用增强的对象写法，上面代码的obj对象可以写得更简洁一些。\n\nlet obj = {\n  [s](arg) { ... }\n};\n\n\n1\n2\n3\n\n\nsymbol 类型还可以用于定义一组常量，保证这组常量的值都是不相等的。\n\nconst log = {};\n\nlog.levels = {\n  debug: symbol('debug'),\n  info: symbol('info'),\n  warn: symbol('warn')\n};\nconsole.log(log.levels.debug, 'debug message');\nconsole.log(log.levels.info, 'info message');\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n下面是另外一个例子。\n\nconst color_red    = symbol();\nconst color_green  = symbol();\n\nfunction getcomplement(color) {\n  switch (color) {\n    case color_red:\n      return color_green;\n    case color_green:\n      return color_red;\n    default:\n      throw new error('undefined color');\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n常量使用 symbol 值最大的好处，就是其他任何值都不可能有相同的值了，因此可以保证上面的switch语句会按设计的方式工作。\n\n还有一点需要注意，symbol 值作为属性名时，该属性还是公开属性，不是私有属性。\n\n\n# 实例：消除魔术字符串\n\n魔术字符串指的是，在代码之中多次出现、与代码形成强耦合的某一个具体的字符串或者数值。风格良好的代码，应该尽量消除魔术字符串，改由含义清晰的变量代替。\n\nfunction getarea(shape, options) {\n  let area = 0;\n\n  switch (shape) {\n    case 'triangle': // 魔术字符串\n      area = .5 * options.width * options.height;\n      break;\n    /* ... more code ... */\n  }\n\n  return area;\n}\n\ngetarea('triangle', { width: 100, height: 100 }); // 魔术字符串\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n上面代码中，字符串triangle就是一个魔术字符串。它多次出现，与代码形成“强耦合”，不利于将来的修改和维护。\n\n> 笔记：\n> \n> triangle字符串在代码中出现多次，如果后期想修改这个字符串需要修改很多处，不利于维护。\n\n常用的消除魔术字符串的方法，就是把它写成一个变量。\n\nconst shapetype = {\n  triangle: 'triangle'\n};\n\nfunction getarea(shape, options) {\n  let area = 0;\n  switch (shape) {\n    case shapetype.triangle:\n      area = .5 * options.width * options.height;\n      break;\n  }\n  return area;\n}\n\ngetarea(shapetype.triangle, { width: 100, height: 100 });\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n上面代码中，我们把triangle写成shapetype对象的triangle属性，这样就消除了强耦合。\n\n如果仔细分析，可以发现shapetype.triangle等于哪个值并不重要，只要确保不会跟其他shapetype属性的值冲突即可。因此，这里就很适合改用 symbol 值。\n\nconst shapetype = {\n  triangle: symbol()\n};\n\n\n1\n2\n3\n\n\n上面代码中，除了将shapetype.triangle的值设为一个 symbol，其他地方都不用修改。\n\n\n# 属性名的遍历\n\nsymbol 作为属性名，遍历对象的时候，该属性不会出现在for...in、for...of循环中，也不会被object.keys()、object.getownpropertynames()、json.stringify()返回。\n\n但是，它也不是私有属性，有一个**object.getownpropertysymbols()方法，可以获取指定对象的所有 symbol 属性名**。该方法返回一个数组，成员是当前对象的所有用作属性名的 symbol 值。\n\nconst obj = {};\nlet a = symbol('a');\nlet b = symbol('b');\n\nobj[a] = 'hello';\nobj[b] = 'world';\n\nconst objectsymbols = object.getownpropertysymbols(obj);\n\nobjectsymbols\n// [symbol(a), symbol(b)]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n上面代码是object.getownpropertysymbols()方法的示例，可以获取所有 symbol 属性名。\n\n下面是另一个例子，object.getownpropertysymbols()方法与for...in循环、object.getownpropertynames方法进行对比的例子。\n\nconst obj = {};\nconst foo = symbol('foo');\n\nobj[foo] = 'bar';\n\nfor (let i in obj) {\n  console.log(i); // 无输出\n}\n\nobject.getownpropertynames(obj) // []\nobject.getownpropertysymbols(obj) // [symbol(foo)]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n上面代码中，使用for...in循环和object.getownpropertynames()方法都得不到 symbol 键名，需要使用object.getownpropertysymbols()方法。\n\n另一个新的 api，reflect.ownkeys()方法可以返回所有类型的键名，包括常规键名和 symbol 键名。\n\nlet obj = {\n  [symbol('my_key')]: 1,\n  enum: 2,\n  nonenum: 3\n};\n\nreflect.ownkeys(obj)\n//  [\"enum\", \"nonenum\", symbol(my_key)]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n由于以 symbol 值作为键名，不会被常规方法遍历得到。我们可以利用这个特性，为对象定义一些非私有的、但又希望只用于内部的方法。\n\nlet size = symbol('size');\n\nclass collection {\n  constructor() {\n    this[size] = 0;\n  }\n\n  add(item) {\n    this[this[size]] = item;\n    this[size]++;\n  }\n\n  static sizeof(instance) {\n    return instance[size];\n  }\n}\n\nlet x = new collection();\ncollection.sizeof(x) // 0\n\nx.add('foo');\ncollection.sizeof(x) // 1\n\nobject.keys(x) // ['0']\nobject.getownpropertynames(x) // ['0']\nobject.getownpropertysymbols(x) // [symbol(size)]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n\n\n上面代码中，对象x的size属性是一个 symbol 值，所以object.keys(x)、object.getownpropertynames(x)都无法获取它。这就造成了一种非私有的内部方法的效果。\n\n\n# symbol.for()，symbol.keyfor()\n\n有时，我们希望重新使用同一个 symbol 值，symbol.for()方法可以做到这一点。它接受一个字符串作为参数，然后搜索有没有以该参数作为名称的 symbol 值。如果有，就返回这个 symbol 值，否则就新建一个以该字符串为名称的 symbol 值，并将其注册到全局。\n\nlet s1 = symbol.for('foo');\nlet s2 = symbol.for('foo');\n\ns1 === s2 // true\n\n\n1\n2\n3\n4\n\n\n上面代码中，s1和s2都是 symbol 值，但是它们都是同样参数的symbol.for方法生成的，所以实际上是同一个值。\n\nsymbol.for()与symbol()这两种写法，都会生成新的 symbol。它们的区别是，前者会被登记在全局环境中供搜索，后者不会。symbol.for()不会每次调用就返回一个新的 symbol 类型的值，而是会先检查给定的key是否已经存在，如果不存在才会新建一个值。比如，如果你调用symbol.for(\"cat\")30 次，每次都会返回同一个 symbol 值，但是调用symbol(\"cat\")30 次，会返回 30 个不同的 symbol 值。\n\nsymbol.for(\"bar\") === symbol.for(\"bar\")\n// true\n\nsymbol(\"bar\") === symbol(\"bar\")\n// false\n\n\n1\n2\n3\n4\n5\n\n\n上面代码中，由于symbol()写法没有登记机制，所以每次调用都会返回一个不同的值。\n\nsymbol.keyfor()方法返回一个已登记的 symbol 类型值的key。\n\nlet s1 = symbol.for(\"foo\");\nsymbol.keyfor(s1) // \"foo\"\n\nlet s2 = symbol(\"foo\");\nsymbol.keyfor(s2) // undefined\n\n\n1\n2\n3\n4\n5\n\n\n上面代码中，变量s2属于未登记的 symbol 值，所以返回undefined。\n\n注意，symbol.for()为 symbol 值登记的名字，是全局环境的，不管有没有在全局环境运行。\n\nfunction foo() {\n  return symbol.for('bar');\n}\n\nconst x = foo();\nconst y = symbol.for('bar');\nconsole.log(x === y); // true\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n上面代码中，symbol.for('bar')是函数内部运行的，但是生成的 symbol 值是登记在全局环境的。所以，第二次运行symbol.for('bar')可以取到这个 symbol 值。\n\nsymbol.for()的这个全局登记特性，可以用在不同的 iframe 或 service worker 中取到同一个值。\n\niframe = document.createelement('iframe');\niframe.src = string(window.location);\ndocument.body.appendchild(iframe);\n\niframe.contentwindow.symbol.for('foo') === symbol.for('foo')\n// true\n\n\n1\n2\n3\n4\n5\n6\n\n\n上面代码中，iframe 窗口生成的 symbol 值，可以在主页面得到。\n\n\n# 实例：模块的 singleton 模式\n\nsingleton 模式指的是调用一个类，任何时候返回的都是同一个实例。\n\n对于 node 来说，模块文件可以看成是一个类。怎么保证每次执行这个模块文件，返回的都是同一个实例呢？\n\n很容易想到，可以把实例放到顶层对象global。\n\n// mod.js\nfunction a() {\n  this.foo = 'hello';\n}\n\nif (!global._foo) {\n  global._foo = new a();\n}\n\nmodule.exports = global._foo;\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n然后，加载上面的mod.js。\n\nconst a = require('./mod.js');\nconsole.log(a.foo);\n\n\n1\n2\n\n\n上面代码中，变量a任何时候加载的都是a的同一个实例。\n\n但是，这里有一个问题，全局变量global._foo是可写的，任何文件都可以修改。\n\nglobal._foo = { foo: 'world' };\n\nconst a = require('./mod.js');\nconsole.log(a.foo);\n\n\n1\n2\n3\n4\n\n\n上面的代码，会使得加载mod.js的脚本都失真。\n\n为了防止这种情况出现，我们就可以使用 symbol。\n\n// mod.js\nconst foo_key = symbol.for('foo');\n\nfunction a() {\n  this.foo = 'hello';\n}\n\nif (!global[foo_key]) {\n  global[foo_key] = new a();\n}\n\nmodule.exports = global[foo_key];\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n上面代码中，可以保证global[foo_key]不会被无意间覆盖，但还是可以被改写。\n\nglobal[symbol.for('foo')] = { foo: 'world' };\n\nconst a = require('./mod.js');\n\n\n1\n2\n3\n\n\n如果键名使用symbol方法生成，那么外部将无法引用这个值，当然也就无法改写。\n\n// mod.js\nconst foo_key = symbol('foo');\n\n// 后面代码相同 ……\n\n\n1\n2\n3\n4\n\n\n上面代码将导致其他脚本都无法引用foo_key。但这样也有一个问题，就是如果多次执行这个脚本，每次得到的foo_key都是不一样的。虽然 node 会将脚本的执行结果缓存，一般情况下，不会多次执行同一个脚本，但是用户可以手动清除缓存，所以也不是绝对可靠。\n\n\n# 内置的 symbol 值\n\n除了定义自己使用的 symbol 值以外，es6 还提供了 11 个内置的 symbol 值，指向语言内部使用的方法。\n\n\n# symbol.hasinstance\n\n对象的symbol.hasinstance属性，指向一个内部方法。当其他对象使用instanceof运算符，判断是否为该对象的实例时，会调用这个方法。比如，foo instanceof foo在语言内部，实际调用的是foo[symbol.hasinstance](foo)。\n\nclass myclass {\n  [symbol.hasinstance](foo) {\n    return foo instanceof array;\n  }\n}\n\n[1, 2, 3] instanceof new myclass() // true\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n上面代码中，myclass是一个类，new myclass()会返回一个实例。该实例的symbol.hasinstance方法，会在进行instanceof运算时自动调用，判断左侧的运算子是否为array的实例。\n\n下面是另一个例子。\n\nclass even {\n  static [symbol.hasinstance](obj) {\n    return number(obj) % 2 === 0;\n  }\n}\n\n// 等同于\nconst even = {\n  [symbol.hasinstance](obj) {\n    return number(obj) % 2 === 0;\n  }\n};\n\n1 instanceof even // false\n2 instanceof even // true\n12345 instanceof even // false\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n\n# symbol.isconcatspreadable\n\n对象的symbol.isconcatspreadable属性等于一个布尔值，表示该对象用于array.prototype.concat()时，是否可以展开。\n\nlet arr1 = ['c', 'd'];\n['a', 'b'].concat(arr1, 'e') // ['a', 'b', 'c', 'd', 'e']\narr1[symbol.isconcatspreadable] // undefined\n\nlet arr2 = ['c', 'd'];\narr2[symbol.isconcatspreadable] = false;\n['a', 'b'].concat(arr2, 'e') // ['a', 'b', ['c','d'], 'e']\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n上面代码说明，数组的默认行为是可以展开，symbol.isconcatspreadable默认等于undefined。该属性等于true时，也有展开的效果。\n\n类似数组的对象正好相反，默认不展开。它的symbol.isconcatspreadable属性设为true，才可以展开。\n\nlet obj = {length: 2, 0: 'c', 1: 'd'};\n['a', 'b'].concat(obj, 'e') // ['a', 'b', obj, 'e']\n\nobj[symbol.isconcatspreadable] = true;\n['a', 'b'].concat(obj, 'e') // ['a', 'b', 'c', 'd', 'e']\n\n\n1\n2\n3\n4\n5\n\n\nsymbol.isconcatspreadable属性也可以定义在类里面。\n\nclass a1 extends array {\n  constructor(args) {\n    super(args);\n    this[symbol.isconcatspreadable] = true;\n  }\n}\nclass a2 extends array {\n  constructor(args) {\n    super(args);\n  }\n  get [symbol.isconcatspreadable] () {\n    return false;\n  }\n}\nlet a1 = new a1();\na1[0] = 3;\na1[1] = 4;\nlet a2 = new a2();\na2[0] = 5;\na2[1] = 6;\n[1, 2].concat(a1).concat(a2)\n// [1, 2, 3, 4, [5, 6]]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n\n\n上面代码中，类a1是可展开的，类a2是不可展开的，所以使用concat时有不一样的结果。\n\n注意，symbol.isconcatspreadable的位置差异，a1是定义在实例上，a2是定义在类本身，效果相同。\n\n\n# symbol.species\n\n对象的symbol.species属性，指向一个构造函数。创建衍生对象时，会使用该属性。\n\nclass myarray extends array {\n}\n\nconst a = new myarray(1, 2, 3);\nconst b = a.map(x => x);\nconst c = a.filter(x => x > 1);\n\nb instanceof myarray // true\nc instanceof myarray // true\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n上面代码中，子类myarray继承了父类array，a是myarray的实例，b和c是a的衍生对象。你可能会认为，b和c都是调用数组方法生成的，所以应该是数组（array的实例），但实际上它们也是myarray的实例。\n\nsymbol.species属性就是为了解决这个问题而提供的。现在，我们可以为myarray设置symbol.species属性。\n\nclass myarray extends array {\n  static get [symbol.species]() { return array; }\n}\n\n\n1\n2\n3\n\n\n上面代码中，由于定义了symbol.species属性，创建衍生对象时就会使用这个属性返回的函数，作为构造函数。这个例子也说明，定义symbol.species属性要采用get取值器。默认的symbol.species属性等同于下面的写法。\n\nstatic get [symbol.species]() {\n  return this;\n}\n\n\n1\n2\n3\n\n\n现在，再来看前面的例子。\n\nclass myarray extends array {\n  static get [symbol.species]() { return array; }\n}\n\nconst a = new myarray();\nconst b = a.map(x => x);\n\nb instanceof myarray // false\nb instanceof array // true\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n上面代码中，a.map(x => x)生成的衍生对象，就不是myarray的实例，而直接就是array的实例。\n\n再看一个例子。\n\nclass t1 extends promise {\n}\n\nclass t2 extends promise {\n  static get [symbol.species]() {\n    return promise;\n  }\n}\n\nnew t1(r => r()).then(v => v) instanceof t1 // true\nnew t2(r => r()).then(v => v) instanceof t2 // false\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n上面代码中，t2定义了symbol.species属性，t1没有。结果就导致了创建衍生对象时（then方法），t1调用的是自身的构造方法，而t2调用的是promise的构造方法。\n\n总之，symbol.species的作用在于，实例对象在运行过程中，需要再次调用自身的构造函数时，会调用该属性指定的构造函数。它主要的用途是，有些类库是在基类的基础上修改的，那么子类使用继承的方法时，作者可能希望返回基类的实例，而不是子类的实例。\n\n\n# symbol.match\n\n对象的symbol.match属性，指向一个函数。当执行str.match(myobject)时，如果该属性存在，会调用它，返回该方法的返回值。\n\nstring.prototype.match(regexp)\n// 等同于\nregexp[symbol.match](this)\n\nclass mymatcher {\n  [symbol.match](string) {\n    return 'hello world'.indexof(string);\n  }\n}\n\n'e'.match(new mymatcher()) // 1\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n\n# symbol.replace\n\n对象的symbol.replace属性，指向一个方法，当该对象被string.prototype.replace方法调用时，会返回该方法的返回值。\n\nstring.prototype.replace(searchvalue, replacevalue)\n// 等同于\nsearchvalue[symbol.replace](this, replacevalue)\n\n\n1\n2\n3\n\n\n下面是一个例子。\n\nconst x = {};\nx[symbol.replace] = (...s) => console.log(s);\n\n'hello'.replace(x, 'world') // [\"hello\", \"world\"]\n\n\n1\n2\n3\n4\n\n\nsymbol.replace方法会收到两个参数，第一个参数是replace方法正在作用的对象，上面例子是hello，第二个参数是替换后的值，上面例子是world。\n\n\n# symbol.search\n\n对象的symbol.search属性，指向一个方法，当该对象被string.prototype.search方法调用时，会返回该方法的返回值。\n\nstring.prototype.search(regexp)\n// 等同于\nregexp[symbol.search](this)\n\nclass mysearch {\n  constructor(value) {\n    this.value = value;\n  }\n  [symbol.search](string) {\n    return string.indexof(this.value);\n  }\n}\n'foobar'.search(new mysearch('foo')) // 0\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n\n# symbol.split\n\n对象的symbol.split属性，指向一个方法，当该对象被string.prototype.split方法调用时，会返回该方法的返回值。\n\nstring.prototype.split(separator, limit)\n// 等同于\nseparator[symbol.split](this, limit)\n\n\n1\n2\n3\n\n\n下面是一个例子。\n\nclass mysplitter {\n  constructor(value) {\n    this.value = value;\n  }\n  [symbol.split](string) {\n    let index = string.indexof(this.value);\n    if (index === -1) {\n      return string;\n    }\n    return [\n      string.substr(0, index),\n      string.substr(index + this.value.length)\n    ];\n  }\n}\n\n'foobar'.split(new mysplitter('foo'))\n// ['', 'bar']\n\n'foobar'.split(new mysplitter('bar'))\n// ['foo', '']\n\n'foobar'.split(new mysplitter('baz'))\n// 'foobar'\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n\n\n上面方法使用symbol.split方法，重新定义了字符串对象的split方法的行为，\n\n\n# symbol.iterator\n\n对象的symbol.iterator属性，指向该对象的默认遍历器方法。\n\nconst myiterable = {};\nmyiterable[symbol.iterator] = function* () {\n  yield 1;\n  yield 2;\n  yield 3;\n};\n\n[...myiterable] // [1, 2, 3]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n对象进行for...of循环时，会调用symbol.iterator方法，返回该对象的默认遍历器，详细介绍参见《iterator 和 for...of 循环》一章。\n\nclass collection {\n  *[symbol.iterator]() {\n    let i = 0;\n    while(this[i] !== undefined) {\n      yield this[i];\n      ++i;\n    }\n  }\n}\n\nlet mycollection = new collection();\nmycollection[0] = 1;\nmycollection[1] = 2;\n\nfor(let value of mycollection) {\n  console.log(value);\n}\n// 1\n// 2\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\n\n# symbol.toprimitive\n\n对象的symbol.toprimitive属性，指向一个方法。该对象被转为原始类型的值时，会调用这个方法，返回该对象对应的原始类型值。\n\nsymbol.toprimitive被调用时，会接受一个字符串参数，表示当前运算的模式，一共有三种模式。\n\n * number：该场合需要转成数值\n * string：该场合需要转成字符串\n * default：该场合可以转成数值，也可以转成字符串\n\nlet obj = {\n  [symbol.toprimitive](hint) {\n    switch (hint) {\n      case 'number':\n        return 123;\n      case 'string':\n        return 'str';\n      case 'default':\n        return 'default';\n      default:\n        throw new error();\n     }\n   }\n};\n\n2 * obj // 246\n3 + obj // '3default'\nobj == 'default' // true\nstring(obj) // 'str'\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\n\n# symbol.tostringtag\n\n对象的symbol.tostringtag属性，指向一个方法。在该对象上面调用object.prototype.tostring方法时，如果这个属性存在，它的返回值会出现在tostring方法返回的字符串之中，表示对象的类型。也就是说，这个属性可以用来定制[object object]或[object array]中object后面的那个字符串。\n\n// 例一\n({[symbol.tostringtag]: 'foo'}.tostring())\n// \"[object foo]\"\n\n// 例二\nclass collection {\n  get [symbol.tostringtag]() {\n    return 'xxx';\n  }\n}\nlet x = new collection();\nobject.prototype.tostring.call(x) // \"[object xxx]\"\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\nes6 新增内置对象的symbol.tostringtag属性值如下。\n\n * json[symbol.tostringtag]：'json'\n * math[symbol.tostringtag]：'math'\n * module 对象m[symbol.tostringtag]：'module'\n * arraybuffer.prototype[symbol.tostringtag]：'arraybuffer'\n * dataview.prototype[symbol.tostringtag]：'dataview'\n * map.prototype[symbol.tostringtag]：'map'\n * promise.prototype[symbol.tostringtag]：'promise'\n * set.prototype[symbol.tostringtag]：'set'\n * %typedarray%.prototype[symbol.tostringtag]：'uint8array'等\n * weakmap.prototype[symbol.tostringtag]：'weakmap'\n * weakset.prototype[symbol.tostringtag]：'weakset'\n * %mapiteratorprototype%[symbol.tostringtag]：'map iterator'\n * %setiteratorprototype%[symbol.tostringtag]：'set iterator'\n * %stringiteratorprototype%[symbol.tostringtag]：'string iterator'\n * symbol.prototype[symbol.tostringtag]：'symbol'\n * generator.prototype[symbol.tostringtag]：'generator'\n * generatorfunction.prototype[symbol.tostringtag]：'generatorfunction'\n\n\n# symbol.unscopables\n\n对象的symbol.unscopables属性，指向一个对象。该对象指定了使用with关键字时，哪些属性会被with环境排除。\n\narray.prototype[symbol.unscopables]\n// {\n//   copywithin: true,\n//   entries: true,\n//   fill: true,\n//   find: true,\n//   findindex: true,\n//   includes: true,\n//   keys: true\n// }\n\nobject.keys(array.prototype[symbol.unscopables])\n// ['copywithin', 'entries', 'fill', 'find', 'findindex', 'includes', 'keys']\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n上面代码说明，数组有 7 个属性，会被with命令排除。\n\n// 没有 unscopables 时\nclass myclass {\n  foo() { return 1; }\n}\n\nvar foo = function () { return 2; };\n\nwith (myclass.prototype) {\n  foo(); // 1\n}\n\n// 有 unscopables 时\nclass myclass {\n  foo() { return 1; }\n  get [symbol.unscopables]() {\n    return { foo: true };\n  }\n}\n\nvar foo = function () { return 2; };\n\nwith (myclass.prototype) {\n  foo(); // 2\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n\n\n上面代码通过指定symbol.unscopables属性，使得with语法块不会在当前作用域寻找foo属性，即foo将指向外层作用域的变量。",charsets:{cjk:!0}},{title:"对象的扩展",frontmatter:{title:"对象的扩展",date:"2020-02-09T16:00:29.000Z",permalink:"/pages/b5e3e0a0ff6e9c25",author:"阮一峰",categories:["《ES6 教程》笔记"],tags:["ES6"],readingShow:"top"},regularPath:"/06.%E4%B9%A6%E7%B1%8D/05.%E3%80%8AES6%20%E6%95%99%E7%A8%8B%E3%80%8B%E7%AC%94%E8%AE%B0/10.%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%89%A9%E5%B1%95.html",relativePath:"06.书籍/05.《ES6 教程》笔记/10.对象的扩展.md",key:"v-4aa844fe",path:"/pages/b5e3e0a0ff6e9c25/",headers:[{level:2,title:"属性的简洁表示法",slug:"属性的简洁表示法",normalizedTitle:"属性的简洁表示法",charIndex:93},{level:2,title:"属性名表达式",slug:"属性名表达式",normalizedTitle:"属性名表达式",charIndex:2152},{level:2,title:"方法的 name 属性",slug:"方法的-name-属性",normalizedTitle:"方法的 name 属性",charIndex:3364},{level:2,title:"属性的可枚举性和遍历",slug:"属性的可枚举性和遍历",normalizedTitle:"属性的可枚举性和遍历",charIndex:4433},{level:3,title:"可枚举性",slug:"可枚举性",normalizedTitle:"可枚举性",charIndex:4436},{level:3,title:"属性的遍历",slug:"属性的遍历",normalizedTitle:"属性的遍历",charIndex:5669},{level:2,title:"super 关键字",slug:"super-关键字",normalizedTitle:"super 关键字",charIndex:6448},{level:2,title:"对象的扩展运算符",slug:"对象的扩展运算符",normalizedTitle:"对象的扩展运算符",charIndex:7595},{level:3,title:"解构赋值",slug:"解构赋值",normalizedTitle:"解构赋值",charIndex:7656},{level:3,title:"扩展运算符",slug:"扩展运算符",normalizedTitle:"扩展运算符",charIndex:7598},{level:2,title:"链判断运算符",slug:"链判断运算符",normalizedTitle:"链判断运算符",charIndex:11842},{level:2,title:"Null 判断运算符",slug:"null-判断运算符",normalizedTitle:"null 判断运算符",charIndex:14050}],excerpt:'<h1 id="对象的扩展"><a class="header-anchor" href="#对象的扩展">#</a> 对象的扩展</h1>\n<p>对象（object）是 JavaScript 最重要的数据结构。ES6 对它进行了重大升级，本章介绍数据结构本身的改变，下一章介绍<code>Object</code>对象的新增方法。</p>\n',lastUpdated:"2022/9/22 下午4:28:09",lastUpdatedTimestamp:1663835289e3,headersStr:"属性的简洁表示法 属性名表达式 方法的 name 属性 属性的可枚举性和遍历 可枚举性 属性的遍历 super 关键字 对象的扩展运算符 解构赋值 扩展运算符 链判断运算符 Null 判断运算符",content:"# 对象的扩展\n\n对象（object）是 JavaScript 最重要的数据结构。ES6 对它进行了重大升级，本章介绍数据结构本身的改变，下一章介绍Object对象的新增方法。\n\n\n# 属性的简洁表示法\n\nES6 允许在大括号里面，直接写入变量和函数，作为对象的属性和方法。这样的书写更加简洁。\n\nconst foo = 'bar';\nconst baz = {foo};\nbaz // {foo: \"bar\"}\n\n// 等同于\nconst baz = {foo: foo};\n\n\n1\n2\n3\n4\n5\n6\n\n\n上面代码中，变量foo直接写在大括号里面。这时，属性名就是变量名, 属性值就是变量值。下面是另一个例子。\n\nfunction f(x, y) {\n  return {x, y};\n}\n\n// 等同于\n\nfunction f(x, y) {\n  return {x: x, y: y};\n}\n\nf(1, 2) // Object {x: 1, y: 2}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n除了属性简写，方法也可以简写。\n\nconst o = {\n  method() {\n    return \"Hello!\";\n  }\n};\n\n// 等同于\n\nconst o = {\n  method: function() {\n    return \"Hello!\";\n  }\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n下面是一个实际的例子。\n\nlet birth = '2000/01/01';\n\nconst Person = {\n\n  name: '张三',\n\n  //等同于birth: birth\n  birth,\n\n  // 等同于hello: function ()...\n  hello() { console.log('我的名字是', this.name); }\n\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n这种写法用于函数的返回值，将会非常方便。\n\nfunction getPoint() {\n  const x = 1;\n  const y = 10;\n  return {x, y};\n}\n\ngetPoint()\n// {x:1, y:10}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\nCommonJS 模块输出一组变量，就非常合适使用简洁写法。\n\nlet ms = {};\n\nfunction getItem (key) {\n  return key in ms ? ms[key] : null;\n}\n\nfunction setItem (key, value) {\n  ms[key] = value;\n}\n\nfunction clear () {\n  ms = {};\n}\n\nmodule.exports = { getItem, setItem, clear };\n// 等同于\nmodule.exports = {\n  getItem: getItem,\n  setItem: setItem,\n  clear: clear\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n\n\n属性的赋值器（setter）和取值器（getter），事实上也是采用这种写法。\n\nconst cart = {\n  _wheels: 4,\n\n  get wheels () {\n    return this._wheels;\n  },\n\n  set wheels (value) {\n    if (value < this._wheels) {\n      throw new Error('数值太小了！');\n    }\n    this._wheels = value;\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n简洁写法在打印对象时也很有用。\n\nlet user = {\n  name: 'test'\n};\n\nlet foo = {\n  bar: 'baz'\n};\n\nconsole.log(user, foo)\n// {name: \"test\"} {bar: \"baz\"}\nconsole.log({user, foo})\n// {user: {name: \"test\"}, foo: {bar: \"baz\"}}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n上面代码中，console.log直接输出user和foo两个对象时，就是两组键值对，可能会混淆。把它们放在大括号里面输出，就变成了对象的简洁表示法，每组键值对前面会打印对象名，这样就比较清晰了。\n\n注意，简写的对象方法不能用作构造函数，会报错。\n\nconst obj = {\n  f() {\n    this.foo = 'bar';\n  }\n};\n\nnew obj.f() // 报错\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n上面代码中，f是一个简写的对象方法，所以obj.f不能当作构造函数使用。\n\n\n# 属性名表达式\n\nJavaScript 定义对象的属性，有两种方法。\n\n// 方法一\nobj.foo = true;\n\n// 方法二\nobj['a' + 'bc'] = 123;\n\n\n1\n2\n3\n4\n5\n\n\n上面代码的方法一是直接用标识符作为属性名，方法二是用表达式作为属性名，这时要将表达式放在方括号之内。\n\n但是，如果使用字面量方式定义对象（使用大括号），在 ES5 中只能使用方法一（标识符）定义属性。\n\nvar obj = {\n  foo: true,\n  abc: 123\n};\n\n\n1\n2\n3\n4\n\n\nES6 允许字面量定义对象时，用方法二（表达式）作为对象的属性名，即把表达式放在方括号内。\n\nlet propKey = 'foo';\n\nlet obj = {\n  [propKey]: true,\n  ['a' + 'bc']: 123\n};\n\n\n1\n2\n3\n4\n5\n6\n\n\n下面是另一个例子。\n\nlet lastWord = 'last word';\n\nconst a = {\n  'first word': 'hello',\n  [lastWord]: 'world'\n};\n\na['first word'] // \"hello\"\na[lastWord] // \"world\"\na['last word'] // \"world\"\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n表达式还可以用于定义方法名。\n\nlet obj = {\n  ['h' + 'ello']() {\n    return 'hi';\n  }\n};\n\nobj.hello() // hi\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n注意，属性名表达式与简洁表示法，不能同时使用，会报错。\n\n// 报错\nconst foo = 'bar';\nconst bar = 'abc';\nconst baz = { [foo] };\n\n// 正确\nconst foo = 'bar';\nconst baz = { [foo]: 'abc'};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n注意，属性名表达式如果是一个对象，默认情况下会自动将对象转为字符串[object Object]，这一点要特别小心。\n\nconst keyA = {a: 1};\nconst keyB = {b: 2};\n\nconst myObject = {\n  [keyA]: 'valueA',\n  [keyB]: 'valueB'\n};\n\nmyObject // Object {[object Object]: \"valueB\"}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n上面代码中，[keyA]和[keyB]得到的都是[object Object]，所以[keyB]会把[keyA]覆盖掉，而myObject最后只有一个[object Object]属性。\n\n\n# 方法的 name 属性\n\n函数的name属性，返回函数名。对象方法也是函数，因此也有name属性。\n\nconst person = {\n  sayName() {\n    console.log('hello!');\n  },\n};\n\nperson.sayName.name   // \"sayName\"\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n上面代码中，方法的name属性返回函数名（即方法名）。\n\n如果对象的方法使用了取值函数（getter）和存值函数（setter），则name属性不是在该方法上面，而是该方法的属性的描述对象的get和set属性上面，返回值是方法名前加上get和set。\n\nconst obj = {\n  get foo() {},\n  set foo(x) {}\n};\n\nobj.foo.name\n// TypeError: Cannot read property 'name' of undefined\n\nconst descriptor = Object.getOwnPropertyDescriptor(obj, 'foo');\n\ndescriptor.get.name // \"get foo\"\ndescriptor.set.name // \"set foo\"\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n有两种特殊情况：bind方法创造的函数，name属性返回bound加上原函数的名字；Function构造函数创造的函数，name属性返回anonymous。\n\n(new Function()).name // \"anonymous\"\n\nvar doSomething = function() {\n  // ...\n};\ndoSomething.bind().name // \"bound doSomething\"\n\n\n1\n2\n3\n4\n5\n6\n\n\n如果对象的方法是一个 Symbol 值，那么name属性返回的是这个 Symbol 值的描述。\n\nconst key1 = Symbol('description');\nconst key2 = Symbol();\nlet obj = {\n  [key1]() {},\n  [key2]() {},\n};\nobj[key1].name // \"[description]\"\nobj[key2].name // \"\"\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n上面代码中，key1对应的 Symbol 值有描述，key2没有。\n\n\n# 属性的可枚举性和遍历\n\n\n# 可枚举性\n\n对象的每个属性都有一个描述对象（Descriptor），用来控制该属性的行为。Object.getOwnPropertyDescriptor方法可以获取该属性的描述对象。\n\nlet obj = { foo: 123 };\nObject.getOwnPropertyDescriptor(obj, 'foo')\n//  {\n//    value: 123,\n//    writable: true,\n//    enumerable: true,\n//    configurable: true\n//  }\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n描述对象的enumerable属性，称为“可枚举性”，如果该属性为false，就表示某些操作会忽略当前属性。\n\n目前，有四个操作会忽略enumerable为false的属性。\n\n * for...in循环：只遍历对象自身的和继承的可枚举的属性。\n * Object.keys()：返回对象自身的所有可枚举的属性的键名。\n * JSON.stringify()：只串行化对象自身的可枚举的属性。\n * Object.assign()： 忽略enumerable为false的属性，只拷贝对象自身的可枚举的属性。\n\n这四个操作之中，前三个是 ES5 就有的，最后一个Object.assign()是 ES6 新增的。其中，只有for...in会返回继承的属性，其他三个方法都会忽略继承的属性，只处理对象自身的属性。实际上，引入“可枚举”（enumerable）这个概念的最初目的，就是让某些属性可以规避掉for...in操作，不然所有内部属性和方法都会被遍历到。比如，对象原型的toString方法，以及数组的length属性，就通过“可枚举性”，从而避免被for...in遍历到。\n\nObject.getOwnPropertyDescriptor(Object.prototype, 'toString').enumerable\n// false\n\nObject.getOwnPropertyDescriptor([], 'length').enumerable\n// false\n\n\n1\n2\n3\n4\n5\n\n\n上面代码中，toString和length属性的enumerable都是false，因此for...in不会遍历到这两个继承自原型的属性。\n\n另外，ES6 规定，所有 Class 的原型的方法都是不可枚举的。\n\nObject.getOwnPropertyDescriptor(class {foo() {}}.prototype, 'foo').enumerable\n// false\n\n\n1\n2\n\n\n总的来说，操作中引入继承的属性会让问题复杂化，大多数时候，我们只关心对象自身的属性。所以，尽量不要用for...in循环，而用Object.keys()代替。\n\n\n# 属性的遍历\n\nES6 一共有 5 种方法可以遍历对象的属性。\n\n（1）for...in\n\nfor...in循环遍历对象自身的和继承的可枚举属性（不含 Symbol 属性）。\n\n（2）Object.keys(obj)\n\nObject.keys返回一个数组，包括对象自身的（不含继承的）所有可枚举属性（不含 Symbol 属性）的键名。\n\n（3）Object.getOwnPropertyNames(obj)\n\nObject.getOwnPropertyNames返回一个数组，包含对象自身的所有属性（不含 Symbol 属性，但是包括不可枚举属性）的键名。\n\n（4）Object.getOwnPropertySymbols(obj)\n\nObject.getOwnPropertySymbols返回一个数组，包含对象自身的所有 Symbol 属性的键名。\n\n（5）Reflect.ownKeys(obj)\n\nReflect.ownKeys返回一个数组，包含对象自身的所有键名，不管键名是 Symbol 或字符串，也不管是否可枚举。\n\n以上的 5 种方法遍历对象的键名，都遵守同样的属性遍历的次序规则。\n\n * 首先遍历所有数值键，按照数值升序排列。\n * 其次遍历所有字符串键，按照加入时间升序排列。\n * 最后遍历所有 Symbol 键，按照加入时间升序排列。\n\nReflect.ownKeys({ [Symbol()]:0, b:0, 10:0, 2:0, a:0 })\n// ['2', '10', 'b', 'a', Symbol()]\n\n\n1\n2\n\n\n上面代码中，Reflect.ownKeys方法返回一个数组，包含了参数对象的所有属性。这个数组的属性次序是这样的，首先是数值属性2和10，其次是字符串属性b和a，最后是 Symbol 属性。\n\n\n# super 关键字\n\n我们知道，this关键字总是指向函数所在的当前对象，ES6 又新增了另一个类似的关键字super，指向当前对象的原型对象。\n\nconst proto = {\n  foo: 'hello'\n};\n\nconst obj = {\n  foo: 'world',\n  find() {\n    return super.foo;\n  }\n};\n\nObject.setPrototypeOf(obj, proto);\nobj.find() // \"hello\"\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n上面代码中，对象obj.find()方法之中，通过super.foo引用了原型对象proto的foo属性。\n\n注意，super关键字表示原型对象时，只能用在对象的方法之中，用在其他地方都会报错。\n\n// 报错\nconst obj = {\n  foo: super.foo\n}\n\n// 报错\nconst obj = {\n  foo: () => super.foo\n}\n\n// 报错\nconst obj = {\n  foo: function () {\n    return super.foo\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n上面三种super的用法都会报错，因为对于 JavaScript 引擎来说，这里的super都没有用在对象的方法之中。第一种写法是super用在属性里面，第二种和第三种写法是super用在一个函数里面，然后赋值给foo属性。目前，只有对象方法的简写法可以让 JavaScript 引擎确认，定义的是对象的方法。\n\nJavaScript 引擎内部，super.foo等同于Object.getPrototypeOf(this).foo（属性）或Object.getPrototypeOf(this).foo.call(this)（方法）。\n\nconst proto = {\n  x: 'hello',\n  foo() {\n    console.log(this.x);\n  },\n};\n\nconst obj = {\n  x: 'world',\n  foo() {\n    super.foo();\n  }\n}\n\nObject.setPrototypeOf(obj, proto);\n\nobj.foo() // \"world\"\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n上面代码中，super.foo指向原型对象proto的foo方法，但是绑定的this却还是当前对象obj，因此输出的就是world。\n\n\n# 对象的扩展运算符\n\n《数组的扩展》一章中，已经介绍过扩展运算符（...）。ES2018 将这个运算符引入了对象。\n\n\n# 解构赋值\n\n对象的解构赋值用于从一个对象取值，相当于将目标对象自身的所有可遍历的（enumerable）、但尚未被读取的属性，分配到指定的对象上面。所有的键和它们的值，都会拷贝到新对象上面。\n\nlet { x, y, ...z } = { x: 1, y: 2, a: 3, b: 4 };\nx // 1\ny // 2\nz // { a: 3, b: 4 }\n\n\n1\n2\n3\n4\n\n\n上面代码中，变量z是解构赋值所在的对象。它获取等号右边的所有尚未读取的键（a和b），将它们连同值一起拷贝过来。\n\n由于解构赋值要求等号右边是一个对象，所以如果等号右边是undefined或null，就会报错，因为它们无法转为对象。\n\nlet { ...z } = null; // 运行时错误\nlet { ...z } = undefined; // 运行时错误\n\n\n1\n2\n\n\n解构赋值必须是最后一个参数，否则会报错。\n\nlet { ...x, y, z } = someObject; // 句法错误\nlet { x, ...y, ...z } = someObject; // 句法错误\n\n\n1\n2\n\n\n上面代码中，解构赋值不是最后一个参数，所以会报错。\n\n注意，解构赋值的拷贝是浅拷贝，即如果一个键的值是复合类型的值（数组、对象、函数）、那么解构赋值拷贝的是这个值的引用，而不是这个值的副本。\n\nlet obj = { a: { b: 1 } };\nlet { ...x } = obj;\nobj.a.b = 2;\nx.a.b // 2\n\n\n1\n2\n3\n4\n\n\n上面代码中，x是解构赋值所在的对象，拷贝了对象obj的a属性。a属性引用了一个对象，修改这个对象的值，会影响到解构赋值对它的引用。\n\n另外，扩展运算符的解构赋值，不能复制继承自原型对象的属性。\n\nlet o1 = { a: 1 };\nlet o2 = { b: 2 };\no2.__proto__ = o1;\nlet { ...o3 } = o2;\no3 // { b: 2 }\no3.a // undefined\n\n\n1\n2\n3\n4\n5\n6\n\n\n上面代码中，对象o3复制了o2，但是只复制了o2自身的属性，没有复制它的原型对象o1的属性。\n\n下面是另一个例子。\n\nconst o = Object.create({ x: 1, y: 2 });\no.z = 3;\n\nlet { x, ...newObj } = o;\nlet { y, z } = newObj;\nx // 1\ny // undefined\nz // 3\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n上面代码中，变量x是单纯的解构赋值，所以可以读取对象o继承的属性；变量y和z是扩展运算符的解构赋值，只能读取对象o自身的属性，所以变量z可以赋值成功，变量y取不到值。ES6 规定，变量声明语句之中，如果使用解构赋值，扩展运算符后面必须是一个变量名，而不能是一个解构赋值表达式，所以上面代码引入了中间变量newObj，如果写成下面这样会报错。\n\nlet { x, ...{ y, z } } = o;\n// SyntaxError: ... must be followed by an identifier in declaration contexts\n\n\n1\n2\n\n\n解构赋值的一个用处，是扩展某个函数的参数，引入其他操作。\n\nfunction baseFunction({ a, b }) {\n  // ...\n}\nfunction wrapperFunction({ x, y, ...restConfig }) {\n  // 使用 x 和 y 参数进行操作\n  // 其余参数传给原始函数\n  return baseFunction(restConfig);\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n上面代码中，原始函数baseFunction接受a和b作为参数，函数wrapperFunction在baseFunction的基础上进行了扩展，能够接受多余的参数，并且保留原始函数的行为。\n\n\n# 扩展运算符\n\n对象的扩展运算符（...）用于取出参数对象的所有可遍历属性，拷贝到当前对象之中。\n\nlet z = { a: 3, b: 4 };\nlet n = { ...z };\nn // { a: 3, b: 4 }\n\n\n1\n2\n3\n\n\n由于数组是特殊的对象，所以对象的扩展运算符也可以用于数组。\n\nlet foo = { ...['a', 'b', 'c'] };\nfoo\n// {0: \"a\", 1: \"b\", 2: \"c\"}\n\n\n1\n2\n3\n\n\n如果扩展运算符后面是一个空对象，则没有任何效果。\n\n{...{}, a: 1}\n// { a: 1 }\n\n\n1\n2\n\n\n如果扩展运算符后面不是对象，则会自动将其转为对象。\n\n// 等同于 {...Object(1)}\n{...1} // {}\n\n\n1\n2\n\n\n上面代码中，扩展运算符后面是整数1，会自动转为数值的包装对象Number{1}。由于该对象没有自身属性，所以返回一个空对象。\n\n下面的例子都是类似的道理。\n\n// 等同于 {...Object(true)}\n{...true} // {}\n\n// 等同于 {...Object(undefined)}\n{...undefined} // {}\n\n// 等同于 {...Object(null)}\n{...null} // {}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n但是，如果扩展运算符后面是字符串，它会自动转成一个类似数组的对象，因此返回的不是空对象。\n\n{...'hello'}\n// {0: \"h\", 1: \"e\", 2: \"l\", 3: \"l\", 4: \"o\"}\n\n\n1\n2\n\n\n对象的扩展运算符等同于使用Object.assign()方法。\n\nlet aClone = { ...a };\n// 等同于\nlet aClone = Object.assign({}, a);\n\n\n1\n2\n3\n\n\n上面的例子只是拷贝了对象实例的属性，如果想完整克隆一个对象，还拷贝对象原型的属性，可以采用下面的写法。\n\n// 写法一\nconst clone1 = {\n  __proto__: Object.getPrototypeOf(obj),\n  ...obj\n};\n\n// 写法二\nconst clone2 = Object.assign(\n  Object.create(Object.getPrototypeOf(obj)),\n  obj\n);\n\n// 写法三\nconst clone3 = Object.create(\n  Object.getPrototypeOf(obj),\n  Object.getOwnPropertyDescriptors(obj)\n)\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n上面代码中，写法一的__proto__属性在非浏览器的环境不一定部署，因此推荐使用写法二和写法三。\n\n扩展运算符可以用于合并两个对象。\n\nlet ab = { ...a, ...b };\n// 等同于\nlet ab = Object.assign({}, a, b);\n\n\n1\n2\n3\n\n\n如果用户自定义的属性，放在扩展运算符后面，则扩展运算符内部的同名属性会被覆盖掉。\n\nlet aWithOverrides = { ...a, x: 1, y: 2 };\n// 等同于\nlet aWithOverrides = { ...a, ...{ x: 1, y: 2 } };\n// 等同于\nlet x = 1, y = 2, aWithOverrides = { ...a, x, y };\n// 等同于\nlet aWithOverrides = Object.assign({}, a, { x: 1, y: 2 });\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n上面代码中，a对象的x属性和y属性，拷贝到新对象后会被覆盖掉。\n\n这用来修改现有对象部分的属性就很方便了。\n\nlet newVersion = {\n  ...previousVersion,\n  name: 'New Name' // Override the name property\n};\n\n\n1\n2\n3\n4\n\n\n上面代码中，newVersion对象自定义了name属性，其他属性全部复制自previousVersion对象。\n\n如果把自定义属性放在扩展运算符前面，就变成了设置新对象的默认属性值。\n\nlet aWithDefaults = { x: 1, y: 2, ...a };\n// 等同于\nlet aWithDefaults = Object.assign({}, { x: 1, y: 2 }, a);\n// 等同于\nlet aWithDefaults = Object.assign({ x: 1, y: 2 }, a);\n\n\n1\n2\n3\n4\n5\n\n\n与数组的扩展运算符一样，对象的扩展运算符后面可以跟表达式。\n\nconst obj = {\n  ...(x > 1 ? {a: 1} : {}),\n  b: 2,\n};\n\n\n1\n2\n3\n4\n\n\n扩展运算符的参数对象之中，如果有取值函数get，这个函数是会执行的。\n\n// 并不会抛出错误，因为 x 属性只是被定义，但没执行\nlet aWithXGetter = {\n  ...a,\n  get x() {\n    throw new Error('not throw yet');\n  }\n};\n\n// 会抛出错误，因为 x 属性被执行了\nlet runtimeError = {\n  ...a,\n  ...{\n    get x() {\n      throw new Error('throw now');\n    }\n  }\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n\n# 链判断运算符\n\n编程实务中，如果读取对象内部的某个属性，往往需要判断一下该对象是否存在。比如，要读取message.body.user.firstName，安全的写法是写成下面这样。\n\nconst firstName = (message\n  && message.body\n  && message.body.user\n  && message.body.user.firstName) || 'default';\n\n\n1\n2\n3\n4\n\n\n或者使用三元运算符?:，判断一个对象是否存在。\n\nconst fooInput = myForm.querySelector('input[name=foo]')\nconst fooValue = fooInput ? fooInput.value : undefined\n\n\n1\n2\n\n\n这样的层层判断非常麻烦，因此 ES2020 引入了“链判断运算符”（optional chaining operator）?.，简化上面的写法。\n\nconst firstName = message?.body?.user?.firstName || 'default';\nconst fooValue = myForm.querySelector('input[name=foo]')?.value\n\n\n1\n2\n\n\n上面代码使用了?.运算符，直接在链式调用的时候判断，左侧的对象是否为null或undefined。如果是的，就不再往下运算，而是返回undefined。\n\n链判断运算符有三种用法。\n\n * obj?.prop // 对象属性\n * obj?.[expr] // 同上\n * func?.(...args) // 函数或对象方法的调用\n\n下面是判断对象方法是否存在，如果存在就立即执行的例子。\n\niterator.return?.()\n\n\n1\n\n\n上面代码中，iterator.return如果有定义，就会调用该方法，否则直接返回undefined。\n\n对于那些可能没有实现的方法，这个运算符尤其有用。\n\nif (myForm.checkValidity?.() === false) {\n  // 表单校验失败\n  return;\n}\n\n\n1\n2\n3\n4\n\n\n上面代码中，老式浏览器的表单可能没有checkValidity这个方法，这时?.运算符就会返回undefined，判断语句就变成了undefined === false，所以就会跳过下面的代码。\n\n下面是这个运算符常见的使用形式，以及不使用该运算符时的等价形式。\n\na?.b\n// 等同于\na == null ? undefined : a.b\n\na?.[x]\n// 等同于\na == null ? undefined : a[x]\n\na?.b()\n// 等同于\na == null ? undefined : a.b()\n\na?.()\n// 等同于\na == null ? undefined : a()\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n上面代码中，特别注意后两种形式，如果a?.b()里面的a.b不是函数，不可调用，那么a?.b()是会报错的。a?.()也是如此，如果a不是null或undefined，但也不是函数，那么a?.()会报错。\n\n使用这个运算符，有几个注意点。\n\n（1）短路机制\n\na?.[++x]\n// 等同于\na == null ? undefined : a[++x]\n\n\n1\n2\n3\n\n\n上面代码中，如果a是undefined或null，那么x不会进行递增运算。也就是说，链判断运算符一旦为真，右侧的表达式就不再求值。\n\n（2）delete 运算符\n\ndelete a?.b\n// 等同于\na == null ? undefined : delete a.b\n\n\n1\n2\n3\n\n\n上面代码中，如果a是undefined或null，会直接返回undefined，而不会进行delete运算。\n\n（3）括号的影响\n\n如果属性链有圆括号，链判断运算符对圆括号外部没有影响，只对圆括号内部有影响。\n\n(a?.b).c\n// 等价于\n(a == null ? undefined : a.b).c\n\n\n1\n2\n3\n\n\n上面代码中，?.对圆括号外部没有影响，不管a对象是否存在，圆括号后面的.c总是会执行。\n\n一般来说，使用?.运算符的场合，不应该使用圆括号。\n\n（4）报错场合\n\n以下写法是禁止的，会报错。\n\n// 构造函数\nnew a?.()\nnew a?.b()\n\n// 链判断运算符的右侧有模板字符串\na?.`{b}`\na?.b`{c}`\n\n// 链判断运算符的左侧是 super\nsuper?.()\nsuper?.foo\n\n// 链运算符用于赋值运算符左侧\na?.b = c\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n（5）右侧不得为十进制数值\n\n为了保证兼容以前的代码，允许foo?.3:0被解析成foo ? .3 : 0，因此规定如果?.后面紧跟一个十进制数字，那么?.不再被看成是一个完整的运算符，而会按照三元运算符进行处理，也就是说，那个小数点会归属于后面的十进制数字，形成一个小数。\n\n\n# Null 判断运算符\n\n读取对象属性的时候，如果某个属性的值是null或undefined，有时候需要为它们指定默认值。常见做法是通过||运算符指定默认值。\n\nconst headerText = response.settings.headerText || 'Hello, world!';\nconst animationDuration = response.settings.animationDuration || 300;\nconst showSplashScreen = response.settings.showSplashScreen || true;\n\n\n1\n2\n3\n\n\n上面的三行代码都通过||运算符指定默认值，但是这样写是错的。开发者的原意是，只要属性的值为null或undefined，默认值就会生效，但是属性的值如果为空字符串或false或0，默认值也会生效。\n\n为了避免这种情况，ES2020 引入了一个新的 Null 判断运算符??。它的行为类似||，但是只有运算符左侧的值为null或undefined时，才会返回右侧的值。\n\nconst headerText = response.settings.headerText ?? 'Hello, world!';\nconst animationDuration = response.settings.animationDuration ?? 300;\nconst showSplashScreen = response.settings.showSplashScreen ?? true;\n\n\n1\n2\n3\n\n\n上面代码中，默认值只有在属性值为null或undefined时，才会生效。\n\n这个运算符的一个目的，就是跟链判断运算符?.配合使用，为null或undefined的值设置默认值。\n\nconst animationDuration = response.settings?.animationDuration ?? 300;\n\n\n1\n\n\n上面代码中，response.settings如果是null或undefined，就会返回默认值300。\n\n这个运算符很适合判断函数参数是否赋值。\n\nfunction Component(props) {\n  const enable = props.enabled ?? true;\n  // …\n}\n\n\n1\n2\n3\n4\n\n\n上面代码判断props参数的enabled属性是否赋值，等同于下面的写法。\n\nfunction Component(props) {\n  const {\n    enabled: enable = true,\n  } = props;\n  // …\n}\n\n\n1\n2\n3\n4\n5\n6\n\n\n??有一个运算优先级问题，它与&&和||的优先级孰高孰低。现在的规则是，如果多个逻辑运算符一起使用，必须用括号表明优先级，否则会报错。\n\n// 报错\nlhs && middle ?? rhs\nlhs ?? middle && rhs\nlhs || middle ?? rhs\nlhs ?? middle || rhs\n\n\n1\n2\n3\n4\n5\n\n\n上面四个表达式都会报错，必须加入表明优先级的括号。\n\n(lhs && middle) ?? rhs;\nlhs && (middle ?? rhs);\n\n(lhs ?? middle) && rhs;\nlhs ?? (middle && rhs);\n\n(lhs || middle) ?? rhs;\nlhs || (middle ?? rhs);\n\n(lhs ?? middle) || rhs;\nlhs ?? (middle || rhs);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n",normalizedContent:"# 对象的扩展\n\n对象（object）是 javascript 最重要的数据结构。es6 对它进行了重大升级，本章介绍数据结构本身的改变，下一章介绍object对象的新增方法。\n\n\n# 属性的简洁表示法\n\nes6 允许在大括号里面，直接写入变量和函数，作为对象的属性和方法。这样的书写更加简洁。\n\nconst foo = 'bar';\nconst baz = {foo};\nbaz // {foo: \"bar\"}\n\n// 等同于\nconst baz = {foo: foo};\n\n\n1\n2\n3\n4\n5\n6\n\n\n上面代码中，变量foo直接写在大括号里面。这时，属性名就是变量名, 属性值就是变量值。下面是另一个例子。\n\nfunction f(x, y) {\n  return {x, y};\n}\n\n// 等同于\n\nfunction f(x, y) {\n  return {x: x, y: y};\n}\n\nf(1, 2) // object {x: 1, y: 2}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n除了属性简写，方法也可以简写。\n\nconst o = {\n  method() {\n    return \"hello!\";\n  }\n};\n\n// 等同于\n\nconst o = {\n  method: function() {\n    return \"hello!\";\n  }\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n下面是一个实际的例子。\n\nlet birth = '2000/01/01';\n\nconst person = {\n\n  name: '张三',\n\n  //等同于birth: birth\n  birth,\n\n  // 等同于hello: function ()...\n  hello() { console.log('我的名字是', this.name); }\n\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n这种写法用于函数的返回值，将会非常方便。\n\nfunction getpoint() {\n  const x = 1;\n  const y = 10;\n  return {x, y};\n}\n\ngetpoint()\n// {x:1, y:10}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\ncommonjs 模块输出一组变量，就非常合适使用简洁写法。\n\nlet ms = {};\n\nfunction getitem (key) {\n  return key in ms ? ms[key] : null;\n}\n\nfunction setitem (key, value) {\n  ms[key] = value;\n}\n\nfunction clear () {\n  ms = {};\n}\n\nmodule.exports = { getitem, setitem, clear };\n// 等同于\nmodule.exports = {\n  getitem: getitem,\n  setitem: setitem,\n  clear: clear\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n\n\n属性的赋值器（setter）和取值器（getter），事实上也是采用这种写法。\n\nconst cart = {\n  _wheels: 4,\n\n  get wheels () {\n    return this._wheels;\n  },\n\n  set wheels (value) {\n    if (value < this._wheels) {\n      throw new error('数值太小了！');\n    }\n    this._wheels = value;\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n简洁写法在打印对象时也很有用。\n\nlet user = {\n  name: 'test'\n};\n\nlet foo = {\n  bar: 'baz'\n};\n\nconsole.log(user, foo)\n// {name: \"test\"} {bar: \"baz\"}\nconsole.log({user, foo})\n// {user: {name: \"test\"}, foo: {bar: \"baz\"}}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n上面代码中，console.log直接输出user和foo两个对象时，就是两组键值对，可能会混淆。把它们放在大括号里面输出，就变成了对象的简洁表示法，每组键值对前面会打印对象名，这样就比较清晰了。\n\n注意，简写的对象方法不能用作构造函数，会报错。\n\nconst obj = {\n  f() {\n    this.foo = 'bar';\n  }\n};\n\nnew obj.f() // 报错\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n上面代码中，f是一个简写的对象方法，所以obj.f不能当作构造函数使用。\n\n\n# 属性名表达式\n\njavascript 定义对象的属性，有两种方法。\n\n// 方法一\nobj.foo = true;\n\n// 方法二\nobj['a' + 'bc'] = 123;\n\n\n1\n2\n3\n4\n5\n\n\n上面代码的方法一是直接用标识符作为属性名，方法二是用表达式作为属性名，这时要将表达式放在方括号之内。\n\n但是，如果使用字面量方式定义对象（使用大括号），在 es5 中只能使用方法一（标识符）定义属性。\n\nvar obj = {\n  foo: true,\n  abc: 123\n};\n\n\n1\n2\n3\n4\n\n\nes6 允许字面量定义对象时，用方法二（表达式）作为对象的属性名，即把表达式放在方括号内。\n\nlet propkey = 'foo';\n\nlet obj = {\n  [propkey]: true,\n  ['a' + 'bc']: 123\n};\n\n\n1\n2\n3\n4\n5\n6\n\n\n下面是另一个例子。\n\nlet lastword = 'last word';\n\nconst a = {\n  'first word': 'hello',\n  [lastword]: 'world'\n};\n\na['first word'] // \"hello\"\na[lastword] // \"world\"\na['last word'] // \"world\"\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n表达式还可以用于定义方法名。\n\nlet obj = {\n  ['h' + 'ello']() {\n    return 'hi';\n  }\n};\n\nobj.hello() // hi\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n注意，属性名表达式与简洁表示法，不能同时使用，会报错。\n\n// 报错\nconst foo = 'bar';\nconst bar = 'abc';\nconst baz = { [foo] };\n\n// 正确\nconst foo = 'bar';\nconst baz = { [foo]: 'abc'};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n注意，属性名表达式如果是一个对象，默认情况下会自动将对象转为字符串[object object]，这一点要特别小心。\n\nconst keya = {a: 1};\nconst keyb = {b: 2};\n\nconst myobject = {\n  [keya]: 'valuea',\n  [keyb]: 'valueb'\n};\n\nmyobject // object {[object object]: \"valueb\"}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n上面代码中，[keya]和[keyb]得到的都是[object object]，所以[keyb]会把[keya]覆盖掉，而myobject最后只有一个[object object]属性。\n\n\n# 方法的 name 属性\n\n函数的name属性，返回函数名。对象方法也是函数，因此也有name属性。\n\nconst person = {\n  sayname() {\n    console.log('hello!');\n  },\n};\n\nperson.sayname.name   // \"sayname\"\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n上面代码中，方法的name属性返回函数名（即方法名）。\n\n如果对象的方法使用了取值函数（getter）和存值函数（setter），则name属性不是在该方法上面，而是该方法的属性的描述对象的get和set属性上面，返回值是方法名前加上get和set。\n\nconst obj = {\n  get foo() {},\n  set foo(x) {}\n};\n\nobj.foo.name\n// typeerror: cannot read property 'name' of undefined\n\nconst descriptor = object.getownpropertydescriptor(obj, 'foo');\n\ndescriptor.get.name // \"get foo\"\ndescriptor.set.name // \"set foo\"\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n有两种特殊情况：bind方法创造的函数，name属性返回bound加上原函数的名字；function构造函数创造的函数，name属性返回anonymous。\n\n(new function()).name // \"anonymous\"\n\nvar dosomething = function() {\n  // ...\n};\ndosomething.bind().name // \"bound dosomething\"\n\n\n1\n2\n3\n4\n5\n6\n\n\n如果对象的方法是一个 symbol 值，那么name属性返回的是这个 symbol 值的描述。\n\nconst key1 = symbol('description');\nconst key2 = symbol();\nlet obj = {\n  [key1]() {},\n  [key2]() {},\n};\nobj[key1].name // \"[description]\"\nobj[key2].name // \"\"\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n上面代码中，key1对应的 symbol 值有描述，key2没有。\n\n\n# 属性的可枚举性和遍历\n\n\n# 可枚举性\n\n对象的每个属性都有一个描述对象（descriptor），用来控制该属性的行为。object.getownpropertydescriptor方法可以获取该属性的描述对象。\n\nlet obj = { foo: 123 };\nobject.getownpropertydescriptor(obj, 'foo')\n//  {\n//    value: 123,\n//    writable: true,\n//    enumerable: true,\n//    configurable: true\n//  }\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n描述对象的enumerable属性，称为“可枚举性”，如果该属性为false，就表示某些操作会忽略当前属性。\n\n目前，有四个操作会忽略enumerable为false的属性。\n\n * for...in循环：只遍历对象自身的和继承的可枚举的属性。\n * object.keys()：返回对象自身的所有可枚举的属性的键名。\n * json.stringify()：只串行化对象自身的可枚举的属性。\n * object.assign()： 忽略enumerable为false的属性，只拷贝对象自身的可枚举的属性。\n\n这四个操作之中，前三个是 es5 就有的，最后一个object.assign()是 es6 新增的。其中，只有for...in会返回继承的属性，其他三个方法都会忽略继承的属性，只处理对象自身的属性。实际上，引入“可枚举”（enumerable）这个概念的最初目的，就是让某些属性可以规避掉for...in操作，不然所有内部属性和方法都会被遍历到。比如，对象原型的tostring方法，以及数组的length属性，就通过“可枚举性”，从而避免被for...in遍历到。\n\nobject.getownpropertydescriptor(object.prototype, 'tostring').enumerable\n// false\n\nobject.getownpropertydescriptor([], 'length').enumerable\n// false\n\n\n1\n2\n3\n4\n5\n\n\n上面代码中，tostring和length属性的enumerable都是false，因此for...in不会遍历到这两个继承自原型的属性。\n\n另外，es6 规定，所有 class 的原型的方法都是不可枚举的。\n\nobject.getownpropertydescriptor(class {foo() {}}.prototype, 'foo').enumerable\n// false\n\n\n1\n2\n\n\n总的来说，操作中引入继承的属性会让问题复杂化，大多数时候，我们只关心对象自身的属性。所以，尽量不要用for...in循环，而用object.keys()代替。\n\n\n# 属性的遍历\n\nes6 一共有 5 种方法可以遍历对象的属性。\n\n（1）for...in\n\nfor...in循环遍历对象自身的和继承的可枚举属性（不含 symbol 属性）。\n\n（2）object.keys(obj)\n\nobject.keys返回一个数组，包括对象自身的（不含继承的）所有可枚举属性（不含 symbol 属性）的键名。\n\n（3）object.getownpropertynames(obj)\n\nobject.getownpropertynames返回一个数组，包含对象自身的所有属性（不含 symbol 属性，但是包括不可枚举属性）的键名。\n\n（4）object.getownpropertysymbols(obj)\n\nobject.getownpropertysymbols返回一个数组，包含对象自身的所有 symbol 属性的键名。\n\n（5）reflect.ownkeys(obj)\n\nreflect.ownkeys返回一个数组，包含对象自身的所有键名，不管键名是 symbol 或字符串，也不管是否可枚举。\n\n以上的 5 种方法遍历对象的键名，都遵守同样的属性遍历的次序规则。\n\n * 首先遍历所有数值键，按照数值升序排列。\n * 其次遍历所有字符串键，按照加入时间升序排列。\n * 最后遍历所有 symbol 键，按照加入时间升序排列。\n\nreflect.ownkeys({ [symbol()]:0, b:0, 10:0, 2:0, a:0 })\n// ['2', '10', 'b', 'a', symbol()]\n\n\n1\n2\n\n\n上面代码中，reflect.ownkeys方法返回一个数组，包含了参数对象的所有属性。这个数组的属性次序是这样的，首先是数值属性2和10，其次是字符串属性b和a，最后是 symbol 属性。\n\n\n# super 关键字\n\n我们知道，this关键字总是指向函数所在的当前对象，es6 又新增了另一个类似的关键字super，指向当前对象的原型对象。\n\nconst proto = {\n  foo: 'hello'\n};\n\nconst obj = {\n  foo: 'world',\n  find() {\n    return super.foo;\n  }\n};\n\nobject.setprototypeof(obj, proto);\nobj.find() // \"hello\"\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n上面代码中，对象obj.find()方法之中，通过super.foo引用了原型对象proto的foo属性。\n\n注意，super关键字表示原型对象时，只能用在对象的方法之中，用在其他地方都会报错。\n\n// 报错\nconst obj = {\n  foo: super.foo\n}\n\n// 报错\nconst obj = {\n  foo: () => super.foo\n}\n\n// 报错\nconst obj = {\n  foo: function () {\n    return super.foo\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n上面三种super的用法都会报错，因为对于 javascript 引擎来说，这里的super都没有用在对象的方法之中。第一种写法是super用在属性里面，第二种和第三种写法是super用在一个函数里面，然后赋值给foo属性。目前，只有对象方法的简写法可以让 javascript 引擎确认，定义的是对象的方法。\n\njavascript 引擎内部，super.foo等同于object.getprototypeof(this).foo（属性）或object.getprototypeof(this).foo.call(this)（方法）。\n\nconst proto = {\n  x: 'hello',\n  foo() {\n    console.log(this.x);\n  },\n};\n\nconst obj = {\n  x: 'world',\n  foo() {\n    super.foo();\n  }\n}\n\nobject.setprototypeof(obj, proto);\n\nobj.foo() // \"world\"\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n上面代码中，super.foo指向原型对象proto的foo方法，但是绑定的this却还是当前对象obj，因此输出的就是world。\n\n\n# 对象的扩展运算符\n\n《数组的扩展》一章中，已经介绍过扩展运算符（...）。es2018 将这个运算符引入了对象。\n\n\n# 解构赋值\n\n对象的解构赋值用于从一个对象取值，相当于将目标对象自身的所有可遍历的（enumerable）、但尚未被读取的属性，分配到指定的对象上面。所有的键和它们的值，都会拷贝到新对象上面。\n\nlet { x, y, ...z } = { x: 1, y: 2, a: 3, b: 4 };\nx // 1\ny // 2\nz // { a: 3, b: 4 }\n\n\n1\n2\n3\n4\n\n\n上面代码中，变量z是解构赋值所在的对象。它获取等号右边的所有尚未读取的键（a和b），将它们连同值一起拷贝过来。\n\n由于解构赋值要求等号右边是一个对象，所以如果等号右边是undefined或null，就会报错，因为它们无法转为对象。\n\nlet { ...z } = null; // 运行时错误\nlet { ...z } = undefined; // 运行时错误\n\n\n1\n2\n\n\n解构赋值必须是最后一个参数，否则会报错。\n\nlet { ...x, y, z } = someobject; // 句法错误\nlet { x, ...y, ...z } = someobject; // 句法错误\n\n\n1\n2\n\n\n上面代码中，解构赋值不是最后一个参数，所以会报错。\n\n注意，解构赋值的拷贝是浅拷贝，即如果一个键的值是复合类型的值（数组、对象、函数）、那么解构赋值拷贝的是这个值的引用，而不是这个值的副本。\n\nlet obj = { a: { b: 1 } };\nlet { ...x } = obj;\nobj.a.b = 2;\nx.a.b // 2\n\n\n1\n2\n3\n4\n\n\n上面代码中，x是解构赋值所在的对象，拷贝了对象obj的a属性。a属性引用了一个对象，修改这个对象的值，会影响到解构赋值对它的引用。\n\n另外，扩展运算符的解构赋值，不能复制继承自原型对象的属性。\n\nlet o1 = { a: 1 };\nlet o2 = { b: 2 };\no2.__proto__ = o1;\nlet { ...o3 } = o2;\no3 // { b: 2 }\no3.a // undefined\n\n\n1\n2\n3\n4\n5\n6\n\n\n上面代码中，对象o3复制了o2，但是只复制了o2自身的属性，没有复制它的原型对象o1的属性。\n\n下面是另一个例子。\n\nconst o = object.create({ x: 1, y: 2 });\no.z = 3;\n\nlet { x, ...newobj } = o;\nlet { y, z } = newobj;\nx // 1\ny // undefined\nz // 3\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n上面代码中，变量x是单纯的解构赋值，所以可以读取对象o继承的属性；变量y和z是扩展运算符的解构赋值，只能读取对象o自身的属性，所以变量z可以赋值成功，变量y取不到值。es6 规定，变量声明语句之中，如果使用解构赋值，扩展运算符后面必须是一个变量名，而不能是一个解构赋值表达式，所以上面代码引入了中间变量newobj，如果写成下面这样会报错。\n\nlet { x, ...{ y, z } } = o;\n// syntaxerror: ... must be followed by an identifier in declaration contexts\n\n\n1\n2\n\n\n解构赋值的一个用处，是扩展某个函数的参数，引入其他操作。\n\nfunction basefunction({ a, b }) {\n  // ...\n}\nfunction wrapperfunction({ x, y, ...restconfig }) {\n  // 使用 x 和 y 参数进行操作\n  // 其余参数传给原始函数\n  return basefunction(restconfig);\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n上面代码中，原始函数basefunction接受a和b作为参数，函数wrapperfunction在basefunction的基础上进行了扩展，能够接受多余的参数，并且保留原始函数的行为。\n\n\n# 扩展运算符\n\n对象的扩展运算符（...）用于取出参数对象的所有可遍历属性，拷贝到当前对象之中。\n\nlet z = { a: 3, b: 4 };\nlet n = { ...z };\nn // { a: 3, b: 4 }\n\n\n1\n2\n3\n\n\n由于数组是特殊的对象，所以对象的扩展运算符也可以用于数组。\n\nlet foo = { ...['a', 'b', 'c'] };\nfoo\n// {0: \"a\", 1: \"b\", 2: \"c\"}\n\n\n1\n2\n3\n\n\n如果扩展运算符后面是一个空对象，则没有任何效果。\n\n{...{}, a: 1}\n// { a: 1 }\n\n\n1\n2\n\n\n如果扩展运算符后面不是对象，则会自动将其转为对象。\n\n// 等同于 {...object(1)}\n{...1} // {}\n\n\n1\n2\n\n\n上面代码中，扩展运算符后面是整数1，会自动转为数值的包装对象number{1}。由于该对象没有自身属性，所以返回一个空对象。\n\n下面的例子都是类似的道理。\n\n// 等同于 {...object(true)}\n{...true} // {}\n\n// 等同于 {...object(undefined)}\n{...undefined} // {}\n\n// 等同于 {...object(null)}\n{...null} // {}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n但是，如果扩展运算符后面是字符串，它会自动转成一个类似数组的对象，因此返回的不是空对象。\n\n{...'hello'}\n// {0: \"h\", 1: \"e\", 2: \"l\", 3: \"l\", 4: \"o\"}\n\n\n1\n2\n\n\n对象的扩展运算符等同于使用object.assign()方法。\n\nlet aclone = { ...a };\n// 等同于\nlet aclone = object.assign({}, a);\n\n\n1\n2\n3\n\n\n上面的例子只是拷贝了对象实例的属性，如果想完整克隆一个对象，还拷贝对象原型的属性，可以采用下面的写法。\n\n// 写法一\nconst clone1 = {\n  __proto__: object.getprototypeof(obj),\n  ...obj\n};\n\n// 写法二\nconst clone2 = object.assign(\n  object.create(object.getprototypeof(obj)),\n  obj\n);\n\n// 写法三\nconst clone3 = object.create(\n  object.getprototypeof(obj),\n  object.getownpropertydescriptors(obj)\n)\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n上面代码中，写法一的__proto__属性在非浏览器的环境不一定部署，因此推荐使用写法二和写法三。\n\n扩展运算符可以用于合并两个对象。\n\nlet ab = { ...a, ...b };\n// 等同于\nlet ab = object.assign({}, a, b);\n\n\n1\n2\n3\n\n\n如果用户自定义的属性，放在扩展运算符后面，则扩展运算符内部的同名属性会被覆盖掉。\n\nlet awithoverrides = { ...a, x: 1, y: 2 };\n// 等同于\nlet awithoverrides = { ...a, ...{ x: 1, y: 2 } };\n// 等同于\nlet x = 1, y = 2, awithoverrides = { ...a, x, y };\n// 等同于\nlet awithoverrides = object.assign({}, a, { x: 1, y: 2 });\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n上面代码中，a对象的x属性和y属性，拷贝到新对象后会被覆盖掉。\n\n这用来修改现有对象部分的属性就很方便了。\n\nlet newversion = {\n  ...previousversion,\n  name: 'new name' // override the name property\n};\n\n\n1\n2\n3\n4\n\n\n上面代码中，newversion对象自定义了name属性，其他属性全部复制自previousversion对象。\n\n如果把自定义属性放在扩展运算符前面，就变成了设置新对象的默认属性值。\n\nlet awithdefaults = { x: 1, y: 2, ...a };\n// 等同于\nlet awithdefaults = object.assign({}, { x: 1, y: 2 }, a);\n// 等同于\nlet awithdefaults = object.assign({ x: 1, y: 2 }, a);\n\n\n1\n2\n3\n4\n5\n\n\n与数组的扩展运算符一样，对象的扩展运算符后面可以跟表达式。\n\nconst obj = {\n  ...(x > 1 ? {a: 1} : {}),\n  b: 2,\n};\n\n\n1\n2\n3\n4\n\n\n扩展运算符的参数对象之中，如果有取值函数get，这个函数是会执行的。\n\n// 并不会抛出错误，因为 x 属性只是被定义，但没执行\nlet awithxgetter = {\n  ...a,\n  get x() {\n    throw new error('not throw yet');\n  }\n};\n\n// 会抛出错误，因为 x 属性被执行了\nlet runtimeerror = {\n  ...a,\n  ...{\n    get x() {\n      throw new error('throw now');\n    }\n  }\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n\n# 链判断运算符\n\n编程实务中，如果读取对象内部的某个属性，往往需要判断一下该对象是否存在。比如，要读取message.body.user.firstname，安全的写法是写成下面这样。\n\nconst firstname = (message\n  && message.body\n  && message.body.user\n  && message.body.user.firstname) || 'default';\n\n\n1\n2\n3\n4\n\n\n或者使用三元运算符?:，判断一个对象是否存在。\n\nconst fooinput = myform.queryselector('input[name=foo]')\nconst foovalue = fooinput ? fooinput.value : undefined\n\n\n1\n2\n\n\n这样的层层判断非常麻烦，因此 es2020 引入了“链判断运算符”（optional chaining operator）?.，简化上面的写法。\n\nconst firstname = message?.body?.user?.firstname || 'default';\nconst foovalue = myform.queryselector('input[name=foo]')?.value\n\n\n1\n2\n\n\n上面代码使用了?.运算符，直接在链式调用的时候判断，左侧的对象是否为null或undefined。如果是的，就不再往下运算，而是返回undefined。\n\n链判断运算符有三种用法。\n\n * obj?.prop // 对象属性\n * obj?.[expr] // 同上\n * func?.(...args) // 函数或对象方法的调用\n\n下面是判断对象方法是否存在，如果存在就立即执行的例子。\n\niterator.return?.()\n\n\n1\n\n\n上面代码中，iterator.return如果有定义，就会调用该方法，否则直接返回undefined。\n\n对于那些可能没有实现的方法，这个运算符尤其有用。\n\nif (myform.checkvalidity?.() === false) {\n  // 表单校验失败\n  return;\n}\n\n\n1\n2\n3\n4\n\n\n上面代码中，老式浏览器的表单可能没有checkvalidity这个方法，这时?.运算符就会返回undefined，判断语句就变成了undefined === false，所以就会跳过下面的代码。\n\n下面是这个运算符常见的使用形式，以及不使用该运算符时的等价形式。\n\na?.b\n// 等同于\na == null ? undefined : a.b\n\na?.[x]\n// 等同于\na == null ? undefined : a[x]\n\na?.b()\n// 等同于\na == null ? undefined : a.b()\n\na?.()\n// 等同于\na == null ? undefined : a()\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n上面代码中，特别注意后两种形式，如果a?.b()里面的a.b不是函数，不可调用，那么a?.b()是会报错的。a?.()也是如此，如果a不是null或undefined，但也不是函数，那么a?.()会报错。\n\n使用这个运算符，有几个注意点。\n\n（1）短路机制\n\na?.[++x]\n// 等同于\na == null ? undefined : a[++x]\n\n\n1\n2\n3\n\n\n上面代码中，如果a是undefined或null，那么x不会进行递增运算。也就是说，链判断运算符一旦为真，右侧的表达式就不再求值。\n\n（2）delete 运算符\n\ndelete a?.b\n// 等同于\na == null ? undefined : delete a.b\n\n\n1\n2\n3\n\n\n上面代码中，如果a是undefined或null，会直接返回undefined，而不会进行delete运算。\n\n（3）括号的影响\n\n如果属性链有圆括号，链判断运算符对圆括号外部没有影响，只对圆括号内部有影响。\n\n(a?.b).c\n// 等价于\n(a == null ? undefined : a.b).c\n\n\n1\n2\n3\n\n\n上面代码中，?.对圆括号外部没有影响，不管a对象是否存在，圆括号后面的.c总是会执行。\n\n一般来说，使用?.运算符的场合，不应该使用圆括号。\n\n（4）报错场合\n\n以下写法是禁止的，会报错。\n\n// 构造函数\nnew a?.()\nnew a?.b()\n\n// 链判断运算符的右侧有模板字符串\na?.`{b}`\na?.b`{c}`\n\n// 链判断运算符的左侧是 super\nsuper?.()\nsuper?.foo\n\n// 链运算符用于赋值运算符左侧\na?.b = c\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n（5）右侧不得为十进制数值\n\n为了保证兼容以前的代码，允许foo?.3:0被解析成foo ? .3 : 0，因此规定如果?.后面紧跟一个十进制数字，那么?.不再被看成是一个完整的运算符，而会按照三元运算符进行处理，也就是说，那个小数点会归属于后面的十进制数字，形成一个小数。\n\n\n# null 判断运算符\n\n读取对象属性的时候，如果某个属性的值是null或undefined，有时候需要为它们指定默认值。常见做法是通过||运算符指定默认值。\n\nconst headertext = response.settings.headertext || 'hello, world!';\nconst animationduration = response.settings.animationduration || 300;\nconst showsplashscreen = response.settings.showsplashscreen || true;\n\n\n1\n2\n3\n\n\n上面的三行代码都通过||运算符指定默认值，但是这样写是错的。开发者的原意是，只要属性的值为null或undefined，默认值就会生效，但是属性的值如果为空字符串或false或0，默认值也会生效。\n\n为了避免这种情况，es2020 引入了一个新的 null 判断运算符??。它的行为类似||，但是只有运算符左侧的值为null或undefined时，才会返回右侧的值。\n\nconst headertext = response.settings.headertext ?? 'hello, world!';\nconst animationduration = response.settings.animationduration ?? 300;\nconst showsplashscreen = response.settings.showsplashscreen ?? true;\n\n\n1\n2\n3\n\n\n上面代码中，默认值只有在属性值为null或undefined时，才会生效。\n\n这个运算符的一个目的，就是跟链判断运算符?.配合使用，为null或undefined的值设置默认值。\n\nconst animationduration = response.settings?.animationduration ?? 300;\n\n\n1\n\n\n上面代码中，response.settings如果是null或undefined，就会返回默认值300。\n\n这个运算符很适合判断函数参数是否赋值。\n\nfunction component(props) {\n  const enable = props.enabled ?? true;\n  // …\n}\n\n\n1\n2\n3\n4\n\n\n上面代码判断props参数的enabled属性是否赋值，等同于下面的写法。\n\nfunction component(props) {\n  const {\n    enabled: enable = true,\n  } = props;\n  // …\n}\n\n\n1\n2\n3\n4\n5\n6\n\n\n??有一个运算优先级问题，它与&&和||的优先级孰高孰低。现在的规则是，如果多个逻辑运算符一起使用，必须用括号表明优先级，否则会报错。\n\n// 报错\nlhs && middle ?? rhs\nlhs ?? middle && rhs\nlhs || middle ?? rhs\nlhs ?? middle || rhs\n\n\n1\n2\n3\n4\n5\n\n\n上面四个表达式都会报错，必须加入表明优先级的括号。\n\n(lhs && middle) ?? rhs;\nlhs && (middle ?? rhs);\n\n(lhs ?? middle) && rhs;\nlhs ?? (middle && rhs);\n\n(lhs || middle) ?? rhs;\nlhs || (middle ?? rhs);\n\n(lhs ?? middle) || rhs;\nlhs ?? (middle || rhs);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n",charsets:{cjk:!0}},{title:"Set 和 Map 数据结构",frontmatter:{title:"Set 和 Map 数据结构",date:"2020-02-09T16:00:29.000Z",permalink:"/pages/0c21dae358fca16b",author:"阮一峰",categories:["《ES6 教程》笔记"],tags:["ES6"],readingShow:"top"},regularPath:"/06.%E4%B9%A6%E7%B1%8D/05.%E3%80%8AES6%20%E6%95%99%E7%A8%8B%E3%80%8B%E7%AC%94%E8%AE%B0/13.Set%20%E5%92%8C%20Map%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.html",relativePath:"06.书籍/05.《ES6 教程》笔记/13.Set 和 Map 数据结构.md",key:"v-89b4e2ce",path:"/pages/0c21dae358fca16b/",headers:[{level:2,title:"Set",slug:"set",normalizedTitle:"set",charIndex:2},{level:3,title:"基本用法",slug:"基本用法",normalizedTitle:"基本用法",charIndex:29},{level:3,title:"Set 实例的属性和方法",slug:"set-实例的属性和方法",normalizedTitle:"set 实例的属性和方法",charIndex:1372},{level:3,title:"遍历操作",slug:"遍历操作",normalizedTitle:"遍历操作",charIndex:2514},{level:2,title:"WeakSet",slug:"weakset",normalizedTitle:"weakset",charIndex:5255},{level:3,title:"含义",slug:"含义",normalizedTitle:"含义",charIndex:5267},{level:3,title:"语法",slug:"语法",normalizedTitle:"语法",charIndex:6044},{level:2,title:"Map",slug:"map",normalizedTitle:"map",charIndex:8},{level:3,title:"含义和基本用法",slug:"含义和基本用法",normalizedTitle:"含义和基本用法",charIndex:7722},{level:3,title:"实例的属性和操作方法",slug:"实例的属性和操作方法",normalizedTitle:"实例的属性和操作方法",charIndex:10533},{level:3,title:"遍历方法",slug:"遍历方法",normalizedTitle:"遍历方法",charIndex:1513},{level:3,title:"与其他数据结构的互相转换",slug:"与其他数据结构的互相转换",normalizedTitle:"与其他数据结构的互相转换",charIndex:14067},{level:2,title:"WeakMap",slug:"weakmap",normalizedTitle:"weakmap",charIndex:6028},{level:3,title:"含义",slug:"含义-2",normalizedTitle:"含义",charIndex:5267},{level:3,title:"WeakMap 的语法",slug:"weakmap-的语法",normalizedTitle:"weakmap 的语法",charIndex:18170},{level:3,title:"WeakMap 的示例",slug:"weakmap-的示例",normalizedTitle:"weakmap 的示例",charIndex:18571},{level:3,title:"WeakMap 的用途",slug:"weakmap-的用途",normalizedTitle:"weakmap 的用途",charIndex:19977}],excerpt:'<h1 id="set-和-map-数据结构"><a class="header-anchor" href="#set-和-map-数据结构">#</a> Set 和 Map 数据结构</h1>\n<h2 id="set"><a class="header-anchor" href="#set">#</a> Set</h2>\n<h3 id="基本用法"><a class="header-anchor" href="#基本用法">#</a> 基本用法</h3>\n<p>ES6 提供了新的数据结构 Set。它<strong>类似于数组，但是成员的值都是唯一的，没有重复的值</strong>。</p>\n<p><strong><code>Set</code>本身是一个构造函数，用来生成 Set 数据结构</strong>。</p>\n\x3c!--beforebegin--\x3e<div class="language-javascript line-numbers-mode">\x3c!--afterbegin--\x3e<pre v-pre class="language-javascript"><code><span class="token keyword">const</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=></span> s<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token keyword">of</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// 2 3 5 4</span>\n</code></pre>\n<div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div>\x3c!--beforeend--\x3e</div>\x3c!--afterend--\x3e',lastUpdated:"2022/9/22 下午4:28:09",lastUpdatedTimestamp:1663835289e3,headersStr:"Set 基本用法 Set 实例的属性和方法 遍历操作 WeakSet 含义 语法 Map 含义和基本用法 实例的属性和操作方法 遍历方法 与其他数据结构的互相转换 WeakMap 含义 WeakMap 的语法 WeakMap 的示例 WeakMap 的用途",content:"# Set 和 Map 数据结构\n\n\n# Set\n\n\n# 基本用法\n\nES6 提供了新的数据结构 Set。它类似于数组，但是成员的值都是唯一的，没有重复的值。\n\nSet本身是一个构造函数，用来生成 Set 数据结构。\n\nconst s = new Set();\n\n[2, 3, 5, 4, 5, 2, 2].forEach(x => s.add(x));\n\nfor (let i of s) {\n  console.log(i);\n}\n// 2 3 5 4\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n上面代码通过add()方法向 Set 结构加入成员，结果表明 Set 结构不会添加重复的值。\n\nSet函数可以接受一个数组（或者具有 iterable 接口的其他数据结构）作为参数，用来初始化。\n\n// 例一\nconst set = new Set([1, 2, 3, 4, 4]);\n[...set]\n// [1, 2, 3, 4]\n\n// 例二\nconst items = new Set([1, 2, 3, 4, 5, 5, 5, 5]);\nitems.size // 5\n\n// 例三\nconst set = new Set(document.querySelectorAll('div'));\nset.size // 56\n\n// 类似于\nconst set = new Set();\ndocument\n .querySelectorAll('div')\n .forEach(div => set.add(div));\nset.size // 56\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\n上面代码中，例一和例二都是Set函数接受数组作为参数，例三是接受类似数组的对象作为参数。\n\n上面代码也展示了一种去除数组重复成员的方法。\n\n// 去除数组的重复成员\n[...new Set(array)]\n\n\n1\n2\n\n\n上面的方法也可以用于，去除字符串里面的重复字符。\n\n[...new Set('ababbc')].join('')\n// \"abc\"\n\n\n1\n2\n\n\n向 Set 加入值的时候，不会发生类型转换，所以5和\"5\"是两个不同的值。Set 内部判断两个值是否不同，使用的算法叫做“Same-value-zero equality”，它类似于精确相等运算符（===），主要的区别是向 Set 加入值时认为NaN等于自身，而精确相等运算符认为NaN不等于自身。\n\nlet set = new Set();\nlet a = NaN;\nlet b = NaN;\nset.add(a);\nset.add(b);\nset // Set {NaN}\n\n\n1\n2\n3\n4\n5\n6\n\n\n上面代码向 Set 实例添加了两次NaN，但是只会加入一个。这表明，在 Set 内部，两个NaN是相等的。\n\n另外，两个对象总是不相等的。\n\nlet set = new Set();\n\nset.add({});\nset.size // 1\n\nset.add({});\nset.size // 2\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n上面代码表示，由于两个空对象不相等，所以它们被视为两个值。\n\n\n# Set 实例的属性和方法\n\nSet 结构的实例有以下属性。\n\n * Set.prototype.constructor：构造函数，默认就是Set函数。\n * Set.prototype.size：返回Set实例的成员总数。\n\nSet 实例的方法分为两大类：操作方法（用于操作数据）和遍历方法（用于遍历成员）。下面先介绍四个操作方法。\n\n * Set.prototype.add(value)：添加某个值，返回 Set 结构本身。\n * Set.prototype.delete(value)：删除某个值，返回一个布尔值，表示删除是否成功。\n * Set.prototype.has(value)：返回一个布尔值，表示该值是否为Set的成员。\n * Set.prototype.clear()：清除所有成员，没有返回值。\n\n上面这些属性和方法的实例如下。\n\ns.add(1).add(2).add(2);\n// 注意2被加入了两次\n\ns.size // 2\n\ns.has(1) // true\ns.has(2) // true\ns.has(3) // false\n\ns.delete(2);\ns.has(2) // false\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n下面是一个对比，看看在判断是否包括一个键上面，Object结构和Set结构的写法不同。\n\n// 对象的写法\nconst properties = {\n  'width': 1,\n  'height': 1\n};\n\nif (properties[someName]) {\n  // do something\n}\n\n// Set的写法\nconst properties = new Set();\n\nproperties.add('width');\nproperties.add('height');\n\nif (properties.has(someName)) {\n  // do something\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\nArray.from方法可以将 Set 结构转为数组。\n\nconst items = new Set([1, 2, 3, 4, 5]);\nconst array = Array.from(items);\n\n\n1\n2\n\n\n这就提供了去除数组重复成员的另一种方法。\n\nfunction dedupe(array) {\n  return Array.from(new Set(array));\n}\n\ndedupe([1, 1, 2, 3]) // [1, 2, 3]\n\n\n1\n2\n3\n4\n5\n\n\n\n# 遍历操作\n\nSet 结构的实例有四个遍历方法，可以用于遍历成员。\n\n * Set.prototype.keys()：返回键名的遍历器\n * Set.prototype.values()：返回键值的遍历器\n * Set.prototype.entries()：返回键值对的遍历器\n * Set.prototype.forEach()：使用回调函数遍历每个成员\n\n需要特别指出的是，Set的遍历顺序就是插入顺序。这个特性有时非常有用，比如使用 Set 保存一个回调函数列表，调用时就能保证按照添加顺序调用。\n\n（1）keys()，values()，entries()\n\nkeys方法、values方法、entries方法返回的都是遍历器对象（详见《Iterator 对象》一章）。由于 Set 结构没有键名，只有键值（或者说键名和键值是同一个值），所以keys方法和values方法的行为完全一致。\n\nlet set = new Set(['red', 'green', 'blue']);\n\nfor (let item of set.keys()) {\n  console.log(item);\n}\n// red\n// green\n// blue\n\nfor (let item of set.values()) {\n  console.log(item);\n}\n// red\n// green\n// blue\n\nfor (let item of set.entries()) {\n  console.log(item);\n}\n// [\"red\", \"red\"]\n// [\"green\", \"green\"]\n// [\"blue\", \"blue\"]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n\n\n上面代码中，entries方法返回的遍历器，同时包括键名和键值，所以每次输出一个数组，它的两个成员完全相等。\n\nSet 结构的实例默认可遍历，它的默认遍历器生成函数就是它的values方法。\n\nSet.prototype[Symbol.iterator] === Set.prototype.values\n// true\n\n\n1\n2\n\n\n这意味着，可以省略values方法，直接用for...of循环遍历 Set。\n\nlet set = new Set(['red', 'green', 'blue']);\n\nfor (let x of set) {\n  console.log(x);\n}\n// red\n// green\n// blue\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n（2）forEach()\n\nSet 结构的实例与数组一样，也拥有forEach方法，用于对每个成员执行某种操作，没有返回值。\n\nlet set = new Set([1, 4, 9]);\nset.forEach((value, key) => console.log(key + ' : ' + value))\n// 1 : 1\n// 4 : 4\n// 9 : 9\n\n\n1\n2\n3\n4\n5\n\n\n上面代码说明，forEach方法的参数就是一个处理函数。该函数的参数与数组的forEach一致，依次为键值、键名、集合本身（上例省略了该参数）。这里需要注意，Set 结构的键名就是键值（两者是同一个值），因此第一个参数与第二个参数的值永远都是一样的。\n\n另外，forEach方法还可以有第二个参数，表示绑定处理函数内部的this对象。\n\n（3）遍历的应用\n\n扩展运算符（...）内部使用for...of循环，所以也可以用于 Set 结构。\n\nlet set = new Set(['red', 'green', 'blue']);\nlet arr = [...set];\n// ['red', 'green', 'blue']\n\n\n1\n2\n3\n\n\n扩展运算符和 Set 结构相结合，就可以去除数组的重复成员。\n\nlet arr = [3, 5, 2, 2, 5, 5];\nlet unique = [...new Set(arr)];\n// [3, 5, 2]\n\n\n1\n2\n3\n\n\n而且，数组的map和filter方法也可以间接用于 Set 了。\n\nlet set = new Set([1, 2, 3]);\nset = new Set([...set].map(x => x * 2));\n// 返回Set结构：{2, 4, 6}\n\nlet set = new Set([1, 2, 3, 4, 5]);\nset = new Set([...set].filter(x => (x % 2) == 0));\n// 返回Set结构：{2, 4}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n因此使用 Set 可以很容易地实现并集（Union）、交集（Intersect）和差集（Difference）。\n\nlet a = new Set([1, 2, 3]);\nlet b = new Set([4, 3, 2]);\n\n// 并集\nlet union = new Set([...a, ...b]);\n// Set {1, 2, 3, 4}\n\n// 交集\nlet intersect = new Set([...a].filter(x => b.has(x)));\n// set {2, 3}\n\n// 差集\nlet difference = new Set([...a].filter(x => !b.has(x)));\n// Set {1}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n如果想在遍历操作中，同步改变原来的 Set 结构，目前没有直接的方法，但有两种变通方法。一种是利用原 Set 结构映射出一个新的结构，然后赋值给原来的 Set 结构；另一种是利用Array.from方法。\n\n// 方法一\nlet set = new Set([1, 2, 3]);\nset = new Set([...set].map(val => val * 2));\n// set的值是2, 4, 6\n\n// 方法二\nlet set = new Set([1, 2, 3]);\nset = new Set(Array.from(set, val => val * 2));\n// set的值是2, 4, 6\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n上面代码提供了两种方法，直接在遍历操作中改变原来的 Set 结构。\n\n\n# WeakSet\n\n\n# 含义\n\nWeakSet 结构与 Set 类似，也是不重复的值的集合。但是，它与 Set 有两个区别。\n\n首先，WeakSet 的成员只能是对象，而不能是其他类型的值。\n\nconst ws = new WeakSet();\nws.add(1)\n// TypeError: Invalid value used in weak set\nws.add(Symbol())\n// TypeError: invalid value used in weak set\n\n\n1\n2\n3\n4\n5\n\n\n上面代码试图向 WeakSet 添加一个数值和Symbol值，结果报错，因为 WeakSet 只能放置对象。\n\n其次，WeakSet 中的对象都是弱引用，即垃圾回收机制不考虑 WeakSet 对该对象的引用，也就是说，如果其他对象都不再引用该对象，那么垃圾回收机制会自动回收该对象所占用的内存，不考虑该对象还存在于 WeakSet 之中。\n\n这是因为垃圾回收机制依赖引用计数，如果一个值的引用次数不为0，垃圾回收机制就不会释放这块内存。结束使用该值之后，有时会忘记取消引用，导致内存无法释放，进而可能会引发内存泄漏。WeakSet 里面的引用，都不计入垃圾回收机制，所以就不存在这个问题。因此，WeakSet 适合临时存放一组对象，以及存放跟对象绑定的信息。只要这些对象在外部消失，它在 WeakSet 里面的引用就会自动消失。\n\n由于上面这个特点，WeakSet 的成员是不适合引用的，因为它会随时消失。另外，由于 WeakSet 内部有多少个成员，取决于垃圾回收机制有没有运行，运行前后很可能成员个数是不一样的，而垃圾回收机制何时运行是不可预测的，因此 ES6 规定 WeakSet 不可遍历。\n\n这些特点同样适用于本章后面要介绍的 WeakMap 结构。\n\n\n# 语法\n\nWeakSet 是一个构造函数，可以使用new命令，创建 WeakSet 数据结构。\n\nconst ws = new WeakSet();\n\n\n1\n\n\n作为构造函数，WeakSet 可以接受一个数组或类似数组的对象作为参数。（实际上，任何具有 Iterable 接口的对象，都可以作为 WeakSet 的参数。）该数组的所有成员，都会自动成为 WeakSet 实例对象的成员。\n\nconst a = [[1, 2], [3, 4]];\nconst ws = new WeakSet(a);\n// WeakSet {[1, 2], [3, 4]}\n\n\n1\n2\n3\n\n\n上面代码中，a是一个数组，它有两个成员，也都是数组。将a作为 WeakSet 构造函数的参数，a的成员会自动成为 WeakSet 的成员。\n\n注意，是a数组的成员成为 WeakSet 的成员，而不是a数组本身。这意味着，数组的成员只能是对象。\n\nconst b = [3, 4];\nconst ws = new WeakSet(b);\n// Uncaught TypeError: Invalid value used in weak set(…)\n\n\n1\n2\n3\n\n\n上面代码中，数组b的成员不是对象，加入 WeakSet 就会报错。\n\nWeakSet 结构有以下三个方法。\n\n * WeakSet.prototype.add(value)：向 WeakSet 实例添加一个新成员。\n * WeakSet.prototype.delete(value)：清除 WeakSet 实例的指定成员。\n * WeakSet.prototype.has(value)：返回一个布尔值，表示某个值是否在 WeakSet 实例之中。\n\n下面是一个例子。\n\nconst ws = new WeakSet();\nconst obj = {};\nconst foo = {};\n\nws.add(window);\nws.add(obj);\n\nws.has(window); // true\nws.has(foo);    // false\n\nws.delete(window);\nws.has(window);    // false\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\nWeakSet 没有size属性，没有办法遍历它的成员。\n\nws.size // undefined\nws.forEach // undefined\n\nws.forEach(function(item){ console.log('WeakSet has ' + item)})\n// TypeError: undefined is not a function\n\n\n1\n2\n3\n4\n5\n\n\n上面代码试图获取size和forEach属性，结果都不能成功。\n\nWeakSet 不能遍历，是因为成员都是弱引用，随时可能消失，遍历机制无法保证成员的存在，很可能刚刚遍历结束，成员就取不到了。WeakSet 的一个用处，是储存 DOM 节点，而不用担心这些节点从文档移除时，会引发内存泄漏。\n\n下面是 WeakSet 的另一个例子。\n\nconst foos = new WeakSet()\nclass Foo {\n  constructor() {\n    foos.add(this)\n  }\n  method () {\n    if (!foos.has(this)) {\n      throw new TypeError('Foo.prototype.method 只能在Foo的实例上调用！');\n    }\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n上面代码保证了Foo的实例方法，只能在Foo的实例上调用。这里使用 WeakSet 的好处是，foos对实例的引用，不会被计入内存回收机制，所以删除实例的时候，不用考虑foos，也不会出现内存泄漏。\n\n\n# Map\n\n\n# 含义和基本用法\n\nJavaScript 的对象（Object），本质上是键值对的集合（Hash 结构），但是传统上只能用字符串当作键。这给它的使用带来了很大的限制。\n\nconst data = {};\nconst element = document.getElementById('myDiv');\n\ndata[element] = 'metadata';\ndata['[object HTMLDivElement]'] // \"metadata\"\n\n\n1\n2\n3\n4\n5\n\n\n上面代码原意是将一个 DOM 节点作为对象data的键，但是由于对象只接受字符串作为键名，所以element被自动转为字符串[object HTMLDivElement]。\n\n为了解决这个问题，ES6 提供了 Map 数据结构。它类似于对象，也是键值对的集合，但是“键”的范围不限于字符串，各种类型的值（包括对象）都可以当作键。也就是说，Object 结构提供了“字符串—值”的对应，Map 结构提供了“值—值”的对应，是一种更完善的 Hash 结构实现。如果你需要“键值对”的数据结构，Map 比 Object 更合适。\n\nconst m = new Map();\nconst o = {p: 'Hello World'};\n\nm.set(o, 'content')\nm.get(o) // \"content\"\n\nm.has(o) // true\nm.delete(o) // true\nm.has(o) // false\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n上面代码使用 Map 结构的set方法，将对象o当作m的一个键，然后又使用get方法读取这个键，接着使用delete方法删除了这个键。\n\n上面的例子展示了如何向 Map 添加成员。作为构造函数，Map 也可以接受一个数组作为参数。该数组的成员是一个个表示键值对的数组。\n\nconst map = new Map([\n  ['name', '张三'],\n  ['title', 'Author']\n]);\n\nmap.size // 2\nmap.has('name') // true\nmap.get('name') // \"张三\"\nmap.has('title') // true\nmap.get('title') // \"Author\"\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n上面代码在新建 Map 实例时，就指定了两个键name和title。\n\nMap构造函数接受数组作为参数，实际上执行的是下面的算法。\n\nconst items = [\n  ['name', '张三'],\n  ['title', 'Author']\n];\n\nconst map = new Map();\n\nitems.forEach(\n  ([key, value]) => map.set(key, value)\n);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n事实上，不仅仅是数组，任何具有 Iterator 接口、且每个成员都是一个双元素的数组的数据结构（详见《Iterator》一章）都可以当作Map构造函数的参数。这就是说，Set和Map都可以用来生成新的 Map。\n\nconst set = new Set([\n  ['foo', 1],\n  ['bar', 2]\n]);\nconst m1 = new Map(set);\nm1.get('foo') // 1\n\nconst m2 = new Map([['baz', 3]]);\nconst m3 = new Map(m2);\nm3.get('baz') // 3\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n上面代码中，我们分别使用 Set 对象和 Map 对象，当作Map构造函数的参数，结果都生成了新的 Map 对象。\n\n如果对同一个键多次赋值，后面的值将覆盖前面的值。\n\nconst map = new Map();\n\nmap\n.set(1, 'aaa')\n.set(1, 'bbb');\n\nmap.get(1) // \"bbb\"\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n上面代码对键1连续赋值两次，后一次的值覆盖前一次的值。\n\n如果读取一个未知的键，则返回undefined。\n\nnew Map().get('asfddfsasadf')\n// undefined\n\n\n1\n2\n\n\n注意，只有对同一个对象的引用，Map 结构才将其视为同一个键。这一点要非常小心。\n\nconst map = new Map();\n\nmap.set(['a'], 555);\nmap.get(['a']) // undefined\n\n\n1\n2\n3\n4\n\n\n上面代码的set和get方法，表面是针对同一个键，但实际上这是两个不同的数组实例，内存地址是不一样的，因此get方法无法读取该键，返回undefined。\n\n同理，同样的值的两个实例，在 Map 结构中被视为两个键。\n\nconst map = new Map();\n\nconst k1 = ['a'];\nconst k2 = ['a'];\n\nmap\n.set(k1, 111)\n.set(k2, 222);\n\nmap.get(k1) // 111\nmap.get(k2) // 222\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n上面代码中，变量k1和k2的值是一样的，但是它们在 Map 结构中被视为两个键。\n\n由上可知，Map 的键实际上是跟内存地址绑定的，只要内存地址不一样，就视为两个键。这就解决了同名属性碰撞（clash）的问题，我们扩展别人的库的时候，如果使用对象作为键名，就不用担心自己的属性与原作者的属性同名。\n\n如果 Map 的键是一个简单类型的值（数字、字符串、布尔值），则只要两个值严格相等，Map 将其视为一个键，比如0和-0就是一个键，布尔值true和字符串true则是两个不同的键。另外，undefined和null也是两个不同的键。虽然NaN不严格相等于自身，但 Map 将其视为同一个键。\n\nlet map = new Map();\n\nmap.set(-0, 123);\nmap.get(+0) // 123\n\nmap.set(true, 1);\nmap.set('true', 2);\nmap.get(true) // 1\n\nmap.set(undefined, 3);\nmap.set(null, 4);\nmap.get(undefined) // 3\n\nmap.set(NaN, 123);\nmap.get(NaN) // 123\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n\n# 实例的属性和操作方法\n\nMap 结构的实例有以下属性和操作方法。\n\n（1）size 属性\n\nsize属性返回 Map 结构的成员总数。\n\nconst map = new Map();\nmap.set('foo', true);\nmap.set('bar', false);\n\nmap.size // 2\n\n\n1\n2\n3\n4\n5\n\n\n（2）Map.prototype.set(key, value)\n\nset方法设置键名key对应的键值为value，然后返回整个 Map 结构。如果key已经有值，则键值会被更新，否则就新生成该键。\n\nconst m = new Map();\n\nm.set('edition', 6)        // 键是字符串\nm.set(262, 'standard')     // 键是数值\nm.set(undefined, 'nah')    // 键是 undefined\n\n\n1\n2\n3\n4\n5\n\n\nset方法返回的是当前的Map对象，因此可以采用链式写法。\n\nlet map = new Map()\n  .set(1, 'a')\n  .set(2, 'b')\n  .set(3, 'c');\n\n\n1\n2\n3\n4\n\n\n（3）Map.prototype.get(key)\n\nget方法读取key对应的键值，如果找不到key，返回undefined。\n\nconst m = new Map();\n\nconst hello = function() {console.log('hello');};\nm.set(hello, 'Hello ES6!') // 键是函数\n\nm.get(hello)  // Hello ES6!\n\n\n1\n2\n3\n4\n5\n6\n\n\n（4）Map.prototype.has(key)\n\nhas方法返回一个布尔值，表示某个键是否在当前 Map 对象之中。\n\nconst m = new Map();\n\nm.set('edition', 6);\nm.set(262, 'standard');\nm.set(undefined, 'nah');\n\nm.has('edition')     // true\nm.has('years')       // false\nm.has(262)           // true\nm.has(undefined)     // true\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n（5）Map.prototype.delete(key)\n\ndelete方法删除某个键，返回true。如果删除失败，返回false。\n\nconst m = new Map();\nm.set(undefined, 'nah');\nm.has(undefined)     // true\n\nm.delete(undefined)\nm.has(undefined)       // false\n\n\n1\n2\n3\n4\n5\n6\n\n\n（6）Map.prototype.clear()\n\nclear方法清除所有成员，没有返回值。\n\nlet map = new Map();\nmap.set('foo', true);\nmap.set('bar', false);\n\nmap.size // 2\nmap.clear()\nmap.size // 0\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# 遍历方法\n\nMap 结构原生提供三个遍历器生成函数和一个遍历方法。\n\n * Map.prototype.keys()：返回键名的遍历器。\n * Map.prototype.values()：返回键值的遍历器。\n * Map.prototype.entries()：返回所有成员的遍历器。\n * Map.prototype.forEach()：遍历 Map 的所有成员。\n\n需要特别注意的是，Map 的遍历顺序就是插入顺序。\n\nconst map = new Map([\n  ['F', 'no'],\n  ['T',  'yes'],\n]);\n\nfor (let key of map.keys()) {\n  console.log(key);\n}\n// \"F\"\n// \"T\"\n\nfor (let value of map.values()) {\n  console.log(value);\n}\n// \"no\"\n// \"yes\"\n\nfor (let item of map.entries()) {\n  console.log(item[0], item[1]);\n}\n// \"F\" \"no\"\n// \"T\" \"yes\"\n\n// 或者\nfor (let [key, value] of map.entries()) {\n  console.log(key, value);\n}\n// \"F\" \"no\"\n// \"T\" \"yes\"\n\n// 等同于使用map.entries()\nfor (let [key, value] of map) {\n  console.log(key, value);\n}\n// \"F\" \"no\"\n// \"T\" \"yes\"\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n\n\n上面代码最后的那个例子，表示 Map 结构的默认遍历器接口（Symbol.iterator属性），就是entries方法。\n\nmap[Symbol.iterator] === map.entries\n// true\n\n\n1\n2\n\n\nMap 结构转为数组结构，比较快速的方法是使用扩展运算符（...）。\n\nconst map = new Map([\n  [1, 'one'],\n  [2, 'two'],\n  [3, 'three'],\n]);\n\n[...map.keys()]\n// [1, 2, 3]\n\n[...map.values()]\n// ['one', 'two', 'three']\n\n[...map.entries()]\n// [[1,'one'], [2, 'two'], [3, 'three']]\n\n[...map]\n// [[1,'one'], [2, 'two'], [3, 'three']]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n结合数组的map方法、filter方法，可以实现 Map 的遍历和过滤（Map 本身没有map和filter方法）。\n\nconst map0 = new Map()\n  .set(1, 'a')\n  .set(2, 'b')\n  .set(3, 'c');\n\nconst map1 = new Map(\n  [...map0].filter(([k, v]) => k < 3)\n);\n// 产生 Map 结构 {1 => 'a', 2 => 'b'}\n\nconst map2 = new Map(\n  [...map0].map(([k, v]) => [k * 2, '_' + v])\n    );\n// 产生 Map 结构 {2 => '_a', 4 => '_b', 6 => '_c'}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n此外，Map 还有一个forEach方法，与数组的forEach方法类似，也可以实现遍历。\n\nmap.forEach(function(value, key, map) {\n  console.log(\"Key: %s, Value: %s\", key, value);\n});\n\n\n1\n2\n3\n\n\nforEach方法还可以接受第二个参数，用来绑定this。\n\nconst reporter = {\n  report: function(key, value) {\n    console.log(\"Key: %s, Value: %s\", key, value);\n  }\n};\n\nmap.forEach(function(value, key, map) {\n  this.report(key, value);\n}, reporter);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n上面代码中，forEach方法的回调函数的this，就指向reporter。\n\n\n# 与其他数据结构的互相转换\n\n（1）Map 转为数组\n\n前面已经提过，Map 转为数组最方便的方法，就是使用扩展运算符（...）。\n\nconst myMap = new Map()\n  .set(true, 7)\n  .set({foo: 3}, ['abc']);\n[...myMap]\n// [ [ true, 7 ], [ { foo: 3 }, [ 'abc' ] ] ]\n\n\n1\n2\n3\n4\n5\n\n\n（2）数组 转为 Map\n\n将数组传入 Map 构造函数，就可以转为 Map。\n\nnew Map([\n  [true, 7],\n  [{foo: 3}, ['abc']]\n])\n// Map {\n//   true => 7,\n//   Object {foo: 3} => ['abc']\n// }\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n（3）Map 转为对象\n\n如果所有 Map 的键都是字符串，它可以无损地转为对象。\n\nfunction strMapToObj(strMap) {\n  let obj = Object.create(null);\n  for (let [k,v] of strMap) {\n    obj[k] = v;\n  }\n  return obj;\n}\n\nconst myMap = new Map()\n  .set('yes', true)\n  .set('no', false);\nstrMapToObj(myMap)\n// { yes: true, no: false }\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n如果有非字符串的键名，那么这个键名会被转成字符串，再作为对象的键名。\n\n（4）对象转为 Map\n\nfunction objToStrMap(obj) {\n  let strMap = new Map();\n  for (let k of Object.keys(obj)) {\n    strMap.set(k, obj[k]);\n  }\n  return strMap;\n}\n\nobjToStrMap({yes: true, no: false})\n// Map {\"yes\" => true, \"no\" => false}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n（5）Map 转为 JSON\n\nMap 转为 JSON 要区分两种情况。一种情况是，Map 的键名都是字符串，这时可以选择转为对象 JSON。\n\nfunction strMapToJson(strMap) {\n  return JSON.stringify(strMapToObj(strMap));\n}\n\nlet myMap = new Map().set('yes', true).set('no', false);\nstrMapToJson(myMap)\n// '{\"yes\":true,\"no\":false}'\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n另一种情况是，Map 的键名有非字符串，这时可以选择转为数组 JSON。\n\nfunction mapToArrayJson(map) {\n  return JSON.stringify([...map]);\n}\n\nlet myMap = new Map().set(true, 7).set({foo: 3}, ['abc']);\nmapToArrayJson(myMap)\n// '[[true,7],[{\"foo\":3},[\"abc\"]]]'\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n（6）JSON 转为 Map\n\nJSON 转为 Map，正常情况下，所有键名都是字符串。\n\nfunction jsonToStrMap(jsonStr) {\n  return objToStrMap(JSON.parse(jsonStr));\n}\n\njsonToStrMap('{\"yes\": true, \"no\": false}')\n// Map {'yes' => true, 'no' => false}\n\n\n1\n2\n3\n4\n5\n6\n\n\n但是，有一种特殊情况，整个 JSON 就是一个数组，且每个数组成员本身，又是一个有两个成员的数组。这时，它可以一一对应地转为 Map。这往往是 Map 转为数组 JSON 的逆操作。\n\nfunction jsonToMap(jsonStr) {\n  return new Map(JSON.parse(jsonStr));\n}\n\njsonToMap('[[true,7],[{\"foo\":3},[\"abc\"]]]')\n// Map {true => 7, Object {foo: 3} => ['abc']}\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# WeakMap\n\n\n# 含义\n\nWeakMap结构与Map结构类似，也是用于生成键值对的集合。\n\n// WeakMap 可以使用 set 方法添加成员\nconst wm1 = new WeakMap();\nconst key = {foo: 1};\nwm1.set(key, 2);\nwm1.get(key) // 2\n\n// WeakMap 也可以接受一个数组，\n// 作为构造函数的参数\nconst k1 = [1, 2, 3];\nconst k2 = [4, 5, 6];\nconst wm2 = new WeakMap([[k1, 'foo'], [k2, 'bar']]);\nwm2.get(k2) // \"bar\"\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\nWeakMap与Map的区别有两点。\n\n首先，WeakMap只接受对象作为键名（null除外），不接受其他类型的值作为键名。\n\nconst map = new WeakMap();\nmap.set(1, 2)\n// TypeError: 1 is not an object!\nmap.set(Symbol(), 2)\n// TypeError: Invalid value used as weak map key\nmap.set(null, 2)\n// TypeError: Invalid value used as weak map key\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n上面代码中，如果将数值1和Symbol值作为 WeakMap 的键名，都会报错。\n\n其次，WeakMap的键名所指向的对象，不计入垃圾回收机制。\n\nWeakMap的设计目的在于，有时我们想在某个对象上面存放一些数据，但是这会形成对于这个对象的引用。请看下面的例子。\n\nconst e1 = document.getElementById('foo');\nconst e2 = document.getElementById('bar');\nconst arr = [\n  [e1, 'foo 元素'],\n  [e2, 'bar 元素'],\n];\n\n\n1\n2\n3\n4\n5\n6\n\n\n上面代码中，e1和e2是两个对象，我们通过arr数组对这两个对象添加一些文字说明。这就形成了arr对e1和e2的引用。\n\n一旦不再需要这两个对象，我们就必须手动删除这个引用，否则垃圾回收机制就不会释放e1和e2占用的内存。\n\n// 不需要 e1 和 e2 的时候\n// 必须手动删除引用\narr [0] = null;\narr [1] = null;\n\n\n1\n2\n3\n4\n\n\n上面这样的写法显然很不方便。一旦忘了写，就会造成内存泄露。\n\nWeakMap 就是为了解决这个问题而诞生的，它的键名所引用的对象都是弱引用，即垃圾回收机制不将该引用考虑在内。因此，只要所引用的对象的其他引用都被清除，垃圾回收机制就会释放该对象所占用的内存。也就是说，一旦不再需要，WeakMap 里面的键名对象和所对应的键值对会自动消失，不用手动删除引用。\n\n基本上，如果你要往对象上添加数据，又不想干扰垃圾回收机制，就可以使用 WeakMap。一个典型应用场景是，在网页的 DOM 元素上添加数据，就可以使用WeakMap结构。当该 DOM 元素被清除，其所对应的WeakMap记录就会自动被移除。\n\nconst wm = new WeakMap();\n\nconst element = document.getElementById('example');\n\nwm.set(element, 'some information');\nwm.get(element) // \"some information\"\n\n\n1\n2\n3\n4\n5\n6\n\n\n上面代码中，先新建一个 Weakmap 实例。然后，将一个 DOM 节点作为键名存入该实例，并将一些附加信息作为键值，一起存放在 WeakMap 里面。这时，WeakMap 里面对element的引用就是弱引用，不会被计入垃圾回收机制。\n\n也就是说，上面的 DOM 节点对象的引用计数是1，而不是2。这时，一旦消除对该节点的引用，它占用的内存就会被垃圾回收机制释放。Weakmap 保存的这个键值对，也会自动消失。\n\n总之，WeakMap的专用场合就是，它的键所对应的对象，可能会在将来消失。WeakMap结构有助于防止内存泄漏。\n\n注意，WeakMap 弱引用的只是键名，而不是键值。键值依然是正常引用。\n\nconst wm = new WeakMap();\nlet key = {};\nlet obj = {foo: 1};\n\nwm.set(key, obj);\nobj = null;\nwm.get(key)\n// Object {foo: 1}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n上面代码中，键值obj是正常引用。所以，即使在 WeakMap 外部消除了obj的引用，WeakMap 内部的引用依然存在。\n\n\n# WeakMap 的语法\n\nWeakMap 与 Map 在 API 上的区别主要是两个，一是没有遍历操作（即没有keys()、values()和entries()方法），也没有size属性。因为没有办法列出所有键名，某个键名是否存在完全不可预测，跟垃圾回收机制是否运行相关。这一刻可以取到键名，下一刻垃圾回收机制突然运行了，这个键名就没了，为了防止出现不确定性，就统一规定不能取到键名。二是无法清空，即不支持clear方法。因此，WeakMap只有四个方法可用：get()、set()、has()、delete()。\n\nconst wm = new WeakMap();\n\n// size、forEach、clear 方法都不存在\nwm.size // undefined\nwm.forEach // undefined\nwm.clear // undefined\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# WeakMap 的示例\n\nWeakMap 的例子很难演示，因为无法观察它里面的引用会自动消失。此时，其他引用都解除了，已经没有引用指向 WeakMap 的键名了，导致无法证实那个键名是不是存在。\n\n贺师俊老师提示，如果引用所指向的值占用特别多的内存，就可以通过 Node 的process.memoryUsage方法看出来。根据这个思路，网友vtxf补充了下面的例子。\n\n首先，打开 Node 命令行。\n\n$ node --expose-gc\n\n\n1\n\n\n上面代码中，--expose-gc参数表示允许手动执行垃圾回收机制。\n\n然后，执行下面的代码。\n\n// 手动执行一次垃圾回收，保证获取的内存使用状态准确\n> global.gc();\nundefined\n\n// 查看内存占用的初始状态，heapUsed 为 4M 左右\n> process.memoryUsage();\n{ rss: 21106688,\n  heapTotal: 7376896,\n  heapUsed: 4153936,\n  external: 9059 }\n\n> let wm = new WeakMap();\nundefined\n\n// 新建一个变量 key，指向一个 5*1024*1024 的数组\n> let key = new Array(5 * 1024 * 1024);\nundefined\n\n// 设置 WeakMap 实例的键名，也指向 key 数组\n// 这时，key 数组实际被引用了两次，\n// 变量 key 引用一次，WeakMap 的键名引用了第二次\n// 但是，WeakMap 是弱引用，对于引擎来说，引用计数还是1\n> wm.set(key, 1);\nWeakMap {}\n\n> global.gc();\nundefined\n\n// 这时内存占用 heapUsed 增加到 45M 了\n> process.memoryUsage();\n{ rss: 67538944,\n  heapTotal: 7376896,\n  heapUsed: 45782816,\n  external: 8945 }\n\n// 清除变量 key 对数组的引用，\n// 但没有手动清除 WeakMap 实例的键名对数组的引用\n> key = null;\nnull\n\n// 再次执行垃圾回收\n> global.gc();\nundefined\n\n// 内存占用 heapUsed 变回 4M 左右，\n// 可以看到 WeakMap 的键名引用没有阻止 gc 对内存的回收\n> process.memoryUsage();\n{ rss: 20639744,\n  heapTotal: 8425472,\n  heapUsed: 3979792,\n  external: 8956 }\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n\n\n上面代码中，只要外部的引用消失，WeakMap 内部的引用，就会自动被垃圾回收清除。由此可见，有了 WeakMap 的帮助，解决内存泄漏就会简单很多。\n\n\n# WeakMap 的用途\n\n前文说过，WeakMap 应用的典型场合就是 DOM 节点作为键名。下面是一个例子。\n\nlet myElement = document.getElementById('logo');\nlet myWeakmap = new WeakMap();\n\nmyWeakmap.set(myElement, {timesClicked: 0});\n\nmyElement.addEventListener('click', function() {\n  let logoData = myWeakmap.get(myElement);\n  logoData.timesClicked++;\n}, false);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n上面代码中，myElement是一个 DOM 节点，每当发生click事件，就更新一下状态。我们将这个状态作为键值放在 WeakMap 里，对应的键名就是myElement。一旦这个 DOM 节点删除，该状态就会自动消失，不存在内存泄漏风险。\n\nWeakMap 的另一个用处是部署私有属性。\n\nconst _counter = new WeakMap();\nconst _action = new WeakMap();\n\nclass Countdown {\n  constructor(counter, action) {\n    _counter.set(this, counter);\n    _action.set(this, action);\n  }\n  dec() {\n    let counter = _counter.get(this);\n    if (counter < 1) return;\n    counter--;\n    _counter.set(this, counter);\n    if (counter === 0) {\n      _action.get(this)();\n    }\n  }\n}\n\nconst c = new Countdown(2, () => console.log('DONE'));\n\nc.dec()\nc.dec()\n// DONE\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n\n\n上面代码中，Countdown类的两个内部属性_counter和_action，是实例的弱引用，所以如果删除实例，它们也就随之消失，不会造成内存泄漏。",normalizedContent:"# set 和 map 数据结构\n\n\n# set\n\n\n# 基本用法\n\nes6 提供了新的数据结构 set。它类似于数组，但是成员的值都是唯一的，没有重复的值。\n\nset本身是一个构造函数，用来生成 set 数据结构。\n\nconst s = new set();\n\n[2, 3, 5, 4, 5, 2, 2].foreach(x => s.add(x));\n\nfor (let i of s) {\n  console.log(i);\n}\n// 2 3 5 4\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n上面代码通过add()方法向 set 结构加入成员，结果表明 set 结构不会添加重复的值。\n\nset函数可以接受一个数组（或者具有 iterable 接口的其他数据结构）作为参数，用来初始化。\n\n// 例一\nconst set = new set([1, 2, 3, 4, 4]);\n[...set]\n// [1, 2, 3, 4]\n\n// 例二\nconst items = new set([1, 2, 3, 4, 5, 5, 5, 5]);\nitems.size // 5\n\n// 例三\nconst set = new set(document.queryselectorall('div'));\nset.size // 56\n\n// 类似于\nconst set = new set();\ndocument\n .queryselectorall('div')\n .foreach(div => set.add(div));\nset.size // 56\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\n上面代码中，例一和例二都是set函数接受数组作为参数，例三是接受类似数组的对象作为参数。\n\n上面代码也展示了一种去除数组重复成员的方法。\n\n// 去除数组的重复成员\n[...new set(array)]\n\n\n1\n2\n\n\n上面的方法也可以用于，去除字符串里面的重复字符。\n\n[...new set('ababbc')].join('')\n// \"abc\"\n\n\n1\n2\n\n\n向 set 加入值的时候，不会发生类型转换，所以5和\"5\"是两个不同的值。set 内部判断两个值是否不同，使用的算法叫做“same-value-zero equality”，它类似于精确相等运算符（===），主要的区别是向 set 加入值时认为nan等于自身，而精确相等运算符认为nan不等于自身。\n\nlet set = new set();\nlet a = nan;\nlet b = nan;\nset.add(a);\nset.add(b);\nset // set {nan}\n\n\n1\n2\n3\n4\n5\n6\n\n\n上面代码向 set 实例添加了两次nan，但是只会加入一个。这表明，在 set 内部，两个nan是相等的。\n\n另外，两个对象总是不相等的。\n\nlet set = new set();\n\nset.add({});\nset.size // 1\n\nset.add({});\nset.size // 2\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n上面代码表示，由于两个空对象不相等，所以它们被视为两个值。\n\n\n# set 实例的属性和方法\n\nset 结构的实例有以下属性。\n\n * set.prototype.constructor：构造函数，默认就是set函数。\n * set.prototype.size：返回set实例的成员总数。\n\nset 实例的方法分为两大类：操作方法（用于操作数据）和遍历方法（用于遍历成员）。下面先介绍四个操作方法。\n\n * set.prototype.add(value)：添加某个值，返回 set 结构本身。\n * set.prototype.delete(value)：删除某个值，返回一个布尔值，表示删除是否成功。\n * set.prototype.has(value)：返回一个布尔值，表示该值是否为set的成员。\n * set.prototype.clear()：清除所有成员，没有返回值。\n\n上面这些属性和方法的实例如下。\n\ns.add(1).add(2).add(2);\n// 注意2被加入了两次\n\ns.size // 2\n\ns.has(1) // true\ns.has(2) // true\ns.has(3) // false\n\ns.delete(2);\ns.has(2) // false\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n下面是一个对比，看看在判断是否包括一个键上面，object结构和set结构的写法不同。\n\n// 对象的写法\nconst properties = {\n  'width': 1,\n  'height': 1\n};\n\nif (properties[somename]) {\n  // do something\n}\n\n// set的写法\nconst properties = new set();\n\nproperties.add('width');\nproperties.add('height');\n\nif (properties.has(somename)) {\n  // do something\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\narray.from方法可以将 set 结构转为数组。\n\nconst items = new set([1, 2, 3, 4, 5]);\nconst array = array.from(items);\n\n\n1\n2\n\n\n这就提供了去除数组重复成员的另一种方法。\n\nfunction dedupe(array) {\n  return array.from(new set(array));\n}\n\ndedupe([1, 1, 2, 3]) // [1, 2, 3]\n\n\n1\n2\n3\n4\n5\n\n\n\n# 遍历操作\n\nset 结构的实例有四个遍历方法，可以用于遍历成员。\n\n * set.prototype.keys()：返回键名的遍历器\n * set.prototype.values()：返回键值的遍历器\n * set.prototype.entries()：返回键值对的遍历器\n * set.prototype.foreach()：使用回调函数遍历每个成员\n\n需要特别指出的是，set的遍历顺序就是插入顺序。这个特性有时非常有用，比如使用 set 保存一个回调函数列表，调用时就能保证按照添加顺序调用。\n\n（1）keys()，values()，entries()\n\nkeys方法、values方法、entries方法返回的都是遍历器对象（详见《iterator 对象》一章）。由于 set 结构没有键名，只有键值（或者说键名和键值是同一个值），所以keys方法和values方法的行为完全一致。\n\nlet set = new set(['red', 'green', 'blue']);\n\nfor (let item of set.keys()) {\n  console.log(item);\n}\n// red\n// green\n// blue\n\nfor (let item of set.values()) {\n  console.log(item);\n}\n// red\n// green\n// blue\n\nfor (let item of set.entries()) {\n  console.log(item);\n}\n// [\"red\", \"red\"]\n// [\"green\", \"green\"]\n// [\"blue\", \"blue\"]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n\n\n上面代码中，entries方法返回的遍历器，同时包括键名和键值，所以每次输出一个数组，它的两个成员完全相等。\n\nset 结构的实例默认可遍历，它的默认遍历器生成函数就是它的values方法。\n\nset.prototype[symbol.iterator] === set.prototype.values\n// true\n\n\n1\n2\n\n\n这意味着，可以省略values方法，直接用for...of循环遍历 set。\n\nlet set = new set(['red', 'green', 'blue']);\n\nfor (let x of set) {\n  console.log(x);\n}\n// red\n// green\n// blue\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n（2）foreach()\n\nset 结构的实例与数组一样，也拥有foreach方法，用于对每个成员执行某种操作，没有返回值。\n\nlet set = new set([1, 4, 9]);\nset.foreach((value, key) => console.log(key + ' : ' + value))\n// 1 : 1\n// 4 : 4\n// 9 : 9\n\n\n1\n2\n3\n4\n5\n\n\n上面代码说明，foreach方法的参数就是一个处理函数。该函数的参数与数组的foreach一致，依次为键值、键名、集合本身（上例省略了该参数）。这里需要注意，set 结构的键名就是键值（两者是同一个值），因此第一个参数与第二个参数的值永远都是一样的。\n\n另外，foreach方法还可以有第二个参数，表示绑定处理函数内部的this对象。\n\n（3）遍历的应用\n\n扩展运算符（...）内部使用for...of循环，所以也可以用于 set 结构。\n\nlet set = new set(['red', 'green', 'blue']);\nlet arr = [...set];\n// ['red', 'green', 'blue']\n\n\n1\n2\n3\n\n\n扩展运算符和 set 结构相结合，就可以去除数组的重复成员。\n\nlet arr = [3, 5, 2, 2, 5, 5];\nlet unique = [...new set(arr)];\n// [3, 5, 2]\n\n\n1\n2\n3\n\n\n而且，数组的map和filter方法也可以间接用于 set 了。\n\nlet set = new set([1, 2, 3]);\nset = new set([...set].map(x => x * 2));\n// 返回set结构：{2, 4, 6}\n\nlet set = new set([1, 2, 3, 4, 5]);\nset = new set([...set].filter(x => (x % 2) == 0));\n// 返回set结构：{2, 4}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n因此使用 set 可以很容易地实现并集（union）、交集（intersect）和差集（difference）。\n\nlet a = new set([1, 2, 3]);\nlet b = new set([4, 3, 2]);\n\n// 并集\nlet union = new set([...a, ...b]);\n// set {1, 2, 3, 4}\n\n// 交集\nlet intersect = new set([...a].filter(x => b.has(x)));\n// set {2, 3}\n\n// 差集\nlet difference = new set([...a].filter(x => !b.has(x)));\n// set {1}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n如果想在遍历操作中，同步改变原来的 set 结构，目前没有直接的方法，但有两种变通方法。一种是利用原 set 结构映射出一个新的结构，然后赋值给原来的 set 结构；另一种是利用array.from方法。\n\n// 方法一\nlet set = new set([1, 2, 3]);\nset = new set([...set].map(val => val * 2));\n// set的值是2, 4, 6\n\n// 方法二\nlet set = new set([1, 2, 3]);\nset = new set(array.from(set, val => val * 2));\n// set的值是2, 4, 6\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n上面代码提供了两种方法，直接在遍历操作中改变原来的 set 结构。\n\n\n# weakset\n\n\n# 含义\n\nweakset 结构与 set 类似，也是不重复的值的集合。但是，它与 set 有两个区别。\n\n首先，weakset 的成员只能是对象，而不能是其他类型的值。\n\nconst ws = new weakset();\nws.add(1)\n// typeerror: invalid value used in weak set\nws.add(symbol())\n// typeerror: invalid value used in weak set\n\n\n1\n2\n3\n4\n5\n\n\n上面代码试图向 weakset 添加一个数值和symbol值，结果报错，因为 weakset 只能放置对象。\n\n其次，weakset 中的对象都是弱引用，即垃圾回收机制不考虑 weakset 对该对象的引用，也就是说，如果其他对象都不再引用该对象，那么垃圾回收机制会自动回收该对象所占用的内存，不考虑该对象还存在于 weakset 之中。\n\n这是因为垃圾回收机制依赖引用计数，如果一个值的引用次数不为0，垃圾回收机制就不会释放这块内存。结束使用该值之后，有时会忘记取消引用，导致内存无法释放，进而可能会引发内存泄漏。weakset 里面的引用，都不计入垃圾回收机制，所以就不存在这个问题。因此，weakset 适合临时存放一组对象，以及存放跟对象绑定的信息。只要这些对象在外部消失，它在 weakset 里面的引用就会自动消失。\n\n由于上面这个特点，weakset 的成员是不适合引用的，因为它会随时消失。另外，由于 weakset 内部有多少个成员，取决于垃圾回收机制有没有运行，运行前后很可能成员个数是不一样的，而垃圾回收机制何时运行是不可预测的，因此 es6 规定 weakset 不可遍历。\n\n这些特点同样适用于本章后面要介绍的 weakmap 结构。\n\n\n# 语法\n\nweakset 是一个构造函数，可以使用new命令，创建 weakset 数据结构。\n\nconst ws = new weakset();\n\n\n1\n\n\n作为构造函数，weakset 可以接受一个数组或类似数组的对象作为参数。（实际上，任何具有 iterable 接口的对象，都可以作为 weakset 的参数。）该数组的所有成员，都会自动成为 weakset 实例对象的成员。\n\nconst a = [[1, 2], [3, 4]];\nconst ws = new weakset(a);\n// weakset {[1, 2], [3, 4]}\n\n\n1\n2\n3\n\n\n上面代码中，a是一个数组，它有两个成员，也都是数组。将a作为 weakset 构造函数的参数，a的成员会自动成为 weakset 的成员。\n\n注意，是a数组的成员成为 weakset 的成员，而不是a数组本身。这意味着，数组的成员只能是对象。\n\nconst b = [3, 4];\nconst ws = new weakset(b);\n// uncaught typeerror: invalid value used in weak set(…)\n\n\n1\n2\n3\n\n\n上面代码中，数组b的成员不是对象，加入 weakset 就会报错。\n\nweakset 结构有以下三个方法。\n\n * weakset.prototype.add(value)：向 weakset 实例添加一个新成员。\n * weakset.prototype.delete(value)：清除 weakset 实例的指定成员。\n * weakset.prototype.has(value)：返回一个布尔值，表示某个值是否在 weakset 实例之中。\n\n下面是一个例子。\n\nconst ws = new weakset();\nconst obj = {};\nconst foo = {};\n\nws.add(window);\nws.add(obj);\n\nws.has(window); // true\nws.has(foo);    // false\n\nws.delete(window);\nws.has(window);    // false\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\nweakset 没有size属性，没有办法遍历它的成员。\n\nws.size // undefined\nws.foreach // undefined\n\nws.foreach(function(item){ console.log('weakset has ' + item)})\n// typeerror: undefined is not a function\n\n\n1\n2\n3\n4\n5\n\n\n上面代码试图获取size和foreach属性，结果都不能成功。\n\nweakset 不能遍历，是因为成员都是弱引用，随时可能消失，遍历机制无法保证成员的存在，很可能刚刚遍历结束，成员就取不到了。weakset 的一个用处，是储存 dom 节点，而不用担心这些节点从文档移除时，会引发内存泄漏。\n\n下面是 weakset 的另一个例子。\n\nconst foos = new weakset()\nclass foo {\n  constructor() {\n    foos.add(this)\n  }\n  method () {\n    if (!foos.has(this)) {\n      throw new typeerror('foo.prototype.method 只能在foo的实例上调用！');\n    }\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n上面代码保证了foo的实例方法，只能在foo的实例上调用。这里使用 weakset 的好处是，foos对实例的引用，不会被计入内存回收机制，所以删除实例的时候，不用考虑foos，也不会出现内存泄漏。\n\n\n# map\n\n\n# 含义和基本用法\n\njavascript 的对象（object），本质上是键值对的集合（hash 结构），但是传统上只能用字符串当作键。这给它的使用带来了很大的限制。\n\nconst data = {};\nconst element = document.getelementbyid('mydiv');\n\ndata[element] = 'metadata';\ndata['[object htmldivelement]'] // \"metadata\"\n\n\n1\n2\n3\n4\n5\n\n\n上面代码原意是将一个 dom 节点作为对象data的键，但是由于对象只接受字符串作为键名，所以element被自动转为字符串[object htmldivelement]。\n\n为了解决这个问题，es6 提供了 map 数据结构。它类似于对象，也是键值对的集合，但是“键”的范围不限于字符串，各种类型的值（包括对象）都可以当作键。也就是说，object 结构提供了“字符串—值”的对应，map 结构提供了“值—值”的对应，是一种更完善的 hash 结构实现。如果你需要“键值对”的数据结构，map 比 object 更合适。\n\nconst m = new map();\nconst o = {p: 'hello world'};\n\nm.set(o, 'content')\nm.get(o) // \"content\"\n\nm.has(o) // true\nm.delete(o) // true\nm.has(o) // false\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n上面代码使用 map 结构的set方法，将对象o当作m的一个键，然后又使用get方法读取这个键，接着使用delete方法删除了这个键。\n\n上面的例子展示了如何向 map 添加成员。作为构造函数，map 也可以接受一个数组作为参数。该数组的成员是一个个表示键值对的数组。\n\nconst map = new map([\n  ['name', '张三'],\n  ['title', 'author']\n]);\n\nmap.size // 2\nmap.has('name') // true\nmap.get('name') // \"张三\"\nmap.has('title') // true\nmap.get('title') // \"author\"\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n上面代码在新建 map 实例时，就指定了两个键name和title。\n\nmap构造函数接受数组作为参数，实际上执行的是下面的算法。\n\nconst items = [\n  ['name', '张三'],\n  ['title', 'author']\n];\n\nconst map = new map();\n\nitems.foreach(\n  ([key, value]) => map.set(key, value)\n);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n事实上，不仅仅是数组，任何具有 iterator 接口、且每个成员都是一个双元素的数组的数据结构（详见《iterator》一章）都可以当作map构造函数的参数。这就是说，set和map都可以用来生成新的 map。\n\nconst set = new set([\n  ['foo', 1],\n  ['bar', 2]\n]);\nconst m1 = new map(set);\nm1.get('foo') // 1\n\nconst m2 = new map([['baz', 3]]);\nconst m3 = new map(m2);\nm3.get('baz') // 3\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n上面代码中，我们分别使用 set 对象和 map 对象，当作map构造函数的参数，结果都生成了新的 map 对象。\n\n如果对同一个键多次赋值，后面的值将覆盖前面的值。\n\nconst map = new map();\n\nmap\n.set(1, 'aaa')\n.set(1, 'bbb');\n\nmap.get(1) // \"bbb\"\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n上面代码对键1连续赋值两次，后一次的值覆盖前一次的值。\n\n如果读取一个未知的键，则返回undefined。\n\nnew map().get('asfddfsasadf')\n// undefined\n\n\n1\n2\n\n\n注意，只有对同一个对象的引用，map 结构才将其视为同一个键。这一点要非常小心。\n\nconst map = new map();\n\nmap.set(['a'], 555);\nmap.get(['a']) // undefined\n\n\n1\n2\n3\n4\n\n\n上面代码的set和get方法，表面是针对同一个键，但实际上这是两个不同的数组实例，内存地址是不一样的，因此get方法无法读取该键，返回undefined。\n\n同理，同样的值的两个实例，在 map 结构中被视为两个键。\n\nconst map = new map();\n\nconst k1 = ['a'];\nconst k2 = ['a'];\n\nmap\n.set(k1, 111)\n.set(k2, 222);\n\nmap.get(k1) // 111\nmap.get(k2) // 222\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n上面代码中，变量k1和k2的值是一样的，但是它们在 map 结构中被视为两个键。\n\n由上可知，map 的键实际上是跟内存地址绑定的，只要内存地址不一样，就视为两个键。这就解决了同名属性碰撞（clash）的问题，我们扩展别人的库的时候，如果使用对象作为键名，就不用担心自己的属性与原作者的属性同名。\n\n如果 map 的键是一个简单类型的值（数字、字符串、布尔值），则只要两个值严格相等，map 将其视为一个键，比如0和-0就是一个键，布尔值true和字符串true则是两个不同的键。另外，undefined和null也是两个不同的键。虽然nan不严格相等于自身，但 map 将其视为同一个键。\n\nlet map = new map();\n\nmap.set(-0, 123);\nmap.get(+0) // 123\n\nmap.set(true, 1);\nmap.set('true', 2);\nmap.get(true) // 1\n\nmap.set(undefined, 3);\nmap.set(null, 4);\nmap.get(undefined) // 3\n\nmap.set(nan, 123);\nmap.get(nan) // 123\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n\n# 实例的属性和操作方法\n\nmap 结构的实例有以下属性和操作方法。\n\n（1）size 属性\n\nsize属性返回 map 结构的成员总数。\n\nconst map = new map();\nmap.set('foo', true);\nmap.set('bar', false);\n\nmap.size // 2\n\n\n1\n2\n3\n4\n5\n\n\n（2）map.prototype.set(key, value)\n\nset方法设置键名key对应的键值为value，然后返回整个 map 结构。如果key已经有值，则键值会被更新，否则就新生成该键。\n\nconst m = new map();\n\nm.set('edition', 6)        // 键是字符串\nm.set(262, 'standard')     // 键是数值\nm.set(undefined, 'nah')    // 键是 undefined\n\n\n1\n2\n3\n4\n5\n\n\nset方法返回的是当前的map对象，因此可以采用链式写法。\n\nlet map = new map()\n  .set(1, 'a')\n  .set(2, 'b')\n  .set(3, 'c');\n\n\n1\n2\n3\n4\n\n\n（3）map.prototype.get(key)\n\nget方法读取key对应的键值，如果找不到key，返回undefined。\n\nconst m = new map();\n\nconst hello = function() {console.log('hello');};\nm.set(hello, 'hello es6!') // 键是函数\n\nm.get(hello)  // hello es6!\n\n\n1\n2\n3\n4\n5\n6\n\n\n（4）map.prototype.has(key)\n\nhas方法返回一个布尔值，表示某个键是否在当前 map 对象之中。\n\nconst m = new map();\n\nm.set('edition', 6);\nm.set(262, 'standard');\nm.set(undefined, 'nah');\n\nm.has('edition')     // true\nm.has('years')       // false\nm.has(262)           // true\nm.has(undefined)     // true\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n（5）map.prototype.delete(key)\n\ndelete方法删除某个键，返回true。如果删除失败，返回false。\n\nconst m = new map();\nm.set(undefined, 'nah');\nm.has(undefined)     // true\n\nm.delete(undefined)\nm.has(undefined)       // false\n\n\n1\n2\n3\n4\n5\n6\n\n\n（6）map.prototype.clear()\n\nclear方法清除所有成员，没有返回值。\n\nlet map = new map();\nmap.set('foo', true);\nmap.set('bar', false);\n\nmap.size // 2\nmap.clear()\nmap.size // 0\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# 遍历方法\n\nmap 结构原生提供三个遍历器生成函数和一个遍历方法。\n\n * map.prototype.keys()：返回键名的遍历器。\n * map.prototype.values()：返回键值的遍历器。\n * map.prototype.entries()：返回所有成员的遍历器。\n * map.prototype.foreach()：遍历 map 的所有成员。\n\n需要特别注意的是，map 的遍历顺序就是插入顺序。\n\nconst map = new map([\n  ['f', 'no'],\n  ['t',  'yes'],\n]);\n\nfor (let key of map.keys()) {\n  console.log(key);\n}\n// \"f\"\n// \"t\"\n\nfor (let value of map.values()) {\n  console.log(value);\n}\n// \"no\"\n// \"yes\"\n\nfor (let item of map.entries()) {\n  console.log(item[0], item[1]);\n}\n// \"f\" \"no\"\n// \"t\" \"yes\"\n\n// 或者\nfor (let [key, value] of map.entries()) {\n  console.log(key, value);\n}\n// \"f\" \"no\"\n// \"t\" \"yes\"\n\n// 等同于使用map.entries()\nfor (let [key, value] of map) {\n  console.log(key, value);\n}\n// \"f\" \"no\"\n// \"t\" \"yes\"\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n\n\n上面代码最后的那个例子，表示 map 结构的默认遍历器接口（symbol.iterator属性），就是entries方法。\n\nmap[symbol.iterator] === map.entries\n// true\n\n\n1\n2\n\n\nmap 结构转为数组结构，比较快速的方法是使用扩展运算符（...）。\n\nconst map = new map([\n  [1, 'one'],\n  [2, 'two'],\n  [3, 'three'],\n]);\n\n[...map.keys()]\n// [1, 2, 3]\n\n[...map.values()]\n// ['one', 'two', 'three']\n\n[...map.entries()]\n// [[1,'one'], [2, 'two'], [3, 'three']]\n\n[...map]\n// [[1,'one'], [2, 'two'], [3, 'three']]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n结合数组的map方法、filter方法，可以实现 map 的遍历和过滤（map 本身没有map和filter方法）。\n\nconst map0 = new map()\n  .set(1, 'a')\n  .set(2, 'b')\n  .set(3, 'c');\n\nconst map1 = new map(\n  [...map0].filter(([k, v]) => k < 3)\n);\n// 产生 map 结构 {1 => 'a', 2 => 'b'}\n\nconst map2 = new map(\n  [...map0].map(([k, v]) => [k * 2, '_' + v])\n    );\n// 产生 map 结构 {2 => '_a', 4 => '_b', 6 => '_c'}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n此外，map 还有一个foreach方法，与数组的foreach方法类似，也可以实现遍历。\n\nmap.foreach(function(value, key, map) {\n  console.log(\"key: %s, value: %s\", key, value);\n});\n\n\n1\n2\n3\n\n\nforeach方法还可以接受第二个参数，用来绑定this。\n\nconst reporter = {\n  report: function(key, value) {\n    console.log(\"key: %s, value: %s\", key, value);\n  }\n};\n\nmap.foreach(function(value, key, map) {\n  this.report(key, value);\n}, reporter);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n上面代码中，foreach方法的回调函数的this，就指向reporter。\n\n\n# 与其他数据结构的互相转换\n\n（1）map 转为数组\n\n前面已经提过，map 转为数组最方便的方法，就是使用扩展运算符（...）。\n\nconst mymap = new map()\n  .set(true, 7)\n  .set({foo: 3}, ['abc']);\n[...mymap]\n// [ [ true, 7 ], [ { foo: 3 }, [ 'abc' ] ] ]\n\n\n1\n2\n3\n4\n5\n\n\n（2）数组 转为 map\n\n将数组传入 map 构造函数，就可以转为 map。\n\nnew map([\n  [true, 7],\n  [{foo: 3}, ['abc']]\n])\n// map {\n//   true => 7,\n//   object {foo: 3} => ['abc']\n// }\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n（3）map 转为对象\n\n如果所有 map 的键都是字符串，它可以无损地转为对象。\n\nfunction strmaptoobj(strmap) {\n  let obj = object.create(null);\n  for (let [k,v] of strmap) {\n    obj[k] = v;\n  }\n  return obj;\n}\n\nconst mymap = new map()\n  .set('yes', true)\n  .set('no', false);\nstrmaptoobj(mymap)\n// { yes: true, no: false }\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n如果有非字符串的键名，那么这个键名会被转成字符串，再作为对象的键名。\n\n（4）对象转为 map\n\nfunction objtostrmap(obj) {\n  let strmap = new map();\n  for (let k of object.keys(obj)) {\n    strmap.set(k, obj[k]);\n  }\n  return strmap;\n}\n\nobjtostrmap({yes: true, no: false})\n// map {\"yes\" => true, \"no\" => false}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n（5）map 转为 json\n\nmap 转为 json 要区分两种情况。一种情况是，map 的键名都是字符串，这时可以选择转为对象 json。\n\nfunction strmaptojson(strmap) {\n  return json.stringify(strmaptoobj(strmap));\n}\n\nlet mymap = new map().set('yes', true).set('no', false);\nstrmaptojson(mymap)\n// '{\"yes\":true,\"no\":false}'\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n另一种情况是，map 的键名有非字符串，这时可以选择转为数组 json。\n\nfunction maptoarrayjson(map) {\n  return json.stringify([...map]);\n}\n\nlet mymap = new map().set(true, 7).set({foo: 3}, ['abc']);\nmaptoarrayjson(mymap)\n// '[[true,7],[{\"foo\":3},[\"abc\"]]]'\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n（6）json 转为 map\n\njson 转为 map，正常情况下，所有键名都是字符串。\n\nfunction jsontostrmap(jsonstr) {\n  return objtostrmap(json.parse(jsonstr));\n}\n\njsontostrmap('{\"yes\": true, \"no\": false}')\n// map {'yes' => true, 'no' => false}\n\n\n1\n2\n3\n4\n5\n6\n\n\n但是，有一种特殊情况，整个 json 就是一个数组，且每个数组成员本身，又是一个有两个成员的数组。这时，它可以一一对应地转为 map。这往往是 map 转为数组 json 的逆操作。\n\nfunction jsontomap(jsonstr) {\n  return new map(json.parse(jsonstr));\n}\n\njsontomap('[[true,7],[{\"foo\":3},[\"abc\"]]]')\n// map {true => 7, object {foo: 3} => ['abc']}\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# weakmap\n\n\n# 含义\n\nweakmap结构与map结构类似，也是用于生成键值对的集合。\n\n// weakmap 可以使用 set 方法添加成员\nconst wm1 = new weakmap();\nconst key = {foo: 1};\nwm1.set(key, 2);\nwm1.get(key) // 2\n\n// weakmap 也可以接受一个数组，\n// 作为构造函数的参数\nconst k1 = [1, 2, 3];\nconst k2 = [4, 5, 6];\nconst wm2 = new weakmap([[k1, 'foo'], [k2, 'bar']]);\nwm2.get(k2) // \"bar\"\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\nweakmap与map的区别有两点。\n\n首先，weakmap只接受对象作为键名（null除外），不接受其他类型的值作为键名。\n\nconst map = new weakmap();\nmap.set(1, 2)\n// typeerror: 1 is not an object!\nmap.set(symbol(), 2)\n// typeerror: invalid value used as weak map key\nmap.set(null, 2)\n// typeerror: invalid value used as weak map key\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n上面代码中，如果将数值1和symbol值作为 weakmap 的键名，都会报错。\n\n其次，weakmap的键名所指向的对象，不计入垃圾回收机制。\n\nweakmap的设计目的在于，有时我们想在某个对象上面存放一些数据，但是这会形成对于这个对象的引用。请看下面的例子。\n\nconst e1 = document.getelementbyid('foo');\nconst e2 = document.getelementbyid('bar');\nconst arr = [\n  [e1, 'foo 元素'],\n  [e2, 'bar 元素'],\n];\n\n\n1\n2\n3\n4\n5\n6\n\n\n上面代码中，e1和e2是两个对象，我们通过arr数组对这两个对象添加一些文字说明。这就形成了arr对e1和e2的引用。\n\n一旦不再需要这两个对象，我们就必须手动删除这个引用，否则垃圾回收机制就不会释放e1和e2占用的内存。\n\n// 不需要 e1 和 e2 的时候\n// 必须手动删除引用\narr [0] = null;\narr [1] = null;\n\n\n1\n2\n3\n4\n\n\n上面这样的写法显然很不方便。一旦忘了写，就会造成内存泄露。\n\nweakmap 就是为了解决这个问题而诞生的，它的键名所引用的对象都是弱引用，即垃圾回收机制不将该引用考虑在内。因此，只要所引用的对象的其他引用都被清除，垃圾回收机制就会释放该对象所占用的内存。也就是说，一旦不再需要，weakmap 里面的键名对象和所对应的键值对会自动消失，不用手动删除引用。\n\n基本上，如果你要往对象上添加数据，又不想干扰垃圾回收机制，就可以使用 weakmap。一个典型应用场景是，在网页的 dom 元素上添加数据，就可以使用weakmap结构。当该 dom 元素被清除，其所对应的weakmap记录就会自动被移除。\n\nconst wm = new weakmap();\n\nconst element = document.getelementbyid('example');\n\nwm.set(element, 'some information');\nwm.get(element) // \"some information\"\n\n\n1\n2\n3\n4\n5\n6\n\n\n上面代码中，先新建一个 weakmap 实例。然后，将一个 dom 节点作为键名存入该实例，并将一些附加信息作为键值，一起存放在 weakmap 里面。这时，weakmap 里面对element的引用就是弱引用，不会被计入垃圾回收机制。\n\n也就是说，上面的 dom 节点对象的引用计数是1，而不是2。这时，一旦消除对该节点的引用，它占用的内存就会被垃圾回收机制释放。weakmap 保存的这个键值对，也会自动消失。\n\n总之，weakmap的专用场合就是，它的键所对应的对象，可能会在将来消失。weakmap结构有助于防止内存泄漏。\n\n注意，weakmap 弱引用的只是键名，而不是键值。键值依然是正常引用。\n\nconst wm = new weakmap();\nlet key = {};\nlet obj = {foo: 1};\n\nwm.set(key, obj);\nobj = null;\nwm.get(key)\n// object {foo: 1}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n上面代码中，键值obj是正常引用。所以，即使在 weakmap 外部消除了obj的引用，weakmap 内部的引用依然存在。\n\n\n# weakmap 的语法\n\nweakmap 与 map 在 api 上的区别主要是两个，一是没有遍历操作（即没有keys()、values()和entries()方法），也没有size属性。因为没有办法列出所有键名，某个键名是否存在完全不可预测，跟垃圾回收机制是否运行相关。这一刻可以取到键名，下一刻垃圾回收机制突然运行了，这个键名就没了，为了防止出现不确定性，就统一规定不能取到键名。二是无法清空，即不支持clear方法。因此，weakmap只有四个方法可用：get()、set()、has()、delete()。\n\nconst wm = new weakmap();\n\n// size、foreach、clear 方法都不存在\nwm.size // undefined\nwm.foreach // undefined\nwm.clear // undefined\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# weakmap 的示例\n\nweakmap 的例子很难演示，因为无法观察它里面的引用会自动消失。此时，其他引用都解除了，已经没有引用指向 weakmap 的键名了，导致无法证实那个键名是不是存在。\n\n贺师俊老师提示，如果引用所指向的值占用特别多的内存，就可以通过 node 的process.memoryusage方法看出来。根据这个思路，网友vtxf补充了下面的例子。\n\n首先，打开 node 命令行。\n\n$ node --expose-gc\n\n\n1\n\n\n上面代码中，--expose-gc参数表示允许手动执行垃圾回收机制。\n\n然后，执行下面的代码。\n\n// 手动执行一次垃圾回收，保证获取的内存使用状态准确\n> global.gc();\nundefined\n\n// 查看内存占用的初始状态，heapused 为 4m 左右\n> process.memoryusage();\n{ rss: 21106688,\n  heaptotal: 7376896,\n  heapused: 4153936,\n  external: 9059 }\n\n> let wm = new weakmap();\nundefined\n\n// 新建一个变量 key，指向一个 5*1024*1024 的数组\n> let key = new array(5 * 1024 * 1024);\nundefined\n\n// 设置 weakmap 实例的键名，也指向 key 数组\n// 这时，key 数组实际被引用了两次，\n// 变量 key 引用一次，weakmap 的键名引用了第二次\n// 但是，weakmap 是弱引用，对于引擎来说，引用计数还是1\n> wm.set(key, 1);\nweakmap {}\n\n> global.gc();\nundefined\n\n// 这时内存占用 heapused 增加到 45m 了\n> process.memoryusage();\n{ rss: 67538944,\n  heaptotal: 7376896,\n  heapused: 45782816,\n  external: 8945 }\n\n// 清除变量 key 对数组的引用，\n// 但没有手动清除 weakmap 实例的键名对数组的引用\n> key = null;\nnull\n\n// 再次执行垃圾回收\n> global.gc();\nundefined\n\n// 内存占用 heapused 变回 4m 左右，\n// 可以看到 weakmap 的键名引用没有阻止 gc 对内存的回收\n> process.memoryusage();\n{ rss: 20639744,\n  heaptotal: 8425472,\n  heapused: 3979792,\n  external: 8956 }\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n\n\n上面代码中，只要外部的引用消失，weakmap 内部的引用，就会自动被垃圾回收清除。由此可见，有了 weakmap 的帮助，解决内存泄漏就会简单很多。\n\n\n# weakmap 的用途\n\n前文说过，weakmap 应用的典型场合就是 dom 节点作为键名。下面是一个例子。\n\nlet myelement = document.getelementbyid('logo');\nlet myweakmap = new weakmap();\n\nmyweakmap.set(myelement, {timesclicked: 0});\n\nmyelement.addeventlistener('click', function() {\n  let logodata = myweakmap.get(myelement);\n  logodata.timesclicked++;\n}, false);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n上面代码中，myelement是一个 dom 节点，每当发生click事件，就更新一下状态。我们将这个状态作为键值放在 weakmap 里，对应的键名就是myelement。一旦这个 dom 节点删除，该状态就会自动消失，不存在内存泄漏风险。\n\nweakmap 的另一个用处是部署私有属性。\n\nconst _counter = new weakmap();\nconst _action = new weakmap();\n\nclass countdown {\n  constructor(counter, action) {\n    _counter.set(this, counter);\n    _action.set(this, action);\n  }\n  dec() {\n    let counter = _counter.get(this);\n    if (counter < 1) return;\n    counter--;\n    _counter.set(this, counter);\n    if (counter === 0) {\n      _action.get(this)();\n    }\n  }\n}\n\nconst c = new countdown(2, () => console.log('done'));\n\nc.dec()\nc.dec()\n// done\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n\n\n上面代码中，countdown类的两个内部属性_counter和_action，是实例的弱引用，所以如果删除实例，它们也就随之消失，不会造成内存泄漏。",charsets:{cjk:!0}},{title:"Reflect",frontmatter:{title:"Reflect",date:"2020-02-09T16:00:29.000Z",permalink:"/pages/74de3e45e4491e95",author:"阮一峰",categories:["《ES6 教程》笔记"],tags:["ES6"],readingShow:"top"},regularPath:"/06.%E4%B9%A6%E7%B1%8D/05.%E3%80%8AES6%20%E6%95%99%E7%A8%8B%E3%80%8B%E7%AC%94%E8%AE%B0/15.Reflect.html",relativePath:"06.书籍/05.《ES6 教程》笔记/15.Reflect.md",key:"v-4beadc9a",path:"/pages/74de3e45e4491e95/",headers:[{level:2,title:"概述",slug:"概述",normalizedTitle:"概述",charIndex:14},{level:2,title:"静态方法",slug:"静态方法",normalizedTitle:"静态方法",charIndex:2044},{level:3,title:"Reflect.get(target, name, receiver)",slug:"reflect-get-target-name-receiver",normalizedTitle:"reflect.get(target, name, receiver)",charIndex:2152},{level:3,title:"Reflect.set(target, name, value, receiver)",slug:"reflect-set-target-name-value-receiver",normalizedTitle:"reflect.set(target, name, value, receiver)",charIndex:1097},{level:3,title:"Reflect.has(obj, name)",slug:"reflect-has-obj-name",normalizedTitle:"reflect.has(obj, name)",charIndex:695},{level:3,title:"Reflect.deleteProperty(obj, name)",slug:"reflect-deleteproperty-obj-name",normalizedTitle:"reflect.deleteproperty(obj, name)",charIndex:718},{level:3,title:"Reflect.construct(target, args)",slug:"reflect-construct-target-args",normalizedTitle:"reflect.construct(target, args)",charIndex:2117},{level:3,title:"Reflect.getPrototypeOf(obj)",slug:"reflect-getprototypeof-obj",normalizedTitle:"reflect.getprototypeof(obj)",charIndex:6109},{level:3,title:"Reflect.setPrototypeOf(obj, newProto)",slug:"reflect-setprototypeof-obj-newproto",normalizedTitle:"reflect.setprototypeof(obj, newproto)",charIndex:6618},{level:3,title:"Reflect.apply(func, thisArg, args)",slug:"reflect-apply-func-thisarg-args",normalizedTitle:"reflect.apply(func, thisarg, args)",charIndex:7595},{level:3,title:"Reflect.defineProperty(target, propertyKey, attributes)",slug:"reflect-defineproperty-target-propertykey-attributes",normalizedTitle:"reflect.defineproperty(target, propertykey, attributes)",charIndex:8263},{level:3,title:"Reflect.getOwnPropertyDescriptor(target, propertyKey)",slug:"reflect-getownpropertydescriptor-target-propertykey",normalizedTitle:"reflect.getownpropertydescriptor(target, propertykey)",charIndex:9137},{level:3,title:"Reflect.isExtensible (target)",slug:"reflect-isextensible-target",normalizedTitle:"reflect.isextensible (target)",charIndex:9781},{level:3,title:"Reflect.preventExtensions(target)",slug:"reflect-preventextensions-target",normalizedTitle:"reflect.preventextensions(target)",charIndex:2411},{level:3,title:"Reflect.ownKeys (target)",slug:"reflect-ownkeys-target",normalizedTitle:"reflect.ownkeys (target)",charIndex:10676},{level:2,title:"实例：使用 Proxy 实现观察者模式",slug:"实例-使用-proxy-实现观察者模式",normalizedTitle:"实例：使用 proxy 实现观察者模式",charIndex:11188}],excerpt:'<h1 id="reflect"><a class="header-anchor" href="#reflect">#</a> Reflect</h1>\n<h2 id="概述"><a class="header-anchor" href="#概述">#</a> 概述</h2>\n<p><code>Reflect</code>对象与<code>Proxy</code>对象一样，也是 ES6 为了操作对象而提供的新 API。<code>Reflect</code>对象的设计目的有这样几个。</p>\n<p>（1） **将<code>Object</code>对象的一些明显属于语言内部的方法（比如<code>Object.defineProperty</code>），放到<code>Reflect</code>对象上。**现阶段，某些方法同时在<code>Object</code>和<code>Reflect</code>对象上部署，未来的新方法将只部署在<code>Reflect</code>对象上。也就是说，从<code>Reflect</code>对象上可以拿到语言内部的方法。</p>\n',lastUpdated:"2022/9/22 下午4:28:09",lastUpdatedTimestamp:1663835289e3,headersStr:"概述 静态方法 Reflect.get(target, name, receiver) Reflect.set(target, name, value, receiver) Reflect.has(obj, name) Reflect.deleteProperty(obj, name) Reflect.construct(target, args) Reflect.getPrototypeOf(obj) Reflect.setPrototypeOf(obj, newProto) Reflect.apply(func, thisArg, args) Reflect.defineProperty(target, propertyKey, attributes) Reflect.getOwnPropertyDescriptor(target, propertyKey) Reflect.isExtensible (target) Reflect.preventExtensions(target) Reflect.ownKeys (target) 实例：使用 Proxy 实现观察者模式",content:"# Reflect\n\n\n# 概述\n\nReflect对象与Proxy对象一样，也是 ES6 为了操作对象而提供的新 API。Reflect对象的设计目的有这样几个。\n\n（1） **将Object对象的一些明显属于语言内部的方法（比如Object.defineProperty），放到Reflect对象上。**现阶段，某些方法同时在Object和Reflect对象上部署，未来的新方法将只部署在Reflect对象上。也就是说，从Reflect对象上可以拿到语言内部的方法。 （2） 修改某些Object方法的返回结果，让其变得更合理。比如，Object.defineProperty(obj, name, desc)在无法定义属性时，会抛出一个错误，而Reflect.defineProperty(obj, name, desc)则会返回false。\n\n// 老写法\ntry {\n  Object.defineProperty(target, property, attributes);\n  // success\n} catch (e) {\n  // failure\n}\n\n// 新写法\nif (Reflect.defineProperty(target, property, attributes)) {\n  // success\n} else {\n  // failure\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n（3） 让Object操作都变成函数行为。某些Object操作是命令式，比如name in obj和delete obj[name]，而Reflect.has(obj, name)和Reflect.deleteProperty(obj, name)让它们变成了函数行为。\n\n// 老写法\n'assign' in Object // true\n\n// 新写法\nReflect.has(Object, 'assign') // true\n\n\n1\n2\n3\n4\n5\n\n\n（4）Reflect对象的方法与Proxy对象的方法一一对应，只要是Proxy对象的方法，就能在Reflect对象上找到对应的方法。这就让Proxy对象可以方便地调用对应的Reflect方法，完成默认行为，作为修改行为的基础。也就是说，不管Proxy怎么修改默认行为，你总可以在Reflect上获取默认行为。\n\nProxy(target, {\n  set: function(target, name, value, receiver) {\n    var success = Reflect.set(target, name, value, receiver);\n    if (success) {\n      console.log('property ' + name + ' on ' + target + ' set to ' + value);\n    }\n    return success;\n  }\n});\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n上面代码中，Proxy方法拦截target对象的属性赋值行为。它采用Reflect.set方法将值赋值给对象的属性，确保完成原有的行为，然后再部署额外的功能。\n\n下面是另一个例子。\n\nvar loggedObj = new Proxy(obj, {\n  get(target, name) {\n    console.log('get', target, name);\n    return Reflect.get(target, name);\n  },\n  deleteProperty(target, name) {\n    console.log('delete' + name);\n    return Reflect.deleteProperty(target, name);\n  },\n  has(target, name) {\n    console.log('has' + name);\n    return Reflect.has(target, name);\n  }\n});\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n上面代码中，每一个Proxy对象的拦截操作（get、delete、has），内部都调用对应的Reflect方法，保证原生行为能够正常执行。添加的工作，就是将每一个操作输出一行日志。\n\n有了Reflect对象以后，很多操作会更易读。\n\n// 老写法\nFunction.prototype.apply.call(Math.floor, undefined, [1.75]) // 1\n\n// 新写法\nReflect.apply(Math.floor, undefined, [1.75]) // 1\n\n\n1\n2\n3\n4\n5\n\n\n\n# 静态方法\n\nReflect对象一共有 13 个静态方法。\n\n * Reflect.apply(target, thisArg, args)\n * Reflect.construct(target, args)\n * Reflect.get(target, name, receiver)\n * Reflect.set(target, name, value, receiver)\n * Reflect.defineProperty(target, name, desc)\n * Reflect.deleteProperty(target, name)\n * Reflect.has(target, name)\n * Reflect.ownKeys(target)\n * Reflect.isExtensible(target)\n * Reflect.preventExtensions(target)\n * Reflect.getOwnPropertyDescriptor(target, name)\n * Reflect.getPrototypeOf(target)\n * Reflect.setPrototypeOf(target, prototype)\n\n上面这些方法的作用，大部分与Object对象的同名方法的作用都是相同的，而且它与Proxy对象的方法是一一对应的。下面是对它们的解释。\n\n\n# Reflect.get(target, name, receiver)\n\nReflect.get方法查找并返回target对象的name属性，如果没有该属性，则返回undefined。\n\nvar myObject = {\n  foo: 1,\n  bar: 2,\n  get baz() {\n    return this.foo + this.bar;\n  },\n}\n\nReflect.get(myObject, 'foo') // 1\nReflect.get(myObject, 'bar') // 2\nReflect.get(myObject, 'baz') // 3\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n如果name属性部署了读取函数（getter），则读取函数的this绑定receiver。\n\nvar myObject = {\n  foo: 1,\n  bar: 2,\n  get baz() {\n    return this.foo + this.bar;\n  },\n};\n\nvar myReceiverObject = {\n  foo: 4,\n  bar: 4,\n};\n\nReflect.get(myObject, 'baz', myReceiverObject) // 8\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n如果第一个参数不是对象，Reflect.get方法会报错。\n\nReflect.get(1, 'foo') // 报错\nReflect.get(false, 'foo') // 报错\n\n\n1\n2\n\n\n\n# Reflect.set(target, name, value, receiver)\n\nReflect.set方法设置target对象的name属性等于value。\n\nvar myObject = {\n  foo: 1,\n  set bar(value) {\n    return this.foo = value;\n  },\n}\n\nmyObject.foo // 1\n\nReflect.set(myObject, 'foo', 2);\nmyObject.foo // 2\n\nReflect.set(myObject, 'bar', 3)\nmyObject.foo // 3\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n如果name属性设置了赋值函数，则赋值函数的this绑定receiver。\n\nvar myObject = {\n  foo: 4,\n  set bar(value) {\n    return this.foo = value;\n  },\n};\n\nvar myReceiverObject = {\n  foo: 0,\n};\n\nReflect.set(myObject, 'bar', 1, myReceiverObject);\nmyObject.foo // 4\nmyReceiverObject.foo // 1\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n注意，如果 Proxy对象和 Reflect对象联合使用，前者拦截赋值操作，后者完成赋值的默认行为，而且传入了receiver，那么Reflect.set会触发Proxy.defineProperty拦截。\n\nlet p = {\n  a: 'a'\n};\n\nlet handler = {\n  set(target, key, value, receiver) {\n    console.log('set');\n    Reflect.set(target, key, value, receiver)\n  },\n  defineProperty(target, key, attribute) {\n    console.log('defineProperty');\n    Reflect.defineProperty(target, key, attribute);\n  }\n};\n\nlet obj = new Proxy(p, handler);\nobj.a = 'A';\n// set\n// defineProperty\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\n上面代码中，Proxy.set拦截里面使用了Reflect.set，而且传入了receiver，导致触发Proxy.defineProperty拦截。这是因为Proxy.set的receiver参数总是指向当前的 Proxy实例（即上例的obj），而Reflect.set一旦传入receiver，就会将属性赋值到receiver上面（即obj），导致触发defineProperty拦截。如果Reflect.set没有传入receiver，那么就不会触发defineProperty拦截。\n\nlet p = {\n  a: 'a'\n};\n\nlet handler = {\n  set(target, key, value, receiver) {\n    console.log('set');\n    Reflect.set(target, key, value)\n  },\n  defineProperty(target, key, attribute) {\n    console.log('defineProperty');\n    Reflect.defineProperty(target, key, attribute);\n  }\n};\n\nlet obj = new Proxy(p, handler);\nobj.a = 'A';\n// set\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\n如果第一个参数不是对象，Reflect.set会报错。\n\nReflect.set(1, 'foo', {}) // 报错\nReflect.set(false, 'foo', {}) // 报错\n\n\n1\n2\n\n\n\n# Reflect.has(obj, name)\n\nReflect.has方法对应name in obj里面的in运算符。\n\nvar myObject = {\n  foo: 1,\n};\n\n// 旧写法\n'foo' in myObject // true\n\n// 新写法\nReflect.has(myObject, 'foo') // true\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n如果Reflect.has()方法的第一个参数不是对象，会报错。\n\n\n# Reflect.deleteProperty(obj, name)\n\nReflect.deleteProperty方法等同于delete obj[name]，用于删除对象的属性。\n\nconst myObj = { foo: 'bar' };\n\n// 旧写法\ndelete myObj.foo;\n\n// 新写法\nReflect.deleteProperty(myObj, 'foo');\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n该方法返回一个布尔值。如果删除成功，或者被删除的属性不存在，返回true；删除失败，被删除的属性依然存在，返回false。\n\n如果Reflect.deleteProperty()方法的第一个参数不是对象，会报错。\n\n\n# Reflect.construct(target, args)\n\nReflect.construct方法等同于new target(...args)，这提供了一种不使用new，来调用构造函数的方法。\n\nfunction Greeting(name) {\n  this.name = name;\n}\n\n// new 的写法\nconst instance = new Greeting('张三');\n\n// Reflect.construct 的写法\nconst instance = Reflect.construct(Greeting, ['张三']);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n如果Reflect.construct()方法的第一个参数不是函数，会报错。\n\n\n# Reflect.getPrototypeOf(obj)\n\nReflect.getPrototypeOf方法用于读取对象的__proto__属性，对应Object.getPrototypeOf(obj)。\n\nconst myObj = new FancyThing();\n\n// 旧写法\nObject.getPrototypeOf(myObj) === FancyThing.prototype;\n\n// 新写法\nReflect.getPrototypeOf(myObj) === FancyThing.prototype;\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\nReflect.getPrototypeOf和Object.getPrototypeOf的一个区别是，如果参数不是对象，Object.getPrototypeOf会将这个参数转为对象，然后再运行，而Reflect.getPrototypeOf会报错。\n\nObject.getPrototypeOf(1) // Number {[[PrimitiveValue]]: 0}\nReflect.getPrototypeOf(1) // 报错\n\n\n1\n2\n\n\n\n# Reflect.setPrototypeOf(obj, newProto)\n\nReflect.setPrototypeOf方法用于设置目标对象的原型（prototype），对应Object.setPrototypeOf(obj, newProto)方法。它返回一个布尔值，表示是否设置成功。\n\nconst myObj = {};\n\n// 旧写法\nObject.setPrototypeOf(myObj, Array.prototype);\n\n// 新写法\nReflect.setPrototypeOf(myObj, Array.prototype);\n\nmyObj.length // 0\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n如果无法设置目标对象的原型（比如，目标对象禁止扩展），Reflect.setPrototypeOf方法返回false。\n\nReflect.setPrototypeOf({}, null)\n// true\nReflect.setPrototypeOf(Object.freeze({}), null)\n// false\n\n\n1\n2\n3\n4\n\n\n如果第一个参数不是对象，Object.setPrototypeOf会返回第一个参数本身，而Reflect.setPrototypeOf会报错。\n\nObject.setPrototypeOf(1, {})\n// 1\n\nReflect.setPrototypeOf(1, {})\n// TypeError: Reflect.setPrototypeOf called on non-object\n\n\n1\n2\n3\n4\n5\n\n\n如果第一个参数是undefined或null，Object.setPrototypeOf和Reflect.setPrototypeOf都会报错。\n\nObject.setPrototypeOf(null, {})\n// TypeError: Object.setPrototypeOf called on null or undefined\n\nReflect.setPrototypeOf(null, {})\n// TypeError: Reflect.setPrototypeOf called on non-object\n\n\n1\n2\n3\n4\n5\n\n\n\n# Reflect.apply(func, thisArg, args)\n\nReflect.apply方法等同于Function.prototype.apply.call(func, thisArg, args)，用于绑定this对象后执行给定函数。\n\n一般来说，如果要绑定一个函数的this对象，可以这样写fn.apply(obj, args)，但是如果函数定义了自己的apply方法，就只能写成Function.prototype.apply.call(fn, obj, args)，采用Reflect对象可以简化这种操作。\n\nconst ages = [11, 33, 12, 54, 18, 96];\n\n// 旧写法\nconst youngest = Math.min.apply(Math, ages);\nconst oldest = Math.max.apply(Math, ages);\nconst type = Object.prototype.toString.call(youngest);\n\n// 新写法\nconst youngest = Reflect.apply(Math.min, Math, ages);\nconst oldest = Reflect.apply(Math.max, Math, ages);\nconst type = Reflect.apply(Object.prototype.toString, youngest, []);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n\n# Reflect.defineProperty(target, propertyKey, attributes)\n\nReflect.defineProperty方法基本等同于Object.defineProperty，用来为对象定义属性。未来，后者会被逐渐废除，请从现在开始就使用Reflect.defineProperty代替它。\n\nfunction MyDate() {\n  /*…*/\n}\n\n// 旧写法\nObject.defineProperty(MyDate, 'now', {\n  value: () => Date.now()\n});\n\n// 新写法\nReflect.defineProperty(MyDate, 'now', {\n  value: () => Date.now()\n});\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n如果Reflect.defineProperty的第一个参数不是对象，就会抛出错误，比如Reflect.defineProperty(1, 'foo')。\n\n这个方法可以与Proxy.defineProperty配合使用。\n\nconst p = new Proxy({}, {\n  defineProperty(target, prop, descriptor) {\n    console.log(descriptor);\n    return Reflect.defineProperty(target, prop, descriptor);\n  }\n});\n\np.foo = 'bar';\n// {value: \"bar\", writable: true, enumerable: true, configurable: true}\n\np.foo // \"bar\"\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n上面代码中，Proxy.defineProperty对属性赋值设置了拦截，然后使用Reflect.defineProperty完成了赋值。\n\n\n# Reflect.getOwnPropertyDescriptor(target, propertyKey)\n\nReflect.getOwnPropertyDescriptor基本等同于Object.getOwnPropertyDescriptor，用于得到指定属性的描述对象，将来会替代掉后者。\n\nvar myObject = {};\nObject.defineProperty(myObject, 'hidden', {\n  value: true,\n  enumerable: false,\n});\n\n// 旧写法\nvar theDescriptor = Object.getOwnPropertyDescriptor(myObject, 'hidden');\n\n// 新写法\nvar theDescriptor = Reflect.getOwnPropertyDescriptor(myObject, 'hidden');\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\nReflect.getOwnPropertyDescriptor和Object.getOwnPropertyDescriptor的一个区别是，如果第一个参数不是对象，Object.getOwnPropertyDescriptor(1, 'foo')不报错，返回undefined，而Reflect.getOwnPropertyDescriptor(1, 'foo')会抛出错误，表示参数非法。\n\n\n# Reflect.isExtensible (target)\n\nReflect.isExtensible方法对应Object.isExtensible，返回一个布尔值，表示当前对象是否可扩展。\n\nconst myObject = {};\n\n// 旧写法\nObject.isExtensible(myObject) // true\n\n// 新写法\nReflect.isExtensible(myObject) // true\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n如果参数不是对象，Object.isExtensible会返回false，因为非对象本来就是不可扩展的，而Reflect.isExtensible会报错。\n\nObject.isExtensible(1) // false\nReflect.isExtensible(1) // 报错\n\n\n1\n2\n\n\n\n# Reflect.preventExtensions(target)\n\nReflect.preventExtensions对应Object.preventExtensions方法，用于让一个对象变为不可扩展。它返回一个布尔值，表示是否操作成功。\n\nvar myObject = {};\n\n// 旧写法\nObject.preventExtensions(myObject) // Object {}\n\n// 新写法\nReflect.preventExtensions(myObject) // true\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n如果参数不是对象，Object.preventExtensions在 ES5 环境报错，在 ES6 环境返回传入的参数，而Reflect.preventExtensions会报错。\n\n// ES5 环境\nObject.preventExtensions(1) // 报错\n\n// ES6 环境\nObject.preventExtensions(1) // 1\n\n// 新写法\nReflect.preventExtensions(1) // 报错\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# Reflect.ownKeys (target)\n\nReflect.ownKeys方法用于返回对象的所有属性，基本等同于Object.getOwnPropertyNames与Object.getOwnPropertySymbols之和。\n\nvar myObject = {\n  foo: 1,\n  bar: 2,\n  [Symbol.for('baz')]: 3,\n  [Symbol.for('bing')]: 4,\n};\n\n// 旧写法\nObject.getOwnPropertyNames(myObject)\n// ['foo', 'bar']\n\nObject.getOwnPropertySymbols(myObject)\n//[Symbol(baz), Symbol(bing)]\n\n// 新写法\nReflect.ownKeys(myObject)\n// ['foo', 'bar', Symbol(baz), Symbol(bing)]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n如果Reflect.ownKeys()方法的第一个参数不是对象，会报错。\n\n\n# 实例：使用 Proxy 实现观察者模式\n\n观察者模式（Observer mode）指的是函数自动观察数据对象，一旦对象有变化，函数就会自动执行。\n\nconst person = observable({\n  name: '张三',\n  age: 20\n}); // 观察目标\n\nfunction print() {\n  console.log(`${person.name}, ${person.age}`)\n} // 观察者\n\nobserve(print); // 启动观察\nperson.name = '李四';\n// 输出\n// 李四, 20\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n上面代码中，数据对象person是观察目标，函数print是观察者。一旦数据对象发生变化，print就会自动执行。\n\n下面，使用 Proxy 写一个观察者模式的最简单实现，即实现observable和observe这两个函数。思路是observable函数返回一个原始对象的 Proxy 代理，拦截赋值操作，触发充当观察者的各个函数。\n\nconst queuedObservers = new Set();\n\nconst observe = fn => queuedObservers.add(fn);\nconst observable = obj => new Proxy(obj, {set});\n\nfunction set(target, key, value, receiver) {\n  const result = Reflect.set(target, key, value, receiver);\n  queuedObservers.forEach(observer => observer());\n  return result;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n上面代码中，先定义了一个Set集合，所有观察者函数都放进这个集合。然后，observable函数返回原始对象的代理，拦截赋值操作。拦截函数set之中，会自动执行所有观察者。",normalizedContent:"# reflect\n\n\n# 概述\n\nreflect对象与proxy对象一样，也是 es6 为了操作对象而提供的新 api。reflect对象的设计目的有这样几个。\n\n（1） **将object对象的一些明显属于语言内部的方法（比如object.defineproperty），放到reflect对象上。**现阶段，某些方法同时在object和reflect对象上部署，未来的新方法将只部署在reflect对象上。也就是说，从reflect对象上可以拿到语言内部的方法。 （2） 修改某些object方法的返回结果，让其变得更合理。比如，object.defineproperty(obj, name, desc)在无法定义属性时，会抛出一个错误，而reflect.defineproperty(obj, name, desc)则会返回false。\n\n// 老写法\ntry {\n  object.defineproperty(target, property, attributes);\n  // success\n} catch (e) {\n  // failure\n}\n\n// 新写法\nif (reflect.defineproperty(target, property, attributes)) {\n  // success\n} else {\n  // failure\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n（3） 让object操作都变成函数行为。某些object操作是命令式，比如name in obj和delete obj[name]，而reflect.has(obj, name)和reflect.deleteproperty(obj, name)让它们变成了函数行为。\n\n// 老写法\n'assign' in object // true\n\n// 新写法\nreflect.has(object, 'assign') // true\n\n\n1\n2\n3\n4\n5\n\n\n（4）reflect对象的方法与proxy对象的方法一一对应，只要是proxy对象的方法，就能在reflect对象上找到对应的方法。这就让proxy对象可以方便地调用对应的reflect方法，完成默认行为，作为修改行为的基础。也就是说，不管proxy怎么修改默认行为，你总可以在reflect上获取默认行为。\n\nproxy(target, {\n  set: function(target, name, value, receiver) {\n    var success = reflect.set(target, name, value, receiver);\n    if (success) {\n      console.log('property ' + name + ' on ' + target + ' set to ' + value);\n    }\n    return success;\n  }\n});\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n上面代码中，proxy方法拦截target对象的属性赋值行为。它采用reflect.set方法将值赋值给对象的属性，确保完成原有的行为，然后再部署额外的功能。\n\n下面是另一个例子。\n\nvar loggedobj = new proxy(obj, {\n  get(target, name) {\n    console.log('get', target, name);\n    return reflect.get(target, name);\n  },\n  deleteproperty(target, name) {\n    console.log('delete' + name);\n    return reflect.deleteproperty(target, name);\n  },\n  has(target, name) {\n    console.log('has' + name);\n    return reflect.has(target, name);\n  }\n});\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n上面代码中，每一个proxy对象的拦截操作（get、delete、has），内部都调用对应的reflect方法，保证原生行为能够正常执行。添加的工作，就是将每一个操作输出一行日志。\n\n有了reflect对象以后，很多操作会更易读。\n\n// 老写法\nfunction.prototype.apply.call(math.floor, undefined, [1.75]) // 1\n\n// 新写法\nreflect.apply(math.floor, undefined, [1.75]) // 1\n\n\n1\n2\n3\n4\n5\n\n\n\n# 静态方法\n\nreflect对象一共有 13 个静态方法。\n\n * reflect.apply(target, thisarg, args)\n * reflect.construct(target, args)\n * reflect.get(target, name, receiver)\n * reflect.set(target, name, value, receiver)\n * reflect.defineproperty(target, name, desc)\n * reflect.deleteproperty(target, name)\n * reflect.has(target, name)\n * reflect.ownkeys(target)\n * reflect.isextensible(target)\n * reflect.preventextensions(target)\n * reflect.getownpropertydescriptor(target, name)\n * reflect.getprototypeof(target)\n * reflect.setprototypeof(target, prototype)\n\n上面这些方法的作用，大部分与object对象的同名方法的作用都是相同的，而且它与proxy对象的方法是一一对应的。下面是对它们的解释。\n\n\n# reflect.get(target, name, receiver)\n\nreflect.get方法查找并返回target对象的name属性，如果没有该属性，则返回undefined。\n\nvar myobject = {\n  foo: 1,\n  bar: 2,\n  get baz() {\n    return this.foo + this.bar;\n  },\n}\n\nreflect.get(myobject, 'foo') // 1\nreflect.get(myobject, 'bar') // 2\nreflect.get(myobject, 'baz') // 3\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n如果name属性部署了读取函数（getter），则读取函数的this绑定receiver。\n\nvar myobject = {\n  foo: 1,\n  bar: 2,\n  get baz() {\n    return this.foo + this.bar;\n  },\n};\n\nvar myreceiverobject = {\n  foo: 4,\n  bar: 4,\n};\n\nreflect.get(myobject, 'baz', myreceiverobject) // 8\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n如果第一个参数不是对象，reflect.get方法会报错。\n\nreflect.get(1, 'foo') // 报错\nreflect.get(false, 'foo') // 报错\n\n\n1\n2\n\n\n\n# reflect.set(target, name, value, receiver)\n\nreflect.set方法设置target对象的name属性等于value。\n\nvar myobject = {\n  foo: 1,\n  set bar(value) {\n    return this.foo = value;\n  },\n}\n\nmyobject.foo // 1\n\nreflect.set(myobject, 'foo', 2);\nmyobject.foo // 2\n\nreflect.set(myobject, 'bar', 3)\nmyobject.foo // 3\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n如果name属性设置了赋值函数，则赋值函数的this绑定receiver。\n\nvar myobject = {\n  foo: 4,\n  set bar(value) {\n    return this.foo = value;\n  },\n};\n\nvar myreceiverobject = {\n  foo: 0,\n};\n\nreflect.set(myobject, 'bar', 1, myreceiverobject);\nmyobject.foo // 4\nmyreceiverobject.foo // 1\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n注意，如果 proxy对象和 reflect对象联合使用，前者拦截赋值操作，后者完成赋值的默认行为，而且传入了receiver，那么reflect.set会触发proxy.defineproperty拦截。\n\nlet p = {\n  a: 'a'\n};\n\nlet handler = {\n  set(target, key, value, receiver) {\n    console.log('set');\n    reflect.set(target, key, value, receiver)\n  },\n  defineproperty(target, key, attribute) {\n    console.log('defineproperty');\n    reflect.defineproperty(target, key, attribute);\n  }\n};\n\nlet obj = new proxy(p, handler);\nobj.a = 'a';\n// set\n// defineproperty\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\n上面代码中，proxy.set拦截里面使用了reflect.set，而且传入了receiver，导致触发proxy.defineproperty拦截。这是因为proxy.set的receiver参数总是指向当前的 proxy实例（即上例的obj），而reflect.set一旦传入receiver，就会将属性赋值到receiver上面（即obj），导致触发defineproperty拦截。如果reflect.set没有传入receiver，那么就不会触发defineproperty拦截。\n\nlet p = {\n  a: 'a'\n};\n\nlet handler = {\n  set(target, key, value, receiver) {\n    console.log('set');\n    reflect.set(target, key, value)\n  },\n  defineproperty(target, key, attribute) {\n    console.log('defineproperty');\n    reflect.defineproperty(target, key, attribute);\n  }\n};\n\nlet obj = new proxy(p, handler);\nobj.a = 'a';\n// set\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\n如果第一个参数不是对象，reflect.set会报错。\n\nreflect.set(1, 'foo', {}) // 报错\nreflect.set(false, 'foo', {}) // 报错\n\n\n1\n2\n\n\n\n# reflect.has(obj, name)\n\nreflect.has方法对应name in obj里面的in运算符。\n\nvar myobject = {\n  foo: 1,\n};\n\n// 旧写法\n'foo' in myobject // true\n\n// 新写法\nreflect.has(myobject, 'foo') // true\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n如果reflect.has()方法的第一个参数不是对象，会报错。\n\n\n# reflect.deleteproperty(obj, name)\n\nreflect.deleteproperty方法等同于delete obj[name]，用于删除对象的属性。\n\nconst myobj = { foo: 'bar' };\n\n// 旧写法\ndelete myobj.foo;\n\n// 新写法\nreflect.deleteproperty(myobj, 'foo');\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n该方法返回一个布尔值。如果删除成功，或者被删除的属性不存在，返回true；删除失败，被删除的属性依然存在，返回false。\n\n如果reflect.deleteproperty()方法的第一个参数不是对象，会报错。\n\n\n# reflect.construct(target, args)\n\nreflect.construct方法等同于new target(...args)，这提供了一种不使用new，来调用构造函数的方法。\n\nfunction greeting(name) {\n  this.name = name;\n}\n\n// new 的写法\nconst instance = new greeting('张三');\n\n// reflect.construct 的写法\nconst instance = reflect.construct(greeting, ['张三']);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n如果reflect.construct()方法的第一个参数不是函数，会报错。\n\n\n# reflect.getprototypeof(obj)\n\nreflect.getprototypeof方法用于读取对象的__proto__属性，对应object.getprototypeof(obj)。\n\nconst myobj = new fancything();\n\n// 旧写法\nobject.getprototypeof(myobj) === fancything.prototype;\n\n// 新写法\nreflect.getprototypeof(myobj) === fancything.prototype;\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\nreflect.getprototypeof和object.getprototypeof的一个区别是，如果参数不是对象，object.getprototypeof会将这个参数转为对象，然后再运行，而reflect.getprototypeof会报错。\n\nobject.getprototypeof(1) // number {[[primitivevalue]]: 0}\nreflect.getprototypeof(1) // 报错\n\n\n1\n2\n\n\n\n# reflect.setprototypeof(obj, newproto)\n\nreflect.setprototypeof方法用于设置目标对象的原型（prototype），对应object.setprototypeof(obj, newproto)方法。它返回一个布尔值，表示是否设置成功。\n\nconst myobj = {};\n\n// 旧写法\nobject.setprototypeof(myobj, array.prototype);\n\n// 新写法\nreflect.setprototypeof(myobj, array.prototype);\n\nmyobj.length // 0\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n如果无法设置目标对象的原型（比如，目标对象禁止扩展），reflect.setprototypeof方法返回false。\n\nreflect.setprototypeof({}, null)\n// true\nreflect.setprototypeof(object.freeze({}), null)\n// false\n\n\n1\n2\n3\n4\n\n\n如果第一个参数不是对象，object.setprototypeof会返回第一个参数本身，而reflect.setprototypeof会报错。\n\nobject.setprototypeof(1, {})\n// 1\n\nreflect.setprototypeof(1, {})\n// typeerror: reflect.setprototypeof called on non-object\n\n\n1\n2\n3\n4\n5\n\n\n如果第一个参数是undefined或null，object.setprototypeof和reflect.setprototypeof都会报错。\n\nobject.setprototypeof(null, {})\n// typeerror: object.setprototypeof called on null or undefined\n\nreflect.setprototypeof(null, {})\n// typeerror: reflect.setprototypeof called on non-object\n\n\n1\n2\n3\n4\n5\n\n\n\n# reflect.apply(func, thisarg, args)\n\nreflect.apply方法等同于function.prototype.apply.call(func, thisarg, args)，用于绑定this对象后执行给定函数。\n\n一般来说，如果要绑定一个函数的this对象，可以这样写fn.apply(obj, args)，但是如果函数定义了自己的apply方法，就只能写成function.prototype.apply.call(fn, obj, args)，采用reflect对象可以简化这种操作。\n\nconst ages = [11, 33, 12, 54, 18, 96];\n\n// 旧写法\nconst youngest = math.min.apply(math, ages);\nconst oldest = math.max.apply(math, ages);\nconst type = object.prototype.tostring.call(youngest);\n\n// 新写法\nconst youngest = reflect.apply(math.min, math, ages);\nconst oldest = reflect.apply(math.max, math, ages);\nconst type = reflect.apply(object.prototype.tostring, youngest, []);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n\n# reflect.defineproperty(target, propertykey, attributes)\n\nreflect.defineproperty方法基本等同于object.defineproperty，用来为对象定义属性。未来，后者会被逐渐废除，请从现在开始就使用reflect.defineproperty代替它。\n\nfunction mydate() {\n  /*…*/\n}\n\n// 旧写法\nobject.defineproperty(mydate, 'now', {\n  value: () => date.now()\n});\n\n// 新写法\nreflect.defineproperty(mydate, 'now', {\n  value: () => date.now()\n});\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n如果reflect.defineproperty的第一个参数不是对象，就会抛出错误，比如reflect.defineproperty(1, 'foo')。\n\n这个方法可以与proxy.defineproperty配合使用。\n\nconst p = new proxy({}, {\n  defineproperty(target, prop, descriptor) {\n    console.log(descriptor);\n    return reflect.defineproperty(target, prop, descriptor);\n  }\n});\n\np.foo = 'bar';\n// {value: \"bar\", writable: true, enumerable: true, configurable: true}\n\np.foo // \"bar\"\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n上面代码中，proxy.defineproperty对属性赋值设置了拦截，然后使用reflect.defineproperty完成了赋值。\n\n\n# reflect.getownpropertydescriptor(target, propertykey)\n\nreflect.getownpropertydescriptor基本等同于object.getownpropertydescriptor，用于得到指定属性的描述对象，将来会替代掉后者。\n\nvar myobject = {};\nobject.defineproperty(myobject, 'hidden', {\n  value: true,\n  enumerable: false,\n});\n\n// 旧写法\nvar thedescriptor = object.getownpropertydescriptor(myobject, 'hidden');\n\n// 新写法\nvar thedescriptor = reflect.getownpropertydescriptor(myobject, 'hidden');\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\nreflect.getownpropertydescriptor和object.getownpropertydescriptor的一个区别是，如果第一个参数不是对象，object.getownpropertydescriptor(1, 'foo')不报错，返回undefined，而reflect.getownpropertydescriptor(1, 'foo')会抛出错误，表示参数非法。\n\n\n# reflect.isextensible (target)\n\nreflect.isextensible方法对应object.isextensible，返回一个布尔值，表示当前对象是否可扩展。\n\nconst myobject = {};\n\n// 旧写法\nobject.isextensible(myobject) // true\n\n// 新写法\nreflect.isextensible(myobject) // true\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n如果参数不是对象，object.isextensible会返回false，因为非对象本来就是不可扩展的，而reflect.isextensible会报错。\n\nobject.isextensible(1) // false\nreflect.isextensible(1) // 报错\n\n\n1\n2\n\n\n\n# reflect.preventextensions(target)\n\nreflect.preventextensions对应object.preventextensions方法，用于让一个对象变为不可扩展。它返回一个布尔值，表示是否操作成功。\n\nvar myobject = {};\n\n// 旧写法\nobject.preventextensions(myobject) // object {}\n\n// 新写法\nreflect.preventextensions(myobject) // true\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n如果参数不是对象，object.preventextensions在 es5 环境报错，在 es6 环境返回传入的参数，而reflect.preventextensions会报错。\n\n// es5 环境\nobject.preventextensions(1) // 报错\n\n// es6 环境\nobject.preventextensions(1) // 1\n\n// 新写法\nreflect.preventextensions(1) // 报错\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# reflect.ownkeys (target)\n\nreflect.ownkeys方法用于返回对象的所有属性，基本等同于object.getownpropertynames与object.getownpropertysymbols之和。\n\nvar myobject = {\n  foo: 1,\n  bar: 2,\n  [symbol.for('baz')]: 3,\n  [symbol.for('bing')]: 4,\n};\n\n// 旧写法\nobject.getownpropertynames(myobject)\n// ['foo', 'bar']\n\nobject.getownpropertysymbols(myobject)\n//[symbol(baz), symbol(bing)]\n\n// 新写法\nreflect.ownkeys(myobject)\n// ['foo', 'bar', symbol(baz), symbol(bing)]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n如果reflect.ownkeys()方法的第一个参数不是对象，会报错。\n\n\n# 实例：使用 proxy 实现观察者模式\n\n观察者模式（observer mode）指的是函数自动观察数据对象，一旦对象有变化，函数就会自动执行。\n\nconst person = observable({\n  name: '张三',\n  age: 20\n}); // 观察目标\n\nfunction print() {\n  console.log(`${person.name}, ${person.age}`)\n} // 观察者\n\nobserve(print); // 启动观察\nperson.name = '李四';\n// 输出\n// 李四, 20\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n上面代码中，数据对象person是观察目标，函数print是观察者。一旦数据对象发生变化，print就会自动执行。\n\n下面，使用 proxy 写一个观察者模式的最简单实现，即实现observable和observe这两个函数。思路是observable函数返回一个原始对象的 proxy 代理，拦截赋值操作，触发充当观察者的各个函数。\n\nconst queuedobservers = new set();\n\nconst observe = fn => queuedobservers.add(fn);\nconst observable = obj => new proxy(obj, {set});\n\nfunction set(target, key, value, receiver) {\n  const result = reflect.set(target, key, value, receiver);\n  queuedobservers.foreach(observer => observer());\n  return result;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n上面代码中，先定义了一个set集合，所有观察者函数都放进这个集合。然后，observable函数返回原始对象的代理，拦截赋值操作。拦截函数set之中，会自动执行所有观察者。",charsets:{cjk:!0}},{title:"Proxy",frontmatter:{title:"Proxy",date:"2020-02-09T16:00:29.000Z",permalink:"/pages/f56ec2ab97d60483",author:"阮一峰",categories:["《ES6 教程》笔记"],tags:["ES6"],readingShow:"top"},regularPath:"/06.%E4%B9%A6%E7%B1%8D/05.%E3%80%8AES6%20%E6%95%99%E7%A8%8B%E3%80%8B%E7%AC%94%E8%AE%B0/14.Proxy.html",relativePath:"06.书籍/05.《ES6 教程》笔记/14.Proxy.md",key:"v-0ba19453",path:"/pages/f56ec2ab97d60483/",headers:[{level:2,title:"概述",slug:"概述",normalizedTitle:"概述",charIndex:12},{level:2,title:"Proxy 实例的方法",slug:"proxy-实例的方法",normalizedTitle:"proxy 实例的方法",charIndex:3952},{level:3,title:"get()",slug:"get",normalizedTitle:"get()",charIndex:3987},{level:3,title:"set()",slug:"set",normalizedTitle:"set()",charIndex:7820},{level:3,title:"apply()",slug:"apply",normalizedTitle:"apply()",charIndex:10813},{level:3,title:"has()",slug:"has",normalizedTitle:"has()",charIndex:11742},{level:3,title:"construct()",slug:"construct",normalizedTitle:"construct()",charIndex:13347},{level:3,title:"deleteProperty()",slug:"deleteproperty",normalizedTitle:"deleteproperty()",charIndex:14078},{level:3,title:"defineProperty()",slug:"defineproperty",normalizedTitle:"defineproperty()",charIndex:14754},{level:3,title:"getOwnPropertyDescriptor()",slug:"getownpropertydescriptor",normalizedTitle:"getownpropertydescriptor()",charIndex:15196},{level:3,title:"getPrototypeOf()",slug:"getprototypeof",normalizedTitle:"getprototypeof()",charIndex:15916},{level:3,title:"isExtensible()",slug:"isextensible",normalizedTitle:"isextensible()",charIndex:16445},{level:3,title:"ownKeys()",slug:"ownkeys",normalizedTitle:"ownkeys()",charIndex:17155},{level:3,title:"preventExtensions()",slug:"preventextensions",normalizedTitle:"preventextensions()",charIndex:20334},{level:3,title:"setPrototypeOf()",slug:"setprototypeof",normalizedTitle:"setprototypeof()",charIndex:21184},{level:2,title:"Proxy.revocable()",slug:"proxy-revocable",normalizedTitle:"proxy.revocable()",charIndex:21689},{level:2,title:"this 问题",slug:"this-问题",normalizedTitle:"this 问题",charIndex:22124},{level:2,title:"实例：Web 服务的客户端",slug:"实例-web-服务的客户端",normalizedTitle:"实例：web 服务的客户端",charIndex:23563}],excerpt:'<h1 id="proxy"><a class="header-anchor" href="#proxy">#</a> Proxy</h1>\n<h2 id="概述"><a class="header-anchor" href="#概述">#</a> 概述</h2>\n<p>Proxy 用于修改某些操作的默认行为，等同于在语言层面做出修改，所以属于一种“<strong>元编程</strong>”（meta programming），即<strong>对编程语言进行编程</strong>。</p>\n<p>Proxy 可以理解成，在目标对象之前架设一层“拦截”，<strong>外界对该对象的访问，都必须先通过这层拦截</strong>，因此提供了一种机制，可以对外界的访问进行过滤和改写。Proxy 这个词的原意是代理，用在这里表示由它来“代理”某些操作，可以译为“代理器”。</p>\n',lastUpdated:"2022/9/22 下午4:28:09",lastUpdatedTimestamp:1663835289e3,headersStr:"概述 Proxy 实例的方法 get() set() apply() has() construct() deleteProperty() defineProperty() getOwnPropertyDescriptor() getPrototypeOf() isExtensible() ownKeys() preventExtensions() setPrototypeOf() Proxy.revocable() this 问题 实例：Web 服务的客户端",content:"# Proxy\n\n\n# 概述\n\nProxy 用于修改某些操作的默认行为，等同于在语言层面做出修改，所以属于一种“元编程”（meta programming），即对编程语言进行编程。\n\nProxy 可以理解成，在目标对象之前架设一层“拦截”，外界对该对象的访问，都必须先通过这层拦截，因此提供了一种机制，可以对外界的访问进行过滤和改写。Proxy 这个词的原意是代理，用在这里表示由它来“代理”某些操作，可以译为“代理器”。\n\nvar obj = new Proxy({}, {\n  get: function (target, propKey, receiver) {\n    console.log(`getting ${propKey}!`);\n    return Reflect.get(target, propKey, receiver);\n  },\n  set: function (target, propKey, value, receiver) {\n    console.log(`setting ${propKey}!`);\n    return Reflect.set(target, propKey, value, receiver);\n  }\n});\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n上面代码对一个空对象架设了一层拦截，重定义了属性的读取（get）和设置（set）行为。这里暂时先不解释具体的语法，只看运行结果。对设置了拦截行为的对象obj，去读写它的属性，就会得到下面的结果。\n\nobj.count = 1\n//  setting count!\n++obj.count\n//  getting count!\n//  setting count!\n//  2\n\n\n1\n2\n3\n4\n5\n6\n\n\n上面代码说明，Proxy 实际上重载（overload）了点运算符，即用自己的定义覆盖了语言的原始定义。\n\nES6 原生提供 Proxy 构造函数，用来生成 Proxy 实例。\n\nvar proxy = new Proxy(target, handler);\n\n\n1\n\n\nProxy 对象的所有用法，都是上面这种形式，不同的只是handler参数的写法。其中，new Proxy()表示生成一个Proxy实例，target参数表示所要拦截的目标对象，handler参数也是一个对象，用来定制拦截行为。\n\n下面是另一个拦截读取属性行为的例子。\n\nvar proxy = new Proxy({}, {\n  get: function(target, propKey) {\n    return 35;\n  }\n});\n\nproxy.time // 35\nproxy.name // 35\nproxy.title // 35\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n上面代码中，作为构造函数，Proxy接受两个参数。第一个参数是所要代理的目标对象（上例是一个空对象），即如果没有Proxy的介入，操作原来要访问的就是这个对象；第二个参数是一个配置对象，对于每一个被代理的操作，需要提供一个对应的处理函数，该函数将拦截对应的操作。比如，上面代码中，配置对象有一个get方法，用来拦截对目标对象属性的访问请求。get方法的两个参数分别是目标对象和所要访问的属性。可以看到，由于拦截函数总是返回35，所以访问任何属性都得到35。\n\n注意，要使得Proxy起作用，必须针对Proxy实例（上例是proxy对象）进行操作，而不是针对目标对象（上例是空对象）进行操作。\n\n如果handler没有设置任何拦截，那就等同于直接通向原对象。\n\nvar target = {};\nvar handler = {};\nvar proxy = new Proxy(target, handler);\nproxy.a = 'b';\ntarget.a // \"b\"\n\n\n1\n2\n3\n4\n5\n\n\n上面代码中，handler是一个空对象，没有任何拦截效果，访问proxy就等同于访问target。\n\n一个技巧是将 Proxy 对象，设置到object.proxy属性，从而可以在object对象上调用。\n\nvar object = { proxy: new Proxy(target, handler) };\n\n\n1\n\n\nProxy 实例也可以作为其他对象的原型对象。\n\nvar proxy = new Proxy({}, {\n  get: function(target, propKey) {\n    return 35;\n  }\n});\n\nlet obj = Object.create(proxy);\nobj.time // 35\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n上面代码中，proxy对象是obj对象的原型，obj对象本身并没有time属性，所以根据原型链，会在proxy对象上读取该属性，导致被拦截。\n\n同一个拦截器函数，可以设置拦截多个操作。\n\nvar handler = {\n  get: function(target, name) {\n    if (name === 'prototype') {\n      return Object.prototype;\n    }\n    return 'Hello, ' + name;\n  },\n\n  apply: function(target, thisBinding, args) {\n    return args[0];\n  },\n\n  construct: function(target, args) {\n    return {value: args[1]};\n  }\n};\n\nvar fproxy = new Proxy(function(x, y) {\n  return x + y;\n}, handler);\n\nfproxy(1, 2) // 1\nnew fproxy(1, 2) // {value: 2}\nfproxy.prototype === Object.prototype // true\nfproxy.foo === \"Hello, foo\" // true\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n\n\n对于可以设置、但没有设置拦截的操作，则直接落在目标对象上，按照原先的方式产生结果。\n\n下面是 Proxy 支持的拦截操作一览，一共 13 种。\n\n * get(target, propKey, receiver)：拦截对象属性的读取，比如proxy.foo和proxy['foo']。\n * set(target, propKey, value, receiver)：拦截对象属性的设置，比如proxy.foo = v或proxy['foo'] = v，返回一个布尔值。\n * has(target, propKey)：拦截propKey in proxy的操作，返回一个布尔值。\n * deleteProperty(target, propKey)：拦截delete proxy[propKey]的操作，返回一个布尔值。\n * ownKeys(target)：拦截Object.getOwnPropertyNames(proxy)、Object.getOwnPropertySymbols(proxy)、Object.keys(proxy)、for...in循环，返回一个数组。该方法返回目标对象所有自身的属性的属性名，而Object.keys()的返回结果仅包括目标对象自身的可遍历属性。\n * getOwnPropertyDescriptor(target, propKey)：拦截Object.getOwnPropertyDescriptor(proxy, propKey)，返回属性的描述对象。\n * defineProperty(target, propKey, propDesc)：拦截Object.defineProperty(proxy, propKey, propDesc）、Object.defineProperties(proxy, propDescs)，返回一个布尔值。\n * preventExtensions(target)：拦截Object.preventExtensions(proxy)，返回一个布尔值。\n * getPrototypeOf(target)：拦截Object.getPrototypeOf(proxy)，返回一个对象。\n * isExtensible(target)：拦截Object.isExtensible(proxy)，返回一个布尔值。\n * setPrototypeOf(target, proto)：拦截Object.setPrototypeOf(proxy, proto)，返回一个布尔值。如果目标对象是函数，那么还有两种额外操作可以拦截。\n * apply(target, object, args)：拦截 Proxy 实例作为函数调用的操作，比如proxy(...args)、proxy.call(object, ...args)、proxy.apply(...)。\n * construct(target, args)：拦截 Proxy 实例作为构造函数调用的操作，比如new proxy(...args)。\n\n\n# Proxy 实例的方法\n\n下面是上面这些拦截方法的详细介绍。\n\n\n# get()\n\nget方法用于拦截某个属性的读取操作，可以接受三个参数，依次为目标对象、属性名和 proxy 实例本身（严格地说，是操作行为所针对的对象），其中最后一个参数可选。\n\nget方法的用法，上文已经有一个例子，下面是另一个拦截读取操作的例子。\n\nvar person = {\n  name: \"张三\"\n};\n\nvar proxy = new Proxy(person, {\n  get: function(target, propKey) {\n    if (propKey in target) {\n      return target[propKey];\n    } else {\n      throw new ReferenceError(\"Prop name \\\"\" + propKey + \"\\\" does not exist.\");\n    }\n  }\n});\n\nproxy.name // \"张三\"\nproxy.age // 抛出一个错误\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n上面代码表示，如果访问目标对象不存在的属性，会抛出一个错误。如果没有这个拦截函数，访问不存在的属性，只会返回undefined。\n\nget方法可以继承。\n\nlet proto = new Proxy({}, {\n  get(target, propertyKey, receiver) {\n    console.log('GET ' + propertyKey);\n    return target[propertyKey];\n  }\n});\n\nlet obj = Object.create(proto);\nobj.foo // \"GET foo\"\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n上面代码中，拦截操作定义在Prototype对象上面，所以如果读取obj对象继承的属性时，拦截会生效。\n\n下面的例子使用get拦截，实现数组读取负数的索引。\n\nfunction createArray(...elements) {\n  let handler = {\n    get(target, propKey, receiver) {\n      let index = Number(propKey);\n      if (index < 0) {\n        propKey = String(target.length + index);\n      }\n      return Reflect.get(target, propKey, receiver);\n    }\n  };\n\n  let target = [];\n  target.push(...elements);\n  return new Proxy(target, handler);\n}\n\nlet arr = createArray('a', 'b', 'c');\narr[-1] // c\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\n上面代码中，数组的位置参数是-1，就会输出数组的倒数第一个成员。\n\n利用 Proxy，可以将读取属性的操作（get），转变为执行某个函数，从而实现属性的链式操作。\n\nvar pipe = (function () {\n  return function (value) {\n    var funcStack = [];\n    var oproxy = new Proxy({} , {\n      get : function (pipeObject, fnName) {\n        if (fnName === 'get') {\n          return funcStack.reduce(function (val, fn) {\n            return fn(val);\n          },value);\n        }\n        funcStack.push(window[fnName]);\n        return oproxy;\n      }\n    });\n\n    return oproxy;\n  }\n}());\n\nvar double = n => n * 2;\nvar pow    = n => n * n;\nvar reverseInt = n => n.toString().split(\"\").reverse().join(\"\") | 0;\n\npipe(3).double.pow.reverseInt.get; // 63\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n\n\n上面代码设置 Proxy 以后，达到了将函数名链式使用的效果。\n\n下面的例子则是利用get拦截，实现一个生成各种 DOM 节点的通用函数dom。\n\nconst dom = new Proxy({}, {\n  get(target, property) {\n    return function(attrs = {}, ...children) {\n      const el = document.createElement(property);\n      for (let prop of Object.keys(attrs)) {\n        el.setAttribute(prop, attrs[prop]);\n      }\n      for (let child of children) {\n        if (typeof child === 'string') {\n          child = document.createTextNode(child);\n        }\n        el.appendChild(child);\n      }\n      return el;\n    }\n  }\n});\n\nconst el = dom.div({},\n  'Hello, my name is ',\n  dom.a({href: '//example.com'}, 'Mark'),\n  '. I like:',\n  dom.ul({},\n    dom.li({}, 'The web'),\n    dom.li({}, 'Food'),\n    dom.li({}, '…actually that\\'s it')\n  )\n);\n\ndocument.body.appendChild(el);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n\n\n下面是一个get方法的第三个参数的例子，它总是指向原始的读操作所在的那个对象，一般情况下就是 Proxy 实例。\n\nconst proxy = new Proxy({}, {\n  get: function(target, key, receiver) {\n    return receiver;\n  }\n});\nproxy.getReceiver === proxy // true\n\n\n1\n2\n3\n4\n5\n6\n\n\n上面代码中，proxy对象的getReceiver属性是由proxy对象提供的，所以receiver指向proxy对象。\n\nconst proxy = new Proxy({}, {\n  get: function(target, key, receiver) {\n    return receiver;\n  }\n});\n\nconst d = Object.create(proxy);\nd.a === d // true\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n上面代码中，d对象本身没有a属性，所以读取d.a的时候，会去d的原型proxy对象找。这时，receiver就指向d，代表原始的读操作所在的那个对象。\n\n如果一个属性不可配置（configurable）且不可写（writable），则 Proxy 不能修改该属性，否则通过 Proxy 对象访问该属性会报错。\n\nconst target = Object.defineProperties({}, {\n  foo: {\n    value: 123,\n    writable: false,\n    configurable: false\n  },\n});\n\nconst handler = {\n  get(target, propKey) {\n    return 'abc';\n  }\n};\n\nconst proxy = new Proxy(target, handler);\n\nproxy.foo\n// TypeError: Invariant check failed\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\n\n# set()\n\nset方法用来拦截某个属性的赋值操作，可以接受四个参数，依次为目标对象、属性名、属性值和 Proxy 实例本身，其中最后一个参数可选。\n\n假定Person对象有一个age属性，该属性应该是一个不大于 200 的整数，那么可以使用Proxy保证age的属性值符合要求。\n\nlet validator = {\n  set: function(obj, prop, value) {\n    if (prop === 'age') {\n      if (!Number.isInteger(value)) {\n        throw new TypeError('The age is not an integer');\n      }\n      if (value > 200) {\n        throw new RangeError('The age seems invalid');\n      }\n    }\n\n    // 对于满足条件的 age 属性以及其他属性，直接保存\n    obj[prop] = value;\n  }\n};\n\nlet person = new Proxy({}, validator);\n\nperson.age = 100;\n\nperson.age // 100\nperson.age = 'young' // 报错\nperson.age = 300 // 报错\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n\n\n上面代码中，由于设置了存值函数set，任何不符合要求的age属性赋值，都会抛出一个错误，这是数据验证的一种实现方法。利用set方法，还可以数据绑定，即每当对象发生变化时，会自动更新 DOM。\n\n有时，我们会在对象上面设置内部属性，属性名的第一个字符使用下划线开头，表示这些属性不应该被外部使用。结合get和set方法，就可以做到防止这些内部属性被外部读写。\n\nconst handler = {\n  get (target, key) {\n    invariant(key, 'get');\n    return target[key];\n  },\n  set (target, key, value) {\n    invariant(key, 'set');\n    target[key] = value;\n    return true;\n  }\n};\nfunction invariant (key, action) {\n  if (key[0] === '_') {\n    throw new Error(`Invalid attempt to ${action} private \"${key}\" property`);\n  }\n}\nconst target = {};\nconst proxy = new Proxy(target, handler);\nproxy._prop\n// Error: Invalid attempt to get private \"_prop\" property\nproxy._prop = 'c'\n// Error: Invalid attempt to set private \"_prop\" property\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n\n\n上面代码中，只要读写的属性名的第一个字符是下划线，一律抛错，从而达到禁止读写内部属性的目的。\n\n下面是set方法第四个参数的例子。\n\nconst handler = {\n  set: function(obj, prop, value, receiver) {\n    obj[prop] = receiver;\n  }\n};\nconst proxy = new Proxy({}, handler);\nproxy.foo = 'bar';\nproxy.foo === proxy // true\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n上面代码中，set方法的第四个参数receiver，指的是原始的操作行为所在的那个对象，一般情况下是proxy实例本身，请看下面的例子。\n\nconst handler = {\n  set: function(obj, prop, value, receiver) {\n    obj[prop] = receiver;\n  }\n};\nconst proxy = new Proxy({}, handler);\nconst myObj = {};\nObject.setPrototypeOf(myObj, proxy);\n\nmyObj.foo = 'bar';\nmyObj.foo === myObj // true\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n上面代码中，设置myObj.foo属性的值时，myObj并没有foo属性，因此引擎会到myObj的原型链去找foo属性。myObj的原型对象proxy是一个 Proxy 实例，设置它的foo属性会触发set方法。这时，第四个参数receiver就指向原始赋值行为所在的对象myObj。\n\n注意，如果目标对象自身的某个属性，不可写且不可配置，那么set方法将不起作用。\n\nconst obj = {};\nObject.defineProperty(obj, 'foo', {\n  value: 'bar',\n  writable: false,\n});\n\nconst handler = {\n  set: function(obj, prop, value, receiver) {\n    obj[prop] = 'baz';\n  }\n};\n\nconst proxy = new Proxy(obj, handler);\nproxy.foo = 'baz';\nproxy.foo // \"bar\"\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n上面代码中，obj.foo属性不可写，Proxy 对这个属性的set代理将不会生效。\n\n注意，严格模式下，set代理如果没有返回true，就会报错。\n\n'use strict';\nconst handler = {\n  set: function(obj, prop, value, receiver) {\n    obj[prop] = receiver;\n    // 无论有没有下面这一行，都会报错\n    return false;\n  }\n};\nconst proxy = new Proxy({}, handler);\nproxy.foo = 'bar';\n// TypeError: 'set' on proxy: trap returned falsish for property 'foo'\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n上面代码中，严格模式下，set代理返回false或者undefined，都会报错。\n\n\n# apply()\n\napply方法拦截函数的调用、call和apply操作。\n\napply方法可以接受三个参数，分别是目标对象、目标对象的上下文对象（this）和目标对象的参数数组。\n\nvar handler = {\n  apply (target, ctx, args) {\n    return Reflect.apply(...arguments);\n  }\n};\n\n\n1\n2\n3\n4\n5\n\n\n下面是一个例子。\n\nvar target = function () { return 'I am the target'; };\nvar handler = {\n  apply: function () {\n    return 'I am the proxy';\n  }\n};\n\nvar p = new Proxy(target, handler);\n\np()\n// \"I am the proxy\"\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n上面代码中，变量p是 Proxy 的实例，当它作为函数调用时（p()），就会被apply方法拦截，返回一个字符串。\n\n下面是另外一个例子。\n\nvar twice = {\n  apply (target, ctx, args) {\n    return Reflect.apply(...arguments) * 2;\n  }\n};\nfunction sum (left, right) {\n  return left + right;\n};\nvar proxy = new Proxy(sum, twice);\nproxy(1, 2) // 6\nproxy.call(null, 5, 6) // 22\nproxy.apply(null, [7, 8]) // 30\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n上面代码中，每当执行proxy函数（直接调用或call和apply调用），就会被apply方法拦截。\n\n另外，直接调用Reflect.apply方法，也会被拦截。\n\nReflect.apply(proxy, null, [9, 10]) // 38\n\n\n1\n\n\n\n# has()\n\nhas方法用来拦截HasProperty操作，即判断对象是否具有某个属性时，这个方法会生效。典型的操作就是in运算符。\n\nhas方法可以接受两个参数，分别是目标对象、需查询的属性名。\n\n下面的例子使用has方法隐藏某些属性，不被in运算符发现。\n\nvar handler = {\n  has (target, key) {\n    if (key[0] === '_') {\n      return false;\n    }\n    return key in target;\n  }\n};\nvar target = { _prop: 'foo', prop: 'foo' };\nvar proxy = new Proxy(target, handler);\n'_prop' in proxy // false\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n上面代码中，如果原对象的属性名的第一个字符是下划线，proxy.has就会返回false，从而不会被in运算符发现。\n\n如果原对象不可配置或者禁止扩展，这时has拦截会报错。\n\nvar obj = { a: 10 };\nObject.preventExtensions(obj);\n\nvar p = new Proxy(obj, {\n  has: function(target, prop) {\n    return false;\n  }\n});\n\n'a' in p // TypeError is thrown\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n上面代码中，obj对象禁止扩展，结果使用has拦截就会报错。也就是说，如果某个属性不可配置（或者目标对象不可扩展），则has方法就不得“隐藏”（即返回false）目标对象的该属性。\n\n值得注意的是，has方法拦截的是HasProperty操作，而不是HasOwnProperty操作，即has方法不判断一个属性是对象自身的属性，还是继承的属性。\n\n另外，虽然for...in循环也用到了in运算符，但是has拦截对for...in循环不生效。\n\nlet stu1 = {name: '张三', score: 59};\nlet stu2 = {name: '李四', score: 99};\n\nlet handler = {\n  has(target, prop) {\n    if (prop === 'score' && target[prop] < 60) {\n      console.log(`${target.name} 不及格`);\n      return false;\n    }\n    return prop in target;\n  }\n}\n\nlet oproxy1 = new Proxy(stu1, handler);\nlet oproxy2 = new Proxy(stu2, handler);\n\n'score' in oproxy1\n// 张三 不及格\n// false\n\n'score' in oproxy2\n// true\n\nfor (let a in oproxy1) {\n  console.log(oproxy1[a]);\n}\n// 张三\n// 59\n\nfor (let b in oproxy2) {\n  console.log(oproxy2[b]);\n}\n// 李四\n// 99\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n\n\n上面代码中，has拦截只对in运算符生效，对for...in循环不生效，导致不符合要求的属性没有被for...in循环所排除。\n\n\n# construct()\n\nconstruct方法用于拦截new命令，下面是拦截对象的写法。\n\nvar handler = {\n  construct (target, args, newTarget) {\n    return new target(...args);\n  }\n};\n\n\n1\n2\n3\n4\n5\n\n\nconstruct方法可以接受两个参数。\n\n * target：目标对象\n * args：构造函数的参数对象\n * newTarget：创造实例对象时，new命令作用的构造函数（下面例子的p）\n\nvar p = new Proxy(function () {}, {\n  construct: function(target, args) {\n    console.log('called: ' + args.join(', '));\n    return { value: args[0] * 10 };\n  }\n});\n\n(new p(1)).value\n// \"called: 1\"\n// 10\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\nconstruct方法返回的必须是一个对象，否则会报错。\n\nvar p = new Proxy(function() {}, {\n  construct: function(target, argumentsList) {\n    return 1;\n  }\n});\n\nnew p() // 报错\n// Uncaught TypeError: 'construct' on proxy: trap returned non-object ('1')\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# deleteProperty()\n\ndeleteProperty方法用于拦截delete操作，如果这个方法抛出错误或者返回false，当前属性就无法被delete命令删除。\n\nvar handler = {\n  deleteProperty (target, key) {\n    invariant(key, 'delete');\n    delete target[key];\n    return true;\n  }\n};\nfunction invariant (key, action) {\n  if (key[0] === '_') {\n    throw new Error(`Invalid attempt to ${action} private \"${key}\" property`);\n  }\n}\n\nvar target = { _prop: 'foo' };\nvar proxy = new Proxy(target, handler);\ndelete proxy._prop\n// Error: Invalid attempt to delete private \"_prop\" property\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n上面代码中，deleteProperty方法拦截了delete操作符，删除第一个字符为下划线的属性会报错。\n\n注意，目标对象自身的不可配置（configurable）的属性，不能被deleteProperty方法删除，否则报错。\n\n\n# defineProperty()\n\ndefineProperty方法拦截了Object.defineProperty操作。\n\nvar handler = {\n  defineProperty (target, key, descriptor) {\n    return false;\n  }\n};\nvar target = {};\nvar proxy = new Proxy(target, handler);\nproxy.foo = 'bar' // 不会生效\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n上面代码中，defineProperty方法返回false，导致添加新属性总是无效。\n\n注意，如果目标对象不可扩展（non-extensible），则defineProperty不能增加目标对象上不存在的属性，否则会报错。另外，如果目标对象的某个属性不可写（writable）或不可配置（configurable），则defineProperty方法不得改变这两个设置。\n\n\n# getOwnPropertyDescriptor()\n\ngetOwnPropertyDescriptor方法拦截Object.getOwnPropertyDescriptor()，返回一个属性描述对象或者undefined。\n\nvar handler = {\n  getOwnPropertyDescriptor (target, key) {\n    if (key[0] === '_') {\n      return;\n    }\n    return Object.getOwnPropertyDescriptor(target, key);\n  }\n};\nvar target = { _foo: 'bar', baz: 'tar' };\nvar proxy = new Proxy(target, handler);\nObject.getOwnPropertyDescriptor(proxy, 'wat')\n// undefined\nObject.getOwnPropertyDescriptor(proxy, '_foo')\n// undefined\nObject.getOwnPropertyDescriptor(proxy, 'baz')\n// { value: 'tar', writable: true, enumerable: true, configurable: true }\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n上面代码中，handler.getOwnPropertyDescriptor方法对于第一个字符为下划线的属性名会返回undefined。\n\n\n# getPrototypeOf()\n\ngetPrototypeOf方法主要用来拦截获取对象原型。具体来说，拦截下面这些操作。\n\n * Object.prototype.__proto__\n * Object.prototype.isPrototypeOf()\n * Object.getPrototypeOf()\n * Reflect.getPrototypeOf()\n * instanceof\n\n下面是一个例子。\n\nvar proto = {};\nvar p = new Proxy({}, {\n  getPrototypeOf(target) {\n    return proto;\n  }\n});\nObject.getPrototypeOf(p) === proto // true\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n上面代码中，getPrototypeOf方法拦截Object.getPrototypeOf()，返回proto对象。\n\n注意，getPrototypeOf方法的返回值必须是对象或者null，否则报错。另外，如果目标对象不可扩展（non-extensible）， getPrototypeOf方法必须返回目标对象的原型对象。\n\n\n# isExtensible()\n\nisExtensible方法拦截Object.isExtensible操作。\n\nvar p = new Proxy({}, {\n  isExtensible: function(target) {\n    console.log(\"called\");\n    return true;\n  }\n});\n\nObject.isExtensible(p)\n// \"called\"\n// true\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n上面代码设置了isExtensible方法，在调用Object.isExtensible时会输出called。\n\n注意，该方法只能返回布尔值，否则返回值会被自动转为布尔值。\n\n这个方法有一个强限制，它的返回值必须与目标对象的isExtensible属性保持一致，否则就会抛出错误。\n\nObject.isExtensible(proxy) === Object.isExtensible(target)\n\n\n1\n\n\n下面是一个例子。\n\nvar p = new Proxy({}, {\n  isExtensible: function(target) {\n    return false;\n  }\n});\n\nObject.isExtensible(p)\n// Uncaught TypeError: 'isExtensible' on proxy: trap result does not reflect extensibility of proxy target (which is 'true')\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# ownKeys()\n\nownKeys方法用来拦截对象自身属性的读取操作。具体来说，拦截以下操作。\n\n * Object.getOwnPropertyNames()\n * Object.getOwnPropertySymbols()\n * Object.keys()\n * for...in循环\n\n下面是拦截Object.keys()的例子。\n\nlet target = {\n  a: 1,\n  b: 2,\n  c: 3\n};\n\nlet handler = {\n  ownKeys(target) {\n    return ['a'];\n  }\n};\n\nlet proxy = new Proxy(target, handler);\n\nObject.keys(proxy)\n// [ 'a' ]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n上面代码拦截了对于target对象的Object.keys()操作，只返回a、b、c三个属性之中的a属性。\n\n下面的例子是拦截第一个字符为下划线的属性名。\n\nlet target = {\n  _bar: 'foo',\n  _prop: 'bar',\n  prop: 'baz'\n};\n\nlet handler = {\n  ownKeys (target) {\n    return Reflect.ownKeys(target).filter(key => key[0] !== '_');\n  }\n};\n\nlet proxy = new Proxy(target, handler);\nfor (let key of Object.keys(proxy)) {\n  console.log(target[key]);\n}\n// \"baz\"\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n注意，使用Object.keys方法时，有三类属性会被ownKeys方法自动过滤，不会返回。\n\n * 目标对象上不存在的属性\n * 属性名为 Symbol 值\n * 不可遍历（enumerable）的属性\n\nlet target = {\n  a: 1,\n  b: 2,\n  c: 3,\n  [Symbol.for('secret')]: '4',\n};\n\nObject.defineProperty(target, 'key', {\n  enumerable: false,\n  configurable: true,\n  writable: true,\n  value: 'static'\n});\n\nlet handler = {\n  ownKeys(target) {\n    return ['a', 'd', Symbol.for('secret'), 'key'];\n  }\n};\n\nlet proxy = new Proxy(target, handler);\n\nObject.keys(proxy)\n// ['a']\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n\n\n上面代码中，ownKeys方法之中，显式返回不存在的属性（d）、Symbol 值（Symbol.for('secret')）、不可遍历的属性（key），结果都被自动过滤掉。\n\nownKeys方法还可以拦截Object.getOwnPropertyNames()。\n\nvar p = new Proxy({}, {\n  ownKeys: function(target) {\n    return ['a', 'b', 'c'];\n  }\n});\n\nObject.getOwnPropertyNames(p)\n// [ 'a', 'b', 'c' ]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\nfor...in循环也受到ownKeys方法的拦截。\n\nconst obj = { hello: 'world' };\nconst proxy = new Proxy(obj, {\n  ownKeys: function () {\n    return ['a', 'b'];\n  }\n});\n\nfor (let key in proxy) {\n  console.log(key); // 没有任何输出\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n上面代码中，ownkeys指定只返回a和b属性，由于obj没有这两个属性，因此for...in循环不会有任何输出。\n\nownKeys方法返回的数组成员，只能是字符串或 Symbol 值。如果有其他类型的值，或者返回的根本不是数组，就会报错。\n\nvar obj = {};\n\nvar p = new Proxy(obj, {\n  ownKeys: function(target) {\n    return [123, true, undefined, null, {}, []];\n  }\n});\n\nObject.getOwnPropertyNames(p)\n// Uncaught TypeError: 123 is not a valid property name\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n上面代码中，ownKeys方法虽然返回一个数组，但是每一个数组成员都不是字符串或 Symbol 值，因此就报错了。\n\n如果目标对象自身包含不可配置的属性，则该属性必须被ownKeys方法返回，否则报错。\n\nvar obj = {};\nObject.defineProperty(obj, 'a', {\n  configurable: false,\n  enumerable: true,\n  value: 10 }\n);\n\nvar p = new Proxy(obj, {\n  ownKeys: function(target) {\n    return ['b'];\n  }\n});\n\nObject.getOwnPropertyNames(p)\n// Uncaught TypeError: 'ownKeys' on proxy: trap result did not include 'a'\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n上面代码中，obj对象的a属性是不可配置的，这时ownKeys方法返回的数组之中，必须包含a，否则会报错。\n\n另外，如果目标对象是不可扩展的（non-extensible），这时ownKeys方法返回的数组之中，必须包含原对象的所有属性，且不能包含多余的属性，否则报错。\n\nvar obj = {\n  a: 1\n};\n\nObject.preventExtensions(obj);\n\nvar p = new Proxy(obj, {\n  ownKeys: function(target) {\n    return ['a', 'b'];\n  }\n});\n\nObject.getOwnPropertyNames(p)\n// Uncaught TypeError: 'ownKeys' on proxy: trap returned extra keys but proxy target is non-extensible\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n上面代码中，obj对象是不可扩展的，这时ownKeys方法返回的数组之中，包含了obj对象的多余属性b，所以导致了报错。\n\n\n# preventExtensions()\n\npreventExtensions方法拦截Object.preventExtensions()。该方法必须返回一个布尔值，否则会被自动转为布尔值。\n\n这个方法有一个限制，只有目标对象不可扩展时（即Object.isExtensible(proxy)为false），proxy.preventExtensions才能返回true，否则会报错。\n\nvar proxy = new Proxy({}, {\n  preventExtensions: function(target) {\n    return true;\n  }\n});\n\nObject.preventExtensions(proxy)\n// Uncaught TypeError: 'preventExtensions' on proxy: trap returned truish but the proxy target is extensible\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n上面代码中，proxy.preventExtensions方法返回true，但这时Object.isExtensible(proxy)会返回true，因此报错。\n\n为了防止出现这个问题，通常要在proxy.preventExtensions方法里面，调用一次Object.preventExtensions。\n\nvar proxy = new Proxy({}, {\n  preventExtensions: function(target) {\n    console.log('called');\n    Object.preventExtensions(target);\n    return true;\n  }\n});\n\nObject.preventExtensions(proxy)\n// \"called\"\n// Proxy {}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n\n# setPrototypeOf()\n\nsetPrototypeOf方法主要用来拦截Object.setPrototypeOf方法。\n\n下面是一个例子。\n\nvar handler = {\n  setPrototypeOf (target, proto) {\n    throw new Error('Changing the prototype is forbidden');\n  }\n};\nvar proto = {};\nvar target = function () {};\nvar proxy = new Proxy(target, handler);\nObject.setPrototypeOf(proxy, proto);\n// Error: Changing the prototype is forbidden\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n上面代码中，只要修改target的原型对象，就会报错。\n\n注意，该方法只能返回布尔值，否则会被自动转为布尔值。另外，如果目标对象不可扩展（non-extensible），setPrototypeOf方法不得改变目标对象的原型。\n\n\n# Proxy.revocable()\n\nProxy.revocable方法返回一个可取消的 Proxy 实例。\n\nlet target = {};\nlet handler = {};\n\nlet {proxy, revoke} = Proxy.revocable(target, handler);\n\nproxy.foo = 123;\nproxy.foo // 123\n\nrevoke();\nproxy.foo // TypeError: Revoked\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\nProxy.revocable方法返回一个对象，该对象的proxy属性是Proxy实例，revoke属性是一个函数，可以取消Proxy实例。上面代码中，当执行revoke函数之后，再访问Proxy实例，就会抛出一个错误。\n\nProxy.revocable的一个使用场景是，目标对象不允许直接访问，必须通过代理访问，一旦访问结束，就收回代理权，不允许再次访问。\n\n\n# this 问题\n\n虽然 Proxy 可以代理针对目标对象的访问，但它不是目标对象的透明代理，即不做任何拦截的情况下，也无法保证与目标对象的行为一致。主要原因就是在 Proxy 代理的情况下，目标对象内部的this关键字会指向 Proxy 代理。\n\nconst target = {\n  m: function () {\n    console.log(this === proxy);\n  }\n};\nconst handler = {};\n\nconst proxy = new Proxy(target, handler);\n\ntarget.m() // false\nproxy.m()  // true\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n上面代码中，一旦proxy代理target.m，后者内部的this就是指向proxy，而不是target。\n\n下面是一个例子，由于this指向的变化，导致 Proxy 无法代理目标对象。\n\nconst _name = new WeakMap();\n\nclass Person {\n  constructor(name) {\n    _name.set(this, name);\n  }\n  get name() {\n    return _name.get(this);\n  }\n}\n\nconst jane = new Person('Jane');\njane.name // 'Jane'\n\nconst proxy = new Proxy(jane, {});\nproxy.name // undefined\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n上面代码中，目标对象jane的name属性，实际保存在外部WeakMap对象_name上面，通过this键区分。由于通过proxy.name访问时，this指向proxy，导致无法取到值，所以返回undefined。\n\n此外，有些原生对象的内部属性，只有通过正确的this才能拿到，所以 Proxy 也无法代理这些原生对象的属性。\n\nconst target = new Date();\nconst handler = {};\nconst proxy = new Proxy(target, handler);\n\nproxy.getDate();\n// TypeError: this is not a Date object.\n\n\n1\n2\n3\n4\n5\n6\n\n\n上面代码中，getDate方法只能在Date对象实例上面拿到，如果this不是Date对象实例就会报错。这时，this绑定原始对象，就可以解决这个问题。\n\nconst target = new Date('2015-01-01');\nconst handler = {\n  get(target, prop) {\n    if (prop === 'getDate') {\n      return target.getDate.bind(target);\n    }\n    return Reflect.get(target, prop);\n  }\n};\nconst proxy = new Proxy(target, handler);\n\nproxy.getDate() // 1\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n\n# 实例：Web 服务的客户端\n\nProxy 对象可以拦截目标对象的任意属性，这使得它很合适用来写 Web 服务的客户端。\n\nconst service = createWebService('http://example.com/data');\n\nservice.employees().then(json => {\n  const employees = JSON.parse(json);\n  // ···\n});\n\n\n1\n2\n3\n4\n5\n6\n\n\n上面代码新建了一个 Web 服务的接口，这个接口返回各种数据。Proxy 可以拦截这个对象的任意属性，所以不用为每一种数据写一个适配方法，只要写一个 Proxy 拦截就可以了。\n\nfunction createWebService(baseUrl) {\n  return new Proxy({}, {\n    get(target, propKey, receiver) {\n      return () => httpGet(baseUrl + '/' + propKey);\n    }\n  });\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n同理，Proxy 也可以用来实现数据库的 ORM 层。",normalizedContent:"# proxy\n\n\n# 概述\n\nproxy 用于修改某些操作的默认行为，等同于在语言层面做出修改，所以属于一种“元编程”（meta programming），即对编程语言进行编程。\n\nproxy 可以理解成，在目标对象之前架设一层“拦截”，外界对该对象的访问，都必须先通过这层拦截，因此提供了一种机制，可以对外界的访问进行过滤和改写。proxy 这个词的原意是代理，用在这里表示由它来“代理”某些操作，可以译为“代理器”。\n\nvar obj = new proxy({}, {\n  get: function (target, propkey, receiver) {\n    console.log(`getting ${propkey}!`);\n    return reflect.get(target, propkey, receiver);\n  },\n  set: function (target, propkey, value, receiver) {\n    console.log(`setting ${propkey}!`);\n    return reflect.set(target, propkey, value, receiver);\n  }\n});\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n上面代码对一个空对象架设了一层拦截，重定义了属性的读取（get）和设置（set）行为。这里暂时先不解释具体的语法，只看运行结果。对设置了拦截行为的对象obj，去读写它的属性，就会得到下面的结果。\n\nobj.count = 1\n//  setting count!\n++obj.count\n//  getting count!\n//  setting count!\n//  2\n\n\n1\n2\n3\n4\n5\n6\n\n\n上面代码说明，proxy 实际上重载（overload）了点运算符，即用自己的定义覆盖了语言的原始定义。\n\nes6 原生提供 proxy 构造函数，用来生成 proxy 实例。\n\nvar proxy = new proxy(target, handler);\n\n\n1\n\n\nproxy 对象的所有用法，都是上面这种形式，不同的只是handler参数的写法。其中，new proxy()表示生成一个proxy实例，target参数表示所要拦截的目标对象，handler参数也是一个对象，用来定制拦截行为。\n\n下面是另一个拦截读取属性行为的例子。\n\nvar proxy = new proxy({}, {\n  get: function(target, propkey) {\n    return 35;\n  }\n});\n\nproxy.time // 35\nproxy.name // 35\nproxy.title // 35\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n上面代码中，作为构造函数，proxy接受两个参数。第一个参数是所要代理的目标对象（上例是一个空对象），即如果没有proxy的介入，操作原来要访问的就是这个对象；第二个参数是一个配置对象，对于每一个被代理的操作，需要提供一个对应的处理函数，该函数将拦截对应的操作。比如，上面代码中，配置对象有一个get方法，用来拦截对目标对象属性的访问请求。get方法的两个参数分别是目标对象和所要访问的属性。可以看到，由于拦截函数总是返回35，所以访问任何属性都得到35。\n\n注意，要使得proxy起作用，必须针对proxy实例（上例是proxy对象）进行操作，而不是针对目标对象（上例是空对象）进行操作。\n\n如果handler没有设置任何拦截，那就等同于直接通向原对象。\n\nvar target = {};\nvar handler = {};\nvar proxy = new proxy(target, handler);\nproxy.a = 'b';\ntarget.a // \"b\"\n\n\n1\n2\n3\n4\n5\n\n\n上面代码中，handler是一个空对象，没有任何拦截效果，访问proxy就等同于访问target。\n\n一个技巧是将 proxy 对象，设置到object.proxy属性，从而可以在object对象上调用。\n\nvar object = { proxy: new proxy(target, handler) };\n\n\n1\n\n\nproxy 实例也可以作为其他对象的原型对象。\n\nvar proxy = new proxy({}, {\n  get: function(target, propkey) {\n    return 35;\n  }\n});\n\nlet obj = object.create(proxy);\nobj.time // 35\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n上面代码中，proxy对象是obj对象的原型，obj对象本身并没有time属性，所以根据原型链，会在proxy对象上读取该属性，导致被拦截。\n\n同一个拦截器函数，可以设置拦截多个操作。\n\nvar handler = {\n  get: function(target, name) {\n    if (name === 'prototype') {\n      return object.prototype;\n    }\n    return 'hello, ' + name;\n  },\n\n  apply: function(target, thisbinding, args) {\n    return args[0];\n  },\n\n  construct: function(target, args) {\n    return {value: args[1]};\n  }\n};\n\nvar fproxy = new proxy(function(x, y) {\n  return x + y;\n}, handler);\n\nfproxy(1, 2) // 1\nnew fproxy(1, 2) // {value: 2}\nfproxy.prototype === object.prototype // true\nfproxy.foo === \"hello, foo\" // true\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n\n\n对于可以设置、但没有设置拦截的操作，则直接落在目标对象上，按照原先的方式产生结果。\n\n下面是 proxy 支持的拦截操作一览，一共 13 种。\n\n * get(target, propkey, receiver)：拦截对象属性的读取，比如proxy.foo和proxy['foo']。\n * set(target, propkey, value, receiver)：拦截对象属性的设置，比如proxy.foo = v或proxy['foo'] = v，返回一个布尔值。\n * has(target, propkey)：拦截propkey in proxy的操作，返回一个布尔值。\n * deleteproperty(target, propkey)：拦截delete proxy[propkey]的操作，返回一个布尔值。\n * ownkeys(target)：拦截object.getownpropertynames(proxy)、object.getownpropertysymbols(proxy)、object.keys(proxy)、for...in循环，返回一个数组。该方法返回目标对象所有自身的属性的属性名，而object.keys()的返回结果仅包括目标对象自身的可遍历属性。\n * getownpropertydescriptor(target, propkey)：拦截object.getownpropertydescriptor(proxy, propkey)，返回属性的描述对象。\n * defineproperty(target, propkey, propdesc)：拦截object.defineproperty(proxy, propkey, propdesc）、object.defineproperties(proxy, propdescs)，返回一个布尔值。\n * preventextensions(target)：拦截object.preventextensions(proxy)，返回一个布尔值。\n * getprototypeof(target)：拦截object.getprototypeof(proxy)，返回一个对象。\n * isextensible(target)：拦截object.isextensible(proxy)，返回一个布尔值。\n * setprototypeof(target, proto)：拦截object.setprototypeof(proxy, proto)，返回一个布尔值。如果目标对象是函数，那么还有两种额外操作可以拦截。\n * apply(target, object, args)：拦截 proxy 实例作为函数调用的操作，比如proxy(...args)、proxy.call(object, ...args)、proxy.apply(...)。\n * construct(target, args)：拦截 proxy 实例作为构造函数调用的操作，比如new proxy(...args)。\n\n\n# proxy 实例的方法\n\n下面是上面这些拦截方法的详细介绍。\n\n\n# get()\n\nget方法用于拦截某个属性的读取操作，可以接受三个参数，依次为目标对象、属性名和 proxy 实例本身（严格地说，是操作行为所针对的对象），其中最后一个参数可选。\n\nget方法的用法，上文已经有一个例子，下面是另一个拦截读取操作的例子。\n\nvar person = {\n  name: \"张三\"\n};\n\nvar proxy = new proxy(person, {\n  get: function(target, propkey) {\n    if (propkey in target) {\n      return target[propkey];\n    } else {\n      throw new referenceerror(\"prop name \\\"\" + propkey + \"\\\" does not exist.\");\n    }\n  }\n});\n\nproxy.name // \"张三\"\nproxy.age // 抛出一个错误\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n上面代码表示，如果访问目标对象不存在的属性，会抛出一个错误。如果没有这个拦截函数，访问不存在的属性，只会返回undefined。\n\nget方法可以继承。\n\nlet proto = new proxy({}, {\n  get(target, propertykey, receiver) {\n    console.log('get ' + propertykey);\n    return target[propertykey];\n  }\n});\n\nlet obj = object.create(proto);\nobj.foo // \"get foo\"\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n上面代码中，拦截操作定义在prototype对象上面，所以如果读取obj对象继承的属性时，拦截会生效。\n\n下面的例子使用get拦截，实现数组读取负数的索引。\n\nfunction createarray(...elements) {\n  let handler = {\n    get(target, propkey, receiver) {\n      let index = number(propkey);\n      if (index < 0) {\n        propkey = string(target.length + index);\n      }\n      return reflect.get(target, propkey, receiver);\n    }\n  };\n\n  let target = [];\n  target.push(...elements);\n  return new proxy(target, handler);\n}\n\nlet arr = createarray('a', 'b', 'c');\narr[-1] // c\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\n上面代码中，数组的位置参数是-1，就会输出数组的倒数第一个成员。\n\n利用 proxy，可以将读取属性的操作（get），转变为执行某个函数，从而实现属性的链式操作。\n\nvar pipe = (function () {\n  return function (value) {\n    var funcstack = [];\n    var oproxy = new proxy({} , {\n      get : function (pipeobject, fnname) {\n        if (fnname === 'get') {\n          return funcstack.reduce(function (val, fn) {\n            return fn(val);\n          },value);\n        }\n        funcstack.push(window[fnname]);\n        return oproxy;\n      }\n    });\n\n    return oproxy;\n  }\n}());\n\nvar double = n => n * 2;\nvar pow    = n => n * n;\nvar reverseint = n => n.tostring().split(\"\").reverse().join(\"\") | 0;\n\npipe(3).double.pow.reverseint.get; // 63\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n\n\n上面代码设置 proxy 以后，达到了将函数名链式使用的效果。\n\n下面的例子则是利用get拦截，实现一个生成各种 dom 节点的通用函数dom。\n\nconst dom = new proxy({}, {\n  get(target, property) {\n    return function(attrs = {}, ...children) {\n      const el = document.createelement(property);\n      for (let prop of object.keys(attrs)) {\n        el.setattribute(prop, attrs[prop]);\n      }\n      for (let child of children) {\n        if (typeof child === 'string') {\n          child = document.createtextnode(child);\n        }\n        el.appendchild(child);\n      }\n      return el;\n    }\n  }\n});\n\nconst el = dom.div({},\n  'hello, my name is ',\n  dom.a({href: '//example.com'}, 'mark'),\n  '. i like:',\n  dom.ul({},\n    dom.li({}, 'the web'),\n    dom.li({}, 'food'),\n    dom.li({}, '…actually that\\'s it')\n  )\n);\n\ndocument.body.appendchild(el);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n\n\n下面是一个get方法的第三个参数的例子，它总是指向原始的读操作所在的那个对象，一般情况下就是 proxy 实例。\n\nconst proxy = new proxy({}, {\n  get: function(target, key, receiver) {\n    return receiver;\n  }\n});\nproxy.getreceiver === proxy // true\n\n\n1\n2\n3\n4\n5\n6\n\n\n上面代码中，proxy对象的getreceiver属性是由proxy对象提供的，所以receiver指向proxy对象。\n\nconst proxy = new proxy({}, {\n  get: function(target, key, receiver) {\n    return receiver;\n  }\n});\n\nconst d = object.create(proxy);\nd.a === d // true\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n上面代码中，d对象本身没有a属性，所以读取d.a的时候，会去d的原型proxy对象找。这时，receiver就指向d，代表原始的读操作所在的那个对象。\n\n如果一个属性不可配置（configurable）且不可写（writable），则 proxy 不能修改该属性，否则通过 proxy 对象访问该属性会报错。\n\nconst target = object.defineproperties({}, {\n  foo: {\n    value: 123,\n    writable: false,\n    configurable: false\n  },\n});\n\nconst handler = {\n  get(target, propkey) {\n    return 'abc';\n  }\n};\n\nconst proxy = new proxy(target, handler);\n\nproxy.foo\n// typeerror: invariant check failed\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\n\n# set()\n\nset方法用来拦截某个属性的赋值操作，可以接受四个参数，依次为目标对象、属性名、属性值和 proxy 实例本身，其中最后一个参数可选。\n\n假定person对象有一个age属性，该属性应该是一个不大于 200 的整数，那么可以使用proxy保证age的属性值符合要求。\n\nlet validator = {\n  set: function(obj, prop, value) {\n    if (prop === 'age') {\n      if (!number.isinteger(value)) {\n        throw new typeerror('the age is not an integer');\n      }\n      if (value > 200) {\n        throw new rangeerror('the age seems invalid');\n      }\n    }\n\n    // 对于满足条件的 age 属性以及其他属性，直接保存\n    obj[prop] = value;\n  }\n};\n\nlet person = new proxy({}, validator);\n\nperson.age = 100;\n\nperson.age // 100\nperson.age = 'young' // 报错\nperson.age = 300 // 报错\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n\n\n上面代码中，由于设置了存值函数set，任何不符合要求的age属性赋值，都会抛出一个错误，这是数据验证的一种实现方法。利用set方法，还可以数据绑定，即每当对象发生变化时，会自动更新 dom。\n\n有时，我们会在对象上面设置内部属性，属性名的第一个字符使用下划线开头，表示这些属性不应该被外部使用。结合get和set方法，就可以做到防止这些内部属性被外部读写。\n\nconst handler = {\n  get (target, key) {\n    invariant(key, 'get');\n    return target[key];\n  },\n  set (target, key, value) {\n    invariant(key, 'set');\n    target[key] = value;\n    return true;\n  }\n};\nfunction invariant (key, action) {\n  if (key[0] === '_') {\n    throw new error(`invalid attempt to ${action} private \"${key}\" property`);\n  }\n}\nconst target = {};\nconst proxy = new proxy(target, handler);\nproxy._prop\n// error: invalid attempt to get private \"_prop\" property\nproxy._prop = 'c'\n// error: invalid attempt to set private \"_prop\" property\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n\n\n上面代码中，只要读写的属性名的第一个字符是下划线，一律抛错，从而达到禁止读写内部属性的目的。\n\n下面是set方法第四个参数的例子。\n\nconst handler = {\n  set: function(obj, prop, value, receiver) {\n    obj[prop] = receiver;\n  }\n};\nconst proxy = new proxy({}, handler);\nproxy.foo = 'bar';\nproxy.foo === proxy // true\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n上面代码中，set方法的第四个参数receiver，指的是原始的操作行为所在的那个对象，一般情况下是proxy实例本身，请看下面的例子。\n\nconst handler = {\n  set: function(obj, prop, value, receiver) {\n    obj[prop] = receiver;\n  }\n};\nconst proxy = new proxy({}, handler);\nconst myobj = {};\nobject.setprototypeof(myobj, proxy);\n\nmyobj.foo = 'bar';\nmyobj.foo === myobj // true\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n上面代码中，设置myobj.foo属性的值时，myobj并没有foo属性，因此引擎会到myobj的原型链去找foo属性。myobj的原型对象proxy是一个 proxy 实例，设置它的foo属性会触发set方法。这时，第四个参数receiver就指向原始赋值行为所在的对象myobj。\n\n注意，如果目标对象自身的某个属性，不可写且不可配置，那么set方法将不起作用。\n\nconst obj = {};\nobject.defineproperty(obj, 'foo', {\n  value: 'bar',\n  writable: false,\n});\n\nconst handler = {\n  set: function(obj, prop, value, receiver) {\n    obj[prop] = 'baz';\n  }\n};\n\nconst proxy = new proxy(obj, handler);\nproxy.foo = 'baz';\nproxy.foo // \"bar\"\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n上面代码中，obj.foo属性不可写，proxy 对这个属性的set代理将不会生效。\n\n注意，严格模式下，set代理如果没有返回true，就会报错。\n\n'use strict';\nconst handler = {\n  set: function(obj, prop, value, receiver) {\n    obj[prop] = receiver;\n    // 无论有没有下面这一行，都会报错\n    return false;\n  }\n};\nconst proxy = new proxy({}, handler);\nproxy.foo = 'bar';\n// typeerror: 'set' on proxy: trap returned falsish for property 'foo'\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n上面代码中，严格模式下，set代理返回false或者undefined，都会报错。\n\n\n# apply()\n\napply方法拦截函数的调用、call和apply操作。\n\napply方法可以接受三个参数，分别是目标对象、目标对象的上下文对象（this）和目标对象的参数数组。\n\nvar handler = {\n  apply (target, ctx, args) {\n    return reflect.apply(...arguments);\n  }\n};\n\n\n1\n2\n3\n4\n5\n\n\n下面是一个例子。\n\nvar target = function () { return 'i am the target'; };\nvar handler = {\n  apply: function () {\n    return 'i am the proxy';\n  }\n};\n\nvar p = new proxy(target, handler);\n\np()\n// \"i am the proxy\"\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n上面代码中，变量p是 proxy 的实例，当它作为函数调用时（p()），就会被apply方法拦截，返回一个字符串。\n\n下面是另外一个例子。\n\nvar twice = {\n  apply (target, ctx, args) {\n    return reflect.apply(...arguments) * 2;\n  }\n};\nfunction sum (left, right) {\n  return left + right;\n};\nvar proxy = new proxy(sum, twice);\nproxy(1, 2) // 6\nproxy.call(null, 5, 6) // 22\nproxy.apply(null, [7, 8]) // 30\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n上面代码中，每当执行proxy函数（直接调用或call和apply调用），就会被apply方法拦截。\n\n另外，直接调用reflect.apply方法，也会被拦截。\n\nreflect.apply(proxy, null, [9, 10]) // 38\n\n\n1\n\n\n\n# has()\n\nhas方法用来拦截hasproperty操作，即判断对象是否具有某个属性时，这个方法会生效。典型的操作就是in运算符。\n\nhas方法可以接受两个参数，分别是目标对象、需查询的属性名。\n\n下面的例子使用has方法隐藏某些属性，不被in运算符发现。\n\nvar handler = {\n  has (target, key) {\n    if (key[0] === '_') {\n      return false;\n    }\n    return key in target;\n  }\n};\nvar target = { _prop: 'foo', prop: 'foo' };\nvar proxy = new proxy(target, handler);\n'_prop' in proxy // false\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n上面代码中，如果原对象的属性名的第一个字符是下划线，proxy.has就会返回false，从而不会被in运算符发现。\n\n如果原对象不可配置或者禁止扩展，这时has拦截会报错。\n\nvar obj = { a: 10 };\nobject.preventextensions(obj);\n\nvar p = new proxy(obj, {\n  has: function(target, prop) {\n    return false;\n  }\n});\n\n'a' in p // typeerror is thrown\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n上面代码中，obj对象禁止扩展，结果使用has拦截就会报错。也就是说，如果某个属性不可配置（或者目标对象不可扩展），则has方法就不得“隐藏”（即返回false）目标对象的该属性。\n\n值得注意的是，has方法拦截的是hasproperty操作，而不是hasownproperty操作，即has方法不判断一个属性是对象自身的属性，还是继承的属性。\n\n另外，虽然for...in循环也用到了in运算符，但是has拦截对for...in循环不生效。\n\nlet stu1 = {name: '张三', score: 59};\nlet stu2 = {name: '李四', score: 99};\n\nlet handler = {\n  has(target, prop) {\n    if (prop === 'score' && target[prop] < 60) {\n      console.log(`${target.name} 不及格`);\n      return false;\n    }\n    return prop in target;\n  }\n}\n\nlet oproxy1 = new proxy(stu1, handler);\nlet oproxy2 = new proxy(stu2, handler);\n\n'score' in oproxy1\n// 张三 不及格\n// false\n\n'score' in oproxy2\n// true\n\nfor (let a in oproxy1) {\n  console.log(oproxy1[a]);\n}\n// 张三\n// 59\n\nfor (let b in oproxy2) {\n  console.log(oproxy2[b]);\n}\n// 李四\n// 99\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n\n\n上面代码中，has拦截只对in运算符生效，对for...in循环不生效，导致不符合要求的属性没有被for...in循环所排除。\n\n\n# construct()\n\nconstruct方法用于拦截new命令，下面是拦截对象的写法。\n\nvar handler = {\n  construct (target, args, newtarget) {\n    return new target(...args);\n  }\n};\n\n\n1\n2\n3\n4\n5\n\n\nconstruct方法可以接受两个参数。\n\n * target：目标对象\n * args：构造函数的参数对象\n * newtarget：创造实例对象时，new命令作用的构造函数（下面例子的p）\n\nvar p = new proxy(function () {}, {\n  construct: function(target, args) {\n    console.log('called: ' + args.join(', '));\n    return { value: args[0] * 10 };\n  }\n});\n\n(new p(1)).value\n// \"called: 1\"\n// 10\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\nconstruct方法返回的必须是一个对象，否则会报错。\n\nvar p = new proxy(function() {}, {\n  construct: function(target, argumentslist) {\n    return 1;\n  }\n});\n\nnew p() // 报错\n// uncaught typeerror: 'construct' on proxy: trap returned non-object ('1')\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# deleteproperty()\n\ndeleteproperty方法用于拦截delete操作，如果这个方法抛出错误或者返回false，当前属性就无法被delete命令删除。\n\nvar handler = {\n  deleteproperty (target, key) {\n    invariant(key, 'delete');\n    delete target[key];\n    return true;\n  }\n};\nfunction invariant (key, action) {\n  if (key[0] === '_') {\n    throw new error(`invalid attempt to ${action} private \"${key}\" property`);\n  }\n}\n\nvar target = { _prop: 'foo' };\nvar proxy = new proxy(target, handler);\ndelete proxy._prop\n// error: invalid attempt to delete private \"_prop\" property\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n上面代码中，deleteproperty方法拦截了delete操作符，删除第一个字符为下划线的属性会报错。\n\n注意，目标对象自身的不可配置（configurable）的属性，不能被deleteproperty方法删除，否则报错。\n\n\n# defineproperty()\n\ndefineproperty方法拦截了object.defineproperty操作。\n\nvar handler = {\n  defineproperty (target, key, descriptor) {\n    return false;\n  }\n};\nvar target = {};\nvar proxy = new proxy(target, handler);\nproxy.foo = 'bar' // 不会生效\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n上面代码中，defineproperty方法返回false，导致添加新属性总是无效。\n\n注意，如果目标对象不可扩展（non-extensible），则defineproperty不能增加目标对象上不存在的属性，否则会报错。另外，如果目标对象的某个属性不可写（writable）或不可配置（configurable），则defineproperty方法不得改变这两个设置。\n\n\n# getownpropertydescriptor()\n\ngetownpropertydescriptor方法拦截object.getownpropertydescriptor()，返回一个属性描述对象或者undefined。\n\nvar handler = {\n  getownpropertydescriptor (target, key) {\n    if (key[0] === '_') {\n      return;\n    }\n    return object.getownpropertydescriptor(target, key);\n  }\n};\nvar target = { _foo: 'bar', baz: 'tar' };\nvar proxy = new proxy(target, handler);\nobject.getownpropertydescriptor(proxy, 'wat')\n// undefined\nobject.getownpropertydescriptor(proxy, '_foo')\n// undefined\nobject.getownpropertydescriptor(proxy, 'baz')\n// { value: 'tar', writable: true, enumerable: true, configurable: true }\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n上面代码中，handler.getownpropertydescriptor方法对于第一个字符为下划线的属性名会返回undefined。\n\n\n# getprototypeof()\n\ngetprototypeof方法主要用来拦截获取对象原型。具体来说，拦截下面这些操作。\n\n * object.prototype.__proto__\n * object.prototype.isprototypeof()\n * object.getprototypeof()\n * reflect.getprototypeof()\n * instanceof\n\n下面是一个例子。\n\nvar proto = {};\nvar p = new proxy({}, {\n  getprototypeof(target) {\n    return proto;\n  }\n});\nobject.getprototypeof(p) === proto // true\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n上面代码中，getprototypeof方法拦截object.getprototypeof()，返回proto对象。\n\n注意，getprototypeof方法的返回值必须是对象或者null，否则报错。另外，如果目标对象不可扩展（non-extensible）， getprototypeof方法必须返回目标对象的原型对象。\n\n\n# isextensible()\n\nisextensible方法拦截object.isextensible操作。\n\nvar p = new proxy({}, {\n  isextensible: function(target) {\n    console.log(\"called\");\n    return true;\n  }\n});\n\nobject.isextensible(p)\n// \"called\"\n// true\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n上面代码设置了isextensible方法，在调用object.isextensible时会输出called。\n\n注意，该方法只能返回布尔值，否则返回值会被自动转为布尔值。\n\n这个方法有一个强限制，它的返回值必须与目标对象的isextensible属性保持一致，否则就会抛出错误。\n\nobject.isextensible(proxy) === object.isextensible(target)\n\n\n1\n\n\n下面是一个例子。\n\nvar p = new proxy({}, {\n  isextensible: function(target) {\n    return false;\n  }\n});\n\nobject.isextensible(p)\n// uncaught typeerror: 'isextensible' on proxy: trap result does not reflect extensibility of proxy target (which is 'true')\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# ownkeys()\n\nownkeys方法用来拦截对象自身属性的读取操作。具体来说，拦截以下操作。\n\n * object.getownpropertynames()\n * object.getownpropertysymbols()\n * object.keys()\n * for...in循环\n\n下面是拦截object.keys()的例子。\n\nlet target = {\n  a: 1,\n  b: 2,\n  c: 3\n};\n\nlet handler = {\n  ownkeys(target) {\n    return ['a'];\n  }\n};\n\nlet proxy = new proxy(target, handler);\n\nobject.keys(proxy)\n// [ 'a' ]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n上面代码拦截了对于target对象的object.keys()操作，只返回a、b、c三个属性之中的a属性。\n\n下面的例子是拦截第一个字符为下划线的属性名。\n\nlet target = {\n  _bar: 'foo',\n  _prop: 'bar',\n  prop: 'baz'\n};\n\nlet handler = {\n  ownkeys (target) {\n    return reflect.ownkeys(target).filter(key => key[0] !== '_');\n  }\n};\n\nlet proxy = new proxy(target, handler);\nfor (let key of object.keys(proxy)) {\n  console.log(target[key]);\n}\n// \"baz\"\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n注意，使用object.keys方法时，有三类属性会被ownkeys方法自动过滤，不会返回。\n\n * 目标对象上不存在的属性\n * 属性名为 symbol 值\n * 不可遍历（enumerable）的属性\n\nlet target = {\n  a: 1,\n  b: 2,\n  c: 3,\n  [symbol.for('secret')]: '4',\n};\n\nobject.defineproperty(target, 'key', {\n  enumerable: false,\n  configurable: true,\n  writable: true,\n  value: 'static'\n});\n\nlet handler = {\n  ownkeys(target) {\n    return ['a', 'd', symbol.for('secret'), 'key'];\n  }\n};\n\nlet proxy = new proxy(target, handler);\n\nobject.keys(proxy)\n// ['a']\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n\n\n上面代码中，ownkeys方法之中，显式返回不存在的属性（d）、symbol 值（symbol.for('secret')）、不可遍历的属性（key），结果都被自动过滤掉。\n\nownkeys方法还可以拦截object.getownpropertynames()。\n\nvar p = new proxy({}, {\n  ownkeys: function(target) {\n    return ['a', 'b', 'c'];\n  }\n});\n\nobject.getownpropertynames(p)\n// [ 'a', 'b', 'c' ]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\nfor...in循环也受到ownkeys方法的拦截。\n\nconst obj = { hello: 'world' };\nconst proxy = new proxy(obj, {\n  ownkeys: function () {\n    return ['a', 'b'];\n  }\n});\n\nfor (let key in proxy) {\n  console.log(key); // 没有任何输出\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n上面代码中，ownkeys指定只返回a和b属性，由于obj没有这两个属性，因此for...in循环不会有任何输出。\n\nownkeys方法返回的数组成员，只能是字符串或 symbol 值。如果有其他类型的值，或者返回的根本不是数组，就会报错。\n\nvar obj = {};\n\nvar p = new proxy(obj, {\n  ownkeys: function(target) {\n    return [123, true, undefined, null, {}, []];\n  }\n});\n\nobject.getownpropertynames(p)\n// uncaught typeerror: 123 is not a valid property name\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n上面代码中，ownkeys方法虽然返回一个数组，但是每一个数组成员都不是字符串或 symbol 值，因此就报错了。\n\n如果目标对象自身包含不可配置的属性，则该属性必须被ownkeys方法返回，否则报错。\n\nvar obj = {};\nobject.defineproperty(obj, 'a', {\n  configurable: false,\n  enumerable: true,\n  value: 10 }\n);\n\nvar p = new proxy(obj, {\n  ownkeys: function(target) {\n    return ['b'];\n  }\n});\n\nobject.getownpropertynames(p)\n// uncaught typeerror: 'ownkeys' on proxy: trap result did not include 'a'\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n上面代码中，obj对象的a属性是不可配置的，这时ownkeys方法返回的数组之中，必须包含a，否则会报错。\n\n另外，如果目标对象是不可扩展的（non-extensible），这时ownkeys方法返回的数组之中，必须包含原对象的所有属性，且不能包含多余的属性，否则报错。\n\nvar obj = {\n  a: 1\n};\n\nobject.preventextensions(obj);\n\nvar p = new proxy(obj, {\n  ownkeys: function(target) {\n    return ['a', 'b'];\n  }\n});\n\nobject.getownpropertynames(p)\n// uncaught typeerror: 'ownkeys' on proxy: trap returned extra keys but proxy target is non-extensible\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n上面代码中，obj对象是不可扩展的，这时ownkeys方法返回的数组之中，包含了obj对象的多余属性b，所以导致了报错。\n\n\n# preventextensions()\n\npreventextensions方法拦截object.preventextensions()。该方法必须返回一个布尔值，否则会被自动转为布尔值。\n\n这个方法有一个限制，只有目标对象不可扩展时（即object.isextensible(proxy)为false），proxy.preventextensions才能返回true，否则会报错。\n\nvar proxy = new proxy({}, {\n  preventextensions: function(target) {\n    return true;\n  }\n});\n\nobject.preventextensions(proxy)\n// uncaught typeerror: 'preventextensions' on proxy: trap returned truish but the proxy target is extensible\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n上面代码中，proxy.preventextensions方法返回true，但这时object.isextensible(proxy)会返回true，因此报错。\n\n为了防止出现这个问题，通常要在proxy.preventextensions方法里面，调用一次object.preventextensions。\n\nvar proxy = new proxy({}, {\n  preventextensions: function(target) {\n    console.log('called');\n    object.preventextensions(target);\n    return true;\n  }\n});\n\nobject.preventextensions(proxy)\n// \"called\"\n// proxy {}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n\n# setprototypeof()\n\nsetprototypeof方法主要用来拦截object.setprototypeof方法。\n\n下面是一个例子。\n\nvar handler = {\n  setprototypeof (target, proto) {\n    throw new error('changing the prototype is forbidden');\n  }\n};\nvar proto = {};\nvar target = function () {};\nvar proxy = new proxy(target, handler);\nobject.setprototypeof(proxy, proto);\n// error: changing the prototype is forbidden\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n上面代码中，只要修改target的原型对象，就会报错。\n\n注意，该方法只能返回布尔值，否则会被自动转为布尔值。另外，如果目标对象不可扩展（non-extensible），setprototypeof方法不得改变目标对象的原型。\n\n\n# proxy.revocable()\n\nproxy.revocable方法返回一个可取消的 proxy 实例。\n\nlet target = {};\nlet handler = {};\n\nlet {proxy, revoke} = proxy.revocable(target, handler);\n\nproxy.foo = 123;\nproxy.foo // 123\n\nrevoke();\nproxy.foo // typeerror: revoked\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\nproxy.revocable方法返回一个对象，该对象的proxy属性是proxy实例，revoke属性是一个函数，可以取消proxy实例。上面代码中，当执行revoke函数之后，再访问proxy实例，就会抛出一个错误。\n\nproxy.revocable的一个使用场景是，目标对象不允许直接访问，必须通过代理访问，一旦访问结束，就收回代理权，不允许再次访问。\n\n\n# this 问题\n\n虽然 proxy 可以代理针对目标对象的访问，但它不是目标对象的透明代理，即不做任何拦截的情况下，也无法保证与目标对象的行为一致。主要原因就是在 proxy 代理的情况下，目标对象内部的this关键字会指向 proxy 代理。\n\nconst target = {\n  m: function () {\n    console.log(this === proxy);\n  }\n};\nconst handler = {};\n\nconst proxy = new proxy(target, handler);\n\ntarget.m() // false\nproxy.m()  // true\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n上面代码中，一旦proxy代理target.m，后者内部的this就是指向proxy，而不是target。\n\n下面是一个例子，由于this指向的变化，导致 proxy 无法代理目标对象。\n\nconst _name = new weakmap();\n\nclass person {\n  constructor(name) {\n    _name.set(this, name);\n  }\n  get name() {\n    return _name.get(this);\n  }\n}\n\nconst jane = new person('jane');\njane.name // 'jane'\n\nconst proxy = new proxy(jane, {});\nproxy.name // undefined\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n上面代码中，目标对象jane的name属性，实际保存在外部weakmap对象_name上面，通过this键区分。由于通过proxy.name访问时，this指向proxy，导致无法取到值，所以返回undefined。\n\n此外，有些原生对象的内部属性，只有通过正确的this才能拿到，所以 proxy 也无法代理这些原生对象的属性。\n\nconst target = new date();\nconst handler = {};\nconst proxy = new proxy(target, handler);\n\nproxy.getdate();\n// typeerror: this is not a date object.\n\n\n1\n2\n3\n4\n5\n6\n\n\n上面代码中，getdate方法只能在date对象实例上面拿到，如果this不是date对象实例就会报错。这时，this绑定原始对象，就可以解决这个问题。\n\nconst target = new date('2015-01-01');\nconst handler = {\n  get(target, prop) {\n    if (prop === 'getdate') {\n      return target.getdate.bind(target);\n    }\n    return reflect.get(target, prop);\n  }\n};\nconst proxy = new proxy(target, handler);\n\nproxy.getdate() // 1\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n\n# 实例：web 服务的客户端\n\nproxy 对象可以拦截目标对象的任意属性，这使得它很合适用来写 web 服务的客户端。\n\nconst service = createwebservice('http://example.com/data');\n\nservice.employees().then(json => {\n  const employees = json.parse(json);\n  // ···\n});\n\n\n1\n2\n3\n4\n5\n6\n\n\n上面代码新建了一个 web 服务的接口，这个接口返回各种数据。proxy 可以拦截这个对象的任意属性，所以不用为每一种数据写一个适配方法，只要写一个 proxy 拦截就可以了。\n\nfunction createwebservice(baseurl) {\n  return new proxy({}, {\n    get(target, propkey, receiver) {\n      return () => httpget(baseurl + '/' + propkey);\n    }\n  });\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n同理，proxy 也可以用来实现数据库的 orm 层。",charsets:{cjk:!0}},{title:"Promise 对象",frontmatter:{title:"Promise 对象",date:"2020-02-09T16:00:29.000Z",permalink:"/pages/2810ae8985e9bd52",author:"阮一峰",categories:["《ES6 教程》笔记"],tags:["ES6"],readingShow:"top"},regularPath:"/06.%E4%B9%A6%E7%B1%8D/05.%E3%80%8AES6%20%E6%95%99%E7%A8%8B%E3%80%8B%E7%AC%94%E8%AE%B0/16.Promise%20%E5%AF%B9%E8%B1%A1.html",relativePath:"06.书籍/05.《ES6 教程》笔记/16.Promise 对象.md",key:"v-549e0a74",path:"/pages/2810ae8985e9bd52/",headers:[{level:2,title:"Promise 的含义",slug:"promise-的含义",normalizedTitle:"promise 的含义",charIndex:17},{level:2,title:"基本用法",slug:"基本用法",normalizedTitle:"基本用法",charIndex:983},{level:2,title:"Promise.prototype.then()",slug:"promise-prototype-then",normalizedTitle:"promise.prototype.then()",charIndex:5345},{level:2,title:"Promise.prototype.catch()",slug:"promise-prototype-catch",normalizedTitle:"promise.prototype.catch()",charIndex:6481},{level:2,title:"Promise.prototype.finally()",slug:"promise-prototype-finally",normalizedTitle:"promise.prototype.finally()",charIndex:11971},{level:2,title:"Promise.all()",slug:"promise-all",normalizedTitle:"promise.all()",charIndex:13396},{level:2,title:"Promise.race()",slug:"promise-race",normalizedTitle:"promise.race()",charIndex:15679},{level:2,title:"Promise.allSettled()",slug:"promise-allsettled",normalizedTitle:"promise.allsettled()",charIndex:16366},{level:2,title:"Promise.any()",slug:"promise-any",normalizedTitle:"promise.any()",charIndex:18215},{level:2,title:"Promise.resolve()",slug:"promise-resolve",normalizedTitle:"promise.resolve()",charIndex:10831},{level:2,title:"Promise.reject()",slug:"promise-reject",normalizedTitle:"promise.reject()",charIndex:21651},{level:2,title:"应用",slug:"应用",normalizedTitle:"应用",charIndex:22310},{level:3,title:"加载图片",slug:"加载图片",normalizedTitle:"加载图片",charIndex:2470},{level:3,title:"Generator 函数与 Promise 的结合",slug:"generator-函数与-promise-的结合",normalizedTitle:"generator 函数与 promise 的结合",charIndex:22601},{level:2,title:"Promise.try()",slug:"promise-try",normalizedTitle:"promise.try()",charIndex:23393}],excerpt:'<h1 id="promise-对象"><a class="header-anchor" href="#promise-对象">#</a> Promise 对象</h1>\n<h2 id="promise-的含义"><a class="header-anchor" href="#promise-的含义">#</a> Promise 的含义</h2>\n<p>Promise 是异步编程的一种解决方案，比传统的解决方案——回调函数和事件——更合理和更强大。它由社区最早提出和实现，ES6 将其写进了语言标准，统一了用法，原生提供了<code>Promise</code>对象。</p>\n',lastUpdated:"2022/9/22 下午4:28:09",lastUpdatedTimestamp:1663835289e3,headersStr:"Promise 的含义 基本用法 Promise.prototype.then() Promise.prototype.catch() Promise.prototype.finally() Promise.all() Promise.race() Promise.allSettled() Promise.any() Promise.resolve() Promise.reject() 应用 加载图片 Generator 函数与 Promise 的结合 Promise.try()",content:"# Promise 对象\n\n\n# Promise 的含义\n\nPromise 是异步编程的一种解决方案，比传统的解决方案——回调函数和事件——更合理和更强大。它由社区最早提出和实现，ES6 将其写进了语言标准，统一了用法，原生提供了Promise对象。 所谓Promise，简单说就是一个容器，里面保存着某个未来才会结束的事件（通常是一个异步操作）的结果。从语法上说，Promise 是一个对象，从它可以获取异步操作的消息。Promise 提供统一的 API，各种异步操作都可以用同样的方法进行处理。\n\nPromise对象有以下两个特点。\n\n（1）对象的状态不受外界影响。Promise对象代表一个异步操作，有三种状态：pending（进行中）、fulfilled（已成功）和rejected（已失败）。只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态。这也是Promise这个名字的由来，它的英语意思就是“承诺”，表示其他手段无法改变。\n\n（2）一旦状态改变，就不会再变，任何时候都可以得到这个结果。Promise对象的状态改变，只有两种可能：从pending变为fulfilled和从pending变为rejected。只要这两种情况发生，状态就凝固了，不会再变了，会一直保持这个结果，这时就称为 resolved（已定型）。如果改变已经发生了，你再对Promise对象添加回调函数，也会立即得到这个结果。这与事件（Event）完全不同，事件的特点是，如果你错过了它，再去监听，是得不到结果的。\n\n注意，为了行文方便，本章后面的resolved统一只指fulfilled状态，不包含rejected状态。\n\n有了Promise对象，就可以将异步操作以同步操作的流程表达出来，避免了层层嵌套的回调函数。此外，Promise对象提供统一的接口，使得控制异步操作更加容易。\n\nPromise也有一些缺点。首先，无法取消Promise，一旦新建它就会立即执行，无法中途取消。其次，如果不设置回调函数，Promise内部抛出的错误，不会反应到外部。第三，当处于pending状态时，无法得知目前进展到哪一个阶段（刚刚开始还是即将完成）。\n\n如果某些事件不断地反复发生，一般来说，使用 Stream 模式是比部署Promise更好的选择。\n\n\n# 基本用法\n\nES6 规定，Promise对象是一个构造函数，用来生成Promise实例。\n\n下面代码创造了一个Promise实例。\n\nconst promise = new Promise(function(resolve, reject) {\n  // ... some code\n\n  if (/* 异步操作成功 */){\n    resolve(value);\n  } else {\n    reject(error);\n  }\n});\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\nPromise构造函数接受一个函数作为参数，该函数的两个参数分别是resolve和reject。它们是两个函数，由 JavaScript 引擎提供，不用自己部署。\n\nresolve函数的作用是，将Promise对象的状态从“未完成”变为“成功”（即从 pending 变为 resolved），在异步操作成功时调用，并将异步操作的结果，作为参数传递出去；reject函数的作用是，将Promise对象的状态从“未完成”变为“失败”（即从 pending 变为 rejected），在异步操作失败时调用，并将异步操作报出的错误，作为参数传递出去。\n\nPromise实例生成以后，可以用then方法分别指定resolved状态和rejected状态的回调函数。\n\npromise.then(function(value) {\n  // success\n}, function(error) {\n  // failure\n});\n\n\n1\n2\n3\n4\n5\n\n\nthen方法可以接受两个回调函数作为参数。第一个回调函数是Promise对象的状态变为resolved时调用，第二个回调函数是Promise对象的状态变为rejected时调用。其中，第二个函数是可选的，不一定要提供。这两个函数都接受Promise对象传出的值作为参数。\n\n下面是一个Promise对象的简单例子。\n\nfunction timeout(ms) {\n  return new Promise((resolve, reject) => {\n    setTimeout(resolve, ms, 'done');\n  });\n}\n\ntimeout(100).then((value) => {\n  console.log(value);\n});\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n上面代码中，timeout方法返回一个Promise实例，表示一段时间以后才会发生的结果。过了指定的时间（ms参数）以后，Promise实例的状态变为resolved，就会触发then方法绑定的回调函数。\n\nPromise 新建后就会立即执行。\n\nlet promise = new Promise(function(resolve, reject) {\n  console.log('Promise');\n  resolve();\n});\n\npromise.then(function() {\n  console.log('resolved.');\n});\n\nconsole.log('Hi!');\n\n// Promise\n// Hi!\n// resolved\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n上面代码中，Promise 新建后立即执行，所以首先输出的是Promise。然后，then方法指定的回调函数，将在当前脚本所有同步任务执行完才会执行，所以resolved最后输出。\n\n下面是异步加载图片的例子。\n\nfunction loadImageAsync(url) {\n  return new Promise(function(resolve, reject) {\n    const image = new Image();\n\n    image.onload = function() {\n      resolve(image);\n    };\n\n    image.onerror = function() {\n      reject(new Error('Could not load image at ' + url));\n    };\n\n    image.src = url;\n  });\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n上面代码中，使用Promise包装了一个图片加载的异步操作。如果加载成功，就调用resolve方法，否则就调用reject方法。\n\n下面是一个用Promise对象实现的 Ajax 操作的例子。\n\nconst getJSON = function(url) {\n  const promise = new Promise(function(resolve, reject){\n    const handler = function() {\n      if (this.readyState !== 4) {\n        return;\n      }\n      if (this.status === 200) {\n        resolve(this.response);\n      } else {\n        reject(new Error(this.statusText));\n      }\n    };\n    const client = new XMLHttpRequest();\n    client.open(\"GET\", url);\n    client.onreadystatechange = handler;\n    client.responseType = \"json\";\n    client.setRequestHeader(\"Accept\", \"application/json\");\n    client.send();\n\n  });\n\n  return promise;\n};\n\ngetJSON(\"/posts.json\").then(function(json) {\n  console.log('Contents: ' + json);\n}, function(error) {\n  console.error('出错了', error);\n});\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n\n\n上面代码中，getJSON是对 XMLHttpRequest 对象的封装，用于发出一个针对 JSON 数据的 HTTP 请求，并且返回一个Promise对象。需要注意的是，在getJSON内部，resolve函数和reject函数调用时，都带有参数。\n\n如果调用resolve函数和reject函数时带有参数，那么它们的参数会被传递给回调函数。reject函数的参数通常是Error对象的实例，表示抛出的错误；resolve函数的参数除了正常的值以外，还可能是另一个 Promise 实例，比如像下面这样。\n\nconst p1 = new Promise(function (resolve, reject) {\n  // ...\n});\n\nconst p2 = new Promise(function (resolve, reject) {\n  // ...\n  resolve(p1);\n})\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n上面代码中，p1和p2都是 Promise 的实例，但是p2的resolve方法将p1作为参数，即一个异步操作的结果是返回另一个异步操作。\n\n注意，这时p1的状态就会传递给p2，也就是说，p1的状态决定了p2的状态。如果p1的状态是pending，那么p2的回调函数就会等待p1的状态改变；如果p1的状态已经是resolved或者rejected，那么p2的回调函数将会立刻执行。\n\nconst p1 = new Promise(function (resolve, reject) {\n  setTimeout(() => reject(new Error('fail')), 3000)\n})\n\nconst p2 = new Promise(function (resolve, reject) {\n  setTimeout(() => resolve(p1), 1000)\n})\n\np2\n  .then(result => console.log(result))\n  .catch(error => console.log(error))\n// Error: fail\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n上面代码中，p1是一个 Promise，3 秒之后变为rejected。p2的状态在 1 秒之后改变，resolve方法返回的是p1。由于p2返回的是另一个 Promise，导致p2自己的状态无效了，由p1的状态决定p2的状态。所以，后面的then语句都变成针对后者（p1）。又过了 2 秒，p1变为rejected，导致触发catch方法指定的回调函数。\n\n注意，调用resolve或reject并不会终结 Promise 的参数函数的执行。\n\nnew Promise((resolve, reject) => {\n  resolve(1);\n  console.log(2);\n}).then(r => {\n  console.log(r);\n});\n// 2\n// 1\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n上面代码中，调用resolve(1)以后，后面的console.log(2)还是会执行，并且会首先打印出来。这是因为立即 resolved 的 Promise 是在本轮事件循环的末尾执行，总是晚于本轮循环的同步任务。\n\n一般来说，调用resolve或reject以后，Promise 的使命就完成了，后继操作应该放到then方法里面，而不应该直接写在resolve或reject的后面。所以，最好在它们前面加上return语句，这样就不会有意外。\n\nnew Promise((resolve, reject) => {\n  return resolve(1);\n  // 后面的语句不会执行\n  console.log(2);\n})\n\n\n1\n2\n3\n4\n5\n\n\n\n# Promise.prototype.then()\n\nPromise 实例具有then方法，也就是说，then方法是定义在原型对象Promise.prototype上的。它的作用是为 Promise 实例添加状态改变时的回调函数。前面说过，then方法的第一个参数是resolved状态的回调函数，第二个参数（可选）是rejected状态的回调函数。\n\nthen方法返回的是一个新的Promise实例（注意，不是原来那个Promise实例）。因此可以采用链式写法，即then方法后面再调用另一个then方法。\n\ngetJSON(\"/posts.json\").then(function(json) {\n  return json.post;\n}).then(function(post) { // 这里的post是前面一个then返回的参数\n  // ...\n});\n\n\n1\n2\n3\n4\n5\n\n\n上面的代码使用then方法，依次指定了两个回调函数。第一个回调函数完成以后，会将返回结果作为参数，传入第二个回调函数。\n\n采用链式的then，可以指定一组按照次序调用的回调函数。这时，前一个回调函数，有可能返回的还是一个Promise对象（即有异步操作），这时后一个回调函数，就会等待该Promise对象的状态发生变化，才会被调用。\n\ngetJSON(\"/post/1.json\").then(function(post) {\n  return getJSON(post.commentURL);\n}).then(function (comments) {\n  console.log(\"resolved: \", comments);\n}, function (err){\n  console.log(\"rejected: \", err);\n});\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n上面代码中，第一个then方法指定的回调函数，返回的是另一个Promise对象。这时，第二个then方法指定的回调函数，就会等待这个新的Promise对象状态发生变化。如果变为resolved，就调用第一个回调函数，如果状态变为rejected，就调用第二个回调函数。\n\n如果采用箭头函数，上面的代码可以写得更简洁。\n\ngetJSON(\"/post/1.json\").then(\n  post => getJSON(post.commentURL)\n).then(\n  comments => console.log(\"resolved: \", comments),\n  err => console.log(\"rejected: \", err)\n);\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# Promise.prototype.catch()\n\nPromise.prototype.catch方法是.then(null, rejection)或.then(undefined, rejection)的别名，用于指定发生错误时的回调函数。\n\ngetJSON('/posts.json').then(function(posts) {\n  // ...\n}).catch(function(error) {\n  // 处理 getJSON 和 前一个回调函数运行时发生的错误\n  console.log('发生错误！', error);\n});\n\n\n1\n2\n3\n4\n5\n6\n\n\n上面代码中，getJSON方法返回一个 Promise 对象，如果该对象状态变为resolved，则会调用then方法指定的回调函数；如果异步操作抛出错误，状态就会变为rejected，就会调用catch方法指定的回调函数，处理这个错误。另外，then方法指定的回调函数，如果运行中抛出错误，也会被catch方法捕获。\n\np.then((val) => console.log('fulfilled:', val))\n  .catch((err) => console.log('rejected', err));\n\n// 等同于\np.then((val) => console.log('fulfilled:', val))\n  .then(null, (err) => console.log(\"rejected:\", err));\n\n\n1\n2\n3\n4\n5\n6\n\n\n下面是一个例子。\n\nconst promise = new Promise(function(resolve, reject) {\n  throw new Error('test');\n});\npromise.catch(function(error) {\n  console.log(error);\n});\n// Error: test\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n上面代码中，promise抛出一个错误，就被catch方法指定的回调函数捕获。注意，上面的写法与下面两种写法是等价的。\n\n// 写法一\nconst promise = new Promise(function(resolve, reject) {\n  try {\n    throw new Error('test');\n  } catch(e) {\n    reject(e);\n  }\n});\npromise.catch(function(error) {\n  console.log(error);\n});\n\n// 写法二\nconst promise = new Promise(function(resolve, reject) {\n  reject(new Error('test'));\n});\npromise.catch(function(error) {\n  console.log(error);\n});\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\n比较上面两种写法，可以发现reject方法的作用，等同于抛出错误。\n\n如果 Promise 状态已经变成resolved，再抛出错误是无效的。\n\nconst promise = new Promise(function(resolve, reject) {\n  resolve('ok');\n  throw new Error('test');\n});\npromise\n  .then(function(value) { console.log(value) })\n  .catch(function(error) { console.log(error) });\n// ok\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n上面代码中，Promise 在resolve语句后面，再抛出错误，不会被捕获，等于没有抛出。因为 Promise 的状态一旦改变，就永久保持该状态，不会再变了。\n\nPromise 对象的错误具有“冒泡”性质，会一直向后传递，直到被捕获为止。也就是说，错误总是会被下一个catch语句捕获。\n\ngetJSON('/post/1.json').then(function(post) {\n  return getJSON(post.commentURL);\n}).then(function(comments) {\n  // some code\n}).catch(function(error) {\n  // 处理前面三个Promise产生的错误\n});\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n上面代码中，一共有三个 Promise 对象：一个由getJSON产生，两个由then产生。它们之中任何一个抛出的错误，都会被最后一个catch捕获。\n\n一般来说，不要在then方法里面定义 Reject 状态的回调函数（即then的第二个参数），总是使用catch方法。\n\n// bad\npromise\n  .then(function(data) {\n    // success\n  }, function(err) {\n    // error\n  });\n\n// good\npromise\n  .then(function(data) { //cb\n    // success\n  })\n  .catch(function(err) {\n    // error\n  });\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n上面代码中，第二种写法要好于第一种写法，理由是第二种写法可以捕获前面then方法执行中的错误，也更接近同步的写法（try/catch）。因此，建议总是使用catch方法，而不使用then方法的第二个参数。\n\n跟传统的try/catch代码块不同的是，如果没有使用catch方法指定错误处理的回调函数，Promise 对象抛出的错误不会传递到外层代码，即不会有任何反应。\n\nconst someAsyncThing = function() {\n  return new Promise(function(resolve, reject) {\n    // 下面一行会报错，因为x没有声明\n    resolve(x + 2);\n  });\n};\n\nsomeAsyncThing().then(function() {\n  console.log('everything is great');\n});\n\nsetTimeout(() => { console.log(123) }, 2000);\n// Uncaught (in promise) ReferenceError: x is not defined // 报错却不退出进程\n// 123\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n上面代码中，someAsyncThing函数产生的 Promise 对象，内部有语法错误。浏览器运行到这一行，会打印出错误提示ReferenceError: x is not defined，但是不会退出进程、终止脚本执行，2 秒之后还是会输出123。这就是说，Promise 内部的错误不会影响到 Promise 外部的代码，通俗的说法就是“Promise 会吃掉错误”。\n\n这个脚本放在服务器执行，退出码就是0（即表示执行成功）。不过，Node 有一个unhandledRejection事件，专门监听未捕获的reject错误，上面的脚本会触发这个事件的监听函数，可以在监听函数里面抛出错误。\n\nprocess.on('unhandledRejection', function (err, p) {\n  throw err;\n});\n\n\n1\n2\n3\n\n\n上面代码中，unhandledRejection事件的监听函数有两个参数，第一个是错误对象，第二个是报错的 Promise 实例，它可以用来了解发生错误的环境信息。\n\n注意，Node 有计划在未来废除unhandledRejection事件。如果 Promise 内部有未捕获的错误，会直接终止进程，并且进程的退出码不为 0。\n\n再看下面的例子。\n\nconst promise = new Promise(function (resolve, reject) {\n  resolve('ok');\n  setTimeout(function () { throw new Error('test') }, 0)\n});\npromise.then(function (value) { console.log(value) });\n// ok\n// Uncaught Error: test\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n上面代码中，Promise 指定在下一轮“事件循环”再抛出错误。到了那个时候，Promise 的运行已经结束了，所以这个错误是在 Promise 函数体外抛出的，会冒泡到最外层，成了未捕获的错误。\n\n一般总是建议，Promise 对象后面要跟catch方法，这样可以处理 Promise 内部发生的错误。catch方法返回的还是一个 Promise 对象，因此后面还可以接着调用then方法。\n\nconst someAsyncThing = function() {\n  return new Promise(function(resolve, reject) {\n    // 下面一行会报错，因为x没有声明\n    resolve(x + 2);\n  });\n};\n\nsomeAsyncThing()\n.catch(function(error) {\n  console.log('oh no', error);\n})\n.then(function() {\n  console.log('carry on');\n});\n// oh no [ReferenceError: x is not defined]\n// carry on\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n上面代码运行完catch方法指定的回调函数，会接着运行后面那个then方法指定的回调函数。如果没有报错，则会跳过catch方法。\n\nPromise.resolve()\n.catch(function(error) {\n  console.log('oh no', error);\n})\n.then(function() {\n  console.log('carry on');\n});\n// carry on\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n上面的代码因为没有报错，跳过了catch方法，直接执行后面的then方法。此时，要是then方法里面报错，就与前面的catch无关了。\n\ncatch方法之中，还能再抛出错误。\n\nconst someAsyncThing = function() {\n  return new Promise(function(resolve, reject) {\n    // 下面一行会报错，因为x没有声明\n    resolve(x + 2);\n  });\n};\n\nsomeAsyncThing().then(function() {\n  return someOtherAsyncThing();\n}).catch(function(error) {\n  console.log('oh no', error);\n  // 下面一行会报错，因为 y 没有声明\n  y + 2;\n}).then(function() {\n  console.log('carry on');\n});\n// oh no [ReferenceError: x is not defined]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n上面代码中，catch方法抛出一个错误，因为后面没有别的catch方法了，导致这个错误不会被捕获，也不会传递到外层。如果改写一下，结果就不一样了。\n\nsomeAsyncThing().then(function() {\n  return someOtherAsyncThing();\n}).catch(function(error) {\n  console.log('oh no', error);\n  // 下面一行会报错，因为y没有声明\n  y + 2;\n}).catch(function(error) {\n  console.log('carry on', error);\n});\n// oh no [ReferenceError: x is not defined]\n// carry on [ReferenceError: y is not defined]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n上面代码中，第二个catch方法用来捕获前一个catch方法抛出的错误。\n\n\n# Promise.prototype.finally()\n\nfinally方法用于指定不管 Promise 对象最后状态如何，都会执行的操作。该方法是 ES2018 引入标准的。\n\npromise\n.then(result => {···})\n.catch(error => {···})\n.finally(() => {···});\n\n\n1\n2\n3\n4\n\n\n上面代码中，不管promise最后的状态，在执行完then或catch指定的回调函数以后，都会执行finally方法指定的回调函数。\n\n下面是一个例子，服务器使用 Promise 处理请求，然后使用finally方法关掉服务器。\n\nserver.listen(port)\n  .then(function () {\n    // ...\n  })\n  .finally(server.stop);\n\n\n1\n2\n3\n4\n5\n\n\nfinally方法的回调函数不接受任何参数，这意味着没有办法知道，前面的 Promise 状态到底是fulfilled还是rejected。这表明，finally方法里面的操作，应该是与状态无关的，不依赖于 Promise 的执行结果。\n\nfinally本质上是then方法的特例。\n\npromise\n.finally(() => {\n  // 语句\n});\n\n// 等同于\npromise\n.then(\n  result => {\n    // 语句\n    return result;\n  },\n  error => {\n    // 语句\n    throw error;\n  }\n);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n上面代码中，如果不使用finally方法，同样的语句需要为成功和失败两种情况各写一次。有了finally方法，则只需要写一次。\n\n它的实现也很简单。\n\nPromise.prototype.finally = function (callback) {\n  let P = this.constructor;\n  return this.then(\n    value  => P.resolve(callback()).then(() => value),\n    reason => P.resolve(callback()).then(() => { throw reason })\n  );\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n上面代码中，不管前面的 Promise 是fulfilled还是rejected，都会执行回调函数callback。\n\n从上面的实现还可以看到，finally方法总是会返回原来的值。\n\n// resolve 的值是 undefined\nPromise.resolve(2).then(() => {}, () => {})\n\n// resolve 的值是 2\nPromise.resolve(2).finally(() => {})\n\n// reject 的值是 undefined\nPromise.reject(3).then(() => {}, () => {})\n\n// reject 的值是 3\nPromise.reject(3).finally(() => {})\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n\n# Promise.all()\n\nPromise.all()方法用于将多个 Promise 实例，包装成一个新的 Promise 实例。\n\nconst p = Promise.all([p1, p2, p3]);\n\n\n1\n\n\n上面代码中，Promise.all()方法接受一个数组作为参数，p1、p2、p3都是 Promise 实例，如果不是，就会先调用下面讲到的Promise.resolve方法，将参数转为 Promise 实例，再进一步处理。另外，Promise.all()方法的参数可以不是数组，但必须具有 Iterator 接口，且返回的每个成员都是 Promise 实例。\n\np的状态由p1、p2、p3决定，分成两种情况。\n\n（1）只有p1、p2、p3的状态都变成fulfilled，p的状态才会变成fulfilled，此时p1、p2、p3的返回值组成一个数组，传递给p的回调函数。\n\n（2）只要p1、p2、p3之中有一个被rejected，p的状态就变成rejected，此时第一个被reject的实例的返回值，会传递给p的回调函数。\n\n下面是一个具体的例子。\n\n// 生成一个Promise对象的数组\nconst promises = [2, 3, 5, 7, 11, 13].map(function (id) {\n  return getJSON('/post/' + id + \".json\");\n});\n\nPromise.all(promises).then(function (posts) {\n  // ...\n}).catch(function(reason){\n  // ...\n});\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n上面代码中，promises是包含 6 个 Promise 实例的数组，只有这 6 个实例的状态都变成fulfilled，或者其中有一个变为rejected，才会调用Promise.all方法后面的回调函数。\n\n下面是另一个例子。\n\nconst databasePromise = connectDatabase();\n\nconst booksPromise = databasePromise\n  .then(findAllBooks);\n\nconst userPromise = databasePromise\n  .then(getCurrentUser);\n\nPromise.all([\n  booksPromise,\n  userPromise\n])\n.then(([books, user]) => pickTopRecommendations(books, user));\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n上面代码中，booksPromise和userPromise是两个异步操作，只有等到它们的结果都返回了，才会触发pickTopRecommendations这个回调函数。\n\n注意，如果作为参数的 Promise 实例，自己定义了catch方法，那么它一旦被rejected，并不会触发Promise.all()的catch方法。\n\nconst p1 = new Promise((resolve, reject) => {\n  resolve('hello');\n})\n.then(result => result)\n.catch(e => e);\n\nconst p2 = new Promise((resolve, reject) => {\n  throw new Error('报错了');\n})\n.then(result => result)\n.catch(e => e);\n\nPromise.all([p1, p2])\n.then(result => console.log(result))\n.catch(e => console.log(e));\n// [\"hello\", Error: 报错了]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n上面代码中，p1会resolved，p2首先会rejected，但是p2有自己的catch方法，该方法返回的是一个新的 Promise 实例，p2指向的实际上是这个实例。该实例执行完catch方法后，也会变成resolved，导致Promise.all()方法参数里面的两个实例都会resolved，因此会调用then方法指定的回调函数，而不会调用catch方法指定的回调函数。\n\n如果p2没有自己的catch方法，就会调用Promise.all()的catch方法。\n\nconst p1 = new Promise((resolve, reject) => {\n  resolve('hello');\n})\n.then(result => result);\n\nconst p2 = new Promise((resolve, reject) => {\n  throw new Error('报错了');\n})\n.then(result => result);\n\nPromise.all([p1, p2])\n.then(result => console.log(result))\n.catch(e => console.log(e));\n// Error: 报错了\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n\n# Promise.race()\n\nPromise.race()方法同样是将多个 Promise 实例，包装成一个新的 Promise 实例。\n\nconst p = Promise.race([p1, p2, p3]);\n\n\n1\n\n\n上面代码中，只要p1、p2、p3之中有一个实例率先改变状态，p的状态就跟着改变。那个率先改变的 Promise 实例的返回值，就传递给p的回调函数。\n\nPromise.race()方法的参数与Promise.all()方法一样，如果不是 Promise 实例，就会先调用下面讲到的Promise.resolve()方法，将参数转为 Promise 实例，再进一步处理。\n\n下面是一个例子，如果指定时间内没有获得结果，就将 Promise 的状态变为reject，否则变为resolve。\n\nconst p = Promise.race([\n  fetch('/resource-that-may-take-a-while'),\n  new Promise(function (resolve, reject) {\n    setTimeout(() => reject(new Error('request timeout')), 5000)\n  })\n]);\n\np\n.then(console.log)\n.catch(console.error);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n上面代码中，如果 5 秒之内fetch方法无法返回结果，变量p的状态就会变为rejected，从而触发catch方法指定的回调函数。\n\n\n# Promise.allSettled()\n\nPromise.allSettled()方法接受一组 Promise 实例作为参数，包装成一个新的 Promise 实例。只有等到所有这些参数实例都返回结果，不管是fulfilled还是rejected，包装实例才会结束。该方法由 ES2020 引入。\n\nconst promises = [\n  fetch('/api-1'),\n  fetch('/api-2'),\n  fetch('/api-3'),\n];\n\nawait Promise.allSettled(promises);\nremoveLoadingIndicator();\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n上面代码对服务器发出三个请求，等到三个请求都结束，不管请求成功还是失败，加载的滚动图标就会消失。\n\n**该方法返回的新的 Promise 实例，一旦结束，状态总是fulfilled，不会变成rejected。**状态变成fulfilled后，Promise 的监听函数接收到的参数是一个数组，每个成员对应一个传入Promise.allSettled()的 Promise 实例。\n\nconst resolved = Promise.resolve(42);\nconst rejected = Promise.reject(-1);\n\nconst allSettledPromise = Promise.allSettled([resolved, rejected]);\n\nallSettledPromise.then(function (results) {\n  console.log(results);\n});\n// [\n//    { status: 'fulfilled', value: 42 },\n//    { status: 'rejected', reason: -1 }\n// ]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n上面代码中，Promise.allSettled()的返回值allSettledPromise，状态只可能变成fulfilled。它的监听函数接收到的参数是数组results。该数组的每个成员都是一个对象，对应传入Promise.allSettled()的两个 Promise 实例。每个对象都有status属性，该属性的值只可能是字符串fulfilled或字符串rejected。fulfilled时，对象有value属性，rejected时有reason属性，对应两种状态的返回值。\n\n下面是返回值用法的例子。\n\nconst promises = [ fetch('index.html'), fetch('https://does-not-exist/') ];\nconst results = await Promise.allSettled(promises);\n\n// 过滤出成功的请求\nconst successfulPromises = results.filter(p => p.status === 'fulfilled');\n\n// 过滤出失败的请求，并输出原因\nconst errors = results\n  .filter(p => p.status === 'rejected')\n  .map(p => p.reason);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n有时候，我们不关心异步操作的结果，只关心这些操作有没有结束。这时，Promise.allSettled()方法就很有用。如果没有这个方法，想要确保所有操作都结束，就很麻烦。Promise.all()方法无法做到这一点。\n\nconst urls = [ /* ... */ ];\nconst requests = urls.map(x => fetch(x));\n\ntry {\n  await Promise.all(requests);\n  console.log('所有请求都成功。');\n} catch {\n  console.log('至少一个请求失败，其他请求可能还没结束。');\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n上面代码中，Promise.all()无法确定所有请求都结束。想要达到这个目的，写起来很麻烦，有了Promise.allSettled()，这就很容易了。\n\n\n# Promise.any()\n\n**Promise.any()方法接受一组 Promise 实例作为参数，包装成一个新的 Promise 实例。只要参数实例有一个变成fulfilled状态，包装实例就会变成fulfilled状态；如果所有参数实例都变成rejected状态，包装实例就会变成rejected状态。**该方法目前是一个第三阶段的提案 。\n\nPromise.any()跟Promise.race()方法很像，只有一点不同，就是不会因为某个 Promise 变成rejected状态而结束。\n\nconst promises = [\n  fetch('/endpoint-a').then(() => 'a'),\n  fetch('/endpoint-b').then(() => 'b'),\n  fetch('/endpoint-c').then(() => 'c'),\n];\ntry {\n  const first = await Promise.any(promises);\n  console.log(first);\n} catch (error) {\n  console.log(error);\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n上面代码中，Promise.any()方法的参数数组包含三个 Promise 操作。其中只要有一个变成fulfilled，Promise.any()返回的 Promise 对象就变成fulfilled。如果所有三个操作都变成rejected，那么就会await命令就会抛出错误。\n\nPromise.any()抛出的错误，不是一个一般的错误，而是一个 AggregateError 实例。它相当于一个数组，每个成员对应一个被rejected的操作所抛出的错误。下面是 AggregateError 的实现示例。\n\nnew AggregateError() extends Array -> AggregateError\n\nconst err = new AggregateError();\nerr.push(new Error(\"first error\"));\nerr.push(new Error(\"second error\"));\nthrow err;\n\n\n1\n2\n3\n4\n5\n6\n\n\n捕捉错误时，如果不用try...catch结构和 await 命令，可以像下面这样写。\n\nPromise.any(promises).then(\n  (first) => {\n    // Any of the promises was fulfilled.\n  },\n  (error) => {\n    // All of the promises were rejected.\n  }\n);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n下面是一个例子。\n\nvar resolved = Promise.resolve(42);\nvar rejected = Promise.reject(-1);\nvar alsoRejected = Promise.reject(Infinity);\n\nPromise.any([resolved, rejected, alsoRejected]).then(function (result) {\n  console.log(result); // 42\n});\n\nPromise.any([rejected, alsoRejected]).catch(function (results) {\n  console.log(results); // [-1, Infinity]\n});\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n\n# Promise.resolve()\n\n有时需要将现有对象转为 Promise 对象，Promise.resolve()方法就起到这个作用。\n\nconst jsPromise = Promise.resolve($.ajax('/whatever.json'));\n\n\n1\n\n\n上面代码将 jQuery 生成的deferred对象，转为一个新的 Promise 对象。\n\nPromise.resolve()等价于下面的写法。\n\nPromise.resolve('foo')\n// 等价于\nnew Promise(resolve => resolve('foo'))\n\n\n1\n2\n3\n\n\nPromise.resolve方法的参数分成四种情况。\n\n（1）参数是一个 Promise 实例\n\n如果参数是 Promise 实例，那么Promise.resolve将不做任何修改、原封不动地返回这个实例。\n\n（2）参数是一个thenable对象\n\nthenable对象指的是具有then方法的对象，比如下面这个对象。\n\nlet thenable = {\n  then: function(resolve, reject) {\n    resolve(42);\n  }\n};\n\n\n1\n2\n3\n4\n5\n\n\nPromise.resolve方法会将这个对象转为 Promise 对象，然后就立即执行thenable对象的then方法。\n\nlet thenable = {\n  then: function(resolve, reject) {\n    resolve(42);\n  }\n};\n\nlet p1 = Promise.resolve(thenable);\np1.then(function(value) {\n  console.log(value);  // 42\n});\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n上面代码中，thenable对象的then方法执行后，对象p1的状态就变为resolved，从而立即执行最后那个then方法指定的回调函数，输出 42。\n\n（3）参数不是具有then方法的对象，或根本就不是对象\n\n如果参数是一个原始值，或者是一个不具有then方法的对象，则Promise.resolve方法返回一个新的 Promise 对象，状态为resolved。\n\nconst p = Promise.resolve('Hello');\n\np.then(function (s){\n  console.log(s)\n});\n// Hello\n\n\n1\n2\n3\n4\n5\n6\n\n\n上面代码生成一个新的 Promise 对象的实例p。由于字符串Hello不属于异步操作（判断方法是字符串对象不具有 then 方法），返回 Promise 实例的状态从一生成就是resolved，所以回调函数会立即执行。Promise.resolve方法的参数，会同时传给回调函数。\n\n（4）不带有任何参数\n\nPromise.resolve()方法允许调用时不带参数，直接返回一个resolved状态的 Promise 对象。\n\n所以，如果希望得到一个 Promise 对象，比较方便的方法就是直接调用Promise.resolve()方法。\n\nconst p = Promise.resolve();\n\np.then(function () {\n  // ...\n});\n\n\n1\n2\n3\n4\n5\n\n\n上面代码的变量p就是一个 Promise 对象。\n\n需要注意的是，立即resolve()的 Promise 对象，是在本轮“事件循环”（event loop）的结束时执行，而不是在下一轮“事件循环”的开始时。\n\nsetTimeout(function () {\n  console.log('three');\n}, 0);\n\nPromise.resolve().then(function () {\n  console.log('two');\n});\n\nconsole.log('one');\n\n// one\n// two\n// three\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n上面代码中，setTimeout(fn, 0)在下一轮“事件循环”开始时执行，Promise.resolve()在本轮“事件循环”结束时执行，console.log('one')则是立即执行，因此最先输出。\n\n\n# Promise.reject()\n\nPromise.reject(reason)方法也会返回一个新的 Promise 实例，该实例的状态为rejected。\n\nconst p = Promise.reject('出错了');\n// 等同于\nconst p = new Promise((resolve, reject) => reject('出错了'))\n\np.then(null, function (s) {\n  console.log(s)\n});\n// 出错了\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n上面代码生成一个 Promise 对象的实例p，状态为rejected，回调函数会立即执行。\n\n注意，Promise.reject()方法的参数，会原封不动地作为reject的理由，变成后续方法的参数。这一点与Promise.resolve方法不一致。\n\nconst thenable = {\n  then(resolve, reject) {\n    reject('出错了');\n  }\n};\n\nPromise.reject(thenable)\n.catch(e => {\n  console.log(e === thenable)\n})\n// true\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n上面代码中，Promise.reject方法的参数是一个thenable对象，执行以后，后面catch方法的参数不是reject抛出的“出错了”这个字符串，而是thenable对象。\n\n\n# 应用\n\n\n# 加载图片\n\n我们可以将图片的加载写成一个Promise，一旦加载完成，Promise的状态就发生变化。\n\nconst preloadImage = function (path) {\n  return new Promise(function (resolve, reject) {\n    const image = new Image();\n    image.onload  = resolve;\n    image.onerror = reject;\n    image.src = path;\n  });\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# Generator 函数与 Promise 的结合\n\n使用 Generator 函数管理流程，遇到异步操作的时候，通常返回一个Promise对象。\n\nfunction getFoo () {\n  return new Promise(function (resolve, reject){\n    resolve('foo');\n  });\n}\n\nconst g = function* () {\n  try {\n    const foo = yield getFoo();\n    console.log(foo);\n  } catch (e) {\n    console.log(e);\n  }\n};\n\nfunction run (generator) {\n  const it = generator();\n\n  function go(result) {\n    if (result.done) return result.value;\n\n    return result.value.then(function (value) {\n      return go(it.next(value));\n    }, function (error) {\n      return go(it.throw(error));\n    });\n  }\n\n  go(it.next());\n}\n\nrun(g);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n\n\n上面代码的 Generator 函数g之中，有一个异步操作getFoo，它返回的就是一个Promise对象。函数run用来处理这个Promise对象，并调用下一个next方法。\n\n\n# Promise.try()\n\n实际开发中，经常遇到一种情况：不知道或者不想区分，函数f是同步函数还是异步操作，但是想用 Promise 来处理它。因为这样就可以不管f是否包含异步操作，都用then方法指定下一步流程，用catch方法处理f抛出的错误。一般就会采用下面的写法。\n\nPromise.resolve().then(f)\n\n\n1\n\n\n上面的写法有一个缺点，就是如果f是同步函数，那么它会在本轮事件循环的末尾执行。\n\nconst f = () => console.log('now');\nPromise.resolve().then(f);\nconsole.log('next');\n// next\n// now\n\n\n1\n2\n3\n4\n5\n\n\n上面代码中，函数f是同步的，但是用 Promise 包装了以后，就变成异步执行了。\n\n那么有没有一种方法，让同步函数同步执行，异步函数异步执行，并且让它们具有统一的 API 呢？回答是可以的，并且还有两种写法。第一种写法是用async函数来写。\n\nconst f = () => console.log('now');\n(async () => f())();\nconsole.log('next');\n// now\n// next\n\n\n1\n2\n3\n4\n5\n\n\n上面代码中，第二行是一个立即执行的匿名函数，会立即执行里面的async函数，因此如果f是同步的，就会得到同步的结果；如果f是异步的，就可以用then指定下一步，就像下面的写法。\n\n(async () => f())()\n.then(...)\n\n\n1\n2\n\n\n需要注意的是，async () => f()会吃掉f()抛出的错误。所以，如果想捕获错误，要使用promise.catch方法。\n\n(async () => f())()\n.then(...)\n.catch(...)\n\n\n1\n2\n3\n\n\n第二种写法是使用new Promise()。\n\nconst f = () => console.log('now');\n(\n  () => new Promise(\n    resolve => resolve(f())\n  )\n)();\nconsole.log('next');\n// now\n// next\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n上面代码也是使用立即执行的匿名函数，执行new Promise()。这种情况下，同步函数也是同步执行的。\n\n鉴于这是一个很常见的需求，所以现在有一个提案，提供Promise.try方法替代上面的写法。\n\nconst f = () => console.log('now');\nPromise.try(f);\nconsole.log('next');\n// now\n// next\n\n\n1\n2\n3\n4\n5\n\n\n事实上，Promise.try存在已久，Promise 库Bluebird、Q和when，早就提供了这个方法。\n\n由于Promise.try为所有操作提供了统一的处理机制，所以如果想用then方法管理流程，最好都用Promise.try包装一下。这样有许多好处，其中一点就是可以更好地管理异常。\n\nfunction getUsername(userId) {\n  return database.users.get({id: userId})\n  .then(function(user) {\n    return user.name;\n  });\n}\n\n\n1\n2\n3\n4\n5\n6\n\n\n上面代码中，database.users.get()返回一个 Promise 对象，如果抛出异步错误，可以用catch方法捕获，就像下面这样写。\n\ndatabase.users.get({id: userId})\n.then(...)\n.catch(...)\n\n\n1\n2\n3\n\n\n但是database.users.get()可能还会抛出同步错误（比如数据库连接错误，具体要看实现方法），这时你就不得不用try...catch去捕获。\n\ntry {\n  database.users.get({id: userId})\n  .then(...)\n  .catch(...)\n} catch (e) {\n  // ...\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n上面这样的写法就很笨拙了，这时就可以统一用promise.catch()捕获所有同步和异步的错误。\n\nPromise.try(() => database.users.get({id: userId}))\n  .then(...)\n  .catch(...)\n\n\n1\n2\n3\n\n\n事实上，Promise.try就是模拟try代码块，就像promise.catch模拟的是catch代码块。",normalizedContent:"# promise 对象\n\n\n# promise 的含义\n\npromise 是异步编程的一种解决方案，比传统的解决方案——回调函数和事件——更合理和更强大。它由社区最早提出和实现，es6 将其写进了语言标准，统一了用法，原生提供了promise对象。 所谓promise，简单说就是一个容器，里面保存着某个未来才会结束的事件（通常是一个异步操作）的结果。从语法上说，promise 是一个对象，从它可以获取异步操作的消息。promise 提供统一的 api，各种异步操作都可以用同样的方法进行处理。\n\npromise对象有以下两个特点。\n\n（1）对象的状态不受外界影响。promise对象代表一个异步操作，有三种状态：pending（进行中）、fulfilled（已成功）和rejected（已失败）。只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态。这也是promise这个名字的由来，它的英语意思就是“承诺”，表示其他手段无法改变。\n\n（2）一旦状态改变，就不会再变，任何时候都可以得到这个结果。promise对象的状态改变，只有两种可能：从pending变为fulfilled和从pending变为rejected。只要这两种情况发生，状态就凝固了，不会再变了，会一直保持这个结果，这时就称为 resolved（已定型）。如果改变已经发生了，你再对promise对象添加回调函数，也会立即得到这个结果。这与事件（event）完全不同，事件的特点是，如果你错过了它，再去监听，是得不到结果的。\n\n注意，为了行文方便，本章后面的resolved统一只指fulfilled状态，不包含rejected状态。\n\n有了promise对象，就可以将异步操作以同步操作的流程表达出来，避免了层层嵌套的回调函数。此外，promise对象提供统一的接口，使得控制异步操作更加容易。\n\npromise也有一些缺点。首先，无法取消promise，一旦新建它就会立即执行，无法中途取消。其次，如果不设置回调函数，promise内部抛出的错误，不会反应到外部。第三，当处于pending状态时，无法得知目前进展到哪一个阶段（刚刚开始还是即将完成）。\n\n如果某些事件不断地反复发生，一般来说，使用 stream 模式是比部署promise更好的选择。\n\n\n# 基本用法\n\nes6 规定，promise对象是一个构造函数，用来生成promise实例。\n\n下面代码创造了一个promise实例。\n\nconst promise = new promise(function(resolve, reject) {\n  // ... some code\n\n  if (/* 异步操作成功 */){\n    resolve(value);\n  } else {\n    reject(error);\n  }\n});\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\npromise构造函数接受一个函数作为参数，该函数的两个参数分别是resolve和reject。它们是两个函数，由 javascript 引擎提供，不用自己部署。\n\nresolve函数的作用是，将promise对象的状态从“未完成”变为“成功”（即从 pending 变为 resolved），在异步操作成功时调用，并将异步操作的结果，作为参数传递出去；reject函数的作用是，将promise对象的状态从“未完成”变为“失败”（即从 pending 变为 rejected），在异步操作失败时调用，并将异步操作报出的错误，作为参数传递出去。\n\npromise实例生成以后，可以用then方法分别指定resolved状态和rejected状态的回调函数。\n\npromise.then(function(value) {\n  // success\n}, function(error) {\n  // failure\n});\n\n\n1\n2\n3\n4\n5\n\n\nthen方法可以接受两个回调函数作为参数。第一个回调函数是promise对象的状态变为resolved时调用，第二个回调函数是promise对象的状态变为rejected时调用。其中，第二个函数是可选的，不一定要提供。这两个函数都接受promise对象传出的值作为参数。\n\n下面是一个promise对象的简单例子。\n\nfunction timeout(ms) {\n  return new promise((resolve, reject) => {\n    settimeout(resolve, ms, 'done');\n  });\n}\n\ntimeout(100).then((value) => {\n  console.log(value);\n});\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n上面代码中，timeout方法返回一个promise实例，表示一段时间以后才会发生的结果。过了指定的时间（ms参数）以后，promise实例的状态变为resolved，就会触发then方法绑定的回调函数。\n\npromise 新建后就会立即执行。\n\nlet promise = new promise(function(resolve, reject) {\n  console.log('promise');\n  resolve();\n});\n\npromise.then(function() {\n  console.log('resolved.');\n});\n\nconsole.log('hi!');\n\n// promise\n// hi!\n// resolved\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n上面代码中，promise 新建后立即执行，所以首先输出的是promise。然后，then方法指定的回调函数，将在当前脚本所有同步任务执行完才会执行，所以resolved最后输出。\n\n下面是异步加载图片的例子。\n\nfunction loadimageasync(url) {\n  return new promise(function(resolve, reject) {\n    const image = new image();\n\n    image.onload = function() {\n      resolve(image);\n    };\n\n    image.onerror = function() {\n      reject(new error('could not load image at ' + url));\n    };\n\n    image.src = url;\n  });\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n上面代码中，使用promise包装了一个图片加载的异步操作。如果加载成功，就调用resolve方法，否则就调用reject方法。\n\n下面是一个用promise对象实现的 ajax 操作的例子。\n\nconst getjson = function(url) {\n  const promise = new promise(function(resolve, reject){\n    const handler = function() {\n      if (this.readystate !== 4) {\n        return;\n      }\n      if (this.status === 200) {\n        resolve(this.response);\n      } else {\n        reject(new error(this.statustext));\n      }\n    };\n    const client = new xmlhttprequest();\n    client.open(\"get\", url);\n    client.onreadystatechange = handler;\n    client.responsetype = \"json\";\n    client.setrequestheader(\"accept\", \"application/json\");\n    client.send();\n\n  });\n\n  return promise;\n};\n\ngetjson(\"/posts.json\").then(function(json) {\n  console.log('contents: ' + json);\n}, function(error) {\n  console.error('出错了', error);\n});\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n\n\n上面代码中，getjson是对 xmlhttprequest 对象的封装，用于发出一个针对 json 数据的 http 请求，并且返回一个promise对象。需要注意的是，在getjson内部，resolve函数和reject函数调用时，都带有参数。\n\n如果调用resolve函数和reject函数时带有参数，那么它们的参数会被传递给回调函数。reject函数的参数通常是error对象的实例，表示抛出的错误；resolve函数的参数除了正常的值以外，还可能是另一个 promise 实例，比如像下面这样。\n\nconst p1 = new promise(function (resolve, reject) {\n  // ...\n});\n\nconst p2 = new promise(function (resolve, reject) {\n  // ...\n  resolve(p1);\n})\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n上面代码中，p1和p2都是 promise 的实例，但是p2的resolve方法将p1作为参数，即一个异步操作的结果是返回另一个异步操作。\n\n注意，这时p1的状态就会传递给p2，也就是说，p1的状态决定了p2的状态。如果p1的状态是pending，那么p2的回调函数就会等待p1的状态改变；如果p1的状态已经是resolved或者rejected，那么p2的回调函数将会立刻执行。\n\nconst p1 = new promise(function (resolve, reject) {\n  settimeout(() => reject(new error('fail')), 3000)\n})\n\nconst p2 = new promise(function (resolve, reject) {\n  settimeout(() => resolve(p1), 1000)\n})\n\np2\n  .then(result => console.log(result))\n  .catch(error => console.log(error))\n// error: fail\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n上面代码中，p1是一个 promise，3 秒之后变为rejected。p2的状态在 1 秒之后改变，resolve方法返回的是p1。由于p2返回的是另一个 promise，导致p2自己的状态无效了，由p1的状态决定p2的状态。所以，后面的then语句都变成针对后者（p1）。又过了 2 秒，p1变为rejected，导致触发catch方法指定的回调函数。\n\n注意，调用resolve或reject并不会终结 promise 的参数函数的执行。\n\nnew promise((resolve, reject) => {\n  resolve(1);\n  console.log(2);\n}).then(r => {\n  console.log(r);\n});\n// 2\n// 1\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n上面代码中，调用resolve(1)以后，后面的console.log(2)还是会执行，并且会首先打印出来。这是因为立即 resolved 的 promise 是在本轮事件循环的末尾执行，总是晚于本轮循环的同步任务。\n\n一般来说，调用resolve或reject以后，promise 的使命就完成了，后继操作应该放到then方法里面，而不应该直接写在resolve或reject的后面。所以，最好在它们前面加上return语句，这样就不会有意外。\n\nnew promise((resolve, reject) => {\n  return resolve(1);\n  // 后面的语句不会执行\n  console.log(2);\n})\n\n\n1\n2\n3\n4\n5\n\n\n\n# promise.prototype.then()\n\npromise 实例具有then方法，也就是说，then方法是定义在原型对象promise.prototype上的。它的作用是为 promise 实例添加状态改变时的回调函数。前面说过，then方法的第一个参数是resolved状态的回调函数，第二个参数（可选）是rejected状态的回调函数。\n\nthen方法返回的是一个新的promise实例（注意，不是原来那个promise实例）。因此可以采用链式写法，即then方法后面再调用另一个then方法。\n\ngetjson(\"/posts.json\").then(function(json) {\n  return json.post;\n}).then(function(post) { // 这里的post是前面一个then返回的参数\n  // ...\n});\n\n\n1\n2\n3\n4\n5\n\n\n上面的代码使用then方法，依次指定了两个回调函数。第一个回调函数完成以后，会将返回结果作为参数，传入第二个回调函数。\n\n采用链式的then，可以指定一组按照次序调用的回调函数。这时，前一个回调函数，有可能返回的还是一个promise对象（即有异步操作），这时后一个回调函数，就会等待该promise对象的状态发生变化，才会被调用。\n\ngetjson(\"/post/1.json\").then(function(post) {\n  return getjson(post.commenturl);\n}).then(function (comments) {\n  console.log(\"resolved: \", comments);\n}, function (err){\n  console.log(\"rejected: \", err);\n});\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n上面代码中，第一个then方法指定的回调函数，返回的是另一个promise对象。这时，第二个then方法指定的回调函数，就会等待这个新的promise对象状态发生变化。如果变为resolved，就调用第一个回调函数，如果状态变为rejected，就调用第二个回调函数。\n\n如果采用箭头函数，上面的代码可以写得更简洁。\n\ngetjson(\"/post/1.json\").then(\n  post => getjson(post.commenturl)\n).then(\n  comments => console.log(\"resolved: \", comments),\n  err => console.log(\"rejected: \", err)\n);\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# promise.prototype.catch()\n\npromise.prototype.catch方法是.then(null, rejection)或.then(undefined, rejection)的别名，用于指定发生错误时的回调函数。\n\ngetjson('/posts.json').then(function(posts) {\n  // ...\n}).catch(function(error) {\n  // 处理 getjson 和 前一个回调函数运行时发生的错误\n  console.log('发生错误！', error);\n});\n\n\n1\n2\n3\n4\n5\n6\n\n\n上面代码中，getjson方法返回一个 promise 对象，如果该对象状态变为resolved，则会调用then方法指定的回调函数；如果异步操作抛出错误，状态就会变为rejected，就会调用catch方法指定的回调函数，处理这个错误。另外，then方法指定的回调函数，如果运行中抛出错误，也会被catch方法捕获。\n\np.then((val) => console.log('fulfilled:', val))\n  .catch((err) => console.log('rejected', err));\n\n// 等同于\np.then((val) => console.log('fulfilled:', val))\n  .then(null, (err) => console.log(\"rejected:\", err));\n\n\n1\n2\n3\n4\n5\n6\n\n\n下面是一个例子。\n\nconst promise = new promise(function(resolve, reject) {\n  throw new error('test');\n});\npromise.catch(function(error) {\n  console.log(error);\n});\n// error: test\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n上面代码中，promise抛出一个错误，就被catch方法指定的回调函数捕获。注意，上面的写法与下面两种写法是等价的。\n\n// 写法一\nconst promise = new promise(function(resolve, reject) {\n  try {\n    throw new error('test');\n  } catch(e) {\n    reject(e);\n  }\n});\npromise.catch(function(error) {\n  console.log(error);\n});\n\n// 写法二\nconst promise = new promise(function(resolve, reject) {\n  reject(new error('test'));\n});\npromise.catch(function(error) {\n  console.log(error);\n});\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\n比较上面两种写法，可以发现reject方法的作用，等同于抛出错误。\n\n如果 promise 状态已经变成resolved，再抛出错误是无效的。\n\nconst promise = new promise(function(resolve, reject) {\n  resolve('ok');\n  throw new error('test');\n});\npromise\n  .then(function(value) { console.log(value) })\n  .catch(function(error) { console.log(error) });\n// ok\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n上面代码中，promise 在resolve语句后面，再抛出错误，不会被捕获，等于没有抛出。因为 promise 的状态一旦改变，就永久保持该状态，不会再变了。\n\npromise 对象的错误具有“冒泡”性质，会一直向后传递，直到被捕获为止。也就是说，错误总是会被下一个catch语句捕获。\n\ngetjson('/post/1.json').then(function(post) {\n  return getjson(post.commenturl);\n}).then(function(comments) {\n  // some code\n}).catch(function(error) {\n  // 处理前面三个promise产生的错误\n});\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n上面代码中，一共有三个 promise 对象：一个由getjson产生，两个由then产生。它们之中任何一个抛出的错误，都会被最后一个catch捕获。\n\n一般来说，不要在then方法里面定义 reject 状态的回调函数（即then的第二个参数），总是使用catch方法。\n\n// bad\npromise\n  .then(function(data) {\n    // success\n  }, function(err) {\n    // error\n  });\n\n// good\npromise\n  .then(function(data) { //cb\n    // success\n  })\n  .catch(function(err) {\n    // error\n  });\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n上面代码中，第二种写法要好于第一种写法，理由是第二种写法可以捕获前面then方法执行中的错误，也更接近同步的写法（try/catch）。因此，建议总是使用catch方法，而不使用then方法的第二个参数。\n\n跟传统的try/catch代码块不同的是，如果没有使用catch方法指定错误处理的回调函数，promise 对象抛出的错误不会传递到外层代码，即不会有任何反应。\n\nconst someasyncthing = function() {\n  return new promise(function(resolve, reject) {\n    // 下面一行会报错，因为x没有声明\n    resolve(x + 2);\n  });\n};\n\nsomeasyncthing().then(function() {\n  console.log('everything is great');\n});\n\nsettimeout(() => { console.log(123) }, 2000);\n// uncaught (in promise) referenceerror: x is not defined // 报错却不退出进程\n// 123\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n上面代码中，someasyncthing函数产生的 promise 对象，内部有语法错误。浏览器运行到这一行，会打印出错误提示referenceerror: x is not defined，但是不会退出进程、终止脚本执行，2 秒之后还是会输出123。这就是说，promise 内部的错误不会影响到 promise 外部的代码，通俗的说法就是“promise 会吃掉错误”。\n\n这个脚本放在服务器执行，退出码就是0（即表示执行成功）。不过，node 有一个unhandledrejection事件，专门监听未捕获的reject错误，上面的脚本会触发这个事件的监听函数，可以在监听函数里面抛出错误。\n\nprocess.on('unhandledrejection', function (err, p) {\n  throw err;\n});\n\n\n1\n2\n3\n\n\n上面代码中，unhandledrejection事件的监听函数有两个参数，第一个是错误对象，第二个是报错的 promise 实例，它可以用来了解发生错误的环境信息。\n\n注意，node 有计划在未来废除unhandledrejection事件。如果 promise 内部有未捕获的错误，会直接终止进程，并且进程的退出码不为 0。\n\n再看下面的例子。\n\nconst promise = new promise(function (resolve, reject) {\n  resolve('ok');\n  settimeout(function () { throw new error('test') }, 0)\n});\npromise.then(function (value) { console.log(value) });\n// ok\n// uncaught error: test\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n上面代码中，promise 指定在下一轮“事件循环”再抛出错误。到了那个时候，promise 的运行已经结束了，所以这个错误是在 promise 函数体外抛出的，会冒泡到最外层，成了未捕获的错误。\n\n一般总是建议，promise 对象后面要跟catch方法，这样可以处理 promise 内部发生的错误。catch方法返回的还是一个 promise 对象，因此后面还可以接着调用then方法。\n\nconst someasyncthing = function() {\n  return new promise(function(resolve, reject) {\n    // 下面一行会报错，因为x没有声明\n    resolve(x + 2);\n  });\n};\n\nsomeasyncthing()\n.catch(function(error) {\n  console.log('oh no', error);\n})\n.then(function() {\n  console.log('carry on');\n});\n// oh no [referenceerror: x is not defined]\n// carry on\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n上面代码运行完catch方法指定的回调函数，会接着运行后面那个then方法指定的回调函数。如果没有报错，则会跳过catch方法。\n\npromise.resolve()\n.catch(function(error) {\n  console.log('oh no', error);\n})\n.then(function() {\n  console.log('carry on');\n});\n// carry on\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n上面的代码因为没有报错，跳过了catch方法，直接执行后面的then方法。此时，要是then方法里面报错，就与前面的catch无关了。\n\ncatch方法之中，还能再抛出错误。\n\nconst someasyncthing = function() {\n  return new promise(function(resolve, reject) {\n    // 下面一行会报错，因为x没有声明\n    resolve(x + 2);\n  });\n};\n\nsomeasyncthing().then(function() {\n  return someotherasyncthing();\n}).catch(function(error) {\n  console.log('oh no', error);\n  // 下面一行会报错，因为 y 没有声明\n  y + 2;\n}).then(function() {\n  console.log('carry on');\n});\n// oh no [referenceerror: x is not defined]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n上面代码中，catch方法抛出一个错误，因为后面没有别的catch方法了，导致这个错误不会被捕获，也不会传递到外层。如果改写一下，结果就不一样了。\n\nsomeasyncthing().then(function() {\n  return someotherasyncthing();\n}).catch(function(error) {\n  console.log('oh no', error);\n  // 下面一行会报错，因为y没有声明\n  y + 2;\n}).catch(function(error) {\n  console.log('carry on', error);\n});\n// oh no [referenceerror: x is not defined]\n// carry on [referenceerror: y is not defined]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n上面代码中，第二个catch方法用来捕获前一个catch方法抛出的错误。\n\n\n# promise.prototype.finally()\n\nfinally方法用于指定不管 promise 对象最后状态如何，都会执行的操作。该方法是 es2018 引入标准的。\n\npromise\n.then(result => {···})\n.catch(error => {···})\n.finally(() => {···});\n\n\n1\n2\n3\n4\n\n\n上面代码中，不管promise最后的状态，在执行完then或catch指定的回调函数以后，都会执行finally方法指定的回调函数。\n\n下面是一个例子，服务器使用 promise 处理请求，然后使用finally方法关掉服务器。\n\nserver.listen(port)\n  .then(function () {\n    // ...\n  })\n  .finally(server.stop);\n\n\n1\n2\n3\n4\n5\n\n\nfinally方法的回调函数不接受任何参数，这意味着没有办法知道，前面的 promise 状态到底是fulfilled还是rejected。这表明，finally方法里面的操作，应该是与状态无关的，不依赖于 promise 的执行结果。\n\nfinally本质上是then方法的特例。\n\npromise\n.finally(() => {\n  // 语句\n});\n\n// 等同于\npromise\n.then(\n  result => {\n    // 语句\n    return result;\n  },\n  error => {\n    // 语句\n    throw error;\n  }\n);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n上面代码中，如果不使用finally方法，同样的语句需要为成功和失败两种情况各写一次。有了finally方法，则只需要写一次。\n\n它的实现也很简单。\n\npromise.prototype.finally = function (callback) {\n  let p = this.constructor;\n  return this.then(\n    value  => p.resolve(callback()).then(() => value),\n    reason => p.resolve(callback()).then(() => { throw reason })\n  );\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n上面代码中，不管前面的 promise 是fulfilled还是rejected，都会执行回调函数callback。\n\n从上面的实现还可以看到，finally方法总是会返回原来的值。\n\n// resolve 的值是 undefined\npromise.resolve(2).then(() => {}, () => {})\n\n// resolve 的值是 2\npromise.resolve(2).finally(() => {})\n\n// reject 的值是 undefined\npromise.reject(3).then(() => {}, () => {})\n\n// reject 的值是 3\npromise.reject(3).finally(() => {})\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n\n# promise.all()\n\npromise.all()方法用于将多个 promise 实例，包装成一个新的 promise 实例。\n\nconst p = promise.all([p1, p2, p3]);\n\n\n1\n\n\n上面代码中，promise.all()方法接受一个数组作为参数，p1、p2、p3都是 promise 实例，如果不是，就会先调用下面讲到的promise.resolve方法，将参数转为 promise 实例，再进一步处理。另外，promise.all()方法的参数可以不是数组，但必须具有 iterator 接口，且返回的每个成员都是 promise 实例。\n\np的状态由p1、p2、p3决定，分成两种情况。\n\n（1）只有p1、p2、p3的状态都变成fulfilled，p的状态才会变成fulfilled，此时p1、p2、p3的返回值组成一个数组，传递给p的回调函数。\n\n（2）只要p1、p2、p3之中有一个被rejected，p的状态就变成rejected，此时第一个被reject的实例的返回值，会传递给p的回调函数。\n\n下面是一个具体的例子。\n\n// 生成一个promise对象的数组\nconst promises = [2, 3, 5, 7, 11, 13].map(function (id) {\n  return getjson('/post/' + id + \".json\");\n});\n\npromise.all(promises).then(function (posts) {\n  // ...\n}).catch(function(reason){\n  // ...\n});\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n上面代码中，promises是包含 6 个 promise 实例的数组，只有这 6 个实例的状态都变成fulfilled，或者其中有一个变为rejected，才会调用promise.all方法后面的回调函数。\n\n下面是另一个例子。\n\nconst databasepromise = connectdatabase();\n\nconst bookspromise = databasepromise\n  .then(findallbooks);\n\nconst userpromise = databasepromise\n  .then(getcurrentuser);\n\npromise.all([\n  bookspromise,\n  userpromise\n])\n.then(([books, user]) => picktoprecommendations(books, user));\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n上面代码中，bookspromise和userpromise是两个异步操作，只有等到它们的结果都返回了，才会触发picktoprecommendations这个回调函数。\n\n注意，如果作为参数的 promise 实例，自己定义了catch方法，那么它一旦被rejected，并不会触发promise.all()的catch方法。\n\nconst p1 = new promise((resolve, reject) => {\n  resolve('hello');\n})\n.then(result => result)\n.catch(e => e);\n\nconst p2 = new promise((resolve, reject) => {\n  throw new error('报错了');\n})\n.then(result => result)\n.catch(e => e);\n\npromise.all([p1, p2])\n.then(result => console.log(result))\n.catch(e => console.log(e));\n// [\"hello\", error: 报错了]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n上面代码中，p1会resolved，p2首先会rejected，但是p2有自己的catch方法，该方法返回的是一个新的 promise 实例，p2指向的实际上是这个实例。该实例执行完catch方法后，也会变成resolved，导致promise.all()方法参数里面的两个实例都会resolved，因此会调用then方法指定的回调函数，而不会调用catch方法指定的回调函数。\n\n如果p2没有自己的catch方法，就会调用promise.all()的catch方法。\n\nconst p1 = new promise((resolve, reject) => {\n  resolve('hello');\n})\n.then(result => result);\n\nconst p2 = new promise((resolve, reject) => {\n  throw new error('报错了');\n})\n.then(result => result);\n\npromise.all([p1, p2])\n.then(result => console.log(result))\n.catch(e => console.log(e));\n// error: 报错了\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n\n# promise.race()\n\npromise.race()方法同样是将多个 promise 实例，包装成一个新的 promise 实例。\n\nconst p = promise.race([p1, p2, p3]);\n\n\n1\n\n\n上面代码中，只要p1、p2、p3之中有一个实例率先改变状态，p的状态就跟着改变。那个率先改变的 promise 实例的返回值，就传递给p的回调函数。\n\npromise.race()方法的参数与promise.all()方法一样，如果不是 promise 实例，就会先调用下面讲到的promise.resolve()方法，将参数转为 promise 实例，再进一步处理。\n\n下面是一个例子，如果指定时间内没有获得结果，就将 promise 的状态变为reject，否则变为resolve。\n\nconst p = promise.race([\n  fetch('/resource-that-may-take-a-while'),\n  new promise(function (resolve, reject) {\n    settimeout(() => reject(new error('request timeout')), 5000)\n  })\n]);\n\np\n.then(console.log)\n.catch(console.error);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n上面代码中，如果 5 秒之内fetch方法无法返回结果，变量p的状态就会变为rejected，从而触发catch方法指定的回调函数。\n\n\n# promise.allsettled()\n\npromise.allsettled()方法接受一组 promise 实例作为参数，包装成一个新的 promise 实例。只有等到所有这些参数实例都返回结果，不管是fulfilled还是rejected，包装实例才会结束。该方法由 es2020 引入。\n\nconst promises = [\n  fetch('/api-1'),\n  fetch('/api-2'),\n  fetch('/api-3'),\n];\n\nawait promise.allsettled(promises);\nremoveloadingindicator();\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n上面代码对服务器发出三个请求，等到三个请求都结束，不管请求成功还是失败，加载的滚动图标就会消失。\n\n**该方法返回的新的 promise 实例，一旦结束，状态总是fulfilled，不会变成rejected。**状态变成fulfilled后，promise 的监听函数接收到的参数是一个数组，每个成员对应一个传入promise.allsettled()的 promise 实例。\n\nconst resolved = promise.resolve(42);\nconst rejected = promise.reject(-1);\n\nconst allsettledpromise = promise.allsettled([resolved, rejected]);\n\nallsettledpromise.then(function (results) {\n  console.log(results);\n});\n// [\n//    { status: 'fulfilled', value: 42 },\n//    { status: 'rejected', reason: -1 }\n// ]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n上面代码中，promise.allsettled()的返回值allsettledpromise，状态只可能变成fulfilled。它的监听函数接收到的参数是数组results。该数组的每个成员都是一个对象，对应传入promise.allsettled()的两个 promise 实例。每个对象都有status属性，该属性的值只可能是字符串fulfilled或字符串rejected。fulfilled时，对象有value属性，rejected时有reason属性，对应两种状态的返回值。\n\n下面是返回值用法的例子。\n\nconst promises = [ fetch('index.html'), fetch('https://does-not-exist/') ];\nconst results = await promise.allsettled(promises);\n\n// 过滤出成功的请求\nconst successfulpromises = results.filter(p => p.status === 'fulfilled');\n\n// 过滤出失败的请求，并输出原因\nconst errors = results\n  .filter(p => p.status === 'rejected')\n  .map(p => p.reason);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n有时候，我们不关心异步操作的结果，只关心这些操作有没有结束。这时，promise.allsettled()方法就很有用。如果没有这个方法，想要确保所有操作都结束，就很麻烦。promise.all()方法无法做到这一点。\n\nconst urls = [ /* ... */ ];\nconst requests = urls.map(x => fetch(x));\n\ntry {\n  await promise.all(requests);\n  console.log('所有请求都成功。');\n} catch {\n  console.log('至少一个请求失败，其他请求可能还没结束。');\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n上面代码中，promise.all()无法确定所有请求都结束。想要达到这个目的，写起来很麻烦，有了promise.allsettled()，这就很容易了。\n\n\n# promise.any()\n\n**promise.any()方法接受一组 promise 实例作为参数，包装成一个新的 promise 实例。只要参数实例有一个变成fulfilled状态，包装实例就会变成fulfilled状态；如果所有参数实例都变成rejected状态，包装实例就会变成rejected状态。**该方法目前是一个第三阶段的提案 。\n\npromise.any()跟promise.race()方法很像，只有一点不同，就是不会因为某个 promise 变成rejected状态而结束。\n\nconst promises = [\n  fetch('/endpoint-a').then(() => 'a'),\n  fetch('/endpoint-b').then(() => 'b'),\n  fetch('/endpoint-c').then(() => 'c'),\n];\ntry {\n  const first = await promise.any(promises);\n  console.log(first);\n} catch (error) {\n  console.log(error);\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n上面代码中，promise.any()方法的参数数组包含三个 promise 操作。其中只要有一个变成fulfilled，promise.any()返回的 promise 对象就变成fulfilled。如果所有三个操作都变成rejected，那么就会await命令就会抛出错误。\n\npromise.any()抛出的错误，不是一个一般的错误，而是一个 aggregateerror 实例。它相当于一个数组，每个成员对应一个被rejected的操作所抛出的错误。下面是 aggregateerror 的实现示例。\n\nnew aggregateerror() extends array -> aggregateerror\n\nconst err = new aggregateerror();\nerr.push(new error(\"first error\"));\nerr.push(new error(\"second error\"));\nthrow err;\n\n\n1\n2\n3\n4\n5\n6\n\n\n捕捉错误时，如果不用try...catch结构和 await 命令，可以像下面这样写。\n\npromise.any(promises).then(\n  (first) => {\n    // any of the promises was fulfilled.\n  },\n  (error) => {\n    // all of the promises were rejected.\n  }\n);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n下面是一个例子。\n\nvar resolved = promise.resolve(42);\nvar rejected = promise.reject(-1);\nvar alsorejected = promise.reject(infinity);\n\npromise.any([resolved, rejected, alsorejected]).then(function (result) {\n  console.log(result); // 42\n});\n\npromise.any([rejected, alsorejected]).catch(function (results) {\n  console.log(results); // [-1, infinity]\n});\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n\n# promise.resolve()\n\n有时需要将现有对象转为 promise 对象，promise.resolve()方法就起到这个作用。\n\nconst jspromise = promise.resolve($.ajax('/whatever.json'));\n\n\n1\n\n\n上面代码将 jquery 生成的deferred对象，转为一个新的 promise 对象。\n\npromise.resolve()等价于下面的写法。\n\npromise.resolve('foo')\n// 等价于\nnew promise(resolve => resolve('foo'))\n\n\n1\n2\n3\n\n\npromise.resolve方法的参数分成四种情况。\n\n（1）参数是一个 promise 实例\n\n如果参数是 promise 实例，那么promise.resolve将不做任何修改、原封不动地返回这个实例。\n\n（2）参数是一个thenable对象\n\nthenable对象指的是具有then方法的对象，比如下面这个对象。\n\nlet thenable = {\n  then: function(resolve, reject) {\n    resolve(42);\n  }\n};\n\n\n1\n2\n3\n4\n5\n\n\npromise.resolve方法会将这个对象转为 promise 对象，然后就立即执行thenable对象的then方法。\n\nlet thenable = {\n  then: function(resolve, reject) {\n    resolve(42);\n  }\n};\n\nlet p1 = promise.resolve(thenable);\np1.then(function(value) {\n  console.log(value);  // 42\n});\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n上面代码中，thenable对象的then方法执行后，对象p1的状态就变为resolved，从而立即执行最后那个then方法指定的回调函数，输出 42。\n\n（3）参数不是具有then方法的对象，或根本就不是对象\n\n如果参数是一个原始值，或者是一个不具有then方法的对象，则promise.resolve方法返回一个新的 promise 对象，状态为resolved。\n\nconst p = promise.resolve('hello');\n\np.then(function (s){\n  console.log(s)\n});\n// hello\n\n\n1\n2\n3\n4\n5\n6\n\n\n上面代码生成一个新的 promise 对象的实例p。由于字符串hello不属于异步操作（判断方法是字符串对象不具有 then 方法），返回 promise 实例的状态从一生成就是resolved，所以回调函数会立即执行。promise.resolve方法的参数，会同时传给回调函数。\n\n（4）不带有任何参数\n\npromise.resolve()方法允许调用时不带参数，直接返回一个resolved状态的 promise 对象。\n\n所以，如果希望得到一个 promise 对象，比较方便的方法就是直接调用promise.resolve()方法。\n\nconst p = promise.resolve();\n\np.then(function () {\n  // ...\n});\n\n\n1\n2\n3\n4\n5\n\n\n上面代码的变量p就是一个 promise 对象。\n\n需要注意的是，立即resolve()的 promise 对象，是在本轮“事件循环”（event loop）的结束时执行，而不是在下一轮“事件循环”的开始时。\n\nsettimeout(function () {\n  console.log('three');\n}, 0);\n\npromise.resolve().then(function () {\n  console.log('two');\n});\n\nconsole.log('one');\n\n// one\n// two\n// three\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n上面代码中，settimeout(fn, 0)在下一轮“事件循环”开始时执行，promise.resolve()在本轮“事件循环”结束时执行，console.log('one')则是立即执行，因此最先输出。\n\n\n# promise.reject()\n\npromise.reject(reason)方法也会返回一个新的 promise 实例，该实例的状态为rejected。\n\nconst p = promise.reject('出错了');\n// 等同于\nconst p = new promise((resolve, reject) => reject('出错了'))\n\np.then(null, function (s) {\n  console.log(s)\n});\n// 出错了\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n上面代码生成一个 promise 对象的实例p，状态为rejected，回调函数会立即执行。\n\n注意，promise.reject()方法的参数，会原封不动地作为reject的理由，变成后续方法的参数。这一点与promise.resolve方法不一致。\n\nconst thenable = {\n  then(resolve, reject) {\n    reject('出错了');\n  }\n};\n\npromise.reject(thenable)\n.catch(e => {\n  console.log(e === thenable)\n})\n// true\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n上面代码中，promise.reject方法的参数是一个thenable对象，执行以后，后面catch方法的参数不是reject抛出的“出错了”这个字符串，而是thenable对象。\n\n\n# 应用\n\n\n# 加载图片\n\n我们可以将图片的加载写成一个promise，一旦加载完成，promise的状态就发生变化。\n\nconst preloadimage = function (path) {\n  return new promise(function (resolve, reject) {\n    const image = new image();\n    image.onload  = resolve;\n    image.onerror = reject;\n    image.src = path;\n  });\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# generator 函数与 promise 的结合\n\n使用 generator 函数管理流程，遇到异步操作的时候，通常返回一个promise对象。\n\nfunction getfoo () {\n  return new promise(function (resolve, reject){\n    resolve('foo');\n  });\n}\n\nconst g = function* () {\n  try {\n    const foo = yield getfoo();\n    console.log(foo);\n  } catch (e) {\n    console.log(e);\n  }\n};\n\nfunction run (generator) {\n  const it = generator();\n\n  function go(result) {\n    if (result.done) return result.value;\n\n    return result.value.then(function (value) {\n      return go(it.next(value));\n    }, function (error) {\n      return go(it.throw(error));\n    });\n  }\n\n  go(it.next());\n}\n\nrun(g);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n\n\n上面代码的 generator 函数g之中，有一个异步操作getfoo，它返回的就是一个promise对象。函数run用来处理这个promise对象，并调用下一个next方法。\n\n\n# promise.try()\n\n实际开发中，经常遇到一种情况：不知道或者不想区分，函数f是同步函数还是异步操作，但是想用 promise 来处理它。因为这样就可以不管f是否包含异步操作，都用then方法指定下一步流程，用catch方法处理f抛出的错误。一般就会采用下面的写法。\n\npromise.resolve().then(f)\n\n\n1\n\n\n上面的写法有一个缺点，就是如果f是同步函数，那么它会在本轮事件循环的末尾执行。\n\nconst f = () => console.log('now');\npromise.resolve().then(f);\nconsole.log('next');\n// next\n// now\n\n\n1\n2\n3\n4\n5\n\n\n上面代码中，函数f是同步的，但是用 promise 包装了以后，就变成异步执行了。\n\n那么有没有一种方法，让同步函数同步执行，异步函数异步执行，并且让它们具有统一的 api 呢？回答是可以的，并且还有两种写法。第一种写法是用async函数来写。\n\nconst f = () => console.log('now');\n(async () => f())();\nconsole.log('next');\n// now\n// next\n\n\n1\n2\n3\n4\n5\n\n\n上面代码中，第二行是一个立即执行的匿名函数，会立即执行里面的async函数，因此如果f是同步的，就会得到同步的结果；如果f是异步的，就可以用then指定下一步，就像下面的写法。\n\n(async () => f())()\n.then(...)\n\n\n1\n2\n\n\n需要注意的是，async () => f()会吃掉f()抛出的错误。所以，如果想捕获错误，要使用promise.catch方法。\n\n(async () => f())()\n.then(...)\n.catch(...)\n\n\n1\n2\n3\n\n\n第二种写法是使用new promise()。\n\nconst f = () => console.log('now');\n(\n  () => new promise(\n    resolve => resolve(f())\n  )\n)();\nconsole.log('next');\n// now\n// next\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n上面代码也是使用立即执行的匿名函数，执行new promise()。这种情况下，同步函数也是同步执行的。\n\n鉴于这是一个很常见的需求，所以现在有一个提案，提供promise.try方法替代上面的写法。\n\nconst f = () => console.log('now');\npromise.try(f);\nconsole.log('next');\n// now\n// next\n\n\n1\n2\n3\n4\n5\n\n\n事实上，promise.try存在已久，promise 库bluebird、q和when，早就提供了这个方法。\n\n由于promise.try为所有操作提供了统一的处理机制，所以如果想用then方法管理流程，最好都用promise.try包装一下。这样有许多好处，其中一点就是可以更好地管理异常。\n\nfunction getusername(userid) {\n  return database.users.get({id: userid})\n  .then(function(user) {\n    return user.name;\n  });\n}\n\n\n1\n2\n3\n4\n5\n6\n\n\n上面代码中，database.users.get()返回一个 promise 对象，如果抛出异步错误，可以用catch方法捕获，就像下面这样写。\n\ndatabase.users.get({id: userid})\n.then(...)\n.catch(...)\n\n\n1\n2\n3\n\n\n但是database.users.get()可能还会抛出同步错误（比如数据库连接错误，具体要看实现方法），这时你就不得不用try...catch去捕获。\n\ntry {\n  database.users.get({id: userid})\n  .then(...)\n  .catch(...)\n} catch (e) {\n  // ...\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n上面这样的写法就很笨拙了，这时就可以统一用promise.catch()捕获所有同步和异步的错误。\n\npromise.try(() => database.users.get({id: userid}))\n  .then(...)\n  .catch(...)\n\n\n1\n2\n3\n\n\n事实上，promise.try就是模拟try代码块，就像promise.catch模拟的是catch代码块。",charsets:{cjk:!0}},{title:"Iterator 和 for-of 循环",frontmatter:{title:"Iterator 和 for-of 循环",date:"2020-02-09T16:00:29.000Z",permalink:"/pages/48df907ad3570f3d",author:"阮一峰",categories:["《ES6 教程》笔记"],tags:["ES6"],readingShow:"top"},regularPath:"/06.%E4%B9%A6%E7%B1%8D/05.%E3%80%8AES6%20%E6%95%99%E7%A8%8B%E3%80%8B%E7%AC%94%E8%AE%B0/17.Iterator%20%E5%92%8C%20for-of%20%E5%BE%AA%E7%8E%AF.html",relativePath:"06.书籍/05.《ES6 教程》笔记/17.Iterator 和 for-of 循环.md",key:"v-a807627a",path:"/pages/48df907ad3570f3d/",headers:[{level:2,title:"Iterator（遍历器）的概念",slug:"iterator-遍历器-的概念",normalizedTitle:"iterator（遍历器）的概念",charIndex:29},{level:2,title:"默认 Iterator 接口",slug:"默认-iterator-接口",normalizedTitle:"默认 iterator 接口",charIndex:2535},{level:2,title:"调用 Iterator 接口的场合",slug:"调用-iterator-接口的场合",normalizedTitle:"调用 iterator 接口的场合",charIndex:7665},{level:2,title:"字符串的 Iterator 接口",slug:"字符串的-iterator-接口",normalizedTitle:"字符串的 iterator 接口",charIndex:8984},{level:2,title:"Iterator 接口与 Generator 函数",slug:"iterator-接口与-generator-函数",normalizedTitle:"iterator 接口与 generator 函数",charIndex:9908},{level:2,title:"遍历器对象的 return()，throw()",slug:"遍历器对象的-return-throw",normalizedTitle:"遍历器对象的 return()，throw()",charIndex:10406},{level:2,title:"for...of 循环",slug:"for-of-循环",normalizedTitle:"for...of 循环",charIndex:13},{level:3,title:"数组",slug:"数组",normalizedTitle:"数组",charIndex:76},{level:3,title:"Set 和 Map 结构",slug:"set-和-map-结构",normalizedTitle:"set 和 map 结构",charIndex:11619},{level:3,title:"计算生成的数据结构",slug:"计算生成的数据结构",normalizedTitle:"计算生成的数据结构",charIndex:13812},{level:3,title:"类似数组的对象",slug:"类似数组的对象",normalizedTitle:"类似数组的对象",charIndex:6199},{level:3,title:"对象",slug:"对象",normalizedTitle:"对象",charIndex:86},{level:3,title:"与其他遍历语法的比较",slug:"与其他遍历语法的比较",normalizedTitle:"与其他遍历语法的比较",charIndex:15951}],excerpt:'<h1 id="iterator-和-for-of-循环"><a class="header-anchor" href="#iterator-和-for-of-循环">#</a> Iterator 和 for...of 循环</h1>\n<h2 id="iterator-遍历器-的概念"><a class="header-anchor" href="#iterator-遍历器-的概念">#</a> Iterator（遍历器）的概念</h2>\n<p>JavaScript 原有的表示“集合”的数据结构，主要是数组（<code>Array</code>）和对象（<code>Object</code>），ES6 又添加了<code>Map</code>和<code>Set</code>。这样就有了四种数据集合，用户还可以组合使用它们，定义自己的数据结构，比如数组的成员是<code>Map</code>，<code>Map</code>的成员是对象。这样就需要一种统一的接口机制，来处理所有不同的数据结构。</p>\n',lastUpdated:"2022/9/22 下午4:28:09",lastUpdatedTimestamp:1663835289e3,headersStr:"Iterator（遍历器）的概念 默认 Iterator 接口 调用 Iterator 接口的场合 字符串的 Iterator 接口 Iterator 接口与 Generator 函数 遍历器对象的 return()，throw() for...of 循环 数组 Set 和 Map 结构 计算生成的数据结构 类似数组的对象 对象 与其他遍历语法的比较",content:"# Iterator 和 for...of 循环\n\n\n# Iterator（遍历器）的概念\n\nJavaScript 原有的表示“集合”的数据结构，主要是数组（Array）和对象（Object），ES6 又添加了Map和Set。这样就有了四种数据集合，用户还可以组合使用它们，定义自己的数据结构，比如数组的成员是Map，Map的成员是对象。这样就需要一种统一的接口机制，来处理所有不同的数据结构。 遍历器（Iterator）就是这样一种机制。它是一种接口，为各种不同的数据结构提供统一的访问机制。任何数据结构只要部署 Iterator 接口，就可以完成遍历操作（即依次处理该数据结构的所有成员）。\n\nIterator 的作用有三个：一是为各种数据结构，提供一个统一的、简便的访问接口；二是使得数据结构的成员能够按某种次序排列；三是 ES6 创造了一种新的遍历命令for...of循环，Iterator 接口主要供for...of消费。\n\nIterator 的遍历过程是这样的。\n\n（1）创建一个指针对象，指向当前数据结构的起始位置。也就是说，遍历器对象本质上，就是一个指针对象。\n\n（2）第一次调用指针对象的next方法，可以将指针指向数据结构的第一个成员。\n\n（3）第二次调用指针对象的next方法，指针就指向数据结构的第二个成员。\n\n（4）不断调用指针对象的next方法，直到它指向数据结构的结束位置。\n\n每一次调用next方法，都会返回数据结构的当前成员的信息。具体来说，就是返回一个包含value和done两个属性的对象。其中，value属性是当前成员的值，done属性是一个布尔值，表示遍历是否结束。\n\n下面是一个模拟next方法返回值的例子。\n\nvar it = makeIterator(['a', 'b']);\n\nit.next() // { value: \"a\", done: false }\nit.next() // { value: \"b\", done: false }\nit.next() // { value: undefined, done: true }\n\nfunction makeIterator(array) {\n  var nextIndex = 0;\n  return {\n    next: function() {\n      return nextIndex < array.length ?\n        {value: array[nextIndex++], done: false} :\n        {value: undefined, done: true};\n    }\n  };\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n上面代码定义了一个makeIterator函数，它是一个遍历器生成函数，作用就是返回一个遍历器对象。对数组['a', 'b']执行这个函数，就会返回该数组的遍历器对象（即指针对象）it。\n\n指针对象的next方法，用来移动指针。开始时，指针指向数组的开始位置。然后，每次调用next方法，指针就会指向数组的下一个成员。第一次调用，指向a；第二次调用，指向b。\n\nnext方法返回一个对象，表示当前数据成员的信息。这个对象具有value和done两个属性，value属性返回当前位置的成员，done属性是一个布尔值，表示遍历是否结束，即是否还有必要再一次调用next方法。\n\n总之，调用指针对象的next方法，就可以遍历事先给定的数据结构。\n\n对于遍历器对象来说，done: false和value: undefined属性都是可以省略的，因此上面的makeIterator函数可以简写成下面的形式。\n\nfunction makeIterator(array) {\n  var nextIndex = 0;\n  return {\n    next: function() {\n      return nextIndex < array.length ?\n        {value: array[nextIndex++]} :\n        {done: true};\n    }\n  };\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n由于 Iterator 只是把接口规格加到数据结构之上，所以，遍历器与它所遍历的那个数据结构，实际上是分开的，完全可以写出没有对应数据结构的遍历器对象，或者说用遍历器对象模拟出数据结构。下面是一个无限运行的遍历器对象的例子。\n\nvar it = idMaker();\n\nit.next().value // 0\nit.next().value // 1\nit.next().value // 2\n// ...\n\nfunction idMaker() {\n  var index = 0;\n\n  return {\n    next: function() {\n      return {value: index++, done: false};\n    }\n  };\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n上面的例子中，遍历器生成函数idMaker，返回一个遍历器对象（即指针对象）。但是并没有对应的数据结构，或者说，遍历器对象自己描述了一个数据结构出来。\n\n如果使用 TypeScript 的写法，遍历器接口（Iterable）、指针对象（Iterator）和next方法返回值的规格可以描述如下。\n\ninterface Iterable {\n  [Symbol.iterator]() : Iterator,\n}\n\ninterface Iterator {\n  next(value?: any) : IterationResult,\n}\n\ninterface IterationResult {\n  value: any,\n  done: boolean,\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n\n# 默认 Iterator 接口\n\nIterator 接口的目的，就是为所有数据结构，提供了一种统一的访问机制，即for...of循环（详见下文）。当使用for...of循环遍历某种数据结构时，该循环会自动去寻找 Iterator 接口。\n\n一种数据结构只要部署了 Iterator 接口，我们就称这种数据结构是“可遍历的”（iterable）。\n\nES6 规定，默认的 Iterator 接口部署在数据结构的Symbol.iterator属性，或者说，一个数据结构只要具有Symbol.iterator属性，就可以认为是“可遍历的”（iterable）。Symbol.iterator属性本身是一个函数，就是当前数据结构默认的遍历器生成函数。执行这个函数，就会返回一个遍历器。至于属性名Symbol.iterator，它是一个表达式，返回Symbol对象的iterator属性，这是一个预定义好的、类型为 Symbol 的特殊值，所以要放在方括号内（参见《Symbol》一章）。\n\nconst obj = {\n  [Symbol.iterator] : function () {\n    return {\n      next: function () {\n        return {\n          value: 1,\n          done: true\n        };\n      }\n    };\n  }\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n上面代码中，对象obj是可遍历的（iterable），因为具有Symbol.iterator属性。执行这个属性，会返回一个遍历器对象。该对象的根本特征就是具有next方法。每次调用next方法，都会返回一个代表当前成员的信息对象，具有value和done两个属性。\n\nES6 的有些数据结构原生具备 Iterator 接口（比如数组），即不用任何处理，就可以被for...of循环遍历。原因在于，这些数据结构原生部署了Symbol.iterator属性（详见下文），另外一些数据结构没有（比如对象）。凡是部署了Symbol.iterator属性的数据结构，就称为部署了遍历器接口。调用这个接口，就会返回一个遍历器对象。\n\n原生具备 Iterator 接口的数据结构如下。\n\n * Array\n * Map\n * Set\n * String\n * TypedArray\n * 函数的 arguments 对象\n * NodeList 对象\n\n下面的例子是数组的Symbol.iterator属性。\n\nlet arr = ['a', 'b', 'c'];\nlet iter = arr[Symbol.iterator]();\n\niter.next() // { value: 'a', done: false }\niter.next() // { value: 'b', done: false }\niter.next() // { value: 'c', done: false }\niter.next() // { value: undefined, done: true }\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n上面代码中，变量arr是一个数组，原生就具有遍历器接口，部署在arr的Symbol.iterator属性上面。所以，调用这个属性，就得到遍历器对象。\n\n对于原生部署 Iterator 接口的数据结构，不用自己写遍历器生成函数，for...of循环会自动遍历它们。除此之外，其他数据结构（主要是对象）的 Iterator 接口，都需要自己在Symbol.iterator属性上面部署，这样才会被for...of循环遍历。\n\n对象（Object）之所以没有默认部署 Iterator 接口，是因为对象的哪个属性先遍历，哪个属性后遍历是不确定的，需要开发者手动指定。本质上，遍历器是一种线性处理，对于任何非线性的数据结构，部署遍历器接口，就等于部署一种线性转换。不过，严格地说，对象部署遍历器接口并不是很必要，因为这时对象实际上被当作 Map 结构使用，ES5 没有 Map 结构，而 ES6 原生提供了。\n\n一个对象如果要具备可被for...of循环调用的 Iterator 接口，就必须在Symbol.iterator的属性上部署遍历器生成方法（原型链上的对象具有该方法也可）。\n\nclass RangeIterator {\n  constructor(start, stop) {\n    this.value = start;\n    this.stop = stop;\n  }\n\n  [Symbol.iterator]() { return this; }\n\n  next() {\n    var value = this.value;\n    if (value < this.stop) {\n      this.value++;\n      return {done: false, value: value};\n    }\n    return {done: true, value: undefined};\n  }\n}\n\nfunction range(start, stop) {\n  return new RangeIterator(start, stop);\n}\n\nfor (var value of range(0, 3)) {\n  console.log(value); // 0, 1, 2\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n\n\n上面代码是一个类部署 Iterator 接口的写法。Symbol.iterator属性对应一个函数，执行后返回当前对象的遍历器对象。\n\n下面是通过遍历器实现指针结构的例子。\n\nfunction Obj(value) {\n  this.value = value;\n  this.next = null;\n}\n\nObj.prototype[Symbol.iterator] = function() {\n  var iterator = { next: next };\n\n  var current = this;\n\n  function next() {\n    if (current) {\n      var value = current.value;\n      current = current.next;\n      return { done: false, value: value };\n    } else {\n      return { done: true };\n    }\n  }\n  return iterator;\n}\n\nvar one = new Obj(1);\nvar two = new Obj(2);\nvar three = new Obj(3);\n\none.next = two;\ntwo.next = three;\n\nfor (var i of one){\n  console.log(i); // 1, 2, 3\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n\n\n上面代码首先在构造函数的原型链上部署Symbol.iterator方法，调用该方法会返回遍历器对象iterator，调用该对象的next方法，在返回一个值的同时，自动将内部指针移到下一个实例。\n\n下面是另一个为对象添加 Iterator 接口的例子。\n\nlet obj = {\n  data: [ 'hello', 'world' ],\n  [Symbol.iterator]() {\n    const self = this;\n    let index = 0;\n    return {\n      next() {\n        if (index < self.data.length) {\n          return {\n            value: self.data[index++],\n            done: false\n          };\n        } else {\n          return { value: undefined, done: true };\n        }\n      }\n    };\n  }\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\n对于类似数组的对象（存在数值键名和length属性），部署 Iterator 接口，有一个简便方法，就是Symbol.iterator方法直接引用数组的 Iterator 接口。\n\nNodeList.prototype[Symbol.iterator] = Array.prototype[Symbol.iterator];\n// 或者\nNodeList.prototype[Symbol.iterator] = [][Symbol.iterator];\n\n[...document.querySelectorAll('div')] // 可以执行了\n\n\n1\n2\n3\n4\n5\n\n\nNodeList 对象是类似数组的对象，本来就具有遍历接口，可以直接遍历。上面代码中，我们将它的遍历接口改成数组的Symbol.iterator属性，可以看到没有任何影响。\n\n下面是另一个类似数组的对象调用数组的Symbol.iterator方法的例子。\n\nlet iterable = {\n  0: 'a',\n  1: 'b',\n  2: 'c',\n  length: 3,\n  [Symbol.iterator]: Array.prototype[Symbol.iterator]\n};\nfor (let item of iterable) {\n  console.log(item); // 'a', 'b', 'c'\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n注意，普通对象部署数组的Symbol.iterator方法，并无效果。\n\nlet iterable = {\n  a: 'a',\n  b: 'b',\n  c: 'c',\n  length: 3,\n  [Symbol.iterator]: Array.prototype[Symbol.iterator]\n};\nfor (let item of iterable) {\n  console.log(item); // undefined, undefined, undefined\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n如果Symbol.iterator方法对应的不是遍历器生成函数（即会返回一个遍历器对象），解释引擎将会报错。\n\nvar obj = {};\n\nobj[Symbol.iterator] = () => 1;\n\n[...obj] // TypeError: [] is not a function\n\n\n1\n2\n3\n4\n5\n\n\n上面代码中，变量obj的Symbol.iterator方法对应的不是遍历器生成函数，因此报错。\n\n有了遍历器接口，数据结构就可以用for...of循环遍历（详见下文），也可以使用while循环遍历。\n\nvar $iterator = ITERABLE[Symbol.iterator]();\nvar $result = $iterator.next();\nwhile (!$result.done) {\n  var x = $result.value;\n  // ...\n  $result = $iterator.next();\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n上面代码中，ITERABLE代表某种可遍历的数据结构，$iterator是它的遍历器对象。遍历器对象每次移动指针（next方法），都检查一下返回值的done属性，如果遍历还没结束，就移动遍历器对象的指针到下一步（next方法），不断循环。\n\n\n# 调用 Iterator 接口的场合\n\n有一些场合会默认调用 Iterator 接口（即Symbol.iterator方法），除了下文会介绍的for...of循环，还有几个别的场合。\n\n（1）解构赋值\n\n对数组和 Set 结构进行解构赋值时，会默认调用Symbol.iterator方法。\n\nlet set = new Set().add('a').add('b').add('c');\n\nlet [x,y] = set;\n// x='a'; y='b'\n\nlet [first, ...rest] = set;\n// first='a'; rest=['b','c'];\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n（2）扩展运算符\n\n扩展运算符（...）也会调用默认的 Iterator 接口。\n\n// 例一\nvar str = 'hello';\n[...str] //  ['h','e','l','l','o']\n\n// 例二\nlet arr = ['b', 'c'];\n['a', ...arr, 'd']\n// ['a', 'b', 'c', 'd']\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n上面代码的扩展运算符内部就调用 Iterator 接口。\n\n实际上，这提供了一种简便机制，可以将任何部署了 Iterator 接口的数据结构，转为数组。也就是说，只要某个数据结构部署了 Iterator 接口，就可以对它使用扩展运算符，将其转为数组。\n\nlet arr = [...iterable];\n\n\n1\n\n\n（3）yield*\n\nyield*后面跟的是一个可遍历的结构，它会调用该结构的遍历器接口。\n\nlet generator = function* () {\n  yield 1;\n  yield* [2,3,4];\n  yield 5;\n};\n\nvar iterator = generator();\n\niterator.next() // { value: 1, done: false }\niterator.next() // { value: 2, done: false }\niterator.next() // { value: 3, done: false }\niterator.next() // { value: 4, done: false }\niterator.next() // { value: 5, done: false }\niterator.next() // { value: undefined, done: true }\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n（4）其他场合\n\n由于数组的遍历会调用遍历器接口，所以任何接受数组作为参数的场合，其实都调用了遍历器接口。下面是一些例子。\n\n * for...of\n * Array.from()\n * Map(), Set(), WeakMap(), WeakSet()（比如new Map([['a',1],['b',2]])）\n * Promise.all()\n * Promise.race()\n\n\n# 字符串的 Iterator 接口\n\n字符串是一个类似数组的对象，也原生具有 Iterator 接口。\n\nvar someString = \"hi\";\ntypeof someString[Symbol.iterator]\n// \"function\"\n\nvar iterator = someString[Symbol.iterator]();\n\niterator.next()  // { value: \"h\", done: false }\niterator.next()  // { value: \"i\", done: false }\niterator.next()  // { value: undefined, done: true }\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n上面代码中，调用Symbol.iterator方法返回一个遍历器对象，在这个遍历器上可以调用 next 方法，实现对于字符串的遍历。\n\n可以覆盖原生的Symbol.iterator方法，达到修改遍历器行为的目的。\n\nvar str = new String(\"hi\");\n\n[...str] // [\"h\", \"i\"]\n\nstr[Symbol.iterator] = function() {\n  return {\n    next: function() {\n      if (this._first) {\n        this._first = false;\n        return { value: \"bye\", done: false };\n      } else {\n        return { done: true };\n      }\n    },\n    _first: true\n  };\n};\n\n[...str] // [\"bye\"]\nstr // \"hi\"\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n\n上面代码中，字符串 str 的Symbol.iterator方法被修改了，所以扩展运算符（...）返回的值变成了bye，而字符串本身还是hi。\n\n\n# Iterator 接口与 Generator 函数\n\nSymbol.iterator方法的最简单实现，还是使用下一章要介绍的 Generator 函数。\n\nlet myIterable = {\n  [Symbol.iterator]: function* () {\n    yield 1;\n    yield 2;\n    yield 3;\n  }\n}\n[...myIterable] // [1, 2, 3]\n\n// 或者采用下面的简洁写法\n\nlet obj = {\n  * [Symbol.iterator]() {\n    yield 'hello';\n    yield 'world';\n  }\n};\n\nfor (let x of obj) {\n  console.log(x);\n}\n// \"hello\"\n// \"world\"\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n\n\n上面代码中，Symbol.iterator方法几乎不用部署任何代码，只要用 yield 命令给出每一步的返回值即可。\n\n\n# 遍历器对象的 return()，throw()\n\n遍历器对象除了具有next方法，还可以具有return方法和throw方法。如果你自己写遍历器对象生成函数，那么next方法是必须部署的，return方法和throw方法是否部署是可选的。\n\nreturn方法的使用场合是，如果for...of循环提前退出（通常是因为出错，或者有break语句），就会调用return方法。如果一个对象在完成遍历前，需要清理或释放资源，就可以部署return方法。\n\nfunction readLinesSync(file) {\n  return {\n    [Symbol.iterator]() {\n      return {\n        next() {\n          return { done: false };\n        },\n        return() {\n          file.close();\n          return { done: true };\n        }\n      };\n    },\n  };\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n上面代码中，函数readLinesSync接受一个文件对象作为参数，返回一个遍历器对象，其中除了next方法，还部署了return方法。下面的两种情况，都会触发执行return方法。\n\n// 情况一\nfor (let line of readLinesSync(fileName)) {\n  console.log(line);\n  break;\n}\n\n// 情况二\nfor (let line of readLinesSync(fileName)) {\n  console.log(line);\n  throw new Error();\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n上面代码中，情况一输出文件的第一行以后，就会执行return方法，关闭这个文件；情况二会在执行return方法关闭文件之后，再抛出错误。\n\n注意，return方法必须返回一个对象，这是 Generator 规格决定的。\n\nthrow方法主要是配合 Generator 函数使用，一般的遍历器对象用不到这个方法。请参阅《Generator 函数》一章。\n\n\n# for...of 循环\n\nES6 借鉴 C++、Java、C# 和 Python 语言，引入了for...of循环，作为遍历所有数据结构的统一的方法。\n\n一个数据结构只要部署了Symbol.iterator属性，就被视为具有 iterator 接口，就可以用for...of循环遍历它的成员。也就是说，for...of循环内部调用的是数据结构的Symbol.iterator方法。\n\nfor...of循环可以使用的范围包括数组、Set 和 Map 结构、某些类似数组的对象（比如arguments对象、DOM NodeList 对象）、后文的 Generator 对象，以及字符串。\n\n\n# 数组\n\n数组原生具备iterator接口（即默认部署了Symbol.iterator属性），for...of循环本质上就是调用这个接口产生的遍历器，可以用下面的代码证明。\n\nconst arr = ['red', 'green', 'blue'];\n\nfor(let v of arr) {\n  console.log(v); // red green blue\n}\n\nconst obj = {};\nobj[Symbol.iterator] = arr[Symbol.iterator].bind(arr);\n\nfor(let v of obj) {\n  console.log(v); // red green blue\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n上面代码中，空对象obj部署了数组arr的Symbol.iterator属性，结果obj的for...of循环，产生了与arr完全一样的结果。\n\nfor...of循环可以代替数组实例的forEach方法。\n\nconst arr = ['red', 'green', 'blue'];\n\narr.forEach(function (element, index) {\n  console.log(element); // red green blue\n  console.log(index);   // 0 1 2\n});\n\n\n1\n2\n3\n4\n5\n6\n\n\nJavaScript 原有的**for...in循环，只能获得对象的键名**，不能直接获取键值。ES6 提供for...of循环，允许遍历获得键值。\n\nvar arr = ['a', 'b', 'c', 'd'];\n\nfor (let a in arr) {\n  console.log(a); // 0 1 2 3\n}\n\nfor (let a of arr) {\n  console.log(a); // a b c d\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n上面代码表明，for...in循环读取键名，for...of循环读取键值。如果要通过for...of循环，获取数组的索引，可以借助数组实例的entries方法和keys方法（参见《数组的扩展》一章）。\n\nfor...of循环调用遍历器接口，数组的遍历器接口只返回具有数字索引的属性。这一点跟for...in循环也不一样。\n\nlet arr = [3, 5, 7];\narr.foo = 'hello';\n\nfor (let i in arr) {\n  console.log(i); // \"0\", \"1\", \"2\", \"foo\"\n}\n\nfor (let i of arr) {\n  console.log(i); //  \"3\", \"5\", \"7\"\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n上面代码中，for...of循环不会返回数组arr的foo属性。\n\n\n# Set 和 Map 结构\n\nSet 和 Map 结构也原生具有 Iterator 接口，可以直接使用for...of循环。\n\nvar engines = new Set([\"Gecko\", \"Trident\", \"Webkit\", \"Webkit\"]);\nfor (var e of engines) {\n  console.log(e);\n}\n// Gecko\n// Trident\n// Webkit\n\nvar es6 = new Map();\nes6.set(\"edition\", 6);\nes6.set(\"committee\", \"TC39\");\nes6.set(\"standard\", \"ECMA-262\");\nfor (var [name, value] of es6) {\n  console.log(name + \": \" + value);\n}\n// edition: 6\n// committee: TC39\n// standard: ECMA-262\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\n上面代码演示了如何遍历 Set 结构和 Map 结构。值得注意的地方有两个，首先，遍历的顺序是按照各个成员被添加进数据结构的顺序。其次，Set 结构遍历时，返回的是一个值，而 Map 结构遍历时，返回的是一个数组，该数组的两个成员分别为当前 Map 成员的键名和键值。\n\nlet map = new Map().set('a', 1).set('b', 2);\nfor (let pair of map) {\n  console.log(pair);\n}\n// ['a', 1]\n// ['b', 2]\n\nfor (let [key, value] of map) {\n  console.log(key + ' : ' + value);\n}\n// a : 1\n// b : 2\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n\n# 计算生成的数据结构\n\n有些数据结构是在现有数据结构的基础上，计算生成的。比如，ES6 的数组、Set、Map 都部署了以下三个方法，调用后都返回遍历器对象。\n\n * entries() 返回一个遍历器对象，用来遍历[键名, 键值]组成的数组。对于数组，键名就是索引值；对于 Set，键名与键值相同。Map 结构的 Iterator 接口，默认就是调用entries方法。\n * keys() 返回一个遍历器对象，用来遍历所有的键名。\n * values() 返回一个遍历器对象，用来遍历所有的键值。\n\n这三个方法调用后生成的遍历器对象，所遍历的都是计算生成的数据结构。\n\nlet arr = ['a', 'b', 'c'];\nfor (let pair of arr.entries()) {\n  console.log(pair);\n}\n// [0, 'a']\n// [1, 'b']\n// [2, 'c']\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# 类似数组的对象\n\n类似数组的对象包括好几类。下面是for...of循环用于字符串、DOM NodeList 对象、arguments对象的例子。\n\n// 字符串\nlet str = \"hello\";\n\nfor (let s of str) {\n  console.log(s); // h e l l o\n}\n\n// DOM NodeList对象\nlet paras = document.querySelectorAll(\"p\");\n\nfor (let p of paras) {\n  p.classList.add(\"test\");\n}\n\n// arguments对象\nfunction printArgs() {\n  for (let x of arguments) {\n    console.log(x);\n  }\n}\nprintArgs('a', 'b');\n// 'a'\n// 'b'\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n\n\n对于字符串来说，for...of循环还有一个特点，就是会正确识别 32 位 UTF-16 字符。\n\nfor (let x of 'a\\uD83D\\uDC0A') {\n  console.log(x);\n}\n// 'a'\n// '\\uD83D\\uDC0A'\n\n\n1\n2\n3\n4\n5\n\n\n并不是所有类似数组的对象都具有 Iterator 接口，一个简便的解决方法，就是使用Array.from方法将其转为数组。\n\nlet arrayLike = { length: 2, 0: 'a', 1: 'b' };\n\n// 报错\nfor (let x of arrayLike) {\n  console.log(x);\n}\n\n// 正确\nfor (let x of Array.from(arrayLike)) {\n  console.log(x);\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n\n# 对象\n\n对于普通的对象，for...of结构不能直接使用，会报错，必须部署了 Iterator 接口后才能使用。但是，这样情况下，for...in循环依然可以用来遍历键名。\n\nlet es6 = {\n  edition: 6,\n  committee: \"TC39\",\n  standard: \"ECMA-262\"\n};\n\nfor (let e in es6) {\n  console.log(e);\n}\n// edition\n// committee\n// standard\n\nfor (let e of es6) {\n  console.log(e);\n}\n// TypeError: es6[Symbol.iterator] is not a function\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n上面代码表示，对于普通的对象，for...in循环可以遍历键名，for...of循环会报错。\n\n一种解决方法是，使用Object.keys方法将对象的键名生成一个数组，然后遍历这个数组。\n\nfor (var key of Object.keys(someObject)) {\n  console.log(key + ': ' + someObject[key]);\n}\n\n\n1\n2\n3\n\n\n另一个方法是使用 Generator 函数将对象重新包装一下。\n\nfunction* entries(obj) {\n  for (let key of Object.keys(obj)) {\n    yield [key, obj[key]];\n  }\n}\n\nfor (let [key, value] of entries(obj)) {\n  console.log(key, '->', value);\n}\n// a -> 1\n// b -> 2\n// c -> 3\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n\n# 与其他遍历语法的比较\n\n以数组为例，JavaScript 提供多种遍历语法。最原始的写法就是for循环。\n\nfor (var index = 0; index < myArray.length; index++) {\n  console.log(myArray[index]);\n}\n\n\n1\n2\n3\n\n\n这种写法比较麻烦，因此数组提供内置的forEach方法。\n\nmyArray.forEach(function (value) {\n  console.log(value);\n});\n\n\n1\n2\n3\n\n\n这种写法的问题在于，无法中途跳出forEach循环，break命令或return命令都不能奏效。\n\nfor...in循环可以遍历数组的键名。\n\nfor (var index in myArray) {\n  console.log(myArray[index]);\n}\n\n\n1\n2\n3\n\n\nfor...in循环有几个缺点。\n\n * 数组的键名是数字，但是for...in循环是以字符串作为键名“0”、“1”、“2”等等。\n * for...in循环不仅遍历数字键名，还会遍历手动添加的其他键，甚至包括原型链上的键。\n * 某些情况下，for...in循环会以任意顺序遍历键名。\n\n总之，for...in循环主要是为遍历对象而设计的，不适用于遍历数组。\n\nfor...of循环相比上面几种做法，有一些显著的优点。\n\nfor (let value of myArray) {\n  console.log(value);\n}\n\n\n1\n2\n3\n\n * 有着同for...in一样的简洁语法，但是没有for...in那些缺点。\n * 不同于forEach方法，它可以与break、continue和return配合使用。\n * 提供了遍历所有数据结构的统一操作接口。\n\n下面是一个使用 break 语句，跳出for...of循环的例子。\n\nfor (var n of fibonacci) {\n  if (n > 1000)\n    break;\n  console.log(n);\n}\n\n\n1\n2\n3\n4\n5\n\n\n上面的例子，会输出斐波纳契数列小于等于 1000 的项。如果当前项大于 1000，就会使用break语句跳出for...of循环。",normalizedContent:"# iterator 和 for...of 循环\n\n\n# iterator（遍历器）的概念\n\njavascript 原有的表示“集合”的数据结构，主要是数组（array）和对象（object），es6 又添加了map和set。这样就有了四种数据集合，用户还可以组合使用它们，定义自己的数据结构，比如数组的成员是map，map的成员是对象。这样就需要一种统一的接口机制，来处理所有不同的数据结构。 遍历器（iterator）就是这样一种机制。它是一种接口，为各种不同的数据结构提供统一的访问机制。任何数据结构只要部署 iterator 接口，就可以完成遍历操作（即依次处理该数据结构的所有成员）。\n\niterator 的作用有三个：一是为各种数据结构，提供一个统一的、简便的访问接口；二是使得数据结构的成员能够按某种次序排列；三是 es6 创造了一种新的遍历命令for...of循环，iterator 接口主要供for...of消费。\n\niterator 的遍历过程是这样的。\n\n（1）创建一个指针对象，指向当前数据结构的起始位置。也就是说，遍历器对象本质上，就是一个指针对象。\n\n（2）第一次调用指针对象的next方法，可以将指针指向数据结构的第一个成员。\n\n（3）第二次调用指针对象的next方法，指针就指向数据结构的第二个成员。\n\n（4）不断调用指针对象的next方法，直到它指向数据结构的结束位置。\n\n每一次调用next方法，都会返回数据结构的当前成员的信息。具体来说，就是返回一个包含value和done两个属性的对象。其中，value属性是当前成员的值，done属性是一个布尔值，表示遍历是否结束。\n\n下面是一个模拟next方法返回值的例子。\n\nvar it = makeiterator(['a', 'b']);\n\nit.next() // { value: \"a\", done: false }\nit.next() // { value: \"b\", done: false }\nit.next() // { value: undefined, done: true }\n\nfunction makeiterator(array) {\n  var nextindex = 0;\n  return {\n    next: function() {\n      return nextindex < array.length ?\n        {value: array[nextindex++], done: false} :\n        {value: undefined, done: true};\n    }\n  };\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n上面代码定义了一个makeiterator函数，它是一个遍历器生成函数，作用就是返回一个遍历器对象。对数组['a', 'b']执行这个函数，就会返回该数组的遍历器对象（即指针对象）it。\n\n指针对象的next方法，用来移动指针。开始时，指针指向数组的开始位置。然后，每次调用next方法，指针就会指向数组的下一个成员。第一次调用，指向a；第二次调用，指向b。\n\nnext方法返回一个对象，表示当前数据成员的信息。这个对象具有value和done两个属性，value属性返回当前位置的成员，done属性是一个布尔值，表示遍历是否结束，即是否还有必要再一次调用next方法。\n\n总之，调用指针对象的next方法，就可以遍历事先给定的数据结构。\n\n对于遍历器对象来说，done: false和value: undefined属性都是可以省略的，因此上面的makeiterator函数可以简写成下面的形式。\n\nfunction makeiterator(array) {\n  var nextindex = 0;\n  return {\n    next: function() {\n      return nextindex < array.length ?\n        {value: array[nextindex++]} :\n        {done: true};\n    }\n  };\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n由于 iterator 只是把接口规格加到数据结构之上，所以，遍历器与它所遍历的那个数据结构，实际上是分开的，完全可以写出没有对应数据结构的遍历器对象，或者说用遍历器对象模拟出数据结构。下面是一个无限运行的遍历器对象的例子。\n\nvar it = idmaker();\n\nit.next().value // 0\nit.next().value // 1\nit.next().value // 2\n// ...\n\nfunction idmaker() {\n  var index = 0;\n\n  return {\n    next: function() {\n      return {value: index++, done: false};\n    }\n  };\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n上面的例子中，遍历器生成函数idmaker，返回一个遍历器对象（即指针对象）。但是并没有对应的数据结构，或者说，遍历器对象自己描述了一个数据结构出来。\n\n如果使用 typescript 的写法，遍历器接口（iterable）、指针对象（iterator）和next方法返回值的规格可以描述如下。\n\ninterface iterable {\n  [symbol.iterator]() : iterator,\n}\n\ninterface iterator {\n  next(value?: any) : iterationresult,\n}\n\ninterface iterationresult {\n  value: any,\n  done: boolean,\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n\n# 默认 iterator 接口\n\niterator 接口的目的，就是为所有数据结构，提供了一种统一的访问机制，即for...of循环（详见下文）。当使用for...of循环遍历某种数据结构时，该循环会自动去寻找 iterator 接口。\n\n一种数据结构只要部署了 iterator 接口，我们就称这种数据结构是“可遍历的”（iterable）。\n\nes6 规定，默认的 iterator 接口部署在数据结构的symbol.iterator属性，或者说，一个数据结构只要具有symbol.iterator属性，就可以认为是“可遍历的”（iterable）。symbol.iterator属性本身是一个函数，就是当前数据结构默认的遍历器生成函数。执行这个函数，就会返回一个遍历器。至于属性名symbol.iterator，它是一个表达式，返回symbol对象的iterator属性，这是一个预定义好的、类型为 symbol 的特殊值，所以要放在方括号内（参见《symbol》一章）。\n\nconst obj = {\n  [symbol.iterator] : function () {\n    return {\n      next: function () {\n        return {\n          value: 1,\n          done: true\n        };\n      }\n    };\n  }\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n上面代码中，对象obj是可遍历的（iterable），因为具有symbol.iterator属性。执行这个属性，会返回一个遍历器对象。该对象的根本特征就是具有next方法。每次调用next方法，都会返回一个代表当前成员的信息对象，具有value和done两个属性。\n\nes6 的有些数据结构原生具备 iterator 接口（比如数组），即不用任何处理，就可以被for...of循环遍历。原因在于，这些数据结构原生部署了symbol.iterator属性（详见下文），另外一些数据结构没有（比如对象）。凡是部署了symbol.iterator属性的数据结构，就称为部署了遍历器接口。调用这个接口，就会返回一个遍历器对象。\n\n原生具备 iterator 接口的数据结构如下。\n\n * array\n * map\n * set\n * string\n * typedarray\n * 函数的 arguments 对象\n * nodelist 对象\n\n下面的例子是数组的symbol.iterator属性。\n\nlet arr = ['a', 'b', 'c'];\nlet iter = arr[symbol.iterator]();\n\niter.next() // { value: 'a', done: false }\niter.next() // { value: 'b', done: false }\niter.next() // { value: 'c', done: false }\niter.next() // { value: undefined, done: true }\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n上面代码中，变量arr是一个数组，原生就具有遍历器接口，部署在arr的symbol.iterator属性上面。所以，调用这个属性，就得到遍历器对象。\n\n对于原生部署 iterator 接口的数据结构，不用自己写遍历器生成函数，for...of循环会自动遍历它们。除此之外，其他数据结构（主要是对象）的 iterator 接口，都需要自己在symbol.iterator属性上面部署，这样才会被for...of循环遍历。\n\n对象（object）之所以没有默认部署 iterator 接口，是因为对象的哪个属性先遍历，哪个属性后遍历是不确定的，需要开发者手动指定。本质上，遍历器是一种线性处理，对于任何非线性的数据结构，部署遍历器接口，就等于部署一种线性转换。不过，严格地说，对象部署遍历器接口并不是很必要，因为这时对象实际上被当作 map 结构使用，es5 没有 map 结构，而 es6 原生提供了。\n\n一个对象如果要具备可被for...of循环调用的 iterator 接口，就必须在symbol.iterator的属性上部署遍历器生成方法（原型链上的对象具有该方法也可）。\n\nclass rangeiterator {\n  constructor(start, stop) {\n    this.value = start;\n    this.stop = stop;\n  }\n\n  [symbol.iterator]() { return this; }\n\n  next() {\n    var value = this.value;\n    if (value < this.stop) {\n      this.value++;\n      return {done: false, value: value};\n    }\n    return {done: true, value: undefined};\n  }\n}\n\nfunction range(start, stop) {\n  return new rangeiterator(start, stop);\n}\n\nfor (var value of range(0, 3)) {\n  console.log(value); // 0, 1, 2\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n\n\n上面代码是一个类部署 iterator 接口的写法。symbol.iterator属性对应一个函数，执行后返回当前对象的遍历器对象。\n\n下面是通过遍历器实现指针结构的例子。\n\nfunction obj(value) {\n  this.value = value;\n  this.next = null;\n}\n\nobj.prototype[symbol.iterator] = function() {\n  var iterator = { next: next };\n\n  var current = this;\n\n  function next() {\n    if (current) {\n      var value = current.value;\n      current = current.next;\n      return { done: false, value: value };\n    } else {\n      return { done: true };\n    }\n  }\n  return iterator;\n}\n\nvar one = new obj(1);\nvar two = new obj(2);\nvar three = new obj(3);\n\none.next = two;\ntwo.next = three;\n\nfor (var i of one){\n  console.log(i); // 1, 2, 3\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n\n\n上面代码首先在构造函数的原型链上部署symbol.iterator方法，调用该方法会返回遍历器对象iterator，调用该对象的next方法，在返回一个值的同时，自动将内部指针移到下一个实例。\n\n下面是另一个为对象添加 iterator 接口的例子。\n\nlet obj = {\n  data: [ 'hello', 'world' ],\n  [symbol.iterator]() {\n    const self = this;\n    let index = 0;\n    return {\n      next() {\n        if (index < self.data.length) {\n          return {\n            value: self.data[index++],\n            done: false\n          };\n        } else {\n          return { value: undefined, done: true };\n        }\n      }\n    };\n  }\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\n对于类似数组的对象（存在数值键名和length属性），部署 iterator 接口，有一个简便方法，就是symbol.iterator方法直接引用数组的 iterator 接口。\n\nnodelist.prototype[symbol.iterator] = array.prototype[symbol.iterator];\n// 或者\nnodelist.prototype[symbol.iterator] = [][symbol.iterator];\n\n[...document.queryselectorall('div')] // 可以执行了\n\n\n1\n2\n3\n4\n5\n\n\nnodelist 对象是类似数组的对象，本来就具有遍历接口，可以直接遍历。上面代码中，我们将它的遍历接口改成数组的symbol.iterator属性，可以看到没有任何影响。\n\n下面是另一个类似数组的对象调用数组的symbol.iterator方法的例子。\n\nlet iterable = {\n  0: 'a',\n  1: 'b',\n  2: 'c',\n  length: 3,\n  [symbol.iterator]: array.prototype[symbol.iterator]\n};\nfor (let item of iterable) {\n  console.log(item); // 'a', 'b', 'c'\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n注意，普通对象部署数组的symbol.iterator方法，并无效果。\n\nlet iterable = {\n  a: 'a',\n  b: 'b',\n  c: 'c',\n  length: 3,\n  [symbol.iterator]: array.prototype[symbol.iterator]\n};\nfor (let item of iterable) {\n  console.log(item); // undefined, undefined, undefined\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n如果symbol.iterator方法对应的不是遍历器生成函数（即会返回一个遍历器对象），解释引擎将会报错。\n\nvar obj = {};\n\nobj[symbol.iterator] = () => 1;\n\n[...obj] // typeerror: [] is not a function\n\n\n1\n2\n3\n4\n5\n\n\n上面代码中，变量obj的symbol.iterator方法对应的不是遍历器生成函数，因此报错。\n\n有了遍历器接口，数据结构就可以用for...of循环遍历（详见下文），也可以使用while循环遍历。\n\nvar $iterator = iterable[symbol.iterator]();\nvar $result = $iterator.next();\nwhile (!$result.done) {\n  var x = $result.value;\n  // ...\n  $result = $iterator.next();\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n上面代码中，iterable代表某种可遍历的数据结构，$iterator是它的遍历器对象。遍历器对象每次移动指针（next方法），都检查一下返回值的done属性，如果遍历还没结束，就移动遍历器对象的指针到下一步（next方法），不断循环。\n\n\n# 调用 iterator 接口的场合\n\n有一些场合会默认调用 iterator 接口（即symbol.iterator方法），除了下文会介绍的for...of循环，还有几个别的场合。\n\n（1）解构赋值\n\n对数组和 set 结构进行解构赋值时，会默认调用symbol.iterator方法。\n\nlet set = new set().add('a').add('b').add('c');\n\nlet [x,y] = set;\n// x='a'; y='b'\n\nlet [first, ...rest] = set;\n// first='a'; rest=['b','c'];\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n（2）扩展运算符\n\n扩展运算符（...）也会调用默认的 iterator 接口。\n\n// 例一\nvar str = 'hello';\n[...str] //  ['h','e','l','l','o']\n\n// 例二\nlet arr = ['b', 'c'];\n['a', ...arr, 'd']\n// ['a', 'b', 'c', 'd']\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n上面代码的扩展运算符内部就调用 iterator 接口。\n\n实际上，这提供了一种简便机制，可以将任何部署了 iterator 接口的数据结构，转为数组。也就是说，只要某个数据结构部署了 iterator 接口，就可以对它使用扩展运算符，将其转为数组。\n\nlet arr = [...iterable];\n\n\n1\n\n\n（3）yield*\n\nyield*后面跟的是一个可遍历的结构，它会调用该结构的遍历器接口。\n\nlet generator = function* () {\n  yield 1;\n  yield* [2,3,4];\n  yield 5;\n};\n\nvar iterator = generator();\n\niterator.next() // { value: 1, done: false }\niterator.next() // { value: 2, done: false }\niterator.next() // { value: 3, done: false }\niterator.next() // { value: 4, done: false }\niterator.next() // { value: 5, done: false }\niterator.next() // { value: undefined, done: true }\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n（4）其他场合\n\n由于数组的遍历会调用遍历器接口，所以任何接受数组作为参数的场合，其实都调用了遍历器接口。下面是一些例子。\n\n * for...of\n * array.from()\n * map(), set(), weakmap(), weakset()（比如new map([['a',1],['b',2]])）\n * promise.all()\n * promise.race()\n\n\n# 字符串的 iterator 接口\n\n字符串是一个类似数组的对象，也原生具有 iterator 接口。\n\nvar somestring = \"hi\";\ntypeof somestring[symbol.iterator]\n// \"function\"\n\nvar iterator = somestring[symbol.iterator]();\n\niterator.next()  // { value: \"h\", done: false }\niterator.next()  // { value: \"i\", done: false }\niterator.next()  // { value: undefined, done: true }\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n上面代码中，调用symbol.iterator方法返回一个遍历器对象，在这个遍历器上可以调用 next 方法，实现对于字符串的遍历。\n\n可以覆盖原生的symbol.iterator方法，达到修改遍历器行为的目的。\n\nvar str = new string(\"hi\");\n\n[...str] // [\"h\", \"i\"]\n\nstr[symbol.iterator] = function() {\n  return {\n    next: function() {\n      if (this._first) {\n        this._first = false;\n        return { value: \"bye\", done: false };\n      } else {\n        return { done: true };\n      }\n    },\n    _first: true\n  };\n};\n\n[...str] // [\"bye\"]\nstr // \"hi\"\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n\n上面代码中，字符串 str 的symbol.iterator方法被修改了，所以扩展运算符（...）返回的值变成了bye，而字符串本身还是hi。\n\n\n# iterator 接口与 generator 函数\n\nsymbol.iterator方法的最简单实现，还是使用下一章要介绍的 generator 函数。\n\nlet myiterable = {\n  [symbol.iterator]: function* () {\n    yield 1;\n    yield 2;\n    yield 3;\n  }\n}\n[...myiterable] // [1, 2, 3]\n\n// 或者采用下面的简洁写法\n\nlet obj = {\n  * [symbol.iterator]() {\n    yield 'hello';\n    yield 'world';\n  }\n};\n\nfor (let x of obj) {\n  console.log(x);\n}\n// \"hello\"\n// \"world\"\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n\n\n上面代码中，symbol.iterator方法几乎不用部署任何代码，只要用 yield 命令给出每一步的返回值即可。\n\n\n# 遍历器对象的 return()，throw()\n\n遍历器对象除了具有next方法，还可以具有return方法和throw方法。如果你自己写遍历器对象生成函数，那么next方法是必须部署的，return方法和throw方法是否部署是可选的。\n\nreturn方法的使用场合是，如果for...of循环提前退出（通常是因为出错，或者有break语句），就会调用return方法。如果一个对象在完成遍历前，需要清理或释放资源，就可以部署return方法。\n\nfunction readlinessync(file) {\n  return {\n    [symbol.iterator]() {\n      return {\n        next() {\n          return { done: false };\n        },\n        return() {\n          file.close();\n          return { done: true };\n        }\n      };\n    },\n  };\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n上面代码中，函数readlinessync接受一个文件对象作为参数，返回一个遍历器对象，其中除了next方法，还部署了return方法。下面的两种情况，都会触发执行return方法。\n\n// 情况一\nfor (let line of readlinessync(filename)) {\n  console.log(line);\n  break;\n}\n\n// 情况二\nfor (let line of readlinessync(filename)) {\n  console.log(line);\n  throw new error();\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n上面代码中，情况一输出文件的第一行以后，就会执行return方法，关闭这个文件；情况二会在执行return方法关闭文件之后，再抛出错误。\n\n注意，return方法必须返回一个对象，这是 generator 规格决定的。\n\nthrow方法主要是配合 generator 函数使用，一般的遍历器对象用不到这个方法。请参阅《generator 函数》一章。\n\n\n# for...of 循环\n\nes6 借鉴 c++、java、c# 和 python 语言，引入了for...of循环，作为遍历所有数据结构的统一的方法。\n\n一个数据结构只要部署了symbol.iterator属性，就被视为具有 iterator 接口，就可以用for...of循环遍历它的成员。也就是说，for...of循环内部调用的是数据结构的symbol.iterator方法。\n\nfor...of循环可以使用的范围包括数组、set 和 map 结构、某些类似数组的对象（比如arguments对象、dom nodelist 对象）、后文的 generator 对象，以及字符串。\n\n\n# 数组\n\n数组原生具备iterator接口（即默认部署了symbol.iterator属性），for...of循环本质上就是调用这个接口产生的遍历器，可以用下面的代码证明。\n\nconst arr = ['red', 'green', 'blue'];\n\nfor(let v of arr) {\n  console.log(v); // red green blue\n}\n\nconst obj = {};\nobj[symbol.iterator] = arr[symbol.iterator].bind(arr);\n\nfor(let v of obj) {\n  console.log(v); // red green blue\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n上面代码中，空对象obj部署了数组arr的symbol.iterator属性，结果obj的for...of循环，产生了与arr完全一样的结果。\n\nfor...of循环可以代替数组实例的foreach方法。\n\nconst arr = ['red', 'green', 'blue'];\n\narr.foreach(function (element, index) {\n  console.log(element); // red green blue\n  console.log(index);   // 0 1 2\n});\n\n\n1\n2\n3\n4\n5\n6\n\n\njavascript 原有的**for...in循环，只能获得对象的键名**，不能直接获取键值。es6 提供for...of循环，允许遍历获得键值。\n\nvar arr = ['a', 'b', 'c', 'd'];\n\nfor (let a in arr) {\n  console.log(a); // 0 1 2 3\n}\n\nfor (let a of arr) {\n  console.log(a); // a b c d\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n上面代码表明，for...in循环读取键名，for...of循环读取键值。如果要通过for...of循环，获取数组的索引，可以借助数组实例的entries方法和keys方法（参见《数组的扩展》一章）。\n\nfor...of循环调用遍历器接口，数组的遍历器接口只返回具有数字索引的属性。这一点跟for...in循环也不一样。\n\nlet arr = [3, 5, 7];\narr.foo = 'hello';\n\nfor (let i in arr) {\n  console.log(i); // \"0\", \"1\", \"2\", \"foo\"\n}\n\nfor (let i of arr) {\n  console.log(i); //  \"3\", \"5\", \"7\"\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n上面代码中，for...of循环不会返回数组arr的foo属性。\n\n\n# set 和 map 结构\n\nset 和 map 结构也原生具有 iterator 接口，可以直接使用for...of循环。\n\nvar engines = new set([\"gecko\", \"trident\", \"webkit\", \"webkit\"]);\nfor (var e of engines) {\n  console.log(e);\n}\n// gecko\n// trident\n// webkit\n\nvar es6 = new map();\nes6.set(\"edition\", 6);\nes6.set(\"committee\", \"tc39\");\nes6.set(\"standard\", \"ecma-262\");\nfor (var [name, value] of es6) {\n  console.log(name + \": \" + value);\n}\n// edition: 6\n// committee: tc39\n// standard: ecma-262\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\n上面代码演示了如何遍历 set 结构和 map 结构。值得注意的地方有两个，首先，遍历的顺序是按照各个成员被添加进数据结构的顺序。其次，set 结构遍历时，返回的是一个值，而 map 结构遍历时，返回的是一个数组，该数组的两个成员分别为当前 map 成员的键名和键值。\n\nlet map = new map().set('a', 1).set('b', 2);\nfor (let pair of map) {\n  console.log(pair);\n}\n// ['a', 1]\n// ['b', 2]\n\nfor (let [key, value] of map) {\n  console.log(key + ' : ' + value);\n}\n// a : 1\n// b : 2\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n\n# 计算生成的数据结构\n\n有些数据结构是在现有数据结构的基础上，计算生成的。比如，es6 的数组、set、map 都部署了以下三个方法，调用后都返回遍历器对象。\n\n * entries() 返回一个遍历器对象，用来遍历[键名, 键值]组成的数组。对于数组，键名就是索引值；对于 set，键名与键值相同。map 结构的 iterator 接口，默认就是调用entries方法。\n * keys() 返回一个遍历器对象，用来遍历所有的键名。\n * values() 返回一个遍历器对象，用来遍历所有的键值。\n\n这三个方法调用后生成的遍历器对象，所遍历的都是计算生成的数据结构。\n\nlet arr = ['a', 'b', 'c'];\nfor (let pair of arr.entries()) {\n  console.log(pair);\n}\n// [0, 'a']\n// [1, 'b']\n// [2, 'c']\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# 类似数组的对象\n\n类似数组的对象包括好几类。下面是for...of循环用于字符串、dom nodelist 对象、arguments对象的例子。\n\n// 字符串\nlet str = \"hello\";\n\nfor (let s of str) {\n  console.log(s); // h e l l o\n}\n\n// dom nodelist对象\nlet paras = document.queryselectorall(\"p\");\n\nfor (let p of paras) {\n  p.classlist.add(\"test\");\n}\n\n// arguments对象\nfunction printargs() {\n  for (let x of arguments) {\n    console.log(x);\n  }\n}\nprintargs('a', 'b');\n// 'a'\n// 'b'\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n\n\n对于字符串来说，for...of循环还有一个特点，就是会正确识别 32 位 utf-16 字符。\n\nfor (let x of 'a\\ud83d\\udc0a') {\n  console.log(x);\n}\n// 'a'\n// '\\ud83d\\udc0a'\n\n\n1\n2\n3\n4\n5\n\n\n并不是所有类似数组的对象都具有 iterator 接口，一个简便的解决方法，就是使用array.from方法将其转为数组。\n\nlet arraylike = { length: 2, 0: 'a', 1: 'b' };\n\n// 报错\nfor (let x of arraylike) {\n  console.log(x);\n}\n\n// 正确\nfor (let x of array.from(arraylike)) {\n  console.log(x);\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n\n# 对象\n\n对于普通的对象，for...of结构不能直接使用，会报错，必须部署了 iterator 接口后才能使用。但是，这样情况下，for...in循环依然可以用来遍历键名。\n\nlet es6 = {\n  edition: 6,\n  committee: \"tc39\",\n  standard: \"ecma-262\"\n};\n\nfor (let e in es6) {\n  console.log(e);\n}\n// edition\n// committee\n// standard\n\nfor (let e of es6) {\n  console.log(e);\n}\n// typeerror: es6[symbol.iterator] is not a function\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n上面代码表示，对于普通的对象，for...in循环可以遍历键名，for...of循环会报错。\n\n一种解决方法是，使用object.keys方法将对象的键名生成一个数组，然后遍历这个数组。\n\nfor (var key of object.keys(someobject)) {\n  console.log(key + ': ' + someobject[key]);\n}\n\n\n1\n2\n3\n\n\n另一个方法是使用 generator 函数将对象重新包装一下。\n\nfunction* entries(obj) {\n  for (let key of object.keys(obj)) {\n    yield [key, obj[key]];\n  }\n}\n\nfor (let [key, value] of entries(obj)) {\n  console.log(key, '->', value);\n}\n// a -> 1\n// b -> 2\n// c -> 3\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n\n# 与其他遍历语法的比较\n\n以数组为例，javascript 提供多种遍历语法。最原始的写法就是for循环。\n\nfor (var index = 0; index < myarray.length; index++) {\n  console.log(myarray[index]);\n}\n\n\n1\n2\n3\n\n\n这种写法比较麻烦，因此数组提供内置的foreach方法。\n\nmyarray.foreach(function (value) {\n  console.log(value);\n});\n\n\n1\n2\n3\n\n\n这种写法的问题在于，无法中途跳出foreach循环，break命令或return命令都不能奏效。\n\nfor...in循环可以遍历数组的键名。\n\nfor (var index in myarray) {\n  console.log(myarray[index]);\n}\n\n\n1\n2\n3\n\n\nfor...in循环有几个缺点。\n\n * 数组的键名是数字，但是for...in循环是以字符串作为键名“0”、“1”、“2”等等。\n * for...in循环不仅遍历数字键名，还会遍历手动添加的其他键，甚至包括原型链上的键。\n * 某些情况下，for...in循环会以任意顺序遍历键名。\n\n总之，for...in循环主要是为遍历对象而设计的，不适用于遍历数组。\n\nfor...of循环相比上面几种做法，有一些显著的优点。\n\nfor (let value of myarray) {\n  console.log(value);\n}\n\n\n1\n2\n3\n\n * 有着同for...in一样的简洁语法，但是没有for...in那些缺点。\n * 不同于foreach方法，它可以与break、continue和return配合使用。\n * 提供了遍历所有数据结构的统一操作接口。\n\n下面是一个使用 break 语句，跳出for...of循环的例子。\n\nfor (var n of fibonacci) {\n  if (n > 1000)\n    break;\n  console.log(n);\n}\n\n\n1\n2\n3\n4\n5\n\n\n上面的例子，会输出斐波纳契数列小于等于 1000 的项。如果当前项大于 1000，就会使用break语句跳出for...of循环。",charsets:{cjk:!0}},{title:"Generator 函数的异步应用",frontmatter:{title:"Generator 函数的异步应用",date:"2020-02-09T16:00:29.000Z",permalink:"/pages/75af7031eb66847b",author:"阮一峰",categories:["《ES6 教程》笔记"],tags:["ES6"],readingShow:"top"},regularPath:"/06.%E4%B9%A6%E7%B1%8D/05.%E3%80%8AES6%20%E6%95%99%E7%A8%8B%E3%80%8B%E7%AC%94%E8%AE%B0/19.Generator%20%E5%87%BD%E6%95%B0%E7%9A%84%E5%BC%82%E6%AD%A5%E5%BA%94%E7%94%A8.html",relativePath:"06.书籍/05.《ES6 教程》笔记/19.Generator 函数的异步应用.md",key:"v-060c4d78",path:"/pages/75af7031eb66847b/",headers:[{level:2,title:"传统方法",slug:"传统方法",normalizedTitle:"传统方法",charIndex:124},{level:2,title:"基本概念",slug:"基本概念",normalizedTitle:"基本概念",charIndex:242},{level:3,title:"异步",slug:"异步",normalizedTitle:"异步",charIndex:15},{level:3,title:"回调函数",slug:"回调函数",normalizedTitle:"回调函数",charIndex:160},{level:3,title:"Promise",slug:"promise",normalizedTitle:"promise",charIndex:185},{level:2,title:"Generator 函数",slug:"generator-函数",normalizedTitle:"generator 函数",charIndex:2},{level:3,title:"协程",slug:"协程",normalizedTitle:"协程",charIndex:2005},{level:3,title:"协程的 Generator 函数实现",slug:"协程的-generator-函数实现",normalizedTitle:"协程的 generator 函数实现",charIndex:2520},{level:3,title:"Generator 函数的数据交换和错误处理",slug:"generator-函数的数据交换和错误处理",normalizedTitle:"generator 函数的数据交换和错误处理",charIndex:3165},{level:3,title:"异步任务的封装",slug:"异步任务的封装",normalizedTitle:"异步任务的封装",charIndex:4008},{level:2,title:"Thunk 函数",slug:"thunk-函数",normalizedTitle:"thunk 函数",charIndex:4684},{level:3,title:"参数的求值策略",slug:"参数的求值策略",normalizedTitle:"参数的求值策略",charIndex:4731},{level:3,title:"Thunk 函数的含义",slug:"thunk-函数的含义",normalizedTitle:"thunk 函数的含义",charIndex:5419},{level:3,title:"JavaScript 语言的 Thunk 函数",slug:"javascript-语言的-thunk-函数",normalizedTitle:"javascript 语言的 thunk 函数",charIndex:5782},{level:3,title:"Thunkify 模块",slug:"thunkify-模块",normalizedTitle:"thunkify 模块",charIndex:7024},{level:3,title:"Generator 函数的流程管理",slug:"generator-函数的流程管理",normalizedTitle:"generator 函数的流程管理",charIndex:8158},{level:3,title:"Thunk 函数的自动流程管理",slug:"thunk-函数的自动流程管理",normalizedTitle:"thunk 函数的自动流程管理",charIndex:9450},{level:2,title:"co 模块",slug:"co-模块",normalizedTitle:"co 模块",charIndex:10496},{level:3,title:"基本用法",slug:"基本用法",normalizedTitle:"基本用法",charIndex:10506},{level:3,title:"co 模块的原理",slug:"co-模块的原理",normalizedTitle:"co 模块的原理",charIndex:11065},{level:3,title:"基于 Promise 对象的自动执行",slug:"基于-promise-对象的自动执行",normalizedTitle:"基于 promise 对象的自动执行",charIndex:11456},{level:3,title:"co 模块的源码",slug:"co-模块的源码",normalizedTitle:"co 模块的源码",charIndex:12551},{level:3,title:"处理并发的异步操作",slug:"处理并发的异步操作",normalizedTitle:"处理并发的异步操作",charIndex:14322},{level:3,title:"实例：处理 Stream",slug:"实例-处理-stream",normalizedTitle:"实例：处理 stream",charIndex:14981}],excerpt:'<h1 id="generator-函数的异步应用"><a class="header-anchor" href="#generator-函数的异步应用">#</a> Generator 函数的异步应用</h1>\n<p>异步编程对 JavaScript 语言太重要。JavaScript 语言的执行环境是“单线程”的，如果没有异步编程，根本没法用，非卡死不可。本章主要介绍 Generator 函数如何完成异步操作。</p>\n',lastUpdated:"2022/9/22 下午4:28:09",lastUpdatedTimestamp:1663835289e3,headersStr:"传统方法 基本概念 异步 回调函数 Promise Generator 函数 协程 协程的 Generator 函数实现 Generator 函数的数据交换和错误处理 异步任务的封装 Thunk 函数 参数的求值策略 Thunk 函数的含义 JavaScript 语言的 Thunk 函数 Thunkify 模块 Generator 函数的流程管理 Thunk 函数的自动流程管理 co 模块 基本用法 co 模块的原理 基于 Promise 对象的自动执行 co 模块的源码 处理并发的异步操作 实例：处理 Stream",content:"# Generator 函数的异步应用\n\n异步编程对 JavaScript 语言太重要。JavaScript 语言的执行环境是“单线程”的，如果没有异步编程，根本没法用，非卡死不可。本章主要介绍 Generator 函数如何完成异步操作。\n\n\n# 传统方法\n\nES6 诞生以前，异步编程的方法，大概有下面四种。\n\n * 回调函数\n * 事件监听\n * 发布/订阅\n * Promise 对象\n\nGenerator 函数将 JavaScript 异步编程带入了一个全新的阶段。\n\n\n# 基本概念\n\n\n# 异步\n\n所谓\"异步\"，简单说就是一个任务不是连续完成的，可以理解成该任务被人为分成两段，先执行第一段，然后转而执行其他任务，等做好了准备，再回过头执行第二段。\n\n比如，有一个任务是读取文件进行处理，任务的第一段是向操作系统发出请求，要求读取文件。然后，程序执行其他任务，等到操作系统返回文件，再接着执行任务的第二段（处理文件）。这种不连续的执行，就叫做异步。\n\n相应地，连续的执行就叫做同步。由于是连续执行，不能插入其他任务，所以操作系统从硬盘读取文件的这段时间，程序只能干等着。\n\n\n# 回调函数\n\nJavaScript 语言对异步编程的实现，就是回调函数。所谓回调函数，就是把任务的第二段单独写在一个函数里面，等到重新执行这个任务的时候，就直接调用这个函数。回调函数的英语名字callback，直译过来就是\"重新调用\"。\n\n读取文件进行处理，是这样写的。\n\nfs.readFile('/etc/passwd', 'utf-8', function (err, data) {\n  if (err) throw err;\n  console.log(data);\n});\n\n\n1\n2\n3\n4\n\n\n上面代码中，readFile函数的第三个参数，就是回调函数，也就是任务的第二段。等到操作系统返回了/etc/passwd这个文件以后，回调函数才会执行。\n\n一个有趣的问题是，为什么 Node 约定，回调函数的第一个参数，必须是错误对象err（如果没有错误，该参数就是null）？\n\n原因是执行分成两段，第一段执行完以后，任务所在的上下文环境就已经结束了。在这以后抛出的错误，原来的上下文环境已经无法捕捉，只能当作参数，传入第二段。\n\n\n# Promise\n\n回调函数本身并没有问题，它的问题出现在多个回调函数嵌套。假定读取A文件之后，再读取B文件，代码如下。\n\nfs.readFile(fileA, 'utf-8', function (err, data) {\n  fs.readFile(fileB, 'utf-8', function (err, data) {\n    // ...\n  });\n});\n\n\n1\n2\n3\n4\n5\n\n\n不难想象，如果依次读取两个以上的文件，就会出现多重嵌套。代码不是纵向发展，而是横向发展，很快就会乱成一团，无法管理。因为多个异步操作形成了强耦合，只要有一个操作需要修改，它的上层回调函数和下层回调函数，可能都要跟着修改。这种情况就称为\"回调函数地狱\"（callback hell）。\n\nPromise 对象就是为了解决这个问题而提出的。它不是新的语法功能，而是一种新的写法，允许将回调函数的嵌套，改成链式调用。采用 Promise，连续读取多个文件，写法如下。\n\nvar readFile = require('fs-readfile-promise');\n\nreadFile(fileA)\n.then(function (data) {\n  console.log(data.toString());\n})\n.then(function () {\n  return readFile(fileB);\n})\n.then(function (data) {\n  console.log(data.toString());\n})\n.catch(function (err) {\n  console.log(err);\n});\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n上面代码中，我使用了fs-readfile-promise模块，它的作用就是返回一个 Promise 版本的readFile函数。Promise 提供then方法加载回调函数，catch方法捕捉执行过程中抛出的错误。\n\n可以看到，Promise 的写法只是回调函数的改进，使用then方法以后，异步任务的两段执行看得更清楚了，除此以外，并无新意。\n\nPromise 的最大问题是代码冗余，原来的任务被 Promise 包装了一下，不管什么操作，一眼看去都是一堆then，原来的语义变得很不清楚。\n\n那么，有没有更好的写法呢？\n\n\n# Generator 函数\n\n\n# 协程\n\n传统的编程语言，早有异步编程的解决方案（其实是多任务的解决方案）。其中有一种叫做\"协程\"（coroutine），意思是多个线程互相协作，完成异步任务。\n\n协程有点像函数，又有点像线程。它的运行流程大致如下。\n\n * 第一步，协程A开始执行。\n * 第二步，协程A执行到一半，进入暂停，执行权转移到协程B。\n * 第三步，（一段时间后）协程B交还执行权。\n * 第四步，协程A恢复执行。\n\n上面流程的协程A，就是异步任务，因为它分成两段（或多段）执行。\n\n举例来说，读取文件的协程写法如下。\n\nfunction* asyncJob() {\n  // ...其他代码\n  var f = yield readFile(fileA);\n  // ...其他代码\n}\n\n\n1\n2\n3\n4\n5\n\n\n上面代码的函数asyncJob是一个协程，它的奥妙就在其中的yield命令。它表示执行到此处，执行权将交给其他协程。也就是说，yield命令是异步两个阶段的分界线。\n\n协程遇到yield命令就暂停，等到执行权返回，再从暂停的地方继续往后执行。它的最大优点，就是代码的写法非常像同步操作，如果去除yield命令，简直一模一样。\n\n\n# 协程的 Generator 函数实现\n\nGenerator 函数是协程在 ES6 的实现，最大特点就是可以交出函数的执行权（即暂停执行）。\n\n整个 Generator 函数就是一个封装的异步任务，或者说是异步任务的容器。异步操作需要暂停的地方，都用yield语句注明。Generator 函数的执行方法如下。\n\nfunction* gen(x) {\n  var y = yield x + 2;\n  return y;\n}\n\nvar g = gen(1);\ng.next() // { value: 3, done: false }\ng.next() // { value: undefined, done: true }\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n上面代码中，调用 Generator 函数，会返回一个内部指针（即遍历器）g。这是 Generator 函数不同于普通函数的另一个地方，即执行它不会返回结果，返回的是指针对象。调用指针g的next方法，会移动内部指针（即执行异步任务的第一段），指向第一个遇到的yield语句，上例是执行到x + 2为止。\n\n换言之，next方法的作用是分阶段执行Generator函数。每次调用next方法，会返回一个对象，表示当前阶段的信息（value属性和done属性）。value属性是yield语句后面表达式的值，表示当前阶段的值；done属性是一个布尔值，表示 Generator 函数是否执行完毕，即是否还有下一个阶段。\n\n\n# Generator 函数的数据交换和错误处理\n\nGenerator 函数可以暂停执行和恢复执行，这是它能封装异步任务的根本原因。除此之外，它还有两个特性，使它可以作为异步编程的完整解决方案：函数体内外的数据交换和错误处理机制。\n\nnext返回值的 value 属性，是 Generator 函数向外输出数据；next方法还可以接受参数，向 Generator 函数体内输入数据。\n\nfunction* gen(x){\n  var y = yield x + 2;\n  return y;\n}\n\nvar g = gen(1);\ng.next() // { value: 3, done: false }\ng.next(2) // { value: 2, done: true }\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n上面代码中，第一个next方法的value属性，返回表达式x + 2的值3。第二个next方法带有参数2，这个参数可以传入 Generator 函数，作为上个阶段异步任务的返回结果，被函数体内的变量y接收。因此，这一步的value属性，返回的就是2（变量y的值）。\n\nGenerator 函数内部还可以部署错误处理代码，捕获函数体外抛出的错误。\n\nfunction* gen(x){\n  try {\n    var y = yield x + 2;\n  } catch (e){\n    console.log(e);\n  }\n  return y;\n}\n\nvar g = gen(1);\ng.next();\ng.throw('出错了');\n// 出错了\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n上面代码的最后一行，Generator 函数体外，使用指针对象的throw方法抛出的错误，可以被函数体内的try...catch代码块捕获。这意味着，出错的代码与处理错误的代码，实现了时间和空间上的分离，这对于异步编程无疑是很重要的。\n\n\n# 异步任务的封装\n\n下面看看如何使用 Generator 函数，执行一个真实的异步任务。\n\nvar fetch = require('node-fetch');\n\nfunction* gen(){\n  var url = 'https://api.github.com/users/github';\n  var result = yield fetch(url);\n  console.log(result.bio);\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n上面代码中，Generator 函数封装了一个异步操作，该操作先读取一个远程接口，然后从 JSON 格式的数据解析信息。就像前面说过的，这段代码非常像同步操作，除了加上了yield命令。\n\n执行这段代码的方法如下。\n\nvar g = gen();\nvar result = g.next();\n\nresult.value.then(function(data){\n  return data.json();\n}).then(function(data){\n  g.next(data);\n});\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n上面代码中，首先执行 Generator 函数，获取遍历器对象，然后使用next方法（第二行），执行异步任务的第一阶段。由于Fetch模块返回的是一个 Promise 对象，因此要用then方法调用下一个next方法。\n\n可以看到，虽然 Generator 函数将异步操作表示得很简洁，但是流程管理却不方便（即何时执行第一阶段、何时执行第二阶段）。\n\n\n# Thunk 函数\n\nThunk 函数是自动执行 Generator 函数的一种方法。\n\n\n# 参数的求值策略\n\nThunk 函数早在上个世纪 60 年代就诞生了。\n\n那时，编程语言刚刚起步，计算机学家还在研究，编译器怎么写比较好。一个争论的焦点是\"求值策略\"，即函数的参数到底应该何时求值。\n\nvar x = 1;\n\nfunction f(m) {\n  return m * 2;\n}\n\nf(x + 5)\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n上面代码先定义函数f，然后向它传入表达式x + 5。请问，这个表达式应该何时求值？\n\n一种意见是\"传值调用\"（call by value），即在进入函数体之前，就计算x + 5的值（等于 6），再将这个值传入函数f。C 语言就采用这种策略。\n\nf(x + 5)\n// 传值调用时，等同于\nf(6)\n\n\n1\n2\n3\n\n\n另一种意见是“传名调用”（call by name），即直接将表达式x + 5传入函数体，只在用到它的时候求值。Haskell 语言采用这种策略。\n\nf(x + 5)\n// 传名调用时，等同于\n(x + 5) * 2\n\n\n1\n2\n3\n\n\n传值调用和传名调用，哪一种比较好？\n\n回答是各有利弊。传值调用比较简单，但是对参数求值的时候，实际上还没用到这个参数，有可能造成性能损失。\n\nfunction f(a, b){\n  return b;\n}\n\nf(3 * x * x - 2 * x - 1, x);\n\n\n1\n2\n3\n4\n5\n\n\n上面代码中，函数f的第一个参数是一个复杂的表达式，但是函数体内根本没用到。对这个参数求值，实际上是不必要的。因此，有一些计算机学家倾向于\"传名调用\"，即只在执行时求值。\n\n\n# Thunk 函数的含义\n\n编译器的“传名调用”实现，往往是将参数放到一个临时函数之中，再将这个临时函数传入函数体。这个临时函数就叫做 Thunk 函数。\n\nfunction f(m) {\n  return m * 2;\n}\n\nf(x + 5);\n\n// 等同于\n\nvar thunk = function () {\n  return x + 5;\n};\n\nfunction f(thunk) {\n  return thunk() * 2;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n上面代码中，函数 f 的参数x + 5被一个函数替换了。凡是用到原参数的地方，对Thunk函数求值即可。\n\n这就是 Thunk 函数的定义，它是“传名调用”的一种实现策略，用来替换某个表达式。\n\n\n# JavaScript 语言的 Thunk 函数\n\nJavaScript 语言是传值调用，它的 Thunk 函数含义有所不同。在 JavaScript 语言中，Thunk 函数替换的不是表达式，而是多参数函数，将其替换成一个只接受回调函数作为参数的单参数函数。\n\n// 正常版本的readFile（多参数版本）\nfs.readFile(fileName, callback);\n\n// Thunk版本的readFile（单参数版本）\nvar Thunk = function (fileName) {\n  return function (callback) {\n    return fs.readFile(fileName, callback);\n  };\n};\n\nvar readFileThunk = Thunk(fileName);\nreadFileThunk(callback);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n上面代码中，fs模块的readFile方法是一个多参数函数，两个参数分别为文件名和回调函数。经过转换器处理，它变成了一个单参数函数，只接受回调函数作为参数。这个单参数版本，就叫做 Thunk 函数。\n\n任何函数，只要参数有回调函数，就能写成 Thunk 函数的形式。下面是一个简单的 Thunk 函数转换器。\n\n// ES5版本\nvar Thunk = function(fn){\n  return function (){\n    var args = Array.prototype.slice.call(arguments);\n    return function (callback){\n      args.push(callback);\n      return fn.apply(this, args);\n    }\n  };\n};\n\n// ES6版本\nconst Thunk = function(fn) {\n  return function (...args) {\n    return function (callback) {\n      return fn.call(this, ...args, callback);\n    }\n  };\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\n使用上面的转换器，生成fs.readFile的 Thunk 函数。\n\nvar readFileThunk = Thunk(fs.readFile);\nreadFileThunk(fileA)(callback);\n\n\n1\n2\n\n\n下面是另一个完整的例子。\n\nfunction f(a, cb) {\n  cb(a);\n}\nconst ft = Thunk(f);\n\nft(1)(console.log) // 1\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# Thunkify 模块\n\n生产环境的转换器，建议使用 Thunkify 模块。\n\n首先是安装。\n\n$ npm install thunkify\n\n\n1\n\n\n使用方式如下。\n\nvar thunkify = require('thunkify');\nvar fs = require('fs');\n\nvar read = thunkify(fs.readFile);\nread('package.json')(function(err, str){\n  // ...\n});\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\nThunkify 的源码与上一节那个简单的转换器非常像。\n\nfunction thunkify(fn) {\n  return function() {\n    var args = new Array(arguments.length);\n    var ctx = this;\n\n    for (var i = 0; i < args.length; ++i) {\n      args[i] = arguments[i];\n    }\n\n    return function (done) {\n      var called;\n\n      args.push(function () {\n        if (called) return;\n        called = true;\n        done.apply(null, arguments);\n      });\n\n      try {\n        fn.apply(ctx, args);\n      } catch (err) {\n        done(err);\n      }\n    }\n  }\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n\n\n它的源码主要多了一个检查机制，变量called确保回调函数只运行一次。这样的设计与下文的 Generator 函数相关。请看下面的例子。\n\nfunction f(a, b, callback){\n  var sum = a + b;\n  callback(sum);\n  callback(sum);\n}\n\nvar ft = thunkify(f);\nvar print = console.log.bind(console);\nft(1, 2)(print);\n// 3\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n上面代码中，由于thunkify只允许回调函数执行一次，所以只输出一行结果。\n\n\n# Generator 函数的流程管理\n\n你可能会问， Thunk 函数有什么用？回答是以前确实没什么用，但是 ES6 有了 Generator 函数，Thunk 函数现在可以用于 Generator 函数的自动流程管理。\n\nGenerator 函数可以自动执行。\n\nfunction* gen() {\n  // ...\n}\n\nvar g = gen();\nvar res = g.next();\n\nwhile(!res.done){\n  console.log(res.value);\n  res = g.next();\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n上面代码中，Generator 函数gen会自动执行完所有步骤。\n\n但是，这不适合异步操作。如果必须保证前一步执行完，才能执行后一步，上面的自动执行就不可行。这时，Thunk 函数就能派上用处。以读取文件为例。下面的 Generator 函数封装了两个异步操作。\n\nvar fs = require('fs');\nvar thunkify = require('thunkify');\nvar readFileThunk = thunkify(fs.readFile);\n\nvar gen = function* (){\n  var r1 = yield readFileThunk('/etc/fstab');\n  console.log(r1.toString());\n  var r2 = yield readFileThunk('/etc/shells');\n  console.log(r2.toString());\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n上面代码中，yield命令用于将程序的执行权移出 Generator 函数，那么就需要一种方法，将执行权再交还给 Generator 函数。\n\n这种方法就是 Thunk 函数，因为它可以在回调函数里，将执行权交还给 Generator 函数。为了便于理解，我们先看如何手动执行上面这个 Generator 函数。\n\nvar g = gen();\n\nvar r1 = g.next();\nr1.value(function (err, data) {\n  if (err) throw err;\n  var r2 = g.next(data);\n  r2.value(function (err, data) {\n    if (err) throw err;\n    g.next(data);\n  });\n});\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n上面代码中，变量g是 Generator 函数的内部指针，表示目前执行到哪一步。next方法负责将指针移动到下一步，并返回该步的信息（value属性和done属性）。\n\n仔细查看上面的代码，可以发现 Generator 函数的执行过程，其实是将同一个回调函数，反复传入next方法的value属性。这使得我们可以用递归来自动完成这个过程。\n\n\n# Thunk 函数的自动流程管理\n\nThunk 函数真正的威力，在于可以自动执行 Generator 函数。下面就是一个基于 Thunk 函数的 Generator 执行器。\n\nfunction run(fn) {\n  var gen = fn();\n\n  function next(err, data) {\n    var result = gen.next(data);\n    if (result.done) return;\n    result.value(next);\n  }\n\n  next();\n}\n\nfunction* g() {\n  // ...\n}\n\nrun(g);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n上面代码的run函数，就是一个 Generator 函数的自动执行器。内部的next函数就是 Thunk 的回调函数。next函数先将指针移到 Generator 函数的下一步（gen.next方法），然后判断 Generator 函数是否结束（result.done属性），如果没结束，就将next函数再传入 Thunk 函数（result.value属性），否则就直接退出。\n\n有了这个执行器，执行 Generator 函数方便多了。不管内部有多少个异步操作，直接把 Generator 函数传入run函数即可。当然，前提是每一个异步操作，都要是 Thunk 函数，也就是说，跟在yield命令后面的必须是 Thunk 函数。\n\nvar g = function* (){\n  var f1 = yield readFileThunk('fileA');\n  var f2 = yield readFileThunk('fileB');\n  // ...\n  var fn = yield readFileThunk('fileN');\n};\n\nrun(g);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n上面代码中，函数g封装了n个异步的读取文件操作，只要执行run函数，这些操作就会自动完成。这样一来，异步操作不仅可以写得像同步操作，而且一行代码就可以执行。\n\nThunk 函数并不是 Generator 函数自动执行的唯一方案。因为自动执行的关键是，必须有一种机制，自动控制 Generator 函数的流程，接收和交还程序的执行权。回调函数可以做到这一点，Promise 对象也可以做到这一点。\n\n\n# co 模块\n\n\n# 基本用法\n\nco 模块是著名程序员 TJ Holowaychuk 于 2013 年 6 月发布的一个小工具，用于 Generator 函数的自动执行。\n\n下面是一个 Generator 函数，用于依次读取两个文件。\n\nvar gen = function* () {\n  var f1 = yield readFile('/etc/fstab');\n  var f2 = yield readFile('/etc/shells');\n  console.log(f1.toString());\n  console.log(f2.toString());\n};\n\n\n1\n2\n3\n4\n5\n6\n\n\nco 模块可以让你不用编写 Generator 函数的执行器。\n\nvar co = require('co');\nco(gen);\n\n\n1\n2\n\n\n上面代码中，Generator 函数只要传入co函数，就会自动执行。\n\nco函数返回一个Promise对象，因此可以用then方法添加回调函数。\n\nco(gen).then(function (){\n  console.log('Generator 函数执行完成');\n});\n\n\n1\n2\n3\n\n\n上面代码中，等到 Generator 函数执行结束，就会输出一行提示。\n\n\n# co 模块的原理\n\n为什么 co 可以自动执行 Generator 函数？\n\n前面说过，Generator 就是一个异步操作的容器。它的自动执行需要一种机制，当异步操作有了结果，能够自动交回执行权。\n\n两种方法可以做到这一点。\n\n（1）回调函数。将异步操作包装成 Thunk 函数，在回调函数里面交回执行权。\n\n（2）Promise 对象。将异步操作包装成 Promise 对象，用then方法交回执行权。\n\nco 模块其实就是将两种自动执行器（Thunk 函数和 Promise 对象），包装成一个模块。使用 co 的前提条件是，Generator 函数的yield命令后面，只能是 Thunk 函数或 Promise 对象。如果数组或对象的成员，全部都是 Promise 对象，也可以使用 co，详见后文的例子。\n\n上一节已经介绍了基于 Thunk 函数的自动执行器。下面来看，基于 Promise 对象的自动执行器。这是理解 co 模块必须的。\n\n\n# 基于 Promise 对象的自动执行\n\n还是沿用上面的例子。首先，把fs模块的readFile方法包装成一个 Promise 对象。\n\nvar fs = require('fs');\n\nvar readFile = function (fileName){\n  return new Promise(function (resolve, reject){\n    fs.readFile(fileName, function(error, data){\n      if (error) return reject(error);\n      resolve(data);\n    });\n  });\n};\n\nvar gen = function* (){\n  var f1 = yield readFile('/etc/fstab');\n  var f2 = yield readFile('/etc/shells');\n  console.log(f1.toString());\n  console.log(f2.toString());\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n然后，手动执行上面的 Generator 函数。\n\nvar g = gen();\n\ng.next().value.then(function(data){\n  g.next(data).value.then(function(data){\n    g.next(data);\n  });\n});\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n手动执行其实就是用then方法，层层添加回调函数。理解了这一点，就可以写出一个自动执行器。\n\nfunction run(gen){\n  var g = gen();\n\n  function next(data){\n    var result = g.next(data);\n    if (result.done) return result.value;\n    result.value.then(function(data){\n      next(data);\n    });\n  }\n\n  next();\n}\n\nrun(gen);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n上面代码中，只要 Generator 函数还没执行到最后一步，next函数就调用自身，以此实现自动执行。\n\n\n# co 模块的源码\n\nco 就是上面那个自动执行器的扩展，它的源码只有几十行，非常简单。\n\n首先，co 函数接受 Generator 函数作为参数，返回一个 Promise 对象。\n\nfunction co(gen) {\n  var ctx = this;\n\n  return new Promise(function(resolve, reject) {\n  });\n}\n\n\n1\n2\n3\n4\n5\n6\n\n\n在返回的 Promise 对象里面，co 先检查参数gen是否为 Generator 函数。如果是，就执行该函数，得到一个内部指针对象；如果不是就返回，并将 Promise 对象的状态改为resolved。\n\nfunction co(gen) {\n  var ctx = this;\n\n  return new Promise(function(resolve, reject) {\n    if (typeof gen === 'function') gen = gen.call(ctx);\n    if (!gen || typeof gen.next !== 'function') return resolve(gen);\n  });\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n接着，co 将 Generator 函数的内部指针对象的next方法，包装成onFulfilled函数。这主要是为了能够捕捉抛出的错误。\n\nfunction co(gen) {\n  var ctx = this;\n\n  return new Promise(function(resolve, reject) {\n    if (typeof gen === 'function') gen = gen.call(ctx);\n    if (!gen || typeof gen.next !== 'function') return resolve(gen);\n\n    onFulfilled();\n    function onFulfilled(res) {\n      var ret;\n      try {\n        ret = gen.next(res);\n      } catch (e) {\n        return reject(e);\n      }\n      next(ret);\n    }\n  });\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\n最后，就是关键的next函数，它会反复调用自身。\n\nfunction next(ret) {\n  if (ret.done) return resolve(ret.value);\n  var value = toPromise.call(ctx, ret.value);\n  if (value && isPromise(value)) return value.then(onFulfilled, onRejected);\n  return onRejected(\n    new TypeError(\n      'You may only yield a function, promise, generator, array, or object, '\n      + 'but the following object was passed: \"'\n      + String(ret.value)\n      + '\"'\n    )\n  );\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n上面代码中，next函数的内部代码，一共只有四行命令。\n\n第一行，检查当前是否为 Generator 函数的最后一步，如果是就返回。\n\n第二行，确保每一步的返回值，是 Promise 对象。\n\n第三行，使用then方法，为返回值加上回调函数，然后通过onFulfilled函数再次调用next函数。\n\n第四行，在参数不符合要求的情况下（参数非 Thunk 函数和 Promise 对象），将 Promise 对象的状态改为rejected，从而终止执行。\n\n\n# 处理并发的异步操作\n\nco 支持并发的异步操作，即允许某些操作同时进行，等到它们全部完成，才进行下一步。\n\n这时，要把并发的操作都放在数组或对象里面，跟在yield语句后面。\n\n// 数组的写法\nco(function* () {\n  var res = yield [\n    Promise.resolve(1),\n    Promise.resolve(2)\n  ];\n  console.log(res);\n}).catch(onerror);\n\n// 对象的写法\nco(function* () {\n  var res = yield {\n    1: Promise.resolve(1),\n    2: Promise.resolve(2),\n  };\n  console.log(res);\n}).catch(onerror);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n下面是另一个例子。\n\nco(function* () {\n  var values = [n1, n2, n3];\n  yield values.map(somethingAsync);\n});\n\nfunction* somethingAsync(x) {\n  // do something async\n  return y\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n上面的代码允许并发三个somethingAsync异步操作，等到它们全部完成，才会进行下一步。\n\n\n# 实例：处理 Stream\n\nNode 提供 Stream 模式读写数据，特点是一次只处理数据的一部分，数据分成一块块依次处理，就好像“数据流”一样。这对于处理大规模数据非常有利。Stream 模式使用 EventEmitter API，会释放三个事件。\n\n * data事件：下一块数据块已经准备好了。\n * end事件：整个“数据流”处理完了。\n * error事件：发生错误。\n\n使用Promise.race()函数，可以判断这三个事件之中哪一个最先发生，只有当data事件最先发生时，才进入下一个数据块的处理。从而，我们可以通过一个while循环，完成所有数据的读取。\n\nconst co = require('co');\nconst fs = require('fs');\n\nconst stream = fs.createReadStream('./les_miserables.txt');\nlet valjeanCount = 0;\n\nco(function*() {\n  while(true) {\n    const res = yield Promise.race([\n      new Promise(resolve => stream.once('data', resolve)),\n      new Promise(resolve => stream.once('end', resolve)),\n      new Promise((resolve, reject) => stream.once('error', reject))\n    ]);\n    if (!res) {\n      break;\n    }\n    stream.removeAllListeners('data');\n    stream.removeAllListeners('end');\n    stream.removeAllListeners('error');\n    valjeanCount += (res.toString().match(/valjean/ig) || []).length;\n  }\n  console.log('count:', valjeanCount); // count: 1120\n});\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n\n\n上面代码采用 Stream 模式读取《悲惨世界》的文本文件，对于每个数据块都使用stream.once方法，在data、end、error三个事件上添加一次性回调函数。变量res只有在data事件发生时才有值，然后累加每个数据块之中valjean这个词出现的次数。",normalizedContent:"# generator 函数的异步应用\n\n异步编程对 javascript 语言太重要。javascript 语言的执行环境是“单线程”的，如果没有异步编程，根本没法用，非卡死不可。本章主要介绍 generator 函数如何完成异步操作。\n\n\n# 传统方法\n\nes6 诞生以前，异步编程的方法，大概有下面四种。\n\n * 回调函数\n * 事件监听\n * 发布/订阅\n * promise 对象\n\ngenerator 函数将 javascript 异步编程带入了一个全新的阶段。\n\n\n# 基本概念\n\n\n# 异步\n\n所谓\"异步\"，简单说就是一个任务不是连续完成的，可以理解成该任务被人为分成两段，先执行第一段，然后转而执行其他任务，等做好了准备，再回过头执行第二段。\n\n比如，有一个任务是读取文件进行处理，任务的第一段是向操作系统发出请求，要求读取文件。然后，程序执行其他任务，等到操作系统返回文件，再接着执行任务的第二段（处理文件）。这种不连续的执行，就叫做异步。\n\n相应地，连续的执行就叫做同步。由于是连续执行，不能插入其他任务，所以操作系统从硬盘读取文件的这段时间，程序只能干等着。\n\n\n# 回调函数\n\njavascript 语言对异步编程的实现，就是回调函数。所谓回调函数，就是把任务的第二段单独写在一个函数里面，等到重新执行这个任务的时候，就直接调用这个函数。回调函数的英语名字callback，直译过来就是\"重新调用\"。\n\n读取文件进行处理，是这样写的。\n\nfs.readfile('/etc/passwd', 'utf-8', function (err, data) {\n  if (err) throw err;\n  console.log(data);\n});\n\n\n1\n2\n3\n4\n\n\n上面代码中，readfile函数的第三个参数，就是回调函数，也就是任务的第二段。等到操作系统返回了/etc/passwd这个文件以后，回调函数才会执行。\n\n一个有趣的问题是，为什么 node 约定，回调函数的第一个参数，必须是错误对象err（如果没有错误，该参数就是null）？\n\n原因是执行分成两段，第一段执行完以后，任务所在的上下文环境就已经结束了。在这以后抛出的错误，原来的上下文环境已经无法捕捉，只能当作参数，传入第二段。\n\n\n# promise\n\n回调函数本身并没有问题，它的问题出现在多个回调函数嵌套。假定读取a文件之后，再读取b文件，代码如下。\n\nfs.readfile(filea, 'utf-8', function (err, data) {\n  fs.readfile(fileb, 'utf-8', function (err, data) {\n    // ...\n  });\n});\n\n\n1\n2\n3\n4\n5\n\n\n不难想象，如果依次读取两个以上的文件，就会出现多重嵌套。代码不是纵向发展，而是横向发展，很快就会乱成一团，无法管理。因为多个异步操作形成了强耦合，只要有一个操作需要修改，它的上层回调函数和下层回调函数，可能都要跟着修改。这种情况就称为\"回调函数地狱\"（callback hell）。\n\npromise 对象就是为了解决这个问题而提出的。它不是新的语法功能，而是一种新的写法，允许将回调函数的嵌套，改成链式调用。采用 promise，连续读取多个文件，写法如下。\n\nvar readfile = require('fs-readfile-promise');\n\nreadfile(filea)\n.then(function (data) {\n  console.log(data.tostring());\n})\n.then(function () {\n  return readfile(fileb);\n})\n.then(function (data) {\n  console.log(data.tostring());\n})\n.catch(function (err) {\n  console.log(err);\n});\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n上面代码中，我使用了fs-readfile-promise模块，它的作用就是返回一个 promise 版本的readfile函数。promise 提供then方法加载回调函数，catch方法捕捉执行过程中抛出的错误。\n\n可以看到，promise 的写法只是回调函数的改进，使用then方法以后，异步任务的两段执行看得更清楚了，除此以外，并无新意。\n\npromise 的最大问题是代码冗余，原来的任务被 promise 包装了一下，不管什么操作，一眼看去都是一堆then，原来的语义变得很不清楚。\n\n那么，有没有更好的写法呢？\n\n\n# generator 函数\n\n\n# 协程\n\n传统的编程语言，早有异步编程的解决方案（其实是多任务的解决方案）。其中有一种叫做\"协程\"（coroutine），意思是多个线程互相协作，完成异步任务。\n\n协程有点像函数，又有点像线程。它的运行流程大致如下。\n\n * 第一步，协程a开始执行。\n * 第二步，协程a执行到一半，进入暂停，执行权转移到协程b。\n * 第三步，（一段时间后）协程b交还执行权。\n * 第四步，协程a恢复执行。\n\n上面流程的协程a，就是异步任务，因为它分成两段（或多段）执行。\n\n举例来说，读取文件的协程写法如下。\n\nfunction* asyncjob() {\n  // ...其他代码\n  var f = yield readfile(filea);\n  // ...其他代码\n}\n\n\n1\n2\n3\n4\n5\n\n\n上面代码的函数asyncjob是一个协程，它的奥妙就在其中的yield命令。它表示执行到此处，执行权将交给其他协程。也就是说，yield命令是异步两个阶段的分界线。\n\n协程遇到yield命令就暂停，等到执行权返回，再从暂停的地方继续往后执行。它的最大优点，就是代码的写法非常像同步操作，如果去除yield命令，简直一模一样。\n\n\n# 协程的 generator 函数实现\n\ngenerator 函数是协程在 es6 的实现，最大特点就是可以交出函数的执行权（即暂停执行）。\n\n整个 generator 函数就是一个封装的异步任务，或者说是异步任务的容器。异步操作需要暂停的地方，都用yield语句注明。generator 函数的执行方法如下。\n\nfunction* gen(x) {\n  var y = yield x + 2;\n  return y;\n}\n\nvar g = gen(1);\ng.next() // { value: 3, done: false }\ng.next() // { value: undefined, done: true }\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n上面代码中，调用 generator 函数，会返回一个内部指针（即遍历器）g。这是 generator 函数不同于普通函数的另一个地方，即执行它不会返回结果，返回的是指针对象。调用指针g的next方法，会移动内部指针（即执行异步任务的第一段），指向第一个遇到的yield语句，上例是执行到x + 2为止。\n\n换言之，next方法的作用是分阶段执行generator函数。每次调用next方法，会返回一个对象，表示当前阶段的信息（value属性和done属性）。value属性是yield语句后面表达式的值，表示当前阶段的值；done属性是一个布尔值，表示 generator 函数是否执行完毕，即是否还有下一个阶段。\n\n\n# generator 函数的数据交换和错误处理\n\ngenerator 函数可以暂停执行和恢复执行，这是它能封装异步任务的根本原因。除此之外，它还有两个特性，使它可以作为异步编程的完整解决方案：函数体内外的数据交换和错误处理机制。\n\nnext返回值的 value 属性，是 generator 函数向外输出数据；next方法还可以接受参数，向 generator 函数体内输入数据。\n\nfunction* gen(x){\n  var y = yield x + 2;\n  return y;\n}\n\nvar g = gen(1);\ng.next() // { value: 3, done: false }\ng.next(2) // { value: 2, done: true }\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n上面代码中，第一个next方法的value属性，返回表达式x + 2的值3。第二个next方法带有参数2，这个参数可以传入 generator 函数，作为上个阶段异步任务的返回结果，被函数体内的变量y接收。因此，这一步的value属性，返回的就是2（变量y的值）。\n\ngenerator 函数内部还可以部署错误处理代码，捕获函数体外抛出的错误。\n\nfunction* gen(x){\n  try {\n    var y = yield x + 2;\n  } catch (e){\n    console.log(e);\n  }\n  return y;\n}\n\nvar g = gen(1);\ng.next();\ng.throw('出错了');\n// 出错了\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n上面代码的最后一行，generator 函数体外，使用指针对象的throw方法抛出的错误，可以被函数体内的try...catch代码块捕获。这意味着，出错的代码与处理错误的代码，实现了时间和空间上的分离，这对于异步编程无疑是很重要的。\n\n\n# 异步任务的封装\n\n下面看看如何使用 generator 函数，执行一个真实的异步任务。\n\nvar fetch = require('node-fetch');\n\nfunction* gen(){\n  var url = 'https://api.github.com/users/github';\n  var result = yield fetch(url);\n  console.log(result.bio);\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n上面代码中，generator 函数封装了一个异步操作，该操作先读取一个远程接口，然后从 json 格式的数据解析信息。就像前面说过的，这段代码非常像同步操作，除了加上了yield命令。\n\n执行这段代码的方法如下。\n\nvar g = gen();\nvar result = g.next();\n\nresult.value.then(function(data){\n  return data.json();\n}).then(function(data){\n  g.next(data);\n});\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n上面代码中，首先执行 generator 函数，获取遍历器对象，然后使用next方法（第二行），执行异步任务的第一阶段。由于fetch模块返回的是一个 promise 对象，因此要用then方法调用下一个next方法。\n\n可以看到，虽然 generator 函数将异步操作表示得很简洁，但是流程管理却不方便（即何时执行第一阶段、何时执行第二阶段）。\n\n\n# thunk 函数\n\nthunk 函数是自动执行 generator 函数的一种方法。\n\n\n# 参数的求值策略\n\nthunk 函数早在上个世纪 60 年代就诞生了。\n\n那时，编程语言刚刚起步，计算机学家还在研究，编译器怎么写比较好。一个争论的焦点是\"求值策略\"，即函数的参数到底应该何时求值。\n\nvar x = 1;\n\nfunction f(m) {\n  return m * 2;\n}\n\nf(x + 5)\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n上面代码先定义函数f，然后向它传入表达式x + 5。请问，这个表达式应该何时求值？\n\n一种意见是\"传值调用\"（call by value），即在进入函数体之前，就计算x + 5的值（等于 6），再将这个值传入函数f。c 语言就采用这种策略。\n\nf(x + 5)\n// 传值调用时，等同于\nf(6)\n\n\n1\n2\n3\n\n\n另一种意见是“传名调用”（call by name），即直接将表达式x + 5传入函数体，只在用到它的时候求值。haskell 语言采用这种策略。\n\nf(x + 5)\n// 传名调用时，等同于\n(x + 5) * 2\n\n\n1\n2\n3\n\n\n传值调用和传名调用，哪一种比较好？\n\n回答是各有利弊。传值调用比较简单，但是对参数求值的时候，实际上还没用到这个参数，有可能造成性能损失。\n\nfunction f(a, b){\n  return b;\n}\n\nf(3 * x * x - 2 * x - 1, x);\n\n\n1\n2\n3\n4\n5\n\n\n上面代码中，函数f的第一个参数是一个复杂的表达式，但是函数体内根本没用到。对这个参数求值，实际上是不必要的。因此，有一些计算机学家倾向于\"传名调用\"，即只在执行时求值。\n\n\n# thunk 函数的含义\n\n编译器的“传名调用”实现，往往是将参数放到一个临时函数之中，再将这个临时函数传入函数体。这个临时函数就叫做 thunk 函数。\n\nfunction f(m) {\n  return m * 2;\n}\n\nf(x + 5);\n\n// 等同于\n\nvar thunk = function () {\n  return x + 5;\n};\n\nfunction f(thunk) {\n  return thunk() * 2;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n上面代码中，函数 f 的参数x + 5被一个函数替换了。凡是用到原参数的地方，对thunk函数求值即可。\n\n这就是 thunk 函数的定义，它是“传名调用”的一种实现策略，用来替换某个表达式。\n\n\n# javascript 语言的 thunk 函数\n\njavascript 语言是传值调用，它的 thunk 函数含义有所不同。在 javascript 语言中，thunk 函数替换的不是表达式，而是多参数函数，将其替换成一个只接受回调函数作为参数的单参数函数。\n\n// 正常版本的readfile（多参数版本）\nfs.readfile(filename, callback);\n\n// thunk版本的readfile（单参数版本）\nvar thunk = function (filename) {\n  return function (callback) {\n    return fs.readfile(filename, callback);\n  };\n};\n\nvar readfilethunk = thunk(filename);\nreadfilethunk(callback);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n上面代码中，fs模块的readfile方法是一个多参数函数，两个参数分别为文件名和回调函数。经过转换器处理，它变成了一个单参数函数，只接受回调函数作为参数。这个单参数版本，就叫做 thunk 函数。\n\n任何函数，只要参数有回调函数，就能写成 thunk 函数的形式。下面是一个简单的 thunk 函数转换器。\n\n// es5版本\nvar thunk = function(fn){\n  return function (){\n    var args = array.prototype.slice.call(arguments);\n    return function (callback){\n      args.push(callback);\n      return fn.apply(this, args);\n    }\n  };\n};\n\n// es6版本\nconst thunk = function(fn) {\n  return function (...args) {\n    return function (callback) {\n      return fn.call(this, ...args, callback);\n    }\n  };\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\n使用上面的转换器，生成fs.readfile的 thunk 函数。\n\nvar readfilethunk = thunk(fs.readfile);\nreadfilethunk(filea)(callback);\n\n\n1\n2\n\n\n下面是另一个完整的例子。\n\nfunction f(a, cb) {\n  cb(a);\n}\nconst ft = thunk(f);\n\nft(1)(console.log) // 1\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# thunkify 模块\n\n生产环境的转换器，建议使用 thunkify 模块。\n\n首先是安装。\n\n$ npm install thunkify\n\n\n1\n\n\n使用方式如下。\n\nvar thunkify = require('thunkify');\nvar fs = require('fs');\n\nvar read = thunkify(fs.readfile);\nread('package.json')(function(err, str){\n  // ...\n});\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\nthunkify 的源码与上一节那个简单的转换器非常像。\n\nfunction thunkify(fn) {\n  return function() {\n    var args = new array(arguments.length);\n    var ctx = this;\n\n    for (var i = 0; i < args.length; ++i) {\n      args[i] = arguments[i];\n    }\n\n    return function (done) {\n      var called;\n\n      args.push(function () {\n        if (called) return;\n        called = true;\n        done.apply(null, arguments);\n      });\n\n      try {\n        fn.apply(ctx, args);\n      } catch (err) {\n        done(err);\n      }\n    }\n  }\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n\n\n它的源码主要多了一个检查机制，变量called确保回调函数只运行一次。这样的设计与下文的 generator 函数相关。请看下面的例子。\n\nfunction f(a, b, callback){\n  var sum = a + b;\n  callback(sum);\n  callback(sum);\n}\n\nvar ft = thunkify(f);\nvar print = console.log.bind(console);\nft(1, 2)(print);\n// 3\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n上面代码中，由于thunkify只允许回调函数执行一次，所以只输出一行结果。\n\n\n# generator 函数的流程管理\n\n你可能会问， thunk 函数有什么用？回答是以前确实没什么用，但是 es6 有了 generator 函数，thunk 函数现在可以用于 generator 函数的自动流程管理。\n\ngenerator 函数可以自动执行。\n\nfunction* gen() {\n  // ...\n}\n\nvar g = gen();\nvar res = g.next();\n\nwhile(!res.done){\n  console.log(res.value);\n  res = g.next();\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n上面代码中，generator 函数gen会自动执行完所有步骤。\n\n但是，这不适合异步操作。如果必须保证前一步执行完，才能执行后一步，上面的自动执行就不可行。这时，thunk 函数就能派上用处。以读取文件为例。下面的 generator 函数封装了两个异步操作。\n\nvar fs = require('fs');\nvar thunkify = require('thunkify');\nvar readfilethunk = thunkify(fs.readfile);\n\nvar gen = function* (){\n  var r1 = yield readfilethunk('/etc/fstab');\n  console.log(r1.tostring());\n  var r2 = yield readfilethunk('/etc/shells');\n  console.log(r2.tostring());\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n上面代码中，yield命令用于将程序的执行权移出 generator 函数，那么就需要一种方法，将执行权再交还给 generator 函数。\n\n这种方法就是 thunk 函数，因为它可以在回调函数里，将执行权交还给 generator 函数。为了便于理解，我们先看如何手动执行上面这个 generator 函数。\n\nvar g = gen();\n\nvar r1 = g.next();\nr1.value(function (err, data) {\n  if (err) throw err;\n  var r2 = g.next(data);\n  r2.value(function (err, data) {\n    if (err) throw err;\n    g.next(data);\n  });\n});\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n上面代码中，变量g是 generator 函数的内部指针，表示目前执行到哪一步。next方法负责将指针移动到下一步，并返回该步的信息（value属性和done属性）。\n\n仔细查看上面的代码，可以发现 generator 函数的执行过程，其实是将同一个回调函数，反复传入next方法的value属性。这使得我们可以用递归来自动完成这个过程。\n\n\n# thunk 函数的自动流程管理\n\nthunk 函数真正的威力，在于可以自动执行 generator 函数。下面就是一个基于 thunk 函数的 generator 执行器。\n\nfunction run(fn) {\n  var gen = fn();\n\n  function next(err, data) {\n    var result = gen.next(data);\n    if (result.done) return;\n    result.value(next);\n  }\n\n  next();\n}\n\nfunction* g() {\n  // ...\n}\n\nrun(g);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n上面代码的run函数，就是一个 generator 函数的自动执行器。内部的next函数就是 thunk 的回调函数。next函数先将指针移到 generator 函数的下一步（gen.next方法），然后判断 generator 函数是否结束（result.done属性），如果没结束，就将next函数再传入 thunk 函数（result.value属性），否则就直接退出。\n\n有了这个执行器，执行 generator 函数方便多了。不管内部有多少个异步操作，直接把 generator 函数传入run函数即可。当然，前提是每一个异步操作，都要是 thunk 函数，也就是说，跟在yield命令后面的必须是 thunk 函数。\n\nvar g = function* (){\n  var f1 = yield readfilethunk('filea');\n  var f2 = yield readfilethunk('fileb');\n  // ...\n  var fn = yield readfilethunk('filen');\n};\n\nrun(g);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n上面代码中，函数g封装了n个异步的读取文件操作，只要执行run函数，这些操作就会自动完成。这样一来，异步操作不仅可以写得像同步操作，而且一行代码就可以执行。\n\nthunk 函数并不是 generator 函数自动执行的唯一方案。因为自动执行的关键是，必须有一种机制，自动控制 generator 函数的流程，接收和交还程序的执行权。回调函数可以做到这一点，promise 对象也可以做到这一点。\n\n\n# co 模块\n\n\n# 基本用法\n\nco 模块是著名程序员 tj holowaychuk 于 2013 年 6 月发布的一个小工具，用于 generator 函数的自动执行。\n\n下面是一个 generator 函数，用于依次读取两个文件。\n\nvar gen = function* () {\n  var f1 = yield readfile('/etc/fstab');\n  var f2 = yield readfile('/etc/shells');\n  console.log(f1.tostring());\n  console.log(f2.tostring());\n};\n\n\n1\n2\n3\n4\n5\n6\n\n\nco 模块可以让你不用编写 generator 函数的执行器。\n\nvar co = require('co');\nco(gen);\n\n\n1\n2\n\n\n上面代码中，generator 函数只要传入co函数，就会自动执行。\n\nco函数返回一个promise对象，因此可以用then方法添加回调函数。\n\nco(gen).then(function (){\n  console.log('generator 函数执行完成');\n});\n\n\n1\n2\n3\n\n\n上面代码中，等到 generator 函数执行结束，就会输出一行提示。\n\n\n# co 模块的原理\n\n为什么 co 可以自动执行 generator 函数？\n\n前面说过，generator 就是一个异步操作的容器。它的自动执行需要一种机制，当异步操作有了结果，能够自动交回执行权。\n\n两种方法可以做到这一点。\n\n（1）回调函数。将异步操作包装成 thunk 函数，在回调函数里面交回执行权。\n\n（2）promise 对象。将异步操作包装成 promise 对象，用then方法交回执行权。\n\nco 模块其实就是将两种自动执行器（thunk 函数和 promise 对象），包装成一个模块。使用 co 的前提条件是，generator 函数的yield命令后面，只能是 thunk 函数或 promise 对象。如果数组或对象的成员，全部都是 promise 对象，也可以使用 co，详见后文的例子。\n\n上一节已经介绍了基于 thunk 函数的自动执行器。下面来看，基于 promise 对象的自动执行器。这是理解 co 模块必须的。\n\n\n# 基于 promise 对象的自动执行\n\n还是沿用上面的例子。首先，把fs模块的readfile方法包装成一个 promise 对象。\n\nvar fs = require('fs');\n\nvar readfile = function (filename){\n  return new promise(function (resolve, reject){\n    fs.readfile(filename, function(error, data){\n      if (error) return reject(error);\n      resolve(data);\n    });\n  });\n};\n\nvar gen = function* (){\n  var f1 = yield readfile('/etc/fstab');\n  var f2 = yield readfile('/etc/shells');\n  console.log(f1.tostring());\n  console.log(f2.tostring());\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n然后，手动执行上面的 generator 函数。\n\nvar g = gen();\n\ng.next().value.then(function(data){\n  g.next(data).value.then(function(data){\n    g.next(data);\n  });\n});\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n手动执行其实就是用then方法，层层添加回调函数。理解了这一点，就可以写出一个自动执行器。\n\nfunction run(gen){\n  var g = gen();\n\n  function next(data){\n    var result = g.next(data);\n    if (result.done) return result.value;\n    result.value.then(function(data){\n      next(data);\n    });\n  }\n\n  next();\n}\n\nrun(gen);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n上面代码中，只要 generator 函数还没执行到最后一步，next函数就调用自身，以此实现自动执行。\n\n\n# co 模块的源码\n\nco 就是上面那个自动执行器的扩展，它的源码只有几十行，非常简单。\n\n首先，co 函数接受 generator 函数作为参数，返回一个 promise 对象。\n\nfunction co(gen) {\n  var ctx = this;\n\n  return new promise(function(resolve, reject) {\n  });\n}\n\n\n1\n2\n3\n4\n5\n6\n\n\n在返回的 promise 对象里面，co 先检查参数gen是否为 generator 函数。如果是，就执行该函数，得到一个内部指针对象；如果不是就返回，并将 promise 对象的状态改为resolved。\n\nfunction co(gen) {\n  var ctx = this;\n\n  return new promise(function(resolve, reject) {\n    if (typeof gen === 'function') gen = gen.call(ctx);\n    if (!gen || typeof gen.next !== 'function') return resolve(gen);\n  });\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n接着，co 将 generator 函数的内部指针对象的next方法，包装成onfulfilled函数。这主要是为了能够捕捉抛出的错误。\n\nfunction co(gen) {\n  var ctx = this;\n\n  return new promise(function(resolve, reject) {\n    if (typeof gen === 'function') gen = gen.call(ctx);\n    if (!gen || typeof gen.next !== 'function') return resolve(gen);\n\n    onfulfilled();\n    function onfulfilled(res) {\n      var ret;\n      try {\n        ret = gen.next(res);\n      } catch (e) {\n        return reject(e);\n      }\n      next(ret);\n    }\n  });\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\n最后，就是关键的next函数，它会反复调用自身。\n\nfunction next(ret) {\n  if (ret.done) return resolve(ret.value);\n  var value = topromise.call(ctx, ret.value);\n  if (value && ispromise(value)) return value.then(onfulfilled, onrejected);\n  return onrejected(\n    new typeerror(\n      'you may only yield a function, promise, generator, array, or object, '\n      + 'but the following object was passed: \"'\n      + string(ret.value)\n      + '\"'\n    )\n  );\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n上面代码中，next函数的内部代码，一共只有四行命令。\n\n第一行，检查当前是否为 generator 函数的最后一步，如果是就返回。\n\n第二行，确保每一步的返回值，是 promise 对象。\n\n第三行，使用then方法，为返回值加上回调函数，然后通过onfulfilled函数再次调用next函数。\n\n第四行，在参数不符合要求的情况下（参数非 thunk 函数和 promise 对象），将 promise 对象的状态改为rejected，从而终止执行。\n\n\n# 处理并发的异步操作\n\nco 支持并发的异步操作，即允许某些操作同时进行，等到它们全部完成，才进行下一步。\n\n这时，要把并发的操作都放在数组或对象里面，跟在yield语句后面。\n\n// 数组的写法\nco(function* () {\n  var res = yield [\n    promise.resolve(1),\n    promise.resolve(2)\n  ];\n  console.log(res);\n}).catch(onerror);\n\n// 对象的写法\nco(function* () {\n  var res = yield {\n    1: promise.resolve(1),\n    2: promise.resolve(2),\n  };\n  console.log(res);\n}).catch(onerror);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n下面是另一个例子。\n\nco(function* () {\n  var values = [n1, n2, n3];\n  yield values.map(somethingasync);\n});\n\nfunction* somethingasync(x) {\n  // do something async\n  return y\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n上面的代码允许并发三个somethingasync异步操作，等到它们全部完成，才会进行下一步。\n\n\n# 实例：处理 stream\n\nnode 提供 stream 模式读写数据，特点是一次只处理数据的一部分，数据分成一块块依次处理，就好像“数据流”一样。这对于处理大规模数据非常有利。stream 模式使用 eventemitter api，会释放三个事件。\n\n * data事件：下一块数据块已经准备好了。\n * end事件：整个“数据流”处理完了。\n * error事件：发生错误。\n\n使用promise.race()函数，可以判断这三个事件之中哪一个最先发生，只有当data事件最先发生时，才进入下一个数据块的处理。从而，我们可以通过一个while循环，完成所有数据的读取。\n\nconst co = require('co');\nconst fs = require('fs');\n\nconst stream = fs.createreadstream('./les_miserables.txt');\nlet valjeancount = 0;\n\nco(function*() {\n  while(true) {\n    const res = yield promise.race([\n      new promise(resolve => stream.once('data', resolve)),\n      new promise(resolve => stream.once('end', resolve)),\n      new promise((resolve, reject) => stream.once('error', reject))\n    ]);\n    if (!res) {\n      break;\n    }\n    stream.removealllisteners('data');\n    stream.removealllisteners('end');\n    stream.removealllisteners('error');\n    valjeancount += (res.tostring().match(/valjean/ig) || []).length;\n  }\n  console.log('count:', valjeancount); // count: 1120\n});\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n\n\n上面代码采用 stream 模式读取《悲惨世界》的文本文件，对于每个数据块都使用stream.once方法，在data、end、error三个事件上添加一次性回调函数。变量res只有在data事件发生时才有值，然后累加每个数据块之中valjean这个词出现的次数。",charsets:{cjk:!0}},{title:"Generator 函数的语法",frontmatter:{title:"Generator 函数的语法",date:"2020-02-09T16:00:29.000Z",permalink:"/pages/718b48ed9ce0adce",author:"阮一峰",categories:["《ES6 教程》笔记"],tags:["ES6"],readingShow:"top"},regularPath:"/06.%E4%B9%A6%E7%B1%8D/05.%E3%80%8AES6%20%E6%95%99%E7%A8%8B%E3%80%8B%E7%AC%94%E8%AE%B0/18.Generator%20%E5%87%BD%E6%95%B0%E7%9A%84%E8%AF%AD%E6%B3%95.html",relativePath:"06.书籍/05.《ES6 教程》笔记/18.Generator 函数的语法.md",key:"v-34903465",path:"/pages/718b48ed9ce0adce/",headers:[{level:2,title:"简介",slug:"简介",normalizedTitle:"简介",charIndex:22},{level:3,title:"基本概念",slug:"基本概念",normalizedTitle:"基本概念",charIndex:29},{level:3,title:"yield 表达式",slug:"yield-表达式",normalizedTitle:"yield 表达式",charIndex:2098},{level:3,title:"与 Iterator 接口的关系",slug:"与-iterator-接口的关系",normalizedTitle:"与 iterator 接口的关系",charIndex:4558},{level:2,title:"next 方法的参数",slug:"next-方法的参数",normalizedTitle:"next 方法的参数",charIndex:5227},{level:2,title:"for...of 循环",slug:"for-of-循环",normalizedTitle:"for...of 循环",charIndex:7662},{level:2,title:"Generator.prototype.throw()",slug:"generator-prototype-throw",normalizedTitle:"generator.prototype.throw()",charIndex:9786},{level:2,title:"Generator.prototype.return()",slug:"generator-prototype-return",normalizedTitle:"generator.prototype.return()",charIndex:14471},{level:2,title:"next()、throw()、return() 的共同点",slug:"next-、throw-、return-的共同点",normalizedTitle:"next()、throw()、return() 的共同点",charIndex:15733},{level:2,title:"yield* 表达式",slug:"yield-表达式-2",normalizedTitle:"yield* 表达式",charIndex:16559},{level:2,title:"作为对象属性的 Generator 函数",slug:"作为对象属性的-generator-函数",normalizedTitle:"作为对象属性的 generator 函数",charIndex:21944},{level:2,title:"Generator 函数的this",slug:"generator-函数的this",normalizedTitle:"generator 函数的this",charIndex:22233},{level:2,title:"含义",slug:"含义",normalizedTitle:"含义",charIndex:24337},{level:3,title:"Generator 与状态机",slug:"generator-与状态机",normalizedTitle:"generator 与状态机",charIndex:24344},{level:3,title:"Generator 与协程",slug:"generator-与协程",normalizedTitle:"generator 与协程",charIndex:24942},{level:3,title:"Generator 与上下文",slug:"generator-与上下文",normalizedTitle:"generator 与上下文",charIndex:25932},{level:2,title:"应用",slug:"应用",normalizedTitle:"应用",charIndex:115},{level:3,title:"（1）异步操作的同步化表达",slug:"_1-异步操作的同步化表达",normalizedTitle:"（1）异步操作的同步化表达",charIndex:26639},{level:3,title:"（2）控制流管理",slug:"_2-控制流管理",normalizedTitle:"（2）控制流管理",charIndex:27994},{level:3,title:"（3）部署 Iterator 接口",slug:"_3-部署-iterator-接口",normalizedTitle:"（3）部署 iterator 接口",charIndex:30267},{level:3,title:"（4）作为数据结构",slug:"_4-作为数据结构",normalizedTitle:"（4）作为数据结构",charIndex:31061}],excerpt:'<h1 id="generator-函数的语法"><a class="header-anchor" href="#generator-函数的语法">#</a> Generator 函数的语法</h1>\n<h2 id="简介"><a class="header-anchor" href="#简介">#</a> 简介</h2>\n<h3 id="基本概念"><a class="header-anchor" href="#基本概念">#</a> 基本概念</h3>\n<p>Generator 函数是 ES6 提供的一种<strong>异步编程解决方案</strong>，语法行为与传统函数完全不同。本章详细介绍 Generator 函数的语法和 API，它的异步编程应用请看《Generator 函数的异步应用》一章。</p>\n',lastUpdated:"2022/9/22 下午4:28:09",lastUpdatedTimestamp:1663835289e3,headersStr:"简介 基本概念 yield 表达式 与 Iterator 接口的关系 next 方法的参数 for...of 循环 Generator.prototype.throw() Generator.prototype.return() next()、throw()、return() 的共同点 yield* 表达式 作为对象属性的 Generator 函数 Generator 函数的this 含义 Generator 与状态机 Generator 与协程 Generator 与上下文 应用 （1）异步操作的同步化表达 （2）控制流管理 （3）部署 Iterator 接口 （4）作为数据结构",content:"# Generator 函数的语法\n\n\n# 简介\n\n\n# 基本概念\n\nGenerator 函数是 ES6 提供的一种异步编程解决方案，语法行为与传统函数完全不同。本章详细介绍 Generator 函数的语法和 API，它的异步编程应用请看《Generator 函数的异步应用》一章。 Generator 函数有多种理解角度。语法上，首先可以把它理解成，Generator 函数是一个状态机，封装了多个内部状态。\n\n执行 Generator 函数会返回一个遍历器对象，也就是说，Generator 函数除了状态机，还是一个遍历器对象生成函数。返回的遍历器对象，可以依次遍历 Generator 函数内部的每一个状态。\n\n形式上，Generator 函数是一个普通函数，但是有两个特征。一是，function关键字与函数名之间有一个星号；二是，函数体内部使用yield表达式，定义不同的内部状态（yield在英语里的意思就是“产出”）。\n\nfunction* helloWorldGenerator() {\n  yield 'hello';\n  yield 'world';\n  return 'ending';\n}\n\nvar hw = helloWorldGenerator();\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n上面代码定义了一个 Generator 函数helloWorldGenerator，它内部有两个yield表达式（hello和world），即该函数有三个状态：hello，world 和 return 语句（结束执行）。\n\n然后，Generator 函数的调用方法与普通函数一样，也是在函数名后面加上一对圆括号。不同的是，调用 Generator 函数后，该函数并不执行，返回的也不是函数运行结果，而是一个指向内部状态的指针对象，也就是上一章介绍的遍历器对象（Iterator Object）。\n\n下一步，必须调用遍历器对象的next方法，使得指针移向下一个状态。也就是说，每次调用next方法，内部指针就从函数头部或上一次停下来的地方开始执行，直到遇到下一个yield表达式（或return语句）为止。换言之，Generator 函数是分段执行的，yield表达式是暂停执行的标记，而next方法可以恢复执行。\n\nhw.next()\n// { value: 'hello', done: false }\n\nhw.next()\n// { value: 'world', done: false }\n\nhw.next()\n// { value: 'ending', done: true }\n\nhw.next()\n// { value: undefined, done: true }\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n上面代码一共调用了四次next方法。\n\n第一次调用，Generator 函数开始执行，直到遇到第一个yield表达式为止。next方法返回一个对象，它的value属性就是当前yield表达式的值hello，done属性的值false，表示遍历还没有结束。\n\n第二次调用，Generator 函数从上次yield表达式停下的地方，一直执行到下一个yield表达式。next方法返回的对象的value属性就是当前yield表达式的值world，done属性的值false，表示遍历还没有结束。\n\n第三次调用，Generator 函数从上次yield表达式停下的地方，一直执行到return语句（如果没有return语句，就执行到函数结束）。next方法返回的对象的value属性，就是紧跟在return语句后面的表达式的值（如果没有return语句，则value属性的值为undefined），done属性的值true，表示遍历已经结束。\n\n第四次调用，此时 Generator 函数已经运行完毕，next方法返回对象的value属性为undefined，done属性为true。以后再调用next方法，返回的都是这个值。\n\n总结一下，调用 Generator 函数，返回一个遍历器对象，代表 Generator 函数的内部指针。以后，每次调用遍历器对象的next方法，就会返回一个有着value和done两个属性的对象。value属性表示当前的内部状态的值，是yield表达式后面那个表达式的值；done属性是一个布尔值，表示是否遍历结束。\n\nES6 没有规定，function关键字与函数名之间的星号，写在哪个位置。这导致下面的写法都能通过。\n\nfunction * foo(x, y) { ··· }\nfunction *foo(x, y) { ··· }\nfunction* foo(x, y) { ··· }\nfunction*foo(x, y) { ··· }\n\n\n1\n2\n3\n4\n\n\n由于 Generator 函数仍然是普通函数，所以一般的写法是上面的第三种，即星号紧跟在function关键字后面。本书也采用这种写法。\n\n\n# yield 表达式\n\n由于 Generator 函数返回的遍历器对象，只有调用next方法才会遍历下一个内部状态，所以其实提供了一种可以暂停执行的函数。yield表达式就是暂停标志。\n\n遍历器对象的next方法的运行逻辑如下。\n\n（1）遇到yield表达式，就暂停执行后面的操作，并将紧跟在yield后面的那个表达式的值，作为返回的对象的value属性值。\n\n（2）下一次调用next方法时，再继续往下执行，直到遇到下一个yield表达式。\n\n（3）如果没有再遇到新的yield表达式，就一直运行到函数结束，直到return语句为止，并将return语句后面的表达式的值，作为返回的对象的value属性值。\n\n（4）如果该函数没有return语句，则返回的对象的value属性值为undefined。\n\n需要注意的是，yield表达式后面的表达式，只有当调用next方法、内部指针指向该语句时才会执行，因此等于为 JavaScript 提供了手动的“惰性求值”（Lazy Evaluation）的语法功能。\n\nfunction* gen() {\n  yield  123 + 456;\n}\n\n\n1\n2\n3\n\n\n上面代码中，yield后面的表达式123 + 456，不会立即求值，只会在next方法将指针移到这一句时，才会求值。\n\nyield表达式与return语句既有相似之处，也有区别。相似之处在于，都能返回紧跟在语句后面的那个表达式的值。区别在于每次遇到yield，函数暂停执行，下一次再从该位置继续向后执行，而**return语句不具备位置记忆的功能**。一个函数里面，只能执行一次（或者说一个）return语句，但是可以执行多次（或者说多个）yield表达式。正常函数只能返回一个值，因为只能执行一次return；Generator 函数可以返回一系列的值，因为可以有任意多个yield。从另一个角度看，也可以说 Generator 生成了一系列的值，这也就是它的名称的来历（英语中，generator 这个词是“生成器”的意思）。\n\nGenerator 函数可以不用yield表达式，这时就变成了一个单纯的暂缓执行函数。\n\nfunction* f() {\n  console.log('执行了！')\n}\n\nvar generator = f();\n\nsetTimeout(function () {\n  generator.next()\n}, 2000);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n上面代码中，函数f如果是普通函数，在为变量generator赋值时就会执行。但是，函数f是一个 Generator 函数，就变成只有调用next方法时，函数f才会执行。\n\n另外需要注意，yield表达式只能用在 Generator 函数里面，用在其他地方都会报错。\n\n(function (){\n  yield 1;\n})()\n// SyntaxError: Unexpected number\n\n\n1\n2\n3\n4\n\n\n上面代码在一个普通函数中使用yield表达式，结果产生一个句法错误。\n\n下面是另外一个例子。\n\nvar arr = [1, [[2, 3], 4], [5, 6]];\n\nvar flat = function* (a) {\n  a.forEach(function (item) {\n    if (typeof item !== 'number') {\n      yield* flat(item);\n    } else {\n      yield item;\n    }\n  });\n};\n\nfor (var f of flat(arr)){\n  console.log(f);\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n上面代码也会产生句法错误，因为forEach方法的参数是一个普通函数，但是在里面使用了yield表达式（这个函数里面还使用了yield*表达式，详细介绍见后文）。一种修改方法是改用for循环。\n\nvar arr = [1, [[2, 3], 4], [5, 6]];\n\nvar flat = function* (a) {\n  var length = a.length;\n  for (var i = 0; i < length; i++) {\n    var item = a[i];\n    if (typeof item !== 'number') {\n      yield* flat(item);\n    } else {\n      yield item;\n    }\n  }\n};\n\nfor (var f of flat(arr)) {\n  console.log(f);\n}\n// 1, 2, 3, 4, 5, 6\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\n另外，yield表达式如果用在另一个表达式之中，必须放在圆括号里面。\n\nfunction* demo() {\n  console.log('Hello' + yield); // SyntaxError\n  console.log('Hello' + yield 123); // SyntaxError\n\n  console.log('Hello' + (yield)); // OK\n  console.log('Hello' + (yield 123)); // OK\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\nyield表达式用作函数参数或放在赋值表达式的右边，可以不加括号。\n\nfunction* demo() {\n  foo(yield 'a', yield 'b'); // OK\n  let input = yield; // OK\n}\n\n\n1\n2\n3\n4\n\n\n\n# 与 Iterator 接口的关系\n\n上一章说过，任意一个对象的Symbol.iterator方法，等于该对象的遍历器生成函数，调用该函数会返回该对象的一个遍历器对象。\n\n由于 Generator 函数就是遍历器生成函数，因此可以把 Generator 赋值给对象的Symbol.iterator属性，从而使得该对象具有 Iterator 接口。\n\nvar myIterable = {};\nmyIterable[Symbol.iterator] = function* () {\n  yield 1;\n  yield 2;\n  yield 3;\n};\n\n[...myIterable] // [1, 2, 3]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n上面代码中，Generator 函数赋值给Symbol.iterator属性，从而使得myIterable对象具有了 Iterator 接口，可以被...运算符遍历了。\n\nGenerator 函数执行后，返回一个遍历器对象。该对象本身也具有Symbol.iterator属性，执行后返回自身。\n\nfunction* gen(){\n  // some code\n}\n\nvar g = gen();\n\ng[Symbol.iterator]() === g\n// true\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n上面代码中，gen是一个 Generator 函数，调用它会生成一个遍历器对象g。它的Symbol.iterator属性，也是一个遍历器对象生成函数，执行后返回它自己。\n\n\n# next 方法的参数\n\nyield表达式本身没有返回值，或者说总是返回undefined。next方法可以带一个参数，该参数就会被当作上一个yield表达式的返回值。\n\nfunction* f() {\n  for(var i = 0; true; i++) {\n    var reset = yield i;\n    if(reset) { i = -1; }\n  }\n}\n\nvar g = f();\n\ng.next() // { value: 0, done: false }\ng.next() // { value: 1, done: false }\ng.next(true) // { value: 0, done: false } // 参数true 传给上面的变量reset\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n上面代码先定义了一个可以无限运行的 Generator 函数f，如果next方法没有参数，每次运行到yield表达式，变量reset的值总是undefined。当next方法带一个参数true时，变量reset就被重置为这个参数（即true），因此i会等于-1，下一轮循环就会从-1开始递增。\n\n这个功能有很重要的语法意义。Generator 函数从暂停状态到恢复运行，它的上下文状态（context）是不变的。通过next方法的参数，就有办法在 Generator 函数开始运行之后，继续向函数体内部注入值。也就是说，可以在 Generator 函数运行的不同阶段，从外部向内部注入不同的值，从而调整函数行为。\n\n再看一个例子。\n\nfunction* foo(x) {\n  var y = 2 * (yield (x + 1));\n  var z = yield (y / 3);\n  return (x + y + z);\n}\n\nvar a = foo(5);\na.next() // Object{value:6, done:false}\na.next() // Object{value:NaN, done:false}\na.next() // Object{value:NaN, done:true}\n\nvar b = foo(5);\nb.next() // { value:6, done:false }\nb.next(12) // { value:8, done:false }\nb.next(13) // { value:42, done:true }\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n上面代码中，第二次运行next方法的时候不带参数，导致 y 的值等于2 * undefined（即NaN），除以 3 以后还是NaN，因此返回对象的value属性也等于NaN。第三次运行Next方法的时候不带参数，所以z等于undefined，返回对象的value属性等于5 + NaN + undefined，即NaN。\n\n如果向next方法提供参数，返回结果就完全不一样了。上面代码第一次调用b的next方法时，返回x+1的值6；第二次调用next方法，将上一次yield表达式的值设为12，因此y等于24，返回y / 3的值8；第三次调用next方法，将上一次yield表达式的值设为13，因此z等于13，这时x等于5，y等于24，所以return语句的值等于42。\n\n注意，由于next方法的参数表示上一个yield表达式的返回值，所以在第一次使用next方法时，传递参数是无效的。V8 引擎直接忽略第一次使用next方法时的参数，只有从第二次使用next方法开始，参数才是有效的。从语义上讲，第一个next方法用来启动遍历器对象，所以不用带有参数。\n\n再看一个通过next方法的参数，向 Generator 函数内部输入值的例子。\n\nfunction* dataConsumer() {\n  console.log('Started');\n  console.log(`1. ${yield}`);\n  console.log(`2. ${yield}`);\n  return 'result';\n}\n\nlet genObj = dataConsumer();\ngenObj.next();\n// Started\ngenObj.next('a')\n// 1. a\ngenObj.next('b')\n// 2. b\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n上面代码是一个很直观的例子，每次通过next方法向 Generator 函数输入值，然后打印出来。\n\n如果想要第一次调用next方法时，就能够输入值，可以在 Generator 函数外面再包一层。\n\nfunction wrapper(generatorFunction) {\n  return function (...args) {\n    let generatorObject = generatorFunction(...args);\n    generatorObject.next();\n    return generatorObject;\n  };\n}\n\nconst wrapped = wrapper(function* () {\n  console.log(`First input: ${yield}`);\n  return 'DONE';\n});\n\nwrapped().next('hello!')\n// First input: hello!\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n上面代码中，Generator 函数如果不用wrapper先包一层，是无法第一次调用next方法，就输入参数的。\n\n\n# for...of 循环\n\nfor...of循环可以自动遍历 Generator 函数运行时生成的Iterator对象，且此时不再需要调用next方法。\n\nfunction* foo() {\n  yield 1;\n  yield 2;\n  yield 3;\n  yield 4;\n  yield 5;\n  return 6;\n}\n\nfor (let v of foo()) {\n  console.log(v);\n}\n// 1 2 3 4 5\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n上面代码使用for...of循环，依次显示 5 个yield表达式的值。这里需要注意，一旦next方法的返回对象的done属性为true，for...of循环就会中止，且不包含该返回对象，所以上面代码的return语句返回的6，不包括在for...of循环之中。\n\n下面是一个利用 Generator 函数和for...of循环，实现斐波那契数列的例子。\n\nfunction* fibonacci() {\n  let [prev, curr] = [0, 1];\n  for (;;) {\n    yield curr;\n    [prev, curr] = [curr, prev + curr];\n  }\n}\n\nfor (let n of fibonacci()) {\n  if (n > 1000) break;\n  console.log(n);\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n从上面代码可见，使用for...of语句时不需要使用next方法。\n\n利用for...of循环，可以写出遍历任意对象（object）的方法。原生的 JavaScript 对象没有遍历接口，无法使用for...of循环，通过 Generator 函数为它加上这个接口，就可以用了。\n\nfunction* objectEntries(obj) {\n  let propKeys = Reflect.ownKeys(obj);\n\n  for (let propKey of propKeys) {\n    yield [propKey, obj[propKey]];\n  }\n}\n\nlet jane = { first: 'Jane', last: 'Doe' };\n\nfor (let [key, value] of objectEntries(jane)) {\n  console.log(`${key}: ${value}`);\n}\n// first: Jane\n// last: Doe\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n上面代码中，对象jane原生不具备 Iterator 接口，无法用for...of遍历。这时，我们通过 Generator 函数objectEntries为它加上遍历器接口，就可以用for...of遍历了。加上遍历器接口的另一种写法是，将 Generator 函数加到对象的Symbol.iterator属性上面。\n\nfunction* objectEntries() {\n  let propKeys = Object.keys(this);\n\n  for (let propKey of propKeys) {\n    yield [propKey, this[propKey]];\n  }\n}\n\nlet jane = { first: 'Jane', last: 'Doe' };\n\njane[Symbol.iterator] = objectEntries;\n\nfor (let [key, value] of jane) {\n  console.log(`${key}: ${value}`);\n}\n// first: Jane\n// last: Doe\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n除了for...of循环以外，扩展运算符（...）、解构赋值和Array.from方法内部调用的，都是遍历器接口。这意味着，它们都可以将 Generator 函数返回的 Iterator 对象，作为参数。\n\nfunction* numbers () {\n  yield 1\n  yield 2\n  return 3\n  yield 4\n}\n\n// 扩展运算符\n[...numbers()] // [1, 2]\n\n// Array.from 方法\nArray.from(numbers()) // [1, 2]\n\n// 解构赋值\nlet [x, y] = numbers();\nx // 1\ny // 2\n\n// for...of 循环\nfor (let n of numbers()) {\n  console.log(n)\n}\n// 1\n// 2\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n\n\n\n# Generator.prototype.throw()\n\nGenerator 函数返回的遍历器对象，都有一个throw方法，可以在函数体外抛出错误，然后在 Generator 函数体内捕获。\n\nvar g = function* () {\n  try {\n    yield;\n  } catch (e) {\n    console.log('内部捕获', e);\n  }\n};\n\nvar i = g();\ni.next();\n\ntry {\n  i.throw('a');\n  i.throw('b');\n} catch (e) {\n  console.log('外部捕获', e);\n}\n// 内部捕获 a\n// 外部捕获 b\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\n上面代码中，遍历器对象i连续抛出两个错误。第一个错误被 Generator 函数体内的catch语句捕获。i第二次抛出错误，由于 Generator 函数内部的catch语句已经执行过了，不会再捕捉到这个错误了，所以这个错误就被抛出了 Generator 函数体，被函数体外的catch语句捕获。\n\nthrow方法可以接受一个参数，该参数会被catch语句接收，建议抛出Error对象的实例。\n\nvar g = function* () {\n  try {\n    yield;\n  } catch (e) {\n    console.log(e);\n  }\n};\n\nvar i = g();\ni.next();\ni.throw(new Error('出错了！'));\n// Error: 出错了！(…)\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n注意，不要混淆遍历器对象的throw方法和全局的throw命令。上面代码的错误，是用遍历器对象的throw方法抛出的，而不是用throw命令抛出的。后者只能被函数体外的catch语句捕获。\n\nvar g = function* () {\n  while (true) {\n    try {\n      yield;\n    } catch (e) {\n      if (e != 'a') throw e;\n      console.log('内部捕获', e);\n    }\n  }\n};\n\nvar i = g();\ni.next();\n\ntry {\n  throw new Error('a');\n  throw new Error('b');\n} catch (e) {\n  console.log('外部捕获', e);\n}\n// 外部捕获 [Error: a]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n\n\n上面代码之所以只捕获了a，是因为函数体外的catch语句块，捕获了抛出的a错误以后，就不会再继续try代码块里面剩余的语句了。\n\n如果 Generator 函数内部没有部署try...catch代码块，那么throw方法抛出的错误，将被外部try...catch代码块捕获。\n\nvar g = function* () {\n  while (true) {\n    yield;\n    console.log('内部捕获', e);\n  }\n};\n\nvar i = g();\ni.next();\n\ntry {\n  i.throw('a');\n  i.throw('b');\n} catch (e) {\n  console.log('外部捕获', e);\n}\n// 外部捕获 a\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n上面代码中，Generator 函数g内部没有部署try...catch代码块，所以抛出的错误直接被外部catch代码块捕获。\n\n如果 Generator 函数内部和外部，都没有部署try...catch代码块，那么程序将报错，直接中断执行。\n\nvar gen = function* gen(){\n  yield console.log('hello');\n  yield console.log('world');\n}\n\nvar g = gen();\ng.next();\ng.throw();\n// hello\n// Uncaught undefined\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n上面代码中，g.throw抛出错误以后，没有任何try...catch代码块可以捕获这个错误，导致程序报错，中断执行。\n\nthrow方法抛出的错误要被内部捕获，前提是必须至少执行过一次next方法。\n\nfunction* gen() {\n  try {\n    yield 1;\n  } catch (e) {\n    console.log('内部捕获');\n  }\n}\n\nvar g = gen();\ng.throw(1);\n// Uncaught 1\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n上面代码中，g.throw(1)执行时，next方法一次都没有执行过。这时，抛出的错误不会被内部捕获，而是直接在外部抛出，导致程序出错。这种行为其实很好理解，因为第一次执行next方法，等同于启动执行 Generator 函数的内部代码，否则 Generator 函数还没有开始执行，这时throw方法抛错只可能抛出在函数外部。\n\nthrow方法被捕获以后，会附带执行下一条yield表达式。也就是说，会附带执行一次next方法。\n\nvar gen = function* gen(){\n  try {\n    yield console.log('a');\n  } catch (e) {\n    // ...\n  }\n  yield console.log('b');\n  yield console.log('c');\n}\n\nvar g = gen();\ng.next() // a\ng.throw() // b\ng.next() // c\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n上面代码中，g.throw方法被捕获以后，自动执行了一次next方法，所以会打印b。另外，也可以看到，只要 Generator 函数内部部署了try...catch代码块，那么遍历器的throw方法抛出的错误，不影响下一次遍历。\n\n另外，throw命令与g.throw方法是无关的，两者互不影响。\n\nvar gen = function* gen(){\n  yield console.log('hello');\n  yield console.log('world');\n}\n\nvar g = gen();\ng.next();\n\ntry {\n  throw new Error();\n} catch (e) {\n  g.next();\n}\n// hello\n// world\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n上面代码中，throw命令抛出的错误不会影响到遍历器的状态，所以两次执行next方法，都进行了正确的操作。\n\n这种函数体内捕获错误的机制，大大方便了对错误的处理。多个yield表达式，可以只用一个try...catch代码块来捕获错误。如果使用回调函数的写法，想要捕获多个错误，就不得不为每个函数内部写一个错误处理语句，现在只在 Generator 函数内部写一次catch语句就可以了。\n\nGenerator 函数体外抛出的错误，可以在函数体内捕获；反过来，Generator 函数体内抛出的错误，也可以被函数体外的catch捕获。\n\nfunction* foo() {\n  var x = yield 3;\n  var y = x.toUpperCase();\n  yield y;\n}\n\nvar it = foo();\n\nit.next(); // { value:3, done:false }\n\ntry {\n  it.next(42);\n} catch (err) {\n  console.log(err);\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n上面代码中，第二个next方法向函数体内传入一个参数 42，数值是没有toUpperCase方法的，所以会抛出一个 TypeError 错误，被函数体外的catch捕获。\n\n一旦 Generator 执行过程中抛出错误，且没有被内部捕获，就不会再执行下去了。如果此后还调用next方法，将返回一个value属性等于undefined、done属性等于true的对象，即 JavaScript 引擎认为这个 Generator 已经运行结束了。\n\nfunction* g() {\n  yield 1;\n  console.log('throwing an exception');\n  throw new Error('generator broke!');\n  yield 2;\n  yield 3;\n}\n\nfunction log(generator) {\n  var v;\n  console.log('starting generator');\n  try {\n    v = generator.next();\n    console.log('第一次运行next方法', v);\n  } catch (err) {\n    console.log('捕捉错误', v);\n  }\n  try {\n    v = generator.next();\n    console.log('第二次运行next方法', v);\n  } catch (err) {\n    console.log('捕捉错误', v);\n  }\n  try {\n    v = generator.next();\n    console.log('第三次运行next方法', v);\n  } catch (err) {\n    console.log('捕捉错误', v);\n  }\n  console.log('caller done');\n}\n\nlog(g());\n// starting generator\n// 第一次运行next方法 { value: 1, done: false }\n// throwing an exception\n// 捕捉错误 { value: 1, done: false }\n// 第三次运行next方法 { value: undefined, done: true }\n// caller done\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n\n\n上面代码一共三次运行next方法，第二次运行的时候会抛出错误，然后第三次运行的时候，Generator 函数就已经结束了，不再执行下去了。\n\n\n# Generator.prototype.return()\n\nGenerator 函数返回的遍历器对象，还有一个**return方法，可以返回给定的值，并且终结遍历 Generator 函数。**\n\nfunction* gen() {\n  yield 1;\n  yield 2;\n  yield 3;\n}\n\nvar g = gen();\n\ng.next()        // { value: 1, done: false }\ng.return('foo') // { value: \"foo\", done: true }\ng.next()        // { value: undefined, done: true }\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n上面代码中，遍历器对象g调用return方法后，返回值的value属性就是return方法的参数foo。并且，Generator 函数的遍历就终止了，返回值的done属性为true，以后再调用next方法，done属性总是返回true。\n\n如果return方法调用时，不提供参数，则返回值的value属性为undefined。\n\nfunction* gen() {\n  yield 1;\n  yield 2;\n  yield 3;\n}\n\nvar g = gen();\n\ng.next()        // { value: 1, done: false }\ng.return() // { value: undefined, done: true }\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n如果 Generator 函数内部有try...finally代码块，且正在执行try代码块，那么return方法会导致立刻进入finally代码块，执行完以后，整个函数才会结束。\n\nfunction* numbers () {\n  yield 1;\n  try {\n    yield 2;\n    yield 3;\n  } finally {\n    yield 4;\n    yield 5;\n  }\n  yield 6;\n}\nvar g = numbers();\ng.next() // { value: 1, done: false }\ng.next() // { value: 2, done: false }\ng.return(7) // { value: 4, done: false }\ng.next() // { value: 5, done: false }\ng.next() // { value: 7, done: true }\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n上面代码中，调用return()方法后，就开始执行finally代码块，不执行try里面剩下的代码了，然后等到finally代码块执行完，再返回return()方法指定的返回值。\n\n\n# next()、throw()、return() 的共同点\n\nnext()、throw()、return()这三个方法本质上是同一件事，可以放在一起理解。它们的作用都是让 Generator 函数恢复执行，并且使用不同的语句替换yield表达式。\n\nnext()是将yield表达式替换成一个值。\n\nconst g = function* (x, y) {\n  let result = yield x + y;\n  return result;\n};\n\nconst gen = g(1, 2);\ngen.next(); // Object {value: 3, done: false}\n\ngen.next(1); // Object {value: 1, done: true}\n// 相当于将 let result = yield x + y\n// 替换成 let result = 1;\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n上面代码中，第二个next(1)方法就相当于将yield表达式替换成一个值1。如果next方法没有参数，就相当于替换成undefined。\n\nthrow()是将yield表达式替换成一个throw语句。\n\ngen.throw(new Error('出错了')); // Uncaught Error: 出错了\n// 相当于将 let result = yield x + y\n// 替换成 let result = throw(new Error('出错了'));\n\n\n1\n2\n3\n\n\nreturn()是将yield表达式替换成一个return语句。\n\ngen.return(2); // Object {value: 2, done: true}\n// 相当于将 let result = yield x + y\n// 替换成 let result = return 2;\n\n\n1\n2\n3\n\n\n\n# yield* 表达式\n\n如果在 Generator 函数内部，调用另一个 Generator 函数。需要在前者的函数体内部，自己手动完成遍历。\n\nfunction* foo() {\n  yield 'a';\n  yield 'b';\n}\n\nfunction* bar() {\n  yield 'x';\n  // 手动遍历 foo()\n  for (let i of foo()) {\n    console.log(i);\n  }\n  yield 'y';\n}\n\nfor (let v of bar()){\n  console.log(v);\n}\n// x\n// a\n// b\n// y\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n\n\n上面代码中，foo和bar都是 Generator 函数，在bar里面调用foo，就需要手动遍历foo。如果有多个 Generator 函数嵌套，写起来就非常麻烦。\n\nES6 提供了yield*表达式，作为解决办法，用来在一个 Generator 函数里面执行另一个 Generator 函数。\n\nfunction* bar() {\n  yield 'x';\n  yield* foo();\n  yield 'y';\n}\n\n// 等同于\nfunction* bar() {\n  yield 'x';\n  yield 'a';\n  yield 'b';\n  yield 'y';\n}\n\n// 等同于\nfunction* bar() {\n  yield 'x';\n  for (let v of foo()) {\n    yield v;\n  }\n  yield 'y';\n}\n\nfor (let v of bar()){\n  console.log(v);\n}\n// \"x\"\n// \"a\"\n// \"b\"\n// \"y\"\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n\n\n再来看一个对比的例子。\n\nfunction* inner() {\n  yield 'hello!';\n}\n\nfunction* outer1() {\n  yield 'open';\n  yield inner();\n  yield 'close';\n}\n\nvar gen = outer1()\ngen.next().value // \"open\"\ngen.next().value // 返回一个遍历器对象\ngen.next().value // \"close\"\n\nfunction* outer2() {\n  yield 'open'\n  yield* inner()\n  yield 'close'\n}\n\nvar gen = outer2()\ngen.next().value // \"open\"\ngen.next().value // \"hello!\"\ngen.next().value // \"close\"\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n\n\n上面例子中，outer2使用了yield*，outer1没使用。结果就是，outer1返回一个遍历器对象，outer2返回该遍历器对象的内部值。\n\n从语法角度看，如果yield表达式后面跟的是一个遍历器对象，需要在yield表达式后面加上星号，表明它返回的是一个遍历器对象。这被称为yield*表达式。\n\nlet delegatedIterator = (function* () {\n  yield 'Hello!';\n  yield 'Bye!';\n}());\n\nlet delegatingIterator = (function* () {\n  yield 'Greetings!';\n  yield* delegatedIterator;\n  yield 'Ok, bye.';\n}());\n\nfor(let value of delegatingIterator) {\n  console.log(value);\n}\n// \"Greetings!\n// \"Hello!\"\n// \"Bye!\"\n// \"Ok, bye.\"\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\n上面代码中，delegatingIterator是代理者，delegatedIterator是被代理者。由于yield* delegatedIterator语句得到的值，是一个遍历器，所以要用星号表示。运行结果就是使用一个遍历器，遍历了多个 Generator 函数，有递归的效果。\n\nyield*后面的 Generator 函数（没有return语句时），等同于在 Generator 函数内部，部署一个for...of循环。\n\nfunction* concat(iter1, iter2) {\n  yield* iter1;\n  yield* iter2;\n}\n\n// 等同于\n\nfunction* concat(iter1, iter2) {\n  for (var value of iter1) {\n    yield value;\n  }\n  for (var value of iter2) {\n    yield value;\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n上面代码说明，yield*后面的 Generator 函数（没有return语句时），不过是for...of的一种简写形式，完全可以用后者替代前者。反之，在有return语句时，则需要用var value = yield* iterator的形式获取return语句的值。\n\n如果yield*后面跟着一个数组，由于数组原生支持遍历器，因此就会遍历数组成员。\n\nfunction* gen(){\n  yield* [\"a\", \"b\", \"c\"];\n}\n\ngen().next() // { value:\"a\", done:false }\n\n\n1\n2\n3\n4\n5\n\n\n上面代码中，yield命令后面如果不加星号，返回的是整个数组，加了星号就表示返回的是数组的遍历器对象。\n\n实际上，任何数据结构只要有 Iterator 接口，就可以被yield*遍历。\n\nlet read = (function* () {\n  yield 'hello';\n  yield* 'hello';\n})();\n\nread.next().value // \"hello\"\nread.next().value // \"h\"\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n上面代码中，yield表达式返回整个字符串，yield*语句返回单个字符。因为字符串具有 Iterator 接口，所以被yield*遍历。\n\n如果被代理的 Generator 函数有return语句，那么就可以向代理它的 Generator 函数返回数据。\n\nfunction* foo() {\n  yield 2;\n  yield 3;\n  return \"foo\";\n}\n\nfunction* bar() {\n  yield 1;\n  var v = yield* foo();\n  console.log(\"v: \" + v);\n  yield 4;\n}\n\nvar it = bar();\n\nit.next()\n// {value: 1, done: false}\nit.next()\n// {value: 2, done: false}\nit.next()\n// {value: 3, done: false}\nit.next();\n// \"v: foo\"\n// {value: 4, done: false}\nit.next()\n// {value: undefined, done: true}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n\n\n上面代码在第四次调用next方法的时候，屏幕上会有输出，这是因为函数foo的return语句，向函数bar提供了返回值。\n\n再看一个例子。\n\nfunction* genFuncWithReturn() {\n  yield 'a';\n  yield 'b';\n  return 'The result';\n}\nfunction* logReturned(genObj) {\n  let result = yield* genObj;\n  console.log(result);\n}\n\n[...logReturned(genFuncWithReturn())]\n// The result\n// 值为 [ 'a', 'b' ]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n上面代码中，存在两次遍历。第一次是扩展运算符遍历函数logReturned返回的遍历器对象，第二次是yield*语句遍历函数genFuncWithReturn返回的遍历器对象。这两次遍历的效果是叠加的，最终表现为扩展运算符遍历函数genFuncWithReturn返回的遍历器对象。所以，最后的数据表达式得到的值等于[ 'a', 'b' ]。但是，函数genFuncWithReturn的return语句的返回值The result，会返回给函数logReturned内部的result变量，因此会有终端输出。\n\nyield*命令可以很方便地取出嵌套数组的所有成员。\n\nfunction* iterTree(tree) {\n  if (Array.isArray(tree)) {\n    for(let i=0; i < tree.length; i++) {\n      yield* iterTree(tree[i]);\n    }\n  } else {\n    yield tree;\n  }\n}\n\nconst tree = [ 'a', ['b', 'c'], ['d', 'e'] ];\n\nfor(let x of iterTree(tree)) {\n  console.log(x);\n}\n// a\n// b\n// c\n// d\n// e\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n\n由于扩展运算符...默认调用 Iterator 接口，所以上面这个函数也可以用于嵌套数组的平铺。\n\n[...iterTree(tree)] // [\"a\", \"b\", \"c\", \"d\", \"e\"]\n\n\n1\n\n\n下面是一个稍微复杂的例子，使用yield*语句遍历完全二叉树。\n\n// 下面是二叉树的构造函数，\n// 三个参数分别是左树、当前节点和右树\nfunction Tree(left, label, right) {\n  this.left = left;\n  this.label = label;\n  this.right = right;\n}\n\n// 下面是中序（inorder）遍历函数。\n// 由于返回的是一个遍历器，所以要用generator函数。\n// 函数体内采用递归算法，所以左树和右树要用yield*遍历\nfunction* inorder(t) {\n  if (t) {\n    yield* inorder(t.left);\n    yield t.label;\n    yield* inorder(t.right);\n  }\n}\n\n// 下面生成二叉树\nfunction make(array) {\n  // 判断是否为叶节点\n  if (array.length == 1) return new Tree(null, array[0], null);\n  return new Tree(make(array[0]), array[1], make(array[2]));\n}\nlet tree = make([[['a'], 'b', ['c']], 'd', [['e'], 'f', ['g']]]);\n\n// 遍历二叉树\nvar result = [];\nfor (let node of inorder(tree)) {\n  result.push(node);\n}\n\nresult\n// ['a', 'b', 'c', 'd', 'e', 'f', 'g']\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n\n\n\n# 作为对象属性的 Generator 函数\n\n如果一个对象的属性是 Generator 函数，可以简写成下面的形式。\n\nlet obj = {\n  * myGeneratorMethod() {\n    ···\n  }\n};\n\n\n1\n2\n3\n4\n5\n\n\n上面代码中，myGeneratorMethod属性前面有一个星号，表示这个属性是一个 Generator 函数。\n\n它的完整形式如下，与上面的写法是等价的。\n\nlet obj = {\n  myGeneratorMethod: function* () {\n    // ···\n  }\n};\n\n\n1\n2\n3\n4\n5\n\n\n\n# Generator 函数的this\n\nGenerator 函数总是返回一个遍历器，ES6 规定这个遍历器是 Generator 函数的实例，也继承了 Generator 函数的prototype对象上的方法。\n\nfunction* g() {}\n\ng.prototype.hello = function () {\n  return 'hi!';\n};\n\nlet obj = g();\n\nobj instanceof g // true\nobj.hello() // 'hi!'\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n上面代码表明，Generator 函数g返回的遍历器obj，是g的实例，而且继承了g.prototype。但是，如果把g当作普通的构造函数，并不会生效，因为g返回的总是遍历器对象，而不是this对象。\n\nfunction* g() {\n  this.a = 11;\n}\n\nlet obj = g();\nobj.next();\nobj.a // undefined\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n上面代码中，Generator 函数g在this对象上面添加了一个属性a，但是obj对象拿不到这个属性。\n\nGenerator 函数也不能跟new命令一起用，会报错。\n\nfunction* F() {\n  yield this.x = 2;\n  yield this.y = 3;\n}\n\nnew F()\n// TypeError: F is not a constructor\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n上面代码中，new命令跟构造函数F一起使用，结果报错，因为F不是构造函数。\n\n那么，有没有办法让 Generator 函数返回一个正常的对象实例，既可以用next方法，又可以获得正常的this？\n\n下面是一个变通方法。首先，生成一个空对象，使用call方法绑定 Generator 函数内部的this。这样，构造函数调用以后，这个空对象就是 Generator 函数的实例对象了。\n\nfunction* F() {\n  this.a = 1;\n  yield this.b = 2;\n  yield this.c = 3;\n}\nvar obj = {};\nvar f = F.call(obj);\n\nf.next();  // Object {value: 2, done: false}\nf.next();  // Object {value: 3, done: false}\nf.next();  // Object {value: undefined, done: true}\n\nobj.a // 1\nobj.b // 2\nobj.c // 3\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n上面代码中，首先是F内部的this对象绑定obj对象，然后调用它，返回一个 Iterator 对象。这个对象执行三次next方法（因为F内部有两个yield表达式），完成 F 内部所有代码的运行。这时，所有内部属性都绑定在obj对象上了，因此obj对象也就成了F的实例。\n\n上面代码中，执行的是遍历器对象f，但是生成的对象实例是obj，有没有办法将这两个对象统一呢？\n\n一个办法就是将obj换成F.prototype。\n\nfunction* F() {\n  this.a = 1;\n  yield this.b = 2;\n  yield this.c = 3;\n}\nvar f = F.call(F.prototype);\n\nf.next();  // Object {value: 2, done: false}\nf.next();  // Object {value: 3, done: false}\nf.next();  // Object {value: undefined, done: true}\n\nf.a // 1\nf.b // 2\nf.c // 3\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n再将F改成构造函数，就可以对它执行new命令了。\n\nfunction* gen() {\n  this.a = 1;\n  yield this.b = 2;\n  yield this.c = 3;\n}\n\nfunction F() {\n  return gen.call(gen.prototype);\n}\n\nvar f = new F();\n\nf.next();  // Object {value: 2, done: false}\nf.next();  // Object {value: 3, done: false}\nf.next();  // Object {value: undefined, done: true}\n\nf.a // 1\nf.b // 2\nf.c // 3\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\n\n# 含义\n\n\n# Generator 与状态机\n\nGenerator 是实现状态机的最佳结构。比如，下面的clock函数就是一个状态机。\n\nvar ticking = true;\nvar clock = function() {\n  if (ticking)\n    console.log('Tick!');\n  else\n    console.log('Tock!');\n  ticking = !ticking;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n上面代码的clock函数一共有两种状态（Tick和Tock），每运行一次，就改变一次状态。这个函数如果用 Generator 实现，就是下面这样。\n\nvar clock = function* () {\n  while (true) {\n    console.log('Tick!');\n    yield;\n    console.log('Tock!');\n    yield;\n  }\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n上面的 Generator 实现与 ES5 实现对比，可以看到少了用来保存状态的外部变量ticking，这样就更简洁，更安全（状态不会被非法篡改）、更符合函数式编程的思想，在写法上也更优雅。Generator 之所以可以不用外部变量保存状态，是因为它本身就包含了一个状态信息，即目前是否处于暂停态。\n\n\n# Generator 与协程\n\n协程（coroutine）是一种程序运行的方式，可以理解成“协作的线程”或“协作的函数”。协程既可以用单线程实现，也可以用多线程实现。前者是一种特殊的子例程，后者是一种特殊的线程。\n\n（1）协程与子例程的差异\n\n传统的“子例程”（subroutine）采用堆栈式“后进先出”的执行方式，只有当调用的子函数完全执行完毕，才会结束执行父函数。协程与其不同，多个线程（单线程情况下，即多个函数）可以并行执行，但是只有一个线程（或函数）处于正在运行的状态，其他线程（或函数）都处于暂停态（suspended），线程（或函数）之间可以交换执行权。也就是说，一个线程（或函数）执行到一半，可以暂停执行，将执行权交给另一个线程（或函数），等到稍后收回执行权的时候，再恢复执行。这种可以并行执行、交换执行权的线程（或函数），就称为协程。\n\n从实现上看，在内存中，子例程只使用一个栈（stack），而协程是同时存在多个栈，但只有一个栈是在运行状态，也就是说，协程是以多占用内存为代价，实现多任务的并行。\n\n（2）协程与普通线程的差异\n\n不难看出，协程适合用于多任务运行的环境。在这个意义上，它与普通的线程很相似，都有自己的执行上下文、可以分享全局变量。它们的不同之处在于，同一时间可以有多个线程处于运行状态，但是运行的协程只能有一个，其他协程都处于暂停状态。此外，普通的线程是抢先式的，到底哪个线程优先得到资源，必须由运行环境决定，但是协程是合作式的，执行权由协程自己分配。\n\n由于 JavaScript 是单线程语言，只能保持一个调用栈。引入协程以后，每个任务可以保持自己的调用栈。这样做的最大好处，就是抛出错误的时候，可以找到原始的调用栈。不至于像异步操作的回调函数那样，一旦出错，原始的调用栈早就结束。\n\nGenerator 函数是 ES6 对协程的实现，但属于不完全实现。Generator 函数被称为“半协程”（semi-coroutine），意思是只有 Generator 函数的调用者，才能将程序的执行权还给 Generator 函数。如果是完全执行的协程，任何函数都可以让暂停的协程继续执行。\n\n如果将 Generator 函数当作协程，完全可以将多个需要互相协作的任务写成 Generator 函数，它们之间使用yield表达式交换控制权。\n\n\n# Generator 与上下文\n\nJavaScript 代码运行时，会产生一个全局的上下文环境（context，又称运行环境），包含了当前所有的变量和对象。然后，执行函数（或块级代码）的时候，又会在当前上下文环境的上层，产生一个函数运行的上下文，变成当前（active）的上下文，由此形成一个上下文环境的堆栈（context stack）。\n\n这个堆栈是“后进先出”的数据结构，最后产生的上下文环境首先执行完成，退出堆栈，然后再执行完成它下层的上下文，直至所有代码执行完成，堆栈清空。\n\nGenerator 函数不是这样，它执行产生的上下文环境，一旦遇到yield命令，就会暂时退出堆栈，但是并不消失，里面的所有变量和对象会冻结在当前状态。等到对它执行next命令时，这个上下文环境又会重新加入调用栈，冻结的变量和对象恢复执行。\n\nfunction* gen() {\n  yield 1;\n  return 2;\n}\n\nlet g = gen();\n\nconsole.log(\n  g.next().value,\n  g.next().value,\n);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n上面代码中，第一次执行g.next()时，Generator 函数gen的上下文会加入堆栈，即开始运行gen内部的代码。等遇到yield 1时，gen上下文退出堆栈，内部状态冻结。第二次执行g.next()时，gen上下文重新加入堆栈，变成当前的上下文，重新恢复执行。\n\n\n# 应用\n\nGenerator 可以暂停函数执行，返回任意表达式的值。这种特点使得 Generator 有多种应用场景。\n\n\n# （1）异步操作的同步化表达\n\nGenerator 函数的暂停执行的效果，意味着可以把异步操作写在yield表达式里面，等到调用next方法时再往后执行。这实际上等同于不需要写回调函数了，因为异步操作的后续操作可以放在yield表达式下面，反正要等到调用next方法时再执行。所以，Generator 函数的一个重要实际意义就是用来处理异步操作，改写回调函数。\n\nfunction* loadUI() {\n  showLoadingScreen();\n  yield loadUIDataAsynchronously();\n  hideLoadingScreen();\n}\nvar loader = loadUI();\n// 加载UI\nloader.next()\n\n// 卸载UI\nloader.next()\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n上面代码中，第一次调用loadUI函数时，该函数不会执行，仅返回一个遍历器。下一次对该遍历器调用next方法，则会显示Loading界面（showLoadingScreen），并且异步加载数据（loadUIDataAsynchronously）。等到数据加载完成，再一次使用next方法，则会隐藏Loading界面。可以看到，这种写法的好处是所有Loading界面的逻辑，都被封装在一个函数，按部就班非常清晰。\n\nAjax 是典型的异步操作，通过 Generator 函数部署 Ajax 操作，可以用同步的方式表达。\n\nfunction* main() {\n  var result = yield request(\"http://some.url\");\n  var resp = JSON.parse(result);\n    console.log(resp.value);\n}\n\nfunction request(url) {\n  makeAjaxCall(url, function(response){\n    it.next(response);\n  });\n}\n\nvar it = main();\nit.next();\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n上面代码的main函数，就是通过 Ajax 操作获取数据。可以看到，除了多了一个yield，它几乎与同步操作的写法完全一样。注意，makeAjaxCall函数中的next方法，必须加上response参数，因为yield表达式，本身是没有值的，总是等于undefined。\n\n下面是另一个例子，通过 Generator 函数逐行读取文本文件。\n\nfunction* numbers() {\n  let file = new FileReader(\"numbers.txt\");\n  try {\n    while(!file.eof) {\n      yield parseInt(file.readLine(), 10);\n    }\n  } finally {\n    file.close();\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n上面代码打开文本文件，使用yield表达式可以手动逐行读取文件。\n\n\n# （2）控制流管理\n\n如果有一个多步操作非常耗时，采用回调函数，可能会写成下面这样。\n\nstep1(function (value1) {\n  step2(value1, function(value2) {\n    step3(value2, function(value3) {\n      step4(value3, function(value4) {\n        // Do something with value4\n      });\n    });\n  });\n});\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n采用 Promise 改写上面的代码。\n\nPromise.resolve(step1)\n  .then(step2)\n  .then(step3)\n  .then(step4)\n  .then(function (value4) {\n    // Do something with value4\n  }, function (error) {\n    // Handle any error from step1 through step4\n  })\n  .done();\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n上面代码已经把回调函数，改成了直线执行的形式，但是加入了大量 Promise 的语法。Generator 函数可以进一步改善代码运行流程。\n\nfunction* longRunningTask(value1) {\n  try {\n    var value2 = yield step1(value1);\n    var value3 = yield step2(value2);\n    var value4 = yield step3(value3);\n    var value5 = yield step4(value4);\n    // Do something with value4\n  } catch (e) {\n    // Handle any error from step1 through step4\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n然后，使用一个函数，按次序自动执行所有步骤。\n\nscheduler(longRunningTask(initialValue));\n\nfunction scheduler(task) {\n  var taskObj = task.next(task.value);\n  // 如果Generator函数未结束，就继续调用\n  if (!taskObj.done) {\n    task.value = taskObj.value\n    scheduler(task);\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n注意，上面这种做法，只适合同步操作，即所有的task都必须是同步的，不能有异步操作。因为这里的代码一得到返回值，就继续往下执行，没有判断异步操作何时完成。如果要控制异步的操作流程，详见后面的《异步操作》一章。\n\n下面，利用for...of循环会自动依次执行yield命令的特性，提供一种更一般的控制流管理的方法。\n\nlet steps = [step1Func, step2Func, step3Func];\n\nfunction* iterateSteps(steps){\n  for (var i=0; i< steps.length; i++){\n    var step = steps[i];\n    yield step();\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n上面代码中，数组steps封装了一个任务的多个步骤，Generator 函数iterateSteps则是依次为这些步骤加上yield命令。\n\n将任务分解成步骤之后，还可以将项目分解成多个依次执行的任务。\n\nlet jobs = [job1, job2, job3];\n\nfunction* iterateJobs(jobs){\n  for (var i=0; i< jobs.length; i++){\n    var job = jobs[i];\n    yield* iterateSteps(job.steps);\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n上面代码中，数组jobs封装了一个项目的多个任务，Generator 函数iterateJobs则是依次为这些任务加上yield*命令。\n\n最后，就可以用for...of循环一次性依次执行所有任务的所有步骤。\n\nfor (var step of iterateJobs(jobs)){\n  console.log(step.id);\n}\n\n\n1\n2\n3\n\n\n再次提醒，上面的做法只能用于所有步骤都是同步操作的情况，不能有异步操作的步骤。如果想要依次执行异步的步骤，必须使用后面的《异步操作》一章介绍的方法。\n\nfor...of的本质是一个while循环，所以上面的代码实质上执行的是下面的逻辑。\n\nvar it = iterateJobs(jobs);\nvar res = it.next();\n\nwhile (!res.done){\n  var result = res.value;\n  // ...\n  res = it.next();\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# （3）部署 Iterator 接口\n\n利用 Generator 函数，可以在任意对象上部署 Iterator 接口。\n\nfunction* iterEntries(obj) {\n  let keys = Object.keys(obj);\n  for (let i=0; i < keys.length; i++) {\n    let key = keys[i];\n    yield [key, obj[key]];\n  }\n}\n\nlet myObj = { foo: 3, bar: 7 };\n\nfor (let [key, value] of iterEntries(myObj)) {\n  console.log(key, value);\n}\n\n// foo 3\n// bar 7\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n上述代码中，myObj是一个普通对象，通过iterEntries函数，就有了 Iterator 接口。也就是说，可以在任意对象上部署next方法。\n\n下面是一个对数组部署 Iterator 接口的例子，尽管数组原生具有这个接口。\n\nfunction* makeSimpleGenerator(array){\n  var nextIndex = 0;\n\n  while(nextIndex < array.length){\n    yield array[nextIndex++];\n  }\n}\n\nvar gen = makeSimpleGenerator(['yo', 'ya']);\n\ngen.next().value // 'yo'\ngen.next().value // 'ya'\ngen.next().done  // true\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n\n# （4）作为数据结构\n\nGenerator 可以看作是数据结构，更确切地说，可以看作是一个数组结构，因为 Generator 函数可以返回一系列的值，这意味着它可以对任意表达式，提供类似数组的接口。\n\nfunction* doStuff() {\n  yield fs.readFile.bind(null, 'hello.txt');\n  yield fs.readFile.bind(null, 'world.txt');\n  yield fs.readFile.bind(null, 'and-such.txt');\n}\n\n\n1\n2\n3\n4\n5\n\n\n上面代码就是依次返回三个函数，但是由于使用了 Generator 函数，导致可以像处理数组那样，处理这三个返回的函数。\n\nfor (task of doStuff()) {\n  // task是一个函数，可以像回调函数那样使用它\n}\n\n\n1\n2\n3\n\n\n实际上，如果用 ES5 表达，完全可以用数组模拟 Generator 的这种用法。\n\nfunction doStuff() {\n  return [\n    fs.readFile.bind(null, 'hello.txt'),\n    fs.readFile.bind(null, 'world.txt'),\n    fs.readFile.bind(null, 'and-such.txt')\n  ];\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n上面的函数，可以用一模一样的for...of循环处理！两相一比较，就不难看出 Generator 使得数据或者操作，具备了类似数组的接口。",normalizedContent:"# generator 函数的语法\n\n\n# 简介\n\n\n# 基本概念\n\ngenerator 函数是 es6 提供的一种异步编程解决方案，语法行为与传统函数完全不同。本章详细介绍 generator 函数的语法和 api，它的异步编程应用请看《generator 函数的异步应用》一章。 generator 函数有多种理解角度。语法上，首先可以把它理解成，generator 函数是一个状态机，封装了多个内部状态。\n\n执行 generator 函数会返回一个遍历器对象，也就是说，generator 函数除了状态机，还是一个遍历器对象生成函数。返回的遍历器对象，可以依次遍历 generator 函数内部的每一个状态。\n\n形式上，generator 函数是一个普通函数，但是有两个特征。一是，function关键字与函数名之间有一个星号；二是，函数体内部使用yield表达式，定义不同的内部状态（yield在英语里的意思就是“产出”）。\n\nfunction* helloworldgenerator() {\n  yield 'hello';\n  yield 'world';\n  return 'ending';\n}\n\nvar hw = helloworldgenerator();\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n上面代码定义了一个 generator 函数helloworldgenerator，它内部有两个yield表达式（hello和world），即该函数有三个状态：hello，world 和 return 语句（结束执行）。\n\n然后，generator 函数的调用方法与普通函数一样，也是在函数名后面加上一对圆括号。不同的是，调用 generator 函数后，该函数并不执行，返回的也不是函数运行结果，而是一个指向内部状态的指针对象，也就是上一章介绍的遍历器对象（iterator object）。\n\n下一步，必须调用遍历器对象的next方法，使得指针移向下一个状态。也就是说，每次调用next方法，内部指针就从函数头部或上一次停下来的地方开始执行，直到遇到下一个yield表达式（或return语句）为止。换言之，generator 函数是分段执行的，yield表达式是暂停执行的标记，而next方法可以恢复执行。\n\nhw.next()\n// { value: 'hello', done: false }\n\nhw.next()\n// { value: 'world', done: false }\n\nhw.next()\n// { value: 'ending', done: true }\n\nhw.next()\n// { value: undefined, done: true }\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n上面代码一共调用了四次next方法。\n\n第一次调用，generator 函数开始执行，直到遇到第一个yield表达式为止。next方法返回一个对象，它的value属性就是当前yield表达式的值hello，done属性的值false，表示遍历还没有结束。\n\n第二次调用，generator 函数从上次yield表达式停下的地方，一直执行到下一个yield表达式。next方法返回的对象的value属性就是当前yield表达式的值world，done属性的值false，表示遍历还没有结束。\n\n第三次调用，generator 函数从上次yield表达式停下的地方，一直执行到return语句（如果没有return语句，就执行到函数结束）。next方法返回的对象的value属性，就是紧跟在return语句后面的表达式的值（如果没有return语句，则value属性的值为undefined），done属性的值true，表示遍历已经结束。\n\n第四次调用，此时 generator 函数已经运行完毕，next方法返回对象的value属性为undefined，done属性为true。以后再调用next方法，返回的都是这个值。\n\n总结一下，调用 generator 函数，返回一个遍历器对象，代表 generator 函数的内部指针。以后，每次调用遍历器对象的next方法，就会返回一个有着value和done两个属性的对象。value属性表示当前的内部状态的值，是yield表达式后面那个表达式的值；done属性是一个布尔值，表示是否遍历结束。\n\nes6 没有规定，function关键字与函数名之间的星号，写在哪个位置。这导致下面的写法都能通过。\n\nfunction * foo(x, y) { ··· }\nfunction *foo(x, y) { ··· }\nfunction* foo(x, y) { ··· }\nfunction*foo(x, y) { ··· }\n\n\n1\n2\n3\n4\n\n\n由于 generator 函数仍然是普通函数，所以一般的写法是上面的第三种，即星号紧跟在function关键字后面。本书也采用这种写法。\n\n\n# yield 表达式\n\n由于 generator 函数返回的遍历器对象，只有调用next方法才会遍历下一个内部状态，所以其实提供了一种可以暂停执行的函数。yield表达式就是暂停标志。\n\n遍历器对象的next方法的运行逻辑如下。\n\n（1）遇到yield表达式，就暂停执行后面的操作，并将紧跟在yield后面的那个表达式的值，作为返回的对象的value属性值。\n\n（2）下一次调用next方法时，再继续往下执行，直到遇到下一个yield表达式。\n\n（3）如果没有再遇到新的yield表达式，就一直运行到函数结束，直到return语句为止，并将return语句后面的表达式的值，作为返回的对象的value属性值。\n\n（4）如果该函数没有return语句，则返回的对象的value属性值为undefined。\n\n需要注意的是，yield表达式后面的表达式，只有当调用next方法、内部指针指向该语句时才会执行，因此等于为 javascript 提供了手动的“惰性求值”（lazy evaluation）的语法功能。\n\nfunction* gen() {\n  yield  123 + 456;\n}\n\n\n1\n2\n3\n\n\n上面代码中，yield后面的表达式123 + 456，不会立即求值，只会在next方法将指针移到这一句时，才会求值。\n\nyield表达式与return语句既有相似之处，也有区别。相似之处在于，都能返回紧跟在语句后面的那个表达式的值。区别在于每次遇到yield，函数暂停执行，下一次再从该位置继续向后执行，而**return语句不具备位置记忆的功能**。一个函数里面，只能执行一次（或者说一个）return语句，但是可以执行多次（或者说多个）yield表达式。正常函数只能返回一个值，因为只能执行一次return；generator 函数可以返回一系列的值，因为可以有任意多个yield。从另一个角度看，也可以说 generator 生成了一系列的值，这也就是它的名称的来历（英语中，generator 这个词是“生成器”的意思）。\n\ngenerator 函数可以不用yield表达式，这时就变成了一个单纯的暂缓执行函数。\n\nfunction* f() {\n  console.log('执行了！')\n}\n\nvar generator = f();\n\nsettimeout(function () {\n  generator.next()\n}, 2000);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n上面代码中，函数f如果是普通函数，在为变量generator赋值时就会执行。但是，函数f是一个 generator 函数，就变成只有调用next方法时，函数f才会执行。\n\n另外需要注意，yield表达式只能用在 generator 函数里面，用在其他地方都会报错。\n\n(function (){\n  yield 1;\n})()\n// syntaxerror: unexpected number\n\n\n1\n2\n3\n4\n\n\n上面代码在一个普通函数中使用yield表达式，结果产生一个句法错误。\n\n下面是另外一个例子。\n\nvar arr = [1, [[2, 3], 4], [5, 6]];\n\nvar flat = function* (a) {\n  a.foreach(function (item) {\n    if (typeof item !== 'number') {\n      yield* flat(item);\n    } else {\n      yield item;\n    }\n  });\n};\n\nfor (var f of flat(arr)){\n  console.log(f);\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n上面代码也会产生句法错误，因为foreach方法的参数是一个普通函数，但是在里面使用了yield表达式（这个函数里面还使用了yield*表达式，详细介绍见后文）。一种修改方法是改用for循环。\n\nvar arr = [1, [[2, 3], 4], [5, 6]];\n\nvar flat = function* (a) {\n  var length = a.length;\n  for (var i = 0; i < length; i++) {\n    var item = a[i];\n    if (typeof item !== 'number') {\n      yield* flat(item);\n    } else {\n      yield item;\n    }\n  }\n};\n\nfor (var f of flat(arr)) {\n  console.log(f);\n}\n// 1, 2, 3, 4, 5, 6\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\n另外，yield表达式如果用在另一个表达式之中，必须放在圆括号里面。\n\nfunction* demo() {\n  console.log('hello' + yield); // syntaxerror\n  console.log('hello' + yield 123); // syntaxerror\n\n  console.log('hello' + (yield)); // ok\n  console.log('hello' + (yield 123)); // ok\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\nyield表达式用作函数参数或放在赋值表达式的右边，可以不加括号。\n\nfunction* demo() {\n  foo(yield 'a', yield 'b'); // ok\n  let input = yield; // ok\n}\n\n\n1\n2\n3\n4\n\n\n\n# 与 iterator 接口的关系\n\n上一章说过，任意一个对象的symbol.iterator方法，等于该对象的遍历器生成函数，调用该函数会返回该对象的一个遍历器对象。\n\n由于 generator 函数就是遍历器生成函数，因此可以把 generator 赋值给对象的symbol.iterator属性，从而使得该对象具有 iterator 接口。\n\nvar myiterable = {};\nmyiterable[symbol.iterator] = function* () {\n  yield 1;\n  yield 2;\n  yield 3;\n};\n\n[...myiterable] // [1, 2, 3]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n上面代码中，generator 函数赋值给symbol.iterator属性，从而使得myiterable对象具有了 iterator 接口，可以被...运算符遍历了。\n\ngenerator 函数执行后，返回一个遍历器对象。该对象本身也具有symbol.iterator属性，执行后返回自身。\n\nfunction* gen(){\n  // some code\n}\n\nvar g = gen();\n\ng[symbol.iterator]() === g\n// true\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n上面代码中，gen是一个 generator 函数，调用它会生成一个遍历器对象g。它的symbol.iterator属性，也是一个遍历器对象生成函数，执行后返回它自己。\n\n\n# next 方法的参数\n\nyield表达式本身没有返回值，或者说总是返回undefined。next方法可以带一个参数，该参数就会被当作上一个yield表达式的返回值。\n\nfunction* f() {\n  for(var i = 0; true; i++) {\n    var reset = yield i;\n    if(reset) { i = -1; }\n  }\n}\n\nvar g = f();\n\ng.next() // { value: 0, done: false }\ng.next() // { value: 1, done: false }\ng.next(true) // { value: 0, done: false } // 参数true 传给上面的变量reset\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n上面代码先定义了一个可以无限运行的 generator 函数f，如果next方法没有参数，每次运行到yield表达式，变量reset的值总是undefined。当next方法带一个参数true时，变量reset就被重置为这个参数（即true），因此i会等于-1，下一轮循环就会从-1开始递增。\n\n这个功能有很重要的语法意义。generator 函数从暂停状态到恢复运行，它的上下文状态（context）是不变的。通过next方法的参数，就有办法在 generator 函数开始运行之后，继续向函数体内部注入值。也就是说，可以在 generator 函数运行的不同阶段，从外部向内部注入不同的值，从而调整函数行为。\n\n再看一个例子。\n\nfunction* foo(x) {\n  var y = 2 * (yield (x + 1));\n  var z = yield (y / 3);\n  return (x + y + z);\n}\n\nvar a = foo(5);\na.next() // object{value:6, done:false}\na.next() // object{value:nan, done:false}\na.next() // object{value:nan, done:true}\n\nvar b = foo(5);\nb.next() // { value:6, done:false }\nb.next(12) // { value:8, done:false }\nb.next(13) // { value:42, done:true }\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n上面代码中，第二次运行next方法的时候不带参数，导致 y 的值等于2 * undefined（即nan），除以 3 以后还是nan，因此返回对象的value属性也等于nan。第三次运行next方法的时候不带参数，所以z等于undefined，返回对象的value属性等于5 + nan + undefined，即nan。\n\n如果向next方法提供参数，返回结果就完全不一样了。上面代码第一次调用b的next方法时，返回x+1的值6；第二次调用next方法，将上一次yield表达式的值设为12，因此y等于24，返回y / 3的值8；第三次调用next方法，将上一次yield表达式的值设为13，因此z等于13，这时x等于5，y等于24，所以return语句的值等于42。\n\n注意，由于next方法的参数表示上一个yield表达式的返回值，所以在第一次使用next方法时，传递参数是无效的。v8 引擎直接忽略第一次使用next方法时的参数，只有从第二次使用next方法开始，参数才是有效的。从语义上讲，第一个next方法用来启动遍历器对象，所以不用带有参数。\n\n再看一个通过next方法的参数，向 generator 函数内部输入值的例子。\n\nfunction* dataconsumer() {\n  console.log('started');\n  console.log(`1. ${yield}`);\n  console.log(`2. ${yield}`);\n  return 'result';\n}\n\nlet genobj = dataconsumer();\ngenobj.next();\n// started\ngenobj.next('a')\n// 1. a\ngenobj.next('b')\n// 2. b\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n上面代码是一个很直观的例子，每次通过next方法向 generator 函数输入值，然后打印出来。\n\n如果想要第一次调用next方法时，就能够输入值，可以在 generator 函数外面再包一层。\n\nfunction wrapper(generatorfunction) {\n  return function (...args) {\n    let generatorobject = generatorfunction(...args);\n    generatorobject.next();\n    return generatorobject;\n  };\n}\n\nconst wrapped = wrapper(function* () {\n  console.log(`first input: ${yield}`);\n  return 'done';\n});\n\nwrapped().next('hello!')\n// first input: hello!\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n上面代码中，generator 函数如果不用wrapper先包一层，是无法第一次调用next方法，就输入参数的。\n\n\n# for...of 循环\n\nfor...of循环可以自动遍历 generator 函数运行时生成的iterator对象，且此时不再需要调用next方法。\n\nfunction* foo() {\n  yield 1;\n  yield 2;\n  yield 3;\n  yield 4;\n  yield 5;\n  return 6;\n}\n\nfor (let v of foo()) {\n  console.log(v);\n}\n// 1 2 3 4 5\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n上面代码使用for...of循环，依次显示 5 个yield表达式的值。这里需要注意，一旦next方法的返回对象的done属性为true，for...of循环就会中止，且不包含该返回对象，所以上面代码的return语句返回的6，不包括在for...of循环之中。\n\n下面是一个利用 generator 函数和for...of循环，实现斐波那契数列的例子。\n\nfunction* fibonacci() {\n  let [prev, curr] = [0, 1];\n  for (;;) {\n    yield curr;\n    [prev, curr] = [curr, prev + curr];\n  }\n}\n\nfor (let n of fibonacci()) {\n  if (n > 1000) break;\n  console.log(n);\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n从上面代码可见，使用for...of语句时不需要使用next方法。\n\n利用for...of循环，可以写出遍历任意对象（object）的方法。原生的 javascript 对象没有遍历接口，无法使用for...of循环，通过 generator 函数为它加上这个接口，就可以用了。\n\nfunction* objectentries(obj) {\n  let propkeys = reflect.ownkeys(obj);\n\n  for (let propkey of propkeys) {\n    yield [propkey, obj[propkey]];\n  }\n}\n\nlet jane = { first: 'jane', last: 'doe' };\n\nfor (let [key, value] of objectentries(jane)) {\n  console.log(`${key}: ${value}`);\n}\n// first: jane\n// last: doe\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n上面代码中，对象jane原生不具备 iterator 接口，无法用for...of遍历。这时，我们通过 generator 函数objectentries为它加上遍历器接口，就可以用for...of遍历了。加上遍历器接口的另一种写法是，将 generator 函数加到对象的symbol.iterator属性上面。\n\nfunction* objectentries() {\n  let propkeys = object.keys(this);\n\n  for (let propkey of propkeys) {\n    yield [propkey, this[propkey]];\n  }\n}\n\nlet jane = { first: 'jane', last: 'doe' };\n\njane[symbol.iterator] = objectentries;\n\nfor (let [key, value] of jane) {\n  console.log(`${key}: ${value}`);\n}\n// first: jane\n// last: doe\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n除了for...of循环以外，扩展运算符（...）、解构赋值和array.from方法内部调用的，都是遍历器接口。这意味着，它们都可以将 generator 函数返回的 iterator 对象，作为参数。\n\nfunction* numbers () {\n  yield 1\n  yield 2\n  return 3\n  yield 4\n}\n\n// 扩展运算符\n[...numbers()] // [1, 2]\n\n// array.from 方法\narray.from(numbers()) // [1, 2]\n\n// 解构赋值\nlet [x, y] = numbers();\nx // 1\ny // 2\n\n// for...of 循环\nfor (let n of numbers()) {\n  console.log(n)\n}\n// 1\n// 2\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n\n\n\n# generator.prototype.throw()\n\ngenerator 函数返回的遍历器对象，都有一个throw方法，可以在函数体外抛出错误，然后在 generator 函数体内捕获。\n\nvar g = function* () {\n  try {\n    yield;\n  } catch (e) {\n    console.log('内部捕获', e);\n  }\n};\n\nvar i = g();\ni.next();\n\ntry {\n  i.throw('a');\n  i.throw('b');\n} catch (e) {\n  console.log('外部捕获', e);\n}\n// 内部捕获 a\n// 外部捕获 b\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\n上面代码中，遍历器对象i连续抛出两个错误。第一个错误被 generator 函数体内的catch语句捕获。i第二次抛出错误，由于 generator 函数内部的catch语句已经执行过了，不会再捕捉到这个错误了，所以这个错误就被抛出了 generator 函数体，被函数体外的catch语句捕获。\n\nthrow方法可以接受一个参数，该参数会被catch语句接收，建议抛出error对象的实例。\n\nvar g = function* () {\n  try {\n    yield;\n  } catch (e) {\n    console.log(e);\n  }\n};\n\nvar i = g();\ni.next();\ni.throw(new error('出错了！'));\n// error: 出错了！(…)\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n注意，不要混淆遍历器对象的throw方法和全局的throw命令。上面代码的错误，是用遍历器对象的throw方法抛出的，而不是用throw命令抛出的。后者只能被函数体外的catch语句捕获。\n\nvar g = function* () {\n  while (true) {\n    try {\n      yield;\n    } catch (e) {\n      if (e != 'a') throw e;\n      console.log('内部捕获', e);\n    }\n  }\n};\n\nvar i = g();\ni.next();\n\ntry {\n  throw new error('a');\n  throw new error('b');\n} catch (e) {\n  console.log('外部捕获', e);\n}\n// 外部捕获 [error: a]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n\n\n上面代码之所以只捕获了a，是因为函数体外的catch语句块，捕获了抛出的a错误以后，就不会再继续try代码块里面剩余的语句了。\n\n如果 generator 函数内部没有部署try...catch代码块，那么throw方法抛出的错误，将被外部try...catch代码块捕获。\n\nvar g = function* () {\n  while (true) {\n    yield;\n    console.log('内部捕获', e);\n  }\n};\n\nvar i = g();\ni.next();\n\ntry {\n  i.throw('a');\n  i.throw('b');\n} catch (e) {\n  console.log('外部捕获', e);\n}\n// 外部捕获 a\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n上面代码中，generator 函数g内部没有部署try...catch代码块，所以抛出的错误直接被外部catch代码块捕获。\n\n如果 generator 函数内部和外部，都没有部署try...catch代码块，那么程序将报错，直接中断执行。\n\nvar gen = function* gen(){\n  yield console.log('hello');\n  yield console.log('world');\n}\n\nvar g = gen();\ng.next();\ng.throw();\n// hello\n// uncaught undefined\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n上面代码中，g.throw抛出错误以后，没有任何try...catch代码块可以捕获这个错误，导致程序报错，中断执行。\n\nthrow方法抛出的错误要被内部捕获，前提是必须至少执行过一次next方法。\n\nfunction* gen() {\n  try {\n    yield 1;\n  } catch (e) {\n    console.log('内部捕获');\n  }\n}\n\nvar g = gen();\ng.throw(1);\n// uncaught 1\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n上面代码中，g.throw(1)执行时，next方法一次都没有执行过。这时，抛出的错误不会被内部捕获，而是直接在外部抛出，导致程序出错。这种行为其实很好理解，因为第一次执行next方法，等同于启动执行 generator 函数的内部代码，否则 generator 函数还没有开始执行，这时throw方法抛错只可能抛出在函数外部。\n\nthrow方法被捕获以后，会附带执行下一条yield表达式。也就是说，会附带执行一次next方法。\n\nvar gen = function* gen(){\n  try {\n    yield console.log('a');\n  } catch (e) {\n    // ...\n  }\n  yield console.log('b');\n  yield console.log('c');\n}\n\nvar g = gen();\ng.next() // a\ng.throw() // b\ng.next() // c\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n上面代码中，g.throw方法被捕获以后，自动执行了一次next方法，所以会打印b。另外，也可以看到，只要 generator 函数内部部署了try...catch代码块，那么遍历器的throw方法抛出的错误，不影响下一次遍历。\n\n另外，throw命令与g.throw方法是无关的，两者互不影响。\n\nvar gen = function* gen(){\n  yield console.log('hello');\n  yield console.log('world');\n}\n\nvar g = gen();\ng.next();\n\ntry {\n  throw new error();\n} catch (e) {\n  g.next();\n}\n// hello\n// world\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n上面代码中，throw命令抛出的错误不会影响到遍历器的状态，所以两次执行next方法，都进行了正确的操作。\n\n这种函数体内捕获错误的机制，大大方便了对错误的处理。多个yield表达式，可以只用一个try...catch代码块来捕获错误。如果使用回调函数的写法，想要捕获多个错误，就不得不为每个函数内部写一个错误处理语句，现在只在 generator 函数内部写一次catch语句就可以了。\n\ngenerator 函数体外抛出的错误，可以在函数体内捕获；反过来，generator 函数体内抛出的错误，也可以被函数体外的catch捕获。\n\nfunction* foo() {\n  var x = yield 3;\n  var y = x.touppercase();\n  yield y;\n}\n\nvar it = foo();\n\nit.next(); // { value:3, done:false }\n\ntry {\n  it.next(42);\n} catch (err) {\n  console.log(err);\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n上面代码中，第二个next方法向函数体内传入一个参数 42，数值是没有touppercase方法的，所以会抛出一个 typeerror 错误，被函数体外的catch捕获。\n\n一旦 generator 执行过程中抛出错误，且没有被内部捕获，就不会再执行下去了。如果此后还调用next方法，将返回一个value属性等于undefined、done属性等于true的对象，即 javascript 引擎认为这个 generator 已经运行结束了。\n\nfunction* g() {\n  yield 1;\n  console.log('throwing an exception');\n  throw new error('generator broke!');\n  yield 2;\n  yield 3;\n}\n\nfunction log(generator) {\n  var v;\n  console.log('starting generator');\n  try {\n    v = generator.next();\n    console.log('第一次运行next方法', v);\n  } catch (err) {\n    console.log('捕捉错误', v);\n  }\n  try {\n    v = generator.next();\n    console.log('第二次运行next方法', v);\n  } catch (err) {\n    console.log('捕捉错误', v);\n  }\n  try {\n    v = generator.next();\n    console.log('第三次运行next方法', v);\n  } catch (err) {\n    console.log('捕捉错误', v);\n  }\n  console.log('caller done');\n}\n\nlog(g());\n// starting generator\n// 第一次运行next方法 { value: 1, done: false }\n// throwing an exception\n// 捕捉错误 { value: 1, done: false }\n// 第三次运行next方法 { value: undefined, done: true }\n// caller done\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n\n\n上面代码一共三次运行next方法，第二次运行的时候会抛出错误，然后第三次运行的时候，generator 函数就已经结束了，不再执行下去了。\n\n\n# generator.prototype.return()\n\ngenerator 函数返回的遍历器对象，还有一个**return方法，可以返回给定的值，并且终结遍历 generator 函数。**\n\nfunction* gen() {\n  yield 1;\n  yield 2;\n  yield 3;\n}\n\nvar g = gen();\n\ng.next()        // { value: 1, done: false }\ng.return('foo') // { value: \"foo\", done: true }\ng.next()        // { value: undefined, done: true }\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n上面代码中，遍历器对象g调用return方法后，返回值的value属性就是return方法的参数foo。并且，generator 函数的遍历就终止了，返回值的done属性为true，以后再调用next方法，done属性总是返回true。\n\n如果return方法调用时，不提供参数，则返回值的value属性为undefined。\n\nfunction* gen() {\n  yield 1;\n  yield 2;\n  yield 3;\n}\n\nvar g = gen();\n\ng.next()        // { value: 1, done: false }\ng.return() // { value: undefined, done: true }\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n如果 generator 函数内部有try...finally代码块，且正在执行try代码块，那么return方法会导致立刻进入finally代码块，执行完以后，整个函数才会结束。\n\nfunction* numbers () {\n  yield 1;\n  try {\n    yield 2;\n    yield 3;\n  } finally {\n    yield 4;\n    yield 5;\n  }\n  yield 6;\n}\nvar g = numbers();\ng.next() // { value: 1, done: false }\ng.next() // { value: 2, done: false }\ng.return(7) // { value: 4, done: false }\ng.next() // { value: 5, done: false }\ng.next() // { value: 7, done: true }\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n上面代码中，调用return()方法后，就开始执行finally代码块，不执行try里面剩下的代码了，然后等到finally代码块执行完，再返回return()方法指定的返回值。\n\n\n# next()、throw()、return() 的共同点\n\nnext()、throw()、return()这三个方法本质上是同一件事，可以放在一起理解。它们的作用都是让 generator 函数恢复执行，并且使用不同的语句替换yield表达式。\n\nnext()是将yield表达式替换成一个值。\n\nconst g = function* (x, y) {\n  let result = yield x + y;\n  return result;\n};\n\nconst gen = g(1, 2);\ngen.next(); // object {value: 3, done: false}\n\ngen.next(1); // object {value: 1, done: true}\n// 相当于将 let result = yield x + y\n// 替换成 let result = 1;\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n上面代码中，第二个next(1)方法就相当于将yield表达式替换成一个值1。如果next方法没有参数，就相当于替换成undefined。\n\nthrow()是将yield表达式替换成一个throw语句。\n\ngen.throw(new error('出错了')); // uncaught error: 出错了\n// 相当于将 let result = yield x + y\n// 替换成 let result = throw(new error('出错了'));\n\n\n1\n2\n3\n\n\nreturn()是将yield表达式替换成一个return语句。\n\ngen.return(2); // object {value: 2, done: true}\n// 相当于将 let result = yield x + y\n// 替换成 let result = return 2;\n\n\n1\n2\n3\n\n\n\n# yield* 表达式\n\n如果在 generator 函数内部，调用另一个 generator 函数。需要在前者的函数体内部，自己手动完成遍历。\n\nfunction* foo() {\n  yield 'a';\n  yield 'b';\n}\n\nfunction* bar() {\n  yield 'x';\n  // 手动遍历 foo()\n  for (let i of foo()) {\n    console.log(i);\n  }\n  yield 'y';\n}\n\nfor (let v of bar()){\n  console.log(v);\n}\n// x\n// a\n// b\n// y\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n\n\n上面代码中，foo和bar都是 generator 函数，在bar里面调用foo，就需要手动遍历foo。如果有多个 generator 函数嵌套，写起来就非常麻烦。\n\nes6 提供了yield*表达式，作为解决办法，用来在一个 generator 函数里面执行另一个 generator 函数。\n\nfunction* bar() {\n  yield 'x';\n  yield* foo();\n  yield 'y';\n}\n\n// 等同于\nfunction* bar() {\n  yield 'x';\n  yield 'a';\n  yield 'b';\n  yield 'y';\n}\n\n// 等同于\nfunction* bar() {\n  yield 'x';\n  for (let v of foo()) {\n    yield v;\n  }\n  yield 'y';\n}\n\nfor (let v of bar()){\n  console.log(v);\n}\n// \"x\"\n// \"a\"\n// \"b\"\n// \"y\"\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n\n\n再来看一个对比的例子。\n\nfunction* inner() {\n  yield 'hello!';\n}\n\nfunction* outer1() {\n  yield 'open';\n  yield inner();\n  yield 'close';\n}\n\nvar gen = outer1()\ngen.next().value // \"open\"\ngen.next().value // 返回一个遍历器对象\ngen.next().value // \"close\"\n\nfunction* outer2() {\n  yield 'open'\n  yield* inner()\n  yield 'close'\n}\n\nvar gen = outer2()\ngen.next().value // \"open\"\ngen.next().value // \"hello!\"\ngen.next().value // \"close\"\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n\n\n上面例子中，outer2使用了yield*，outer1没使用。结果就是，outer1返回一个遍历器对象，outer2返回该遍历器对象的内部值。\n\n从语法角度看，如果yield表达式后面跟的是一个遍历器对象，需要在yield表达式后面加上星号，表明它返回的是一个遍历器对象。这被称为yield*表达式。\n\nlet delegatediterator = (function* () {\n  yield 'hello!';\n  yield 'bye!';\n}());\n\nlet delegatingiterator = (function* () {\n  yield 'greetings!';\n  yield* delegatediterator;\n  yield 'ok, bye.';\n}());\n\nfor(let value of delegatingiterator) {\n  console.log(value);\n}\n// \"greetings!\n// \"hello!\"\n// \"bye!\"\n// \"ok, bye.\"\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\n上面代码中，delegatingiterator是代理者，delegatediterator是被代理者。由于yield* delegatediterator语句得到的值，是一个遍历器，所以要用星号表示。运行结果就是使用一个遍历器，遍历了多个 generator 函数，有递归的效果。\n\nyield*后面的 generator 函数（没有return语句时），等同于在 generator 函数内部，部署一个for...of循环。\n\nfunction* concat(iter1, iter2) {\n  yield* iter1;\n  yield* iter2;\n}\n\n// 等同于\n\nfunction* concat(iter1, iter2) {\n  for (var value of iter1) {\n    yield value;\n  }\n  for (var value of iter2) {\n    yield value;\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n上面代码说明，yield*后面的 generator 函数（没有return语句时），不过是for...of的一种简写形式，完全可以用后者替代前者。反之，在有return语句时，则需要用var value = yield* iterator的形式获取return语句的值。\n\n如果yield*后面跟着一个数组，由于数组原生支持遍历器，因此就会遍历数组成员。\n\nfunction* gen(){\n  yield* [\"a\", \"b\", \"c\"];\n}\n\ngen().next() // { value:\"a\", done:false }\n\n\n1\n2\n3\n4\n5\n\n\n上面代码中，yield命令后面如果不加星号，返回的是整个数组，加了星号就表示返回的是数组的遍历器对象。\n\n实际上，任何数据结构只要有 iterator 接口，就可以被yield*遍历。\n\nlet read = (function* () {\n  yield 'hello';\n  yield* 'hello';\n})();\n\nread.next().value // \"hello\"\nread.next().value // \"h\"\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n上面代码中，yield表达式返回整个字符串，yield*语句返回单个字符。因为字符串具有 iterator 接口，所以被yield*遍历。\n\n如果被代理的 generator 函数有return语句，那么就可以向代理它的 generator 函数返回数据。\n\nfunction* foo() {\n  yield 2;\n  yield 3;\n  return \"foo\";\n}\n\nfunction* bar() {\n  yield 1;\n  var v = yield* foo();\n  console.log(\"v: \" + v);\n  yield 4;\n}\n\nvar it = bar();\n\nit.next()\n// {value: 1, done: false}\nit.next()\n// {value: 2, done: false}\nit.next()\n// {value: 3, done: false}\nit.next();\n// \"v: foo\"\n// {value: 4, done: false}\nit.next()\n// {value: undefined, done: true}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n\n\n上面代码在第四次调用next方法的时候，屏幕上会有输出，这是因为函数foo的return语句，向函数bar提供了返回值。\n\n再看一个例子。\n\nfunction* genfuncwithreturn() {\n  yield 'a';\n  yield 'b';\n  return 'the result';\n}\nfunction* logreturned(genobj) {\n  let result = yield* genobj;\n  console.log(result);\n}\n\n[...logreturned(genfuncwithreturn())]\n// the result\n// 值为 [ 'a', 'b' ]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n上面代码中，存在两次遍历。第一次是扩展运算符遍历函数logreturned返回的遍历器对象，第二次是yield*语句遍历函数genfuncwithreturn返回的遍历器对象。这两次遍历的效果是叠加的，最终表现为扩展运算符遍历函数genfuncwithreturn返回的遍历器对象。所以，最后的数据表达式得到的值等于[ 'a', 'b' ]。但是，函数genfuncwithreturn的return语句的返回值the result，会返回给函数logreturned内部的result变量，因此会有终端输出。\n\nyield*命令可以很方便地取出嵌套数组的所有成员。\n\nfunction* itertree(tree) {\n  if (array.isarray(tree)) {\n    for(let i=0; i < tree.length; i++) {\n      yield* itertree(tree[i]);\n    }\n  } else {\n    yield tree;\n  }\n}\n\nconst tree = [ 'a', ['b', 'c'], ['d', 'e'] ];\n\nfor(let x of itertree(tree)) {\n  console.log(x);\n}\n// a\n// b\n// c\n// d\n// e\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n\n由于扩展运算符...默认调用 iterator 接口，所以上面这个函数也可以用于嵌套数组的平铺。\n\n[...itertree(tree)] // [\"a\", \"b\", \"c\", \"d\", \"e\"]\n\n\n1\n\n\n下面是一个稍微复杂的例子，使用yield*语句遍历完全二叉树。\n\n// 下面是二叉树的构造函数，\n// 三个参数分别是左树、当前节点和右树\nfunction tree(left, label, right) {\n  this.left = left;\n  this.label = label;\n  this.right = right;\n}\n\n// 下面是中序（inorder）遍历函数。\n// 由于返回的是一个遍历器，所以要用generator函数。\n// 函数体内采用递归算法，所以左树和右树要用yield*遍历\nfunction* inorder(t) {\n  if (t) {\n    yield* inorder(t.left);\n    yield t.label;\n    yield* inorder(t.right);\n  }\n}\n\n// 下面生成二叉树\nfunction make(array) {\n  // 判断是否为叶节点\n  if (array.length == 1) return new tree(null, array[0], null);\n  return new tree(make(array[0]), array[1], make(array[2]));\n}\nlet tree = make([[['a'], 'b', ['c']], 'd', [['e'], 'f', ['g']]]);\n\n// 遍历二叉树\nvar result = [];\nfor (let node of inorder(tree)) {\n  result.push(node);\n}\n\nresult\n// ['a', 'b', 'c', 'd', 'e', 'f', 'g']\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n\n\n\n# 作为对象属性的 generator 函数\n\n如果一个对象的属性是 generator 函数，可以简写成下面的形式。\n\nlet obj = {\n  * mygeneratormethod() {\n    ···\n  }\n};\n\n\n1\n2\n3\n4\n5\n\n\n上面代码中，mygeneratormethod属性前面有一个星号，表示这个属性是一个 generator 函数。\n\n它的完整形式如下，与上面的写法是等价的。\n\nlet obj = {\n  mygeneratormethod: function* () {\n    // ···\n  }\n};\n\n\n1\n2\n3\n4\n5\n\n\n\n# generator 函数的this\n\ngenerator 函数总是返回一个遍历器，es6 规定这个遍历器是 generator 函数的实例，也继承了 generator 函数的prototype对象上的方法。\n\nfunction* g() {}\n\ng.prototype.hello = function () {\n  return 'hi!';\n};\n\nlet obj = g();\n\nobj instanceof g // true\nobj.hello() // 'hi!'\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n上面代码表明，generator 函数g返回的遍历器obj，是g的实例，而且继承了g.prototype。但是，如果把g当作普通的构造函数，并不会生效，因为g返回的总是遍历器对象，而不是this对象。\n\nfunction* g() {\n  this.a = 11;\n}\n\nlet obj = g();\nobj.next();\nobj.a // undefined\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n上面代码中，generator 函数g在this对象上面添加了一个属性a，但是obj对象拿不到这个属性。\n\ngenerator 函数也不能跟new命令一起用，会报错。\n\nfunction* f() {\n  yield this.x = 2;\n  yield this.y = 3;\n}\n\nnew f()\n// typeerror: f is not a constructor\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n上面代码中，new命令跟构造函数f一起使用，结果报错，因为f不是构造函数。\n\n那么，有没有办法让 generator 函数返回一个正常的对象实例，既可以用next方法，又可以获得正常的this？\n\n下面是一个变通方法。首先，生成一个空对象，使用call方法绑定 generator 函数内部的this。这样，构造函数调用以后，这个空对象就是 generator 函数的实例对象了。\n\nfunction* f() {\n  this.a = 1;\n  yield this.b = 2;\n  yield this.c = 3;\n}\nvar obj = {};\nvar f = f.call(obj);\n\nf.next();  // object {value: 2, done: false}\nf.next();  // object {value: 3, done: false}\nf.next();  // object {value: undefined, done: true}\n\nobj.a // 1\nobj.b // 2\nobj.c // 3\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n上面代码中，首先是f内部的this对象绑定obj对象，然后调用它，返回一个 iterator 对象。这个对象执行三次next方法（因为f内部有两个yield表达式），完成 f 内部所有代码的运行。这时，所有内部属性都绑定在obj对象上了，因此obj对象也就成了f的实例。\n\n上面代码中，执行的是遍历器对象f，但是生成的对象实例是obj，有没有办法将这两个对象统一呢？\n\n一个办法就是将obj换成f.prototype。\n\nfunction* f() {\n  this.a = 1;\n  yield this.b = 2;\n  yield this.c = 3;\n}\nvar f = f.call(f.prototype);\n\nf.next();  // object {value: 2, done: false}\nf.next();  // object {value: 3, done: false}\nf.next();  // object {value: undefined, done: true}\n\nf.a // 1\nf.b // 2\nf.c // 3\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n再将f改成构造函数，就可以对它执行new命令了。\n\nfunction* gen() {\n  this.a = 1;\n  yield this.b = 2;\n  yield this.c = 3;\n}\n\nfunction f() {\n  return gen.call(gen.prototype);\n}\n\nvar f = new f();\n\nf.next();  // object {value: 2, done: false}\nf.next();  // object {value: 3, done: false}\nf.next();  // object {value: undefined, done: true}\n\nf.a // 1\nf.b // 2\nf.c // 3\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\n\n# 含义\n\n\n# generator 与状态机\n\ngenerator 是实现状态机的最佳结构。比如，下面的clock函数就是一个状态机。\n\nvar ticking = true;\nvar clock = function() {\n  if (ticking)\n    console.log('tick!');\n  else\n    console.log('tock!');\n  ticking = !ticking;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n上面代码的clock函数一共有两种状态（tick和tock），每运行一次，就改变一次状态。这个函数如果用 generator 实现，就是下面这样。\n\nvar clock = function* () {\n  while (true) {\n    console.log('tick!');\n    yield;\n    console.log('tock!');\n    yield;\n  }\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n上面的 generator 实现与 es5 实现对比，可以看到少了用来保存状态的外部变量ticking，这样就更简洁，更安全（状态不会被非法篡改）、更符合函数式编程的思想，在写法上也更优雅。generator 之所以可以不用外部变量保存状态，是因为它本身就包含了一个状态信息，即目前是否处于暂停态。\n\n\n# generator 与协程\n\n协程（coroutine）是一种程序运行的方式，可以理解成“协作的线程”或“协作的函数”。协程既可以用单线程实现，也可以用多线程实现。前者是一种特殊的子例程，后者是一种特殊的线程。\n\n（1）协程与子例程的差异\n\n传统的“子例程”（subroutine）采用堆栈式“后进先出”的执行方式，只有当调用的子函数完全执行完毕，才会结束执行父函数。协程与其不同，多个线程（单线程情况下，即多个函数）可以并行执行，但是只有一个线程（或函数）处于正在运行的状态，其他线程（或函数）都处于暂停态（suspended），线程（或函数）之间可以交换执行权。也就是说，一个线程（或函数）执行到一半，可以暂停执行，将执行权交给另一个线程（或函数），等到稍后收回执行权的时候，再恢复执行。这种可以并行执行、交换执行权的线程（或函数），就称为协程。\n\n从实现上看，在内存中，子例程只使用一个栈（stack），而协程是同时存在多个栈，但只有一个栈是在运行状态，也就是说，协程是以多占用内存为代价，实现多任务的并行。\n\n（2）协程与普通线程的差异\n\n不难看出，协程适合用于多任务运行的环境。在这个意义上，它与普通的线程很相似，都有自己的执行上下文、可以分享全局变量。它们的不同之处在于，同一时间可以有多个线程处于运行状态，但是运行的协程只能有一个，其他协程都处于暂停状态。此外，普通的线程是抢先式的，到底哪个线程优先得到资源，必须由运行环境决定，但是协程是合作式的，执行权由协程自己分配。\n\n由于 javascript 是单线程语言，只能保持一个调用栈。引入协程以后，每个任务可以保持自己的调用栈。这样做的最大好处，就是抛出错误的时候，可以找到原始的调用栈。不至于像异步操作的回调函数那样，一旦出错，原始的调用栈早就结束。\n\ngenerator 函数是 es6 对协程的实现，但属于不完全实现。generator 函数被称为“半协程”（semi-coroutine），意思是只有 generator 函数的调用者，才能将程序的执行权还给 generator 函数。如果是完全执行的协程，任何函数都可以让暂停的协程继续执行。\n\n如果将 generator 函数当作协程，完全可以将多个需要互相协作的任务写成 generator 函数，它们之间使用yield表达式交换控制权。\n\n\n# generator 与上下文\n\njavascript 代码运行时，会产生一个全局的上下文环境（context，又称运行环境），包含了当前所有的变量和对象。然后，执行函数（或块级代码）的时候，又会在当前上下文环境的上层，产生一个函数运行的上下文，变成当前（active）的上下文，由此形成一个上下文环境的堆栈（context stack）。\n\n这个堆栈是“后进先出”的数据结构，最后产生的上下文环境首先执行完成，退出堆栈，然后再执行完成它下层的上下文，直至所有代码执行完成，堆栈清空。\n\ngenerator 函数不是这样，它执行产生的上下文环境，一旦遇到yield命令，就会暂时退出堆栈，但是并不消失，里面的所有变量和对象会冻结在当前状态。等到对它执行next命令时，这个上下文环境又会重新加入调用栈，冻结的变量和对象恢复执行。\n\nfunction* gen() {\n  yield 1;\n  return 2;\n}\n\nlet g = gen();\n\nconsole.log(\n  g.next().value,\n  g.next().value,\n);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n上面代码中，第一次执行g.next()时，generator 函数gen的上下文会加入堆栈，即开始运行gen内部的代码。等遇到yield 1时，gen上下文退出堆栈，内部状态冻结。第二次执行g.next()时，gen上下文重新加入堆栈，变成当前的上下文，重新恢复执行。\n\n\n# 应用\n\ngenerator 可以暂停函数执行，返回任意表达式的值。这种特点使得 generator 有多种应用场景。\n\n\n# （1）异步操作的同步化表达\n\ngenerator 函数的暂停执行的效果，意味着可以把异步操作写在yield表达式里面，等到调用next方法时再往后执行。这实际上等同于不需要写回调函数了，因为异步操作的后续操作可以放在yield表达式下面，反正要等到调用next方法时再执行。所以，generator 函数的一个重要实际意义就是用来处理异步操作，改写回调函数。\n\nfunction* loadui() {\n  showloadingscreen();\n  yield loaduidataasynchronously();\n  hideloadingscreen();\n}\nvar loader = loadui();\n// 加载ui\nloader.next()\n\n// 卸载ui\nloader.next()\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n上面代码中，第一次调用loadui函数时，该函数不会执行，仅返回一个遍历器。下一次对该遍历器调用next方法，则会显示loading界面（showloadingscreen），并且异步加载数据（loaduidataasynchronously）。等到数据加载完成，再一次使用next方法，则会隐藏loading界面。可以看到，这种写法的好处是所有loading界面的逻辑，都被封装在一个函数，按部就班非常清晰。\n\najax 是典型的异步操作，通过 generator 函数部署 ajax 操作，可以用同步的方式表达。\n\nfunction* main() {\n  var result = yield request(\"http://some.url\");\n  var resp = json.parse(result);\n    console.log(resp.value);\n}\n\nfunction request(url) {\n  makeajaxcall(url, function(response){\n    it.next(response);\n  });\n}\n\nvar it = main();\nit.next();\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n上面代码的main函数，就是通过 ajax 操作获取数据。可以看到，除了多了一个yield，它几乎与同步操作的写法完全一样。注意，makeajaxcall函数中的next方法，必须加上response参数，因为yield表达式，本身是没有值的，总是等于undefined。\n\n下面是另一个例子，通过 generator 函数逐行读取文本文件。\n\nfunction* numbers() {\n  let file = new filereader(\"numbers.txt\");\n  try {\n    while(!file.eof) {\n      yield parseint(file.readline(), 10);\n    }\n  } finally {\n    file.close();\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n上面代码打开文本文件，使用yield表达式可以手动逐行读取文件。\n\n\n# （2）控制流管理\n\n如果有一个多步操作非常耗时，采用回调函数，可能会写成下面这样。\n\nstep1(function (value1) {\n  step2(value1, function(value2) {\n    step3(value2, function(value3) {\n      step4(value3, function(value4) {\n        // do something with value4\n      });\n    });\n  });\n});\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n采用 promise 改写上面的代码。\n\npromise.resolve(step1)\n  .then(step2)\n  .then(step3)\n  .then(step4)\n  .then(function (value4) {\n    // do something with value4\n  }, function (error) {\n    // handle any error from step1 through step4\n  })\n  .done();\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n上面代码已经把回调函数，改成了直线执行的形式，但是加入了大量 promise 的语法。generator 函数可以进一步改善代码运行流程。\n\nfunction* longrunningtask(value1) {\n  try {\n    var value2 = yield step1(value1);\n    var value3 = yield step2(value2);\n    var value4 = yield step3(value3);\n    var value5 = yield step4(value4);\n    // do something with value4\n  } catch (e) {\n    // handle any error from step1 through step4\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n然后，使用一个函数，按次序自动执行所有步骤。\n\nscheduler(longrunningtask(initialvalue));\n\nfunction scheduler(task) {\n  var taskobj = task.next(task.value);\n  // 如果generator函数未结束，就继续调用\n  if (!taskobj.done) {\n    task.value = taskobj.value\n    scheduler(task);\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n注意，上面这种做法，只适合同步操作，即所有的task都必须是同步的，不能有异步操作。因为这里的代码一得到返回值，就继续往下执行，没有判断异步操作何时完成。如果要控制异步的操作流程，详见后面的《异步操作》一章。\n\n下面，利用for...of循环会自动依次执行yield命令的特性，提供一种更一般的控制流管理的方法。\n\nlet steps = [step1func, step2func, step3func];\n\nfunction* iteratesteps(steps){\n  for (var i=0; i< steps.length; i++){\n    var step = steps[i];\n    yield step();\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n上面代码中，数组steps封装了一个任务的多个步骤，generator 函数iteratesteps则是依次为这些步骤加上yield命令。\n\n将任务分解成步骤之后，还可以将项目分解成多个依次执行的任务。\n\nlet jobs = [job1, job2, job3];\n\nfunction* iteratejobs(jobs){\n  for (var i=0; i< jobs.length; i++){\n    var job = jobs[i];\n    yield* iteratesteps(job.steps);\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n上面代码中，数组jobs封装了一个项目的多个任务，generator 函数iteratejobs则是依次为这些任务加上yield*命令。\n\n最后，就可以用for...of循环一次性依次执行所有任务的所有步骤。\n\nfor (var step of iteratejobs(jobs)){\n  console.log(step.id);\n}\n\n\n1\n2\n3\n\n\n再次提醒，上面的做法只能用于所有步骤都是同步操作的情况，不能有异步操作的步骤。如果想要依次执行异步的步骤，必须使用后面的《异步操作》一章介绍的方法。\n\nfor...of的本质是一个while循环，所以上面的代码实质上执行的是下面的逻辑。\n\nvar it = iteratejobs(jobs);\nvar res = it.next();\n\nwhile (!res.done){\n  var result = res.value;\n  // ...\n  res = it.next();\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# （3）部署 iterator 接口\n\n利用 generator 函数，可以在任意对象上部署 iterator 接口。\n\nfunction* iterentries(obj) {\n  let keys = object.keys(obj);\n  for (let i=0; i < keys.length; i++) {\n    let key = keys[i];\n    yield [key, obj[key]];\n  }\n}\n\nlet myobj = { foo: 3, bar: 7 };\n\nfor (let [key, value] of iterentries(myobj)) {\n  console.log(key, value);\n}\n\n// foo 3\n// bar 7\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n上述代码中，myobj是一个普通对象，通过iterentries函数，就有了 iterator 接口。也就是说，可以在任意对象上部署next方法。\n\n下面是一个对数组部署 iterator 接口的例子，尽管数组原生具有这个接口。\n\nfunction* makesimplegenerator(array){\n  var nextindex = 0;\n\n  while(nextindex < array.length){\n    yield array[nextindex++];\n  }\n}\n\nvar gen = makesimplegenerator(['yo', 'ya']);\n\ngen.next().value // 'yo'\ngen.next().value // 'ya'\ngen.next().done  // true\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n\n# （4）作为数据结构\n\ngenerator 可以看作是数据结构，更确切地说，可以看作是一个数组结构，因为 generator 函数可以返回一系列的值，这意味着它可以对任意表达式，提供类似数组的接口。\n\nfunction* dostuff() {\n  yield fs.readfile.bind(null, 'hello.txt');\n  yield fs.readfile.bind(null, 'world.txt');\n  yield fs.readfile.bind(null, 'and-such.txt');\n}\n\n\n1\n2\n3\n4\n5\n\n\n上面代码就是依次返回三个函数，但是由于使用了 generator 函数，导致可以像处理数组那样，处理这三个返回的函数。\n\nfor (task of dostuff()) {\n  // task是一个函数，可以像回调函数那样使用它\n}\n\n\n1\n2\n3\n\n\n实际上，如果用 es5 表达，完全可以用数组模拟 generator 的这种用法。\n\nfunction dostuff() {\n  return [\n    fs.readfile.bind(null, 'hello.txt'),\n    fs.readfile.bind(null, 'world.txt'),\n    fs.readfile.bind(null, 'and-such.txt')\n  ];\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n上面的函数，可以用一模一样的for...of循环处理！两相一比较，就不难看出 generator 使得数据或者操作，具备了类似数组的接口。",charsets:{cjk:!0}},{title:"async 函数",frontmatter:{title:"async 函数",date:"2020-02-09T16:00:29.000Z",permalink:"/pages/3777253e65bac487",author:"阮一峰",categories:["《ES6 教程》笔记"],tags:["ES6"],readingShow:"top"},regularPath:"/06.%E4%B9%A6%E7%B1%8D/05.%E3%80%8AES6%20%E6%95%99%E7%A8%8B%E3%80%8B%E7%AC%94%E8%AE%B0/20.async%20%E5%87%BD%E6%95%B0.html",relativePath:"06.书籍/05.《ES6 教程》笔记/20.async 函数.md",key:"v-802dbb5a",path:"/pages/3777253e65bac487/",headers:[{level:2,title:"含义",slug:"含义",normalizedTitle:"含义",charIndex:15},{level:2,title:"基本用法",slug:"基本用法",normalizedTitle:"基本用法",charIndex:1536},{level:2,title:"语法",slug:"语法",normalizedTitle:"语法",charIndex:89},{level:3,title:"返回 Promise 对象",slug:"返回-promise-对象",normalizedTitle:"返回 promise 对象",charIndex:3185},{level:3,title:"Promise 对象的状态变化",slug:"promise-对象的状态变化",normalizedTitle:"promise 对象的状态变化",charIndex:3633},{level:3,title:"await 命令",slug:"await-命令",normalizedTitle:"await 命令",charIndex:4153},{level:3,title:"错误处理",slug:"错误处理",normalizedTitle:"错误处理",charIndex:3173},{level:3,title:"使用注意点",slug:"使用注意点",normalizedTitle:"使用注意点",charIndex:7702},{level:2,title:"async 函数的实现原理",slug:"async-函数的实现原理",normalizedTitle:"async 函数的实现原理",charIndex:6727},{level:2,title:"与其他异步处理方法的比较",slug:"与其他异步处理方法的比较",normalizedTitle:"与其他异步处理方法的比较",charIndex:10914},{level:2,title:"实例：按顺序完成异步操作",slug:"实例-按顺序完成异步操作",normalizedTitle:"实例：按顺序完成异步操作",charIndex:12518},{level:2,title:"顶层 await",slug:"顶层-await",normalizedTitle:"顶层 await",charIndex:13770}],excerpt:'<h1 id="async-函数"><a class="header-anchor" href="#async-函数">#</a> async 函数</h1>\n<h2 id="含义"><a class="header-anchor" href="#含义">#</a> 含义</h2>\n<p>ES2017 标准引入了 async 函数，使得异步操作变得更加方便。</p>\n<p>async 函数是什么？一句话，它就<strong>是 Generator 函数的语法糖</strong>。</p>\n<p>前文有一个 Generator 函数，依次读取两个文件。</p>\n',lastUpdated:"2022/9/22 下午4:28:09",lastUpdatedTimestamp:1663835289e3,headersStr:"含义 基本用法 语法 返回 Promise 对象 Promise 对象的状态变化 await 命令 错误处理 使用注意点 async 函数的实现原理 与其他异步处理方法的比较 实例：按顺序完成异步操作 顶层 await",content:"# async 函数\n\n\n# 含义\n\nES2017 标准引入了 async 函数，使得异步操作变得更加方便。\n\nasync 函数是什么？一句话，它就是 Generator 函数的语法糖。\n\n前文有一个 Generator 函数，依次读取两个文件。\n\nconst fs = require('fs');\n\nconst readFile = function (fileName) {\n  return new Promise(function (resolve, reject) {\n    fs.readFile(fileName, function(error, data) {\n      if (error) return reject(error);\n      resolve(data);\n    });\n  });\n};\n\nconst gen = function* () {\n  const f1 = yield readFile('/etc/fstab');\n  const f2 = yield readFile('/etc/shells');\n  console.log(f1.toString());\n  console.log(f2.toString());\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n上面代码的函数gen可以写成async函数，就是下面这样。\n\nconst asyncReadFile = async function () {\n  const f1 = await readFile('/etc/fstab');\n  const f2 = await readFile('/etc/shells');\n  console.log(f1.toString());\n  console.log(f2.toString());\n};\n\n\n1\n2\n3\n4\n5\n6\n\n\n一比较就会发现，async函数就是将 Generator 函数的星号（*）替换成async，将yield替换成await，仅此而已。\n\nasync函数对 Generator 函数的改进，体现在以下四点。\n\n（1）内置执行器。\n\nGenerator 函数的执行必须靠执行器，所以才有了co模块，而async函数自带执行器。也就是说，async函数的执行，与普通函数一模一样，只要一行。\n\nasyncReadFile();\n\n\n1\n\n\n上面的代码调用了asyncReadFile函数，然后它就会自动执行，输出最后结果。这完全不像 Generator 函数，需要调用next方法，或者用co模块，才能真正执行，得到最后结果。\n\n（2）更好的语义。\n\nasync和await，比起星号和yield，语义更清楚了。async表示函数里有异步操作，await表示紧跟在后面的表达式需要等待结果。\n\n（3）更广的适用性。\n\nco模块约定，yield命令后面只能是 Thunk 函数或 Promise 对象，而async函数的await命令后面，可以是 Promise 对象和原始类型的值（数值、字符串和布尔值，但这时会自动转成立即 resolved 的 Promise 对象）。\n\n（4）返回值是 Promise。\n\nasync函数的返回值是 Promise 对象，这比 Generator 函数的返回值是 Iterator 对象方便多了。你可以用then方法指定下一步的操作。\n\n进一步说，async函数完全可以看作多个异步操作，包装成的一个 Promise 对象，而await命令就是内部then命令的语法糖。\n\n\n# 基本用法\n\nasync函数返回一个 Promise 对象，可以使用then方法添加回调函数。当函数执行的时候，一旦遇到await就会先返回，等到异步操作完成，再接着执行函数体内后面的语句。\n\n下面是一个例子。\n\nasync function getStockPriceByName(name) {\n  const symbol = await getStockSymbol(name);\n  const stockPrice = await getStockPrice(symbol);\n  return stockPrice;\n}\n\ngetStockPriceByName('goog').then(function (result) {\n  console.log(result);\n});\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n上面代码是一个获取股票报价的函数，函数前面的async关键字，表明该函数内部有异步操作。调用该函数时，会立即返回一个Promise对象。\n\n下面是另一个例子，指定多少毫秒后输出一个值。\n\nfunction timeout(ms) {\n  return new Promise((resolve) => {\n    setTimeout(resolve, ms);\n  });\n}\n\nasync function asyncPrint(value, ms) {\n  await timeout(ms);\n  console.log(value);\n}\n\nasyncPrint('hello world', 50);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n上面代码指定 50 毫秒以后，输出hello world。\n\n由于async函数返回的是 Promise 对象，可以作为await命令的参数。所以，上面的例子也可以写成下面的形式。\n\nasync function timeout(ms) {\n  await new Promise((resolve) => {\n    setTimeout(resolve, ms);\n  });\n}\n\nasync function asyncPrint(value, ms) {\n  await timeout(ms);\n  console.log(value);\n}\n\nasyncPrint('hello world', 50);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\nasync 函数有多种使用形式。\n\n// 函数声明\nasync function foo() {}\n\n// 函数表达式\nconst foo = async function () {};\n\n// 对象的方法\nlet obj = { async foo() {} };\nobj.foo().then(...)\n\n// Class 的方法\nclass Storage {\n  constructor() {\n    this.cachePromise = caches.open('avatars');\n  }\n\n  async getAvatar(name) {\n    const cache = await this.cachePromise;\n    return cache.match(`/avatars/${name}.jpg`);\n  }\n}\n\nconst storage = new Storage();\nstorage.getAvatar('jake').then(…);\n\n// 箭头函数\nconst foo = async () => {};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n\n\n\n# 语法\n\nasync函数的语法规则总体上比较简单，难点是错误处理机制。\n\n\n# 返回 Promise 对象\n\nasync函数返回一个 Promise 对象。\n\nasync函数内部return语句返回的值，会成为then方法回调函数的参数。\n\nasync function f() {\n  return 'hello world';\n}\n\nf().then(v => console.log(v))\n// \"hello world\"\n\n\n1\n2\n3\n4\n5\n6\n\n\n上面代码中，函数f内部return命令返回的值，会被then方法回调函数接收到。\n\nasync函数内部抛出错误，会导致返回的 Promise 对象变为reject状态。抛出的错误对象会被catch方法回调函数接收到。\n\nasync function f() {\n  throw new Error('出错了');\n}\n\nf().then(\n  v => console.log(v),\n  e => console.log(e)\n)\n// Error: 出错了\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n\n# Promise 对象的状态变化\n\nasync函数返回的 Promise 对象，必须等到内部所有await命令后面的 Promise 对象执行完，才会发生状态改变，除非遇到return语句或者抛出错误。也就是说，只有async函数内部的异步操作执行完，才会执行then方法指定的回调函数。\n\n下面是一个例子。\n\nasync function getTitle(url) {\n  let response = await fetch(url);\n  let html = await response.text();\n  return html.match(/<title>([\\s\\S]+)<\\/title>/i)[1];\n}\ngetTitle('https://tc39.github.io/ecma262/').then(console.log)\n// \"ECMAScript 2017 Language Specification\"\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n上面代码中，函数getTitle内部有三个操作：抓取网页、取出文本、匹配页面标题。只有这三个操作全部完成，才会执行then方法里面的console.log。\n\n\n# await 命令\n\n正常情况下，await命令后面是一个 Promise 对象，返回该对象的结果。如果不是 Promise 对象，就直接返回对应的值。\n\nasync function f() {\n  // 等同于\n  // return 123;\n  return await 123;\n}\n\nf().then(v => console.log(v))\n// 123\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n上面代码中，await命令的参数是数值123，这时等同于return 123。\n\n另一种情况是，await命令后面是一个thenable对象（即定义then方法的对象），那么await会将其等同于 Promise 对象。\n\nclass Sleep {\n  constructor(timeout) {\n    this.timeout = timeout;\n  }\n  then(resolve, reject) {\n    const startTime = Date.now();\n    setTimeout(\n      () => resolve(Date.now() - startTime),\n      this.timeout\n    );\n  }\n}\n\n(async () => {\n  const sleepTime = await new Sleep(1000);\n  console.log(sleepTime);\n})();\n// 1000\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\n上面代码中，await命令后面是一个Sleep对象的实例。这个实例不是 Promise 对象，但是因为定义了then方法，await会将其视为Promise处理。\n\n这个例子还演示了如何实现休眠效果。JavaScript 一直没有休眠的语法，但是借助await命令就可以让程序停顿指定的时间。下面给出了一个简化的sleep实现。\n\nfunction sleep(interval) {\n  return new Promise(resolve => {\n    setTimeout(resolve, interval);\n  })\n}\n\n// 用法\nasync function one2FiveInAsync() {\n  for(let i = 1; i <= 5; i++) {\n    console.log(i);\n    await sleep(1000);\n  }\n}\n\none2FiveInAsync();\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\nawait命令后面的 Promise 对象如果变为reject状态，则reject的参数会被catch方法的回调函数接收到。\n\nasync function f() {\n  await Promise.reject('出错了');\n}\n\nf()\n.then(v => console.log(v))\n.catch(e => console.log(e))\n// 出错了\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n注意，上面代码中，await语句前面没有return，但是reject方法的参数依然传入了catch方法的回调函数。这里如果在await前面加上return，效果是一样的。\n\n任何一个await语句后面的 Promise 对象变为reject状态，那么整个async函数都会中断执行。\n\nasync function f() {\n  await Promise.reject('出错了');\n  await Promise.resolve('hello world'); // 不会执行\n}\n\n\n1\n2\n3\n4\n\n\n上面代码中，第二个await语句是不会执行的，因为第一个await语句状态变成了reject。\n\n有时，我们希望即使前一个异步操作失败，也不要中断后面的异步操作。这时可以将第一个await放在try...catch结构里面，这样不管这个异步操作是否成功，第二个await都会执行。\n\nasync function f() {\n  try {\n    await Promise.reject('出错了');\n  } catch(e) {\n  }\n  return await Promise.resolve('hello world');\n}\n\nf()\n.then(v => console.log(v))\n// hello world\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n另一种方法是await后面的 Promise 对象再跟一个catch方法，处理前面可能出现的错误。\n\nasync function f() {\n  await Promise.reject('出错了')\n    .catch(e => console.log(e));\n  return await Promise.resolve('hello world');\n}\n\nf()\n.then(v => console.log(v))\n// 出错了\n// hello world\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n\n# 错误处理\n\n如果await后面的异步操作出错，那么等同于async函数返回的 Promise 对象被reject。\n\nasync function f() {\n  await new Promise(function (resolve, reject) {\n    throw new Error('出错了');\n  });\n}\n\nf()\n.then(v => console.log(v))\n.catch(e => console.log(e))\n// Error：出错了\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n上面代码中，async函数f执行后，await后面的 Promise 对象会抛出一个错误对象，导致catch方法的回调函数被调用，它的参数就是抛出的错误对象。具体的执行机制，可以参考后文的“async 函数的实现原理”。\n\n防止出错的方法，也是将其放在try...catch代码块之中。\n\nasync function f() {\n  try {\n    await new Promise(function (resolve, reject) {\n      throw new Error('出错了');\n    });\n  } catch(e) {\n  }\n  return await('hello world');\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n如果有多个await命令，可以统一放在try...catch结构中。\n\nasync function main() {\n  try {\n    const val1 = await firstStep();\n    const val2 = await secondStep(val1);\n    const val3 = await thirdStep(val1, val2);\n\n    console.log('Final: ', val3);\n  }\n  catch (err) {\n    console.error(err);\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n下面的例子使用try...catch结构，实现多次重复尝试。\n\nconst superagent = require('superagent');\nconst NUM_RETRIES = 3;\n\nasync function test() {\n  let i;\n  for (i = 0; i < NUM_RETRIES; ++i) {\n    try {\n      await superagent.get('http://google.com/this-throws-an-error');\n      break;\n    } catch(err) {}\n  }\n  console.log(i); // 3\n}\n\ntest();\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n上面代码中，如果await操作成功，就会使用break语句退出循环；如果失败，会被catch语句捕捉，然后进入下一轮循环。\n\n\n# 使用注意点\n\n第一点，前面已经说过，await命令后面的Promise对象，运行结果可能是rejected，所以最好把await命令放在try...catch代码块中。\n\nasync function myFunction() {\n  try {\n    await somethingThatReturnsAPromise();\n  } catch (err) {\n    console.log(err);\n  }\n}\n\n// 另一种写法\n\nasync function myFunction() {\n  await somethingThatReturnsAPromise()\n  .catch(function (err) {\n    console.log(err);\n  });\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n第二点，多个await命令后面的异步操作，如果不存在继发关系，最好让它们同时触发（并发）。\n\nlet foo = await getFoo();\nlet bar = await getBar();\n\n\n1\n2\n\n\n上面代码中，getFoo和getBar是两个独立的异步操作（即互不依赖），被写成继发关系。这样比较耗时，因为只有getFoo完成以后，才会执行getBar，完全可以让它们同时触发。\n\n// 写法一\nlet [foo, bar] = await Promise.all([getFoo(), getBar()]);\n\n// 写法二\nlet fooPromise = getFoo();\nlet barPromise = getBar();\nlet foo = await fooPromise;\nlet bar = await barPromise;\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n上面两种写法，getFoo和getBar都是同时触发，这样就会缩短程序的执行时间。\n\n第三点，await命令只能用在async函数之中，如果用在普通函数，就会报错。\n\nasync function dbFuc(db) {\n  let docs = [{}, {}, {}];\n\n  // 报错\n  docs.forEach(function (doc) {\n    await db.post(doc);\n  });\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n上面代码会报错，因为await用在普通函数之中了。但是，如果将forEach方法的参数改成async函数，也有问题。\n\nfunction dbFuc(db) { //这里不需要 async\n  let docs = [{}, {}, {}];\n\n  // 可能得到错误结果\n  docs.forEach(async function (doc) {\n    await db.post(doc);\n  });\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n上面代码可能不会正常工作，原因是这时三个db.post操作将是并发执行，也就是同时执行，而不是继发执行。正确的写法是采用for循环。\n\nasync function dbFuc(db) {\n  let docs = [{}, {}, {}];\n\n  for (let doc of docs) {\n    await db.post(doc);\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n如果确实希望多个请求并发执行，可以使用Promise.all方法。当三个请求都会resolved时，下面两种写法效果相同。\n\nasync function dbFuc(db) {\n  let docs = [{}, {}, {}];\n  let promises = docs.map((doc) => db.post(doc));\n\n  let results = await Promise.all(promises);\n  console.log(results);\n}\n\n// 或者使用下面的写法\n\nasync function dbFuc(db) {\n  let docs = [{}, {}, {}];\n  let promises = docs.map((doc) => db.post(doc));\n\n  let results = [];\n  for (let promise of promises) {\n    results.push(await promise);\n  }\n  console.log(results);\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n\n第四点，async 函数可以保留运行堆栈。\n\nconst a = () => {\n  b().then(() => c());\n};\n\n\n1\n2\n3\n\n\n上面代码中，函数a内部运行了一个异步任务b()。当b()运行的时候，函数a()不会中断，而是继续执行。等到b()运行结束，可能a()早就运行结束了，b()所在的上下文环境已经消失了。如果b()或c()报错，错误堆栈将不包括a()。\n\n现在将这个例子改成async函数。\n\nconst a = async () => {\n  await b();\n  c();\n};\n\n\n1\n2\n3\n4\n\n\n上面代码中，b()运行的时候，a()是暂停执行，上下文环境都保存着。一旦b()或c()报错，错误堆栈将包括a()。\n\n\n# async 函数的实现原理\n\nasync 函数的实现原理**，就是将 Generator 函数和自动执行器，包装在一个函数里**。\n\nasync function fn(args) {\n  // ...\n}\n\n// 等同于\n\nfunction fn(args) {\n  return spawn(function* () {\n    // ...\n  });\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n所有的async函数都可以写成上面的第二种形式，其中的spawn函数就是自动执行器。\n\n下面给出spawn函数的实现，基本就是前文自动执行器的翻版。\n\nfunction spawn(genF) {\n  return new Promise(function(resolve, reject) {\n    const gen = genF();\n    function step(nextF) {\n      let next;\n      try {\n        next = nextF();\n      } catch(e) {\n        return reject(e);\n      }\n      if(next.done) {\n        return resolve(next.value);\n      }\n      Promise.resolve(next.value).then(function(v) {\n        step(function() { return gen.next(v); });\n      }, function(e) {\n        step(function() { return gen.throw(e); });\n      });\n    }\n    step(function() { return gen.next(undefined); });\n  });\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n\n\n\n# 与其他异步处理方法的比较\n\n我们通过一个例子，来看 async 函数与 Promise、Generator 函数的比较。\n\n假定某个 DOM 元素上面，部署了一系列的动画，前一个动画结束，才能开始后一个。如果当中有一个动画出错，就不再往下执行，返回上一个成功执行的动画的返回值。\n\n首先是 Promise 的写法。\n\nfunction chainAnimationsPromise(elem, animations) {\n\n  // 变量ret用来保存上一个动画的返回值\n  let ret = null;\n\n  // 新建一个空的Promise\n  let p = Promise.resolve();\n\n  // 使用then方法，添加所有动画\n  for(let anim of animations) {\n    p = p.then(function(val) {\n      ret = val;\n      return anim(elem);\n    });\n  }\n\n  // 返回一个部署了错误捕捉机制的Promise\n  return p.catch(function(e) {\n    /* 忽略错误，继续执行 */\n  }).then(function() {\n    return ret;\n  });\n\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n\n\n虽然 Promise 的写法比回调函数的写法大大改进，但是一眼看上去，代码完全都是 Promise 的 API（then、catch等等），操作本身的语义反而不容易看出来。\n\n接着是 Generator 函数的写法。\n\nfunction chainAnimationsGenerator(elem, animations) {\n\n  return spawn(function*() {\n    let ret = null;\n    try {\n      for(let anim of animations) {\n        ret = yield anim(elem);\n      }\n    } catch(e) {\n      /* 忽略错误，继续执行 */\n    }\n    return ret;\n  });\n\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n上面代码使用 Generator 函数遍历了每个动画，语义比 Promise 写法更清晰，用户定义的操作全部都出现在spawn函数的内部。这个写法的问题在于，必须有一个任务运行器，自动执行 Generator 函数，上面代码的spawn函数就是自动执行器，它返回一个 Promise 对象，而且必须保证yield语句后面的表达式，必须返回一个 Promise。\n\n最后是 async 函数的写法。\n\nasync function chainAnimationsAsync(elem, animations) {\n  let ret = null;\n  try {\n    for(let anim of animations) {\n      ret = await anim(elem);\n    }\n  } catch(e) {\n    /* 忽略错误，继续执行 */\n  }\n  return ret;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n可以看到 Async 函数的实现最简洁，最符合语义，几乎没有语义不相关的代码。它将 Generator 写法中的自动执行器，改在语言层面提供，不暴露给用户，因此代码量最少。如果使用 Generator 写法，自动执行器需要用户自己提供。\n\n\n# 实例：按顺序完成异步操作\n\n实际开发中，经常遇到一组异步操作，需要按照顺序完成。比如，依次远程读取一组 URL，然后按照读取的顺序输出结果。\n\nPromise 的写法如下。\n\nfunction logInOrder(urls) {\n  // 远程读取所有URL\n  const textPromises = urls.map(url => {\n    return fetch(url).then(response => response.text());\n  });\n\n  // 按次序输出\n  textPromises.reduce((chain, textPromise) => {\n    return chain.then(() => textPromise)\n      .then(text => console.log(text));\n  }, Promise.resolve());\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n上面代码使用fetch方法，同时远程读取一组 URL。每个fetch操作都返回一个 Promise 对象，放入textPromises数组。然后，reduce方法依次处理每个 Promise 对象，然后使用then，将所有 Promise 对象连起来，因此就可以依次输出结果。\n\n这种写法不太直观，可读性比较差。下面是 async 函数实现。\n\nasync function logInOrder(urls) {\n  for (const url of urls) {\n    const response = await fetch(url);\n    console.log(await response.text());\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n\n\n上面代码确实大大简化，问题是所有远程操作都是继发。只有前一个 URL 返回结果，才会去读取下一个 URL，这样做效率很差，非常浪费时间。我们需要的是并发发出远程请求。\n\nasync function logInOrder(urls) {\n  // 并发读取远程URL\n  const textPromises = urls.map(async url => {\n    const response = await fetch(url);\n    return response.text();\n  });\n\n  // 按次序输出\n  for (const textPromise of textPromises) {\n    console.log(await textPromise);\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n上面代码中，虽然map方法的参数是async函数，但它是并发执行的，因为只有async函数内部是继发执行，外部不受影响。后面的for..of循环内部使用了await，因此实现了按顺序输出。\n\n\n# 顶层 await\n\n根据语法规格，await命令只能出现在 async 函数内部，否则都会报错。\n\n// 报错\nconst data = await fetch('https://api.example.com');\n\n\n1\n2\n\n\n上面代码中，await命令独立使用，没有放在 async 函数里面，就会报错。\n\n目前，有一个语法提案，允许在模块的顶层独立使用await命令。这个提案的目的，是借用await解决模块异步加载的问题。\n\n// awaiting.js\nlet output;\nasync function main() {\n  const dynamic = await import(someMission);\n  const data = await fetch(url);\n  output = someProcess(dynamic.default, data);\n}\nmain();\nexport { output };\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n上面代码中，模块awaiting.js的输出值output，取决于异步操作。我们把异步操作包装在一个 async 函数里面，然后调用这个函数，只有等里面的异步操作都执行，变量output才会有值，否则就返回undefined。\n\n上面的代码也可以写成立即执行函数的形式。\n\n// awaiting.js\nlet output;\n(async function main() {\n  const dynamic = await import(someMission);\n  const data = await fetch(url);\n  output = someProcess(dynamic.default, data);\n})();\nexport { output };\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n下面是加载这个模块的写法。\n\n// usage.js\nimport { output } from \"./awaiting.js\";\n\nfunction outputPlusValue(value) { return output + value }\n\nconsole.log(outputPlusValue(100));\nsetTimeout(() => console.log(outputPlusValue(100), 1000);\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n上面代码中，outputPlusValue()的执行结果，完全取决于执行的时间。如果awaiting.js里面的异步操作没执行完，加载进来的output的值就是undefined。\n\n目前的解决方法，就是让原始模块输出一个 Promise 对象，从这个 Promise 对象判断异步操作有没有结束。\n\n// awaiting.js\nlet output;\nexport default (async function main() {\n  const dynamic = await import(someMission);\n  const data = await fetch(url);\n  output = someProcess(dynamic.default, data);\n})();\nexport { output };\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n上面代码中，awaiting.js除了输出output，还默认输出一个 Promise 对象（async 函数立即执行后，返回一个 Promise 对象），从这个对象判断异步操作是否结束。\n\n下面是加载这个模块的新的写法。\n\n// usage.js\nimport promise, { output } from \"./awaiting.js\";\n\nfunction outputPlusValue(value) { return output + value }\n\npromise.then(() => {\n  console.log(outputPlusValue(100));\n  setTimeout(() => console.log(outputPlusValue(100), 1000);\n});\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n上面代码中，将awaiting.js对象的输出，放在promise.then()里面，这样就能保证异步操作完成以后，才去读取output。\n\n这种写法比较麻烦，等于要求模块的使用者遵守一个额外的使用协议，按照特殊的方法使用这个模块。一旦你忘了要用 Promise 加载，只使用正常的加载方法，依赖这个模块的代码就可能出错。而且，如果上面的usage.js又有对外的输出，等于这个依赖链的所有模块都要使用 Promise 加载。\n\n顶层的await命令，就是为了解决这个问题。它保证只有异步操作完成，模块才会输出值。\n\n// awaiting.js\nconst dynamic = import(someMission);\nconst data = fetch(url);\nexport const output = someProcess((await dynamic).default, await data);\n\n\n1\n2\n3\n4\n\n\n上面代码中，两个异步操作在输出的时候，都加上了await命令。只有等到异步操作完成，这个模块才会输出值。\n\n加载这个模块的写法如下。\n\n// usage.js\nimport { output } from \"./awaiting.js\";\nfunction outputPlusValue(value) { return output + value }\n\nconsole.log(outputPlusValue(100));\nsetTimeout(() => console.log(outputPlusValue(100), 1000);\n\n\n1\n2\n3\n4\n5\n6\n\n\n上面代码的写法，与普通的模块加载完全一样。也就是说，模块的使用者完全不用关心，依赖模块的内部有没有异步操作，正常加载即可。\n\n这时，模块的加载会等待依赖模块（上例是awaiting.js）的异步操作完成，才执行后面的代码，有点像暂停在那里。所以，它总是会得到正确的output，不会因为加载时机的不同，而得到不一样的值。\n\n下面是顶层await的一些使用场景。\n\n// import() 方法加载\nconst strings = await import(`/i18n/${navigator.language}`);\n\n// 数据库操作\nconst connection = await dbConnector();\n\n// 依赖回滚\nlet jQuery;\ntry {\n  jQuery = await import('https://cdn-a.com/jQuery');\n} catch {\n  jQuery = await import('https://cdn-b.com/jQuery');\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n注意，如果加载多个包含顶层await命令的模块，加载命令是同步执行的。\n\n// x.js\nconsole.log(\"X1\");\nawait new Promise(r => setTimeout(r, 1000));\nconsole.log(\"X2\");\n\n// y.js\nconsole.log(\"Y\");\n\n// z.js\nimport \"./x.js\";\nimport \"./y.js\";\nconsole.log(\"Z\");\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n上面代码有三个模块，最后的z.js加载x.js和y.js，打印结果是X1、Y、X2、Z。这说明，z.js并没有等待x.js加载完成，再去加载y.js。\n\n顶层的await命令有点像，交出代码的执行权给其他的模块加载，等异步操作完成后，再拿回执行权，继续向下执行。",normalizedContent:"# async 函数\n\n\n# 含义\n\nes2017 标准引入了 async 函数，使得异步操作变得更加方便。\n\nasync 函数是什么？一句话，它就是 generator 函数的语法糖。\n\n前文有一个 generator 函数，依次读取两个文件。\n\nconst fs = require('fs');\n\nconst readfile = function (filename) {\n  return new promise(function (resolve, reject) {\n    fs.readfile(filename, function(error, data) {\n      if (error) return reject(error);\n      resolve(data);\n    });\n  });\n};\n\nconst gen = function* () {\n  const f1 = yield readfile('/etc/fstab');\n  const f2 = yield readfile('/etc/shells');\n  console.log(f1.tostring());\n  console.log(f2.tostring());\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n上面代码的函数gen可以写成async函数，就是下面这样。\n\nconst asyncreadfile = async function () {\n  const f1 = await readfile('/etc/fstab');\n  const f2 = await readfile('/etc/shells');\n  console.log(f1.tostring());\n  console.log(f2.tostring());\n};\n\n\n1\n2\n3\n4\n5\n6\n\n\n一比较就会发现，async函数就是将 generator 函数的星号（*）替换成async，将yield替换成await，仅此而已。\n\nasync函数对 generator 函数的改进，体现在以下四点。\n\n（1）内置执行器。\n\ngenerator 函数的执行必须靠执行器，所以才有了co模块，而async函数自带执行器。也就是说，async函数的执行，与普通函数一模一样，只要一行。\n\nasyncreadfile();\n\n\n1\n\n\n上面的代码调用了asyncreadfile函数，然后它就会自动执行，输出最后结果。这完全不像 generator 函数，需要调用next方法，或者用co模块，才能真正执行，得到最后结果。\n\n（2）更好的语义。\n\nasync和await，比起星号和yield，语义更清楚了。async表示函数里有异步操作，await表示紧跟在后面的表达式需要等待结果。\n\n（3）更广的适用性。\n\nco模块约定，yield命令后面只能是 thunk 函数或 promise 对象，而async函数的await命令后面，可以是 promise 对象和原始类型的值（数值、字符串和布尔值，但这时会自动转成立即 resolved 的 promise 对象）。\n\n（4）返回值是 promise。\n\nasync函数的返回值是 promise 对象，这比 generator 函数的返回值是 iterator 对象方便多了。你可以用then方法指定下一步的操作。\n\n进一步说，async函数完全可以看作多个异步操作，包装成的一个 promise 对象，而await命令就是内部then命令的语法糖。\n\n\n# 基本用法\n\nasync函数返回一个 promise 对象，可以使用then方法添加回调函数。当函数执行的时候，一旦遇到await就会先返回，等到异步操作完成，再接着执行函数体内后面的语句。\n\n下面是一个例子。\n\nasync function getstockpricebyname(name) {\n  const symbol = await getstocksymbol(name);\n  const stockprice = await getstockprice(symbol);\n  return stockprice;\n}\n\ngetstockpricebyname('goog').then(function (result) {\n  console.log(result);\n});\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n上面代码是一个获取股票报价的函数，函数前面的async关键字，表明该函数内部有异步操作。调用该函数时，会立即返回一个promise对象。\n\n下面是另一个例子，指定多少毫秒后输出一个值。\n\nfunction timeout(ms) {\n  return new promise((resolve) => {\n    settimeout(resolve, ms);\n  });\n}\n\nasync function asyncprint(value, ms) {\n  await timeout(ms);\n  console.log(value);\n}\n\nasyncprint('hello world', 50);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n上面代码指定 50 毫秒以后，输出hello world。\n\n由于async函数返回的是 promise 对象，可以作为await命令的参数。所以，上面的例子也可以写成下面的形式。\n\nasync function timeout(ms) {\n  await new promise((resolve) => {\n    settimeout(resolve, ms);\n  });\n}\n\nasync function asyncprint(value, ms) {\n  await timeout(ms);\n  console.log(value);\n}\n\nasyncprint('hello world', 50);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\nasync 函数有多种使用形式。\n\n// 函数声明\nasync function foo() {}\n\n// 函数表达式\nconst foo = async function () {};\n\n// 对象的方法\nlet obj = { async foo() {} };\nobj.foo().then(...)\n\n// class 的方法\nclass storage {\n  constructor() {\n    this.cachepromise = caches.open('avatars');\n  }\n\n  async getavatar(name) {\n    const cache = await this.cachepromise;\n    return cache.match(`/avatars/${name}.jpg`);\n  }\n}\n\nconst storage = new storage();\nstorage.getavatar('jake').then(…);\n\n// 箭头函数\nconst foo = async () => {};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n\n\n\n# 语法\n\nasync函数的语法规则总体上比较简单，难点是错误处理机制。\n\n\n# 返回 promise 对象\n\nasync函数返回一个 promise 对象。\n\nasync函数内部return语句返回的值，会成为then方法回调函数的参数。\n\nasync function f() {\n  return 'hello world';\n}\n\nf().then(v => console.log(v))\n// \"hello world\"\n\n\n1\n2\n3\n4\n5\n6\n\n\n上面代码中，函数f内部return命令返回的值，会被then方法回调函数接收到。\n\nasync函数内部抛出错误，会导致返回的 promise 对象变为reject状态。抛出的错误对象会被catch方法回调函数接收到。\n\nasync function f() {\n  throw new error('出错了');\n}\n\nf().then(\n  v => console.log(v),\n  e => console.log(e)\n)\n// error: 出错了\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n\n# promise 对象的状态变化\n\nasync函数返回的 promise 对象，必须等到内部所有await命令后面的 promise 对象执行完，才会发生状态改变，除非遇到return语句或者抛出错误。也就是说，只有async函数内部的异步操作执行完，才会执行then方法指定的回调函数。\n\n下面是一个例子。\n\nasync function gettitle(url) {\n  let response = await fetch(url);\n  let html = await response.text();\n  return html.match(/<title>([\\s\\s]+)<\\/title>/i)[1];\n}\ngettitle('https://tc39.github.io/ecma262/').then(console.log)\n// \"ecmascript 2017 language specification\"\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n上面代码中，函数gettitle内部有三个操作：抓取网页、取出文本、匹配页面标题。只有这三个操作全部完成，才会执行then方法里面的console.log。\n\n\n# await 命令\n\n正常情况下，await命令后面是一个 promise 对象，返回该对象的结果。如果不是 promise 对象，就直接返回对应的值。\n\nasync function f() {\n  // 等同于\n  // return 123;\n  return await 123;\n}\n\nf().then(v => console.log(v))\n// 123\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n上面代码中，await命令的参数是数值123，这时等同于return 123。\n\n另一种情况是，await命令后面是一个thenable对象（即定义then方法的对象），那么await会将其等同于 promise 对象。\n\nclass sleep {\n  constructor(timeout) {\n    this.timeout = timeout;\n  }\n  then(resolve, reject) {\n    const starttime = date.now();\n    settimeout(\n      () => resolve(date.now() - starttime),\n      this.timeout\n    );\n  }\n}\n\n(async () => {\n  const sleeptime = await new sleep(1000);\n  console.log(sleeptime);\n})();\n// 1000\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\n上面代码中，await命令后面是一个sleep对象的实例。这个实例不是 promise 对象，但是因为定义了then方法，await会将其视为promise处理。\n\n这个例子还演示了如何实现休眠效果。javascript 一直没有休眠的语法，但是借助await命令就可以让程序停顿指定的时间。下面给出了一个简化的sleep实现。\n\nfunction sleep(interval) {\n  return new promise(resolve => {\n    settimeout(resolve, interval);\n  })\n}\n\n// 用法\nasync function one2fiveinasync() {\n  for(let i = 1; i <= 5; i++) {\n    console.log(i);\n    await sleep(1000);\n  }\n}\n\none2fiveinasync();\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\nawait命令后面的 promise 对象如果变为reject状态，则reject的参数会被catch方法的回调函数接收到。\n\nasync function f() {\n  await promise.reject('出错了');\n}\n\nf()\n.then(v => console.log(v))\n.catch(e => console.log(e))\n// 出错了\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n注意，上面代码中，await语句前面没有return，但是reject方法的参数依然传入了catch方法的回调函数。这里如果在await前面加上return，效果是一样的。\n\n任何一个await语句后面的 promise 对象变为reject状态，那么整个async函数都会中断执行。\n\nasync function f() {\n  await promise.reject('出错了');\n  await promise.resolve('hello world'); // 不会执行\n}\n\n\n1\n2\n3\n4\n\n\n上面代码中，第二个await语句是不会执行的，因为第一个await语句状态变成了reject。\n\n有时，我们希望即使前一个异步操作失败，也不要中断后面的异步操作。这时可以将第一个await放在try...catch结构里面，这样不管这个异步操作是否成功，第二个await都会执行。\n\nasync function f() {\n  try {\n    await promise.reject('出错了');\n  } catch(e) {\n  }\n  return await promise.resolve('hello world');\n}\n\nf()\n.then(v => console.log(v))\n// hello world\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n另一种方法是await后面的 promise 对象再跟一个catch方法，处理前面可能出现的错误。\n\nasync function f() {\n  await promise.reject('出错了')\n    .catch(e => console.log(e));\n  return await promise.resolve('hello world');\n}\n\nf()\n.then(v => console.log(v))\n// 出错了\n// hello world\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n\n# 错误处理\n\n如果await后面的异步操作出错，那么等同于async函数返回的 promise 对象被reject。\n\nasync function f() {\n  await new promise(function (resolve, reject) {\n    throw new error('出错了');\n  });\n}\n\nf()\n.then(v => console.log(v))\n.catch(e => console.log(e))\n// error：出错了\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n上面代码中，async函数f执行后，await后面的 promise 对象会抛出一个错误对象，导致catch方法的回调函数被调用，它的参数就是抛出的错误对象。具体的执行机制，可以参考后文的“async 函数的实现原理”。\n\n防止出错的方法，也是将其放在try...catch代码块之中。\n\nasync function f() {\n  try {\n    await new promise(function (resolve, reject) {\n      throw new error('出错了');\n    });\n  } catch(e) {\n  }\n  return await('hello world');\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n如果有多个await命令，可以统一放在try...catch结构中。\n\nasync function main() {\n  try {\n    const val1 = await firststep();\n    const val2 = await secondstep(val1);\n    const val3 = await thirdstep(val1, val2);\n\n    console.log('final: ', val3);\n  }\n  catch (err) {\n    console.error(err);\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n下面的例子使用try...catch结构，实现多次重复尝试。\n\nconst superagent = require('superagent');\nconst num_retries = 3;\n\nasync function test() {\n  let i;\n  for (i = 0; i < num_retries; ++i) {\n    try {\n      await superagent.get('http://google.com/this-throws-an-error');\n      break;\n    } catch(err) {}\n  }\n  console.log(i); // 3\n}\n\ntest();\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n上面代码中，如果await操作成功，就会使用break语句退出循环；如果失败，会被catch语句捕捉，然后进入下一轮循环。\n\n\n# 使用注意点\n\n第一点，前面已经说过，await命令后面的promise对象，运行结果可能是rejected，所以最好把await命令放在try...catch代码块中。\n\nasync function myfunction() {\n  try {\n    await somethingthatreturnsapromise();\n  } catch (err) {\n    console.log(err);\n  }\n}\n\n// 另一种写法\n\nasync function myfunction() {\n  await somethingthatreturnsapromise()\n  .catch(function (err) {\n    console.log(err);\n  });\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n第二点，多个await命令后面的异步操作，如果不存在继发关系，最好让它们同时触发（并发）。\n\nlet foo = await getfoo();\nlet bar = await getbar();\n\n\n1\n2\n\n\n上面代码中，getfoo和getbar是两个独立的异步操作（即互不依赖），被写成继发关系。这样比较耗时，因为只有getfoo完成以后，才会执行getbar，完全可以让它们同时触发。\n\n// 写法一\nlet [foo, bar] = await promise.all([getfoo(), getbar()]);\n\n// 写法二\nlet foopromise = getfoo();\nlet barpromise = getbar();\nlet foo = await foopromise;\nlet bar = await barpromise;\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n上面两种写法，getfoo和getbar都是同时触发，这样就会缩短程序的执行时间。\n\n第三点，await命令只能用在async函数之中，如果用在普通函数，就会报错。\n\nasync function dbfuc(db) {\n  let docs = [{}, {}, {}];\n\n  // 报错\n  docs.foreach(function (doc) {\n    await db.post(doc);\n  });\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n上面代码会报错，因为await用在普通函数之中了。但是，如果将foreach方法的参数改成async函数，也有问题。\n\nfunction dbfuc(db) { //这里不需要 async\n  let docs = [{}, {}, {}];\n\n  // 可能得到错误结果\n  docs.foreach(async function (doc) {\n    await db.post(doc);\n  });\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n上面代码可能不会正常工作，原因是这时三个db.post操作将是并发执行，也就是同时执行，而不是继发执行。正确的写法是采用for循环。\n\nasync function dbfuc(db) {\n  let docs = [{}, {}, {}];\n\n  for (let doc of docs) {\n    await db.post(doc);\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n如果确实希望多个请求并发执行，可以使用promise.all方法。当三个请求都会resolved时，下面两种写法效果相同。\n\nasync function dbfuc(db) {\n  let docs = [{}, {}, {}];\n  let promises = docs.map((doc) => db.post(doc));\n\n  let results = await promise.all(promises);\n  console.log(results);\n}\n\n// 或者使用下面的写法\n\nasync function dbfuc(db) {\n  let docs = [{}, {}, {}];\n  let promises = docs.map((doc) => db.post(doc));\n\n  let results = [];\n  for (let promise of promises) {\n    results.push(await promise);\n  }\n  console.log(results);\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n\n第四点，async 函数可以保留运行堆栈。\n\nconst a = () => {\n  b().then(() => c());\n};\n\n\n1\n2\n3\n\n\n上面代码中，函数a内部运行了一个异步任务b()。当b()运行的时候，函数a()不会中断，而是继续执行。等到b()运行结束，可能a()早就运行结束了，b()所在的上下文环境已经消失了。如果b()或c()报错，错误堆栈将不包括a()。\n\n现在将这个例子改成async函数。\n\nconst a = async () => {\n  await b();\n  c();\n};\n\n\n1\n2\n3\n4\n\n\n上面代码中，b()运行的时候，a()是暂停执行，上下文环境都保存着。一旦b()或c()报错，错误堆栈将包括a()。\n\n\n# async 函数的实现原理\n\nasync 函数的实现原理**，就是将 generator 函数和自动执行器，包装在一个函数里**。\n\nasync function fn(args) {\n  // ...\n}\n\n// 等同于\n\nfunction fn(args) {\n  return spawn(function* () {\n    // ...\n  });\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n所有的async函数都可以写成上面的第二种形式，其中的spawn函数就是自动执行器。\n\n下面给出spawn函数的实现，基本就是前文自动执行器的翻版。\n\nfunction spawn(genf) {\n  return new promise(function(resolve, reject) {\n    const gen = genf();\n    function step(nextf) {\n      let next;\n      try {\n        next = nextf();\n      } catch(e) {\n        return reject(e);\n      }\n      if(next.done) {\n        return resolve(next.value);\n      }\n      promise.resolve(next.value).then(function(v) {\n        step(function() { return gen.next(v); });\n      }, function(e) {\n        step(function() { return gen.throw(e); });\n      });\n    }\n    step(function() { return gen.next(undefined); });\n  });\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n\n\n\n# 与其他异步处理方法的比较\n\n我们通过一个例子，来看 async 函数与 promise、generator 函数的比较。\n\n假定某个 dom 元素上面，部署了一系列的动画，前一个动画结束，才能开始后一个。如果当中有一个动画出错，就不再往下执行，返回上一个成功执行的动画的返回值。\n\n首先是 promise 的写法。\n\nfunction chainanimationspromise(elem, animations) {\n\n  // 变量ret用来保存上一个动画的返回值\n  let ret = null;\n\n  // 新建一个空的promise\n  let p = promise.resolve();\n\n  // 使用then方法，添加所有动画\n  for(let anim of animations) {\n    p = p.then(function(val) {\n      ret = val;\n      return anim(elem);\n    });\n  }\n\n  // 返回一个部署了错误捕捉机制的promise\n  return p.catch(function(e) {\n    /* 忽略错误，继续执行 */\n  }).then(function() {\n    return ret;\n  });\n\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n\n\n虽然 promise 的写法比回调函数的写法大大改进，但是一眼看上去，代码完全都是 promise 的 api（then、catch等等），操作本身的语义反而不容易看出来。\n\n接着是 generator 函数的写法。\n\nfunction chainanimationsgenerator(elem, animations) {\n\n  return spawn(function*() {\n    let ret = null;\n    try {\n      for(let anim of animations) {\n        ret = yield anim(elem);\n      }\n    } catch(e) {\n      /* 忽略错误，继续执行 */\n    }\n    return ret;\n  });\n\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n上面代码使用 generator 函数遍历了每个动画，语义比 promise 写法更清晰，用户定义的操作全部都出现在spawn函数的内部。这个写法的问题在于，必须有一个任务运行器，自动执行 generator 函数，上面代码的spawn函数就是自动执行器，它返回一个 promise 对象，而且必须保证yield语句后面的表达式，必须返回一个 promise。\n\n最后是 async 函数的写法。\n\nasync function chainanimationsasync(elem, animations) {\n  let ret = null;\n  try {\n    for(let anim of animations) {\n      ret = await anim(elem);\n    }\n  } catch(e) {\n    /* 忽略错误，继续执行 */\n  }\n  return ret;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n可以看到 async 函数的实现最简洁，最符合语义，几乎没有语义不相关的代码。它将 generator 写法中的自动执行器，改在语言层面提供，不暴露给用户，因此代码量最少。如果使用 generator 写法，自动执行器需要用户自己提供。\n\n\n# 实例：按顺序完成异步操作\n\n实际开发中，经常遇到一组异步操作，需要按照顺序完成。比如，依次远程读取一组 url，然后按照读取的顺序输出结果。\n\npromise 的写法如下。\n\nfunction loginorder(urls) {\n  // 远程读取所有url\n  const textpromises = urls.map(url => {\n    return fetch(url).then(response => response.text());\n  });\n\n  // 按次序输出\n  textpromises.reduce((chain, textpromise) => {\n    return chain.then(() => textpromise)\n      .then(text => console.log(text));\n  }, promise.resolve());\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n上面代码使用fetch方法，同时远程读取一组 url。每个fetch操作都返回一个 promise 对象，放入textpromises数组。然后，reduce方法依次处理每个 promise 对象，然后使用then，将所有 promise 对象连起来，因此就可以依次输出结果。\n\n这种写法不太直观，可读性比较差。下面是 async 函数实现。\n\nasync function loginorder(urls) {\n  for (const url of urls) {\n    const response = await fetch(url);\n    console.log(await response.text());\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n\n\n上面代码确实大大简化，问题是所有远程操作都是继发。只有前一个 url 返回结果，才会去读取下一个 url，这样做效率很差，非常浪费时间。我们需要的是并发发出远程请求。\n\nasync function loginorder(urls) {\n  // 并发读取远程url\n  const textpromises = urls.map(async url => {\n    const response = await fetch(url);\n    return response.text();\n  });\n\n  // 按次序输出\n  for (const textpromise of textpromises) {\n    console.log(await textpromise);\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n上面代码中，虽然map方法的参数是async函数，但它是并发执行的，因为只有async函数内部是继发执行，外部不受影响。后面的for..of循环内部使用了await，因此实现了按顺序输出。\n\n\n# 顶层 await\n\n根据语法规格，await命令只能出现在 async 函数内部，否则都会报错。\n\n// 报错\nconst data = await fetch('https://api.example.com');\n\n\n1\n2\n\n\n上面代码中，await命令独立使用，没有放在 async 函数里面，就会报错。\n\n目前，有一个语法提案，允许在模块的顶层独立使用await命令。这个提案的目的，是借用await解决模块异步加载的问题。\n\n// awaiting.js\nlet output;\nasync function main() {\n  const dynamic = await import(somemission);\n  const data = await fetch(url);\n  output = someprocess(dynamic.default, data);\n}\nmain();\nexport { output };\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n上面代码中，模块awaiting.js的输出值output，取决于异步操作。我们把异步操作包装在一个 async 函数里面，然后调用这个函数，只有等里面的异步操作都执行，变量output才会有值，否则就返回undefined。\n\n上面的代码也可以写成立即执行函数的形式。\n\n// awaiting.js\nlet output;\n(async function main() {\n  const dynamic = await import(somemission);\n  const data = await fetch(url);\n  output = someprocess(dynamic.default, data);\n})();\nexport { output };\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n下面是加载这个模块的写法。\n\n// usage.js\nimport { output } from \"./awaiting.js\";\n\nfunction outputplusvalue(value) { return output + value }\n\nconsole.log(outputplusvalue(100));\nsettimeout(() => console.log(outputplusvalue(100), 1000);\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n上面代码中，outputplusvalue()的执行结果，完全取决于执行的时间。如果awaiting.js里面的异步操作没执行完，加载进来的output的值就是undefined。\n\n目前的解决方法，就是让原始模块输出一个 promise 对象，从这个 promise 对象判断异步操作有没有结束。\n\n// awaiting.js\nlet output;\nexport default (async function main() {\n  const dynamic = await import(somemission);\n  const data = await fetch(url);\n  output = someprocess(dynamic.default, data);\n})();\nexport { output };\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n上面代码中，awaiting.js除了输出output，还默认输出一个 promise 对象（async 函数立即执行后，返回一个 promise 对象），从这个对象判断异步操作是否结束。\n\n下面是加载这个模块的新的写法。\n\n// usage.js\nimport promise, { output } from \"./awaiting.js\";\n\nfunction outputplusvalue(value) { return output + value }\n\npromise.then(() => {\n  console.log(outputplusvalue(100));\n  settimeout(() => console.log(outputplusvalue(100), 1000);\n});\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n上面代码中，将awaiting.js对象的输出，放在promise.then()里面，这样就能保证异步操作完成以后，才去读取output。\n\n这种写法比较麻烦，等于要求模块的使用者遵守一个额外的使用协议，按照特殊的方法使用这个模块。一旦你忘了要用 promise 加载，只使用正常的加载方法，依赖这个模块的代码就可能出错。而且，如果上面的usage.js又有对外的输出，等于这个依赖链的所有模块都要使用 promise 加载。\n\n顶层的await命令，就是为了解决这个问题。它保证只有异步操作完成，模块才会输出值。\n\n// awaiting.js\nconst dynamic = import(somemission);\nconst data = fetch(url);\nexport const output = someprocess((await dynamic).default, await data);\n\n\n1\n2\n3\n4\n\n\n上面代码中，两个异步操作在输出的时候，都加上了await命令。只有等到异步操作完成，这个模块才会输出值。\n\n加载这个模块的写法如下。\n\n// usage.js\nimport { output } from \"./awaiting.js\";\nfunction outputplusvalue(value) { return output + value }\n\nconsole.log(outputplusvalue(100));\nsettimeout(() => console.log(outputplusvalue(100), 1000);\n\n\n1\n2\n3\n4\n5\n6\n\n\n上面代码的写法，与普通的模块加载完全一样。也就是说，模块的使用者完全不用关心，依赖模块的内部有没有异步操作，正常加载即可。\n\n这时，模块的加载会等待依赖模块（上例是awaiting.js）的异步操作完成，才执行后面的代码，有点像暂停在那里。所以，它总是会得到正确的output，不会因为加载时机的不同，而得到不一样的值。\n\n下面是顶层await的一些使用场景。\n\n// import() 方法加载\nconst strings = await import(`/i18n/${navigator.language}`);\n\n// 数据库操作\nconst connection = await dbconnector();\n\n// 依赖回滚\nlet jquery;\ntry {\n  jquery = await import('https://cdn-a.com/jquery');\n} catch {\n  jquery = await import('https://cdn-b.com/jquery');\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n注意，如果加载多个包含顶层await命令的模块，加载命令是同步执行的。\n\n// x.js\nconsole.log(\"x1\");\nawait new promise(r => settimeout(r, 1000));\nconsole.log(\"x2\");\n\n// y.js\nconsole.log(\"y\");\n\n// z.js\nimport \"./x.js\";\nimport \"./y.js\";\nconsole.log(\"z\");\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n上面代码有三个模块，最后的z.js加载x.js和y.js，打印结果是x1、y、x2、z。这说明，z.js并没有等待x.js加载完成，再去加载y.js。\n\n顶层的await命令有点像，交出代码的执行权给其他的模块加载，等异步操作完成后，再拿回执行权，继续向下执行。",charsets:{cjk:!0}},{title:"Class 的继承",frontmatter:{title:"Class 的继承",date:"2020-02-09T16:00:29.000Z",permalink:"/pages/83f8c3a0cd87dd83",author:"阮一峰",categories:["《ES6 教程》笔记"],tags:["ES6"],readingShow:"top"},regularPath:"/06.%E4%B9%A6%E7%B1%8D/05.%E3%80%8AES6%20%E6%95%99%E7%A8%8B%E3%80%8B%E7%AC%94%E8%AE%B0/22.Class%20%E7%9A%84%E7%BB%A7%E6%89%BF.html",relativePath:"06.书籍/05.《ES6 教程》笔记/22.Class 的继承.md",key:"v-6b073d56",path:"/pages/83f8c3a0cd87dd83/",headers:[{level:2,title:"简介",slug:"简介",normalizedTitle:"简介",charIndex:16},{level:2,title:"Object.getPrototypeOf()",slug:"object-getprototypeof",normalizedTitle:"object.getprototypeof()",charIndex:2131},{level:2,title:"super 关键字",slug:"super-关键字",normalizedTitle:"super 关键字",charIndex:2286},{level:2,title:"类的 prototype 属性和__proto__属性",slug:"类的-prototype-属性和-proto-属性",normalizedTitle:"类的 prototype 属性和__proto__属性",charIndex:6501},{level:3,title:"实例的 __proto__ 属性",slug:"实例的-proto-属性",normalizedTitle:"实例的 <strong>proto</strong> 属性",charIndex:null},{level:2,title:"原生构造函数的继承",slug:"原生构造函数的继承",normalizedTitle:"原生构造函数的继承",charIndex:8813},{level:2,title:"Mixin 模式的实现",slug:"mixin-模式的实现",normalizedTitle:"mixin 模式的实现",charIndex:12041}],excerpt:'<h1 id="class-的继承"><a class="header-anchor" href="#class-的继承">#</a> Class 的继承</h1>\n<h2 id="简介"><a class="header-anchor" href="#简介">#</a> 简介</h2>\n<p>Class 可以通过<code>extends</code>关键字实现继承，这比 ES5 的通过修改原型链实现继承，要清晰和方便很多。</p>\n\x3c!--beforebegin--\x3e<div class="language-javascript line-numbers-mode">\x3c!--afterbegin--\x3e<pre v-pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Point</span> <span class="token punctuation">{</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">class</span> <span class="token class-name">ColorPoint</span> <span class="token keyword">extends</span> <span class="token class-name">Point</span> <span class="token punctuation">{</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div>\x3c!--beforeend--\x3e</div>\x3c!--afterend--\x3e',lastUpdated:"2022/9/22 下午4:28:09",lastUpdatedTimestamp:1663835289e3,headersStr:"简介 Object.getPrototypeOf() super 关键字 类的 prototype 属性和__proto__属性 实例的 __proto__ 属性 原生构造函数的继承 Mixin 模式的实现",content:"# Class 的继承\n\n\n# 简介\n\nClass 可以通过extends关键字实现继承，这比 ES5 的通过修改原型链实现继承，要清晰和方便很多。\n\nclass Point {\n}\n\nclass ColorPoint extends Point {\n}\n\n\n1\n2\n3\n4\n5\n\n\n上面代码定义了一个ColorPoint类，该类通过extends关键字，继承了Point类的所有属性和方法。但是由于没有部署任何代码，所以这两个类完全一样，等于复制了一个Point类。下面，我们在ColorPoint内部加上代码。\n\nclass ColorPoint extends Point {\n  constructor(x, y, color) {\n    super(x, y); // 调用父类的constructor(x, y)\n    this.color = color;\n  }\n\n  toString() {\n    return this.color + ' ' + super.toString(); // 调用父类的toString()\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n上面代码中，constructor方法和toString方法之中，都出现了super关键字，它在这里表示父类的构造函数，用来新建父类的this对象。\n\n**子类必须在constructor方法中调用super方法，否则新建实例时会报错。**这是因为子类自己的this对象，必须先通过父类的构造函数完成塑造，得到与父类同样的实例属性和方法，然后再对其进行加工，加上子类自己的实例属性和方法。如果不调用super方法，子类就得不到this对象。\n\nclass Point { /* ... */ }\n\nclass ColorPoint extends Point {\n  constructor() {\n  }\n}\n\nlet cp = new ColorPoint(); // ReferenceError\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n上面代码中，ColorPoint继承了父类Point，但是它的构造函数没有调用super方法，导致新建实例时报错。\n\nES5 的继承，实质是先创造子类的实例对象this，然后再将父类的方法添加到this上面（Parent.apply(this)）。ES6 的继承机制完全不同，实质是先将父类实例对象的属性和方法，加到this上面（所以必须先调用super方法），然后再用子类的构造函数修改this。\n\n如果子类没有定义constructor方法，这个方法会被默认添加，代码如下。也就是说，不管有没有显式定义，任何一个子类都有constructor方法。\n\nclass ColorPoint extends Point {\n}\n\n// 等同于\nclass ColorPoint extends Point {\n  constructor(...args) {\n    super(...args);\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n另一个需要注意的地方是，**在子类的构造函数中，只有调用super之后，才可以使用this关键字，否则会报错。**这是因为子类实例的构建，基于父类实例，只有super方法才能调用父类实例。\n\nclass Point {\n  constructor(x, y) {\n    this.x = x;\n    this.y = y;\n  }\n}\n\nclass ColorPoint extends Point {\n  constructor(x, y, color) {\n    this.color = color; // ReferenceError\n    super(x, y);\n    this.color = color; // 正确\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n上面代码中，子类的constructor方法没有调用super之前，就使用this关键字，结果报错，而放在super方法之后就是正确的。\n\n下面是生成子类实例的代码。\n\nlet cp = new ColorPoint(25, 8, 'green');\n\ncp instanceof ColorPoint // true\ncp instanceof Point // true\n\n\n1\n2\n3\n4\n\n\n上面代码中，实例对象cp同时是ColorPoint和Point两个类的实例，这与 ES5 的行为完全一致。\n\n最后，父类的静态方法，也会被子类继承。\n\nclass A {\n  static hello() {\n    console.log('hello world');\n  }\n}\n\nclass B extends A {\n}\n\nB.hello()  // hello world\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n上面代码中，hello()是A类的静态方法，B继承A，也继承了A的静态方法。\n\n\n# Object.getPrototypeOf()\n\nObject.getPrototypeOf方法可以用来从子类上获取父类。\n\nObject.getPrototypeOf(ColorPoint) === Point\n// true\n\n\n1\n2\n\n\n因此，可以使用这个方法判断，一个类是否继承了另一个类。\n\n\n# super 关键字\n\nsuper这个关键字，既可以当作函数使用，也可以当作对象使用。在这两种情况下，它的用法完全不同。\n\n第一种情况，super作为函数调用时，代表父类的构造函数。ES6 要求，子类的构造函数必须执行一次super函数。\n\nclass A {}\n\nclass B extends A {\n  constructor() {\n    super();\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n上面代码中，子类B的构造函数之中的super()，代表调用父类的构造函数。这是必须的，否则 JavaScript 引擎会报错。\n\n注意，super虽然代表了父类A的构造函数，但是返回的是子类B的实例，即super内部的this指的是B的实例，因此super()在这里相当于A.prototype.constructor.call(this)。\n\nclass A {\n  constructor() {\n    console.log(new.target.name);\n  }\n}\nclass B extends A {\n  constructor() {\n    super();\n  }\n}\nnew A() // A\nnew B() // B\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n上面代码中，new.target指向当前正在执行的函数。可以看到，在super()执行时，它指向的是子类B的构造函数，而不是父类A的构造函数。也就是说，super()内部的this指向的是B。\n\n作为函数时，super()只能用在子类的构造函数之中，用在其他地方就会报错。\n\nclass A {}\n\nclass B extends A {\n  m() {\n    super(); // 报错\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n上面代码中，super()用在B类的m方法之中，就会造成语法错误。\n\n第二种情况，super作为对象时，在普通方法中，指向父类的原型对象；在静态方法中，指向父类。\n\nclass A {\n  p() {\n    return 2;\n  }\n}\n\nclass B extends A {\n  constructor() {\n    super();\n    console.log(super.p()); // 2\n  }\n}\n\nlet b = new B();\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n上面代码中，子类B当中的super.p()，就是将super当作一个对象使用。这时，super在普通方法之中，指向A.prototype，所以super.p()就相当于A.prototype.p()。\n\n这里需要注意，由于super指向父类的原型对象，所以定义在父类实例上的方法或属性，是无法通过super调用的。\n\nclass A {\n  constructor() {\n    this.p = 2; // 这是定于在实例上的属性\n  }\n}\n\nclass B extends A {\n  get m() {\n    return super.p;\n  }\n}\n\nlet b = new B();\nb.m // undefined\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n上面代码中，p是父类A实例的属性，super.p就引用不到它。\n\n如果属性定义在父类的原型对象上，super就可以取到。\n\nclass A {}\nA.prototype.x = 2;\n\nclass B extends A {\n  constructor() {\n    super();\n    console.log(super.x) // 2\n  }\n}\n\nlet b = new B();\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n上面代码中，属性x是定义在A.prototype上面的，所以super.x可以取到它的值。\n\nES6 规定，在子类普通方法中通过super调用父类的方法时，方法内部的this指向当前的子类实例。\n\nclass A {\n  constructor() {\n    this.x = 1;\n  }\n  print() {\n    console.log(this.x);\n  }\n}\n\nclass B extends A {\n  constructor() {\n    super();\n    this.x = 2;\n  }\n  m() {\n    super.print();\n  }\n}\n\nlet b = new B();\nb.m() // 2\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n\n\n上面代码中，super.print()虽然调用的是A.prototype.print()，但是A.prototype.print()内部的this指向子类B的实例，导致输出的是2，而不是1。也就是说，实际上执行的是super.print.call(this)。\n\n由于this指向子类实例，所以如果通过super对某个属性赋值，这时super就是this，赋值的属性会变成子类实例的属性。\n\nclass A {\n  constructor() {\n    this.x = 1;\n  }\n}\n\nclass B extends A {\n  constructor() {\n    super();\n    this.x = 2;\n    super.x = 3;\n    console.log(super.x); // undefined\n    console.log(this.x); // 3\n  }\n}\n\nlet b = new B();\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n上面代码中，super.x赋值为3，这时等同于对this.x赋值为3。而当读取super.x的时候，读的是A.prototype.x，所以返回undefined。\n\n如果super作为对象，用在静态方法之中，这时super将指向父类，而不是父类的原型对象。\n\nclass Parent {\n  static myMethod(msg) {\n    console.log('static', msg);\n  }\n\n  myMethod(msg) {\n    console.log('instance', msg);\n  }\n}\n\nclass Child extends Parent {\n  static myMethod(msg) {\n    super.myMethod(msg);\n  }\n\n  myMethod(msg) {\n    super.myMethod(msg);\n  }\n}\n\nChild.myMethod(1); // static 1\n\nvar child = new Child();\nchild.myMethod(2); // instance 2\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n\n\n上面代码中，super在静态方法之中指向父类，在普通方法之中指向父类的原型对象。\n\n另外，在子类的静态方法中通过super调用父类的方法时，方法内部的this指向当前的子类，而不是子类的实例。\n\nclass A {\n  constructor() {\n    this.x = 1;\n  }\n  static print() {\n    console.log(this.x);\n  }\n}\n\nclass B extends A {\n  constructor() {\n    super();\n    this.x = 2;\n  }\n  static m() {\n    super.print();\n  }\n}\n\nB.x = 3;\nB.m() // 3\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n\n\n上面代码中，静态方法B.m里面，super.print指向父类的静态方法。这个方法里面的this指向的是B，而不是B的实例。\n\n注意，使用super的时候，必须显式指定是作为函数、还是作为对象使用，否则会报错。\n\nclass A {}\n\nclass B extends A {\n  constructor() {\n    super();\n    console.log(super); // 报错\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n上面代码中，console.log(super)当中的super，无法看出是作为函数使用，还是作为对象使用，所以 JavaScript 引擎解析代码的时候就会报错。这时，如果能清晰地表明super的数据类型，就不会报错。\n\nclass A {}\n\nclass B extends A {\n  constructor() {\n    super();\n    console.log(super.valueOf() instanceof B); // true\n  }\n}\n\nlet b = new B();\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n上面代码中，super.valueOf()表明super是一个对象，因此就不会报错。同时，由于super使得this指向B的实例，所以super.valueOf()返回的是一个B的实例。\n\n最后，由于对象总是继承其他对象的，所以可以在任意一个对象中，使用super关键字。\n\nvar obj = {\n  toString() {\n    return \"MyObject: \" + super.toString();\n  }\n};\n\nobj.toString(); // MyObject: [object Object]\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# 类的 prototype 属性和__proto__属性\n\n大多数浏览器的 ES5 实现之中，每一个对象都有__proto__属性，指向对应的构造函数的prototype属性。Class 作为构造函数的语法糖，同时有prototype属性和__proto__属性，因此同时存在两条继承链。\n\n（1）子类的__proto__属性，表示构造函数的继承，总是指向父类。\n\n（2）子类prototype属性的__proto__属性，表示方法的继承，总是指向父类的prototype属性。\n\nclass A {\n}\n\nclass B extends A {\n}\n\nB.__proto__ === A // true\nB.prototype.__proto__ === A.prototype // true\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n上面代码中，子类B的__proto__属性指向父类A，子类B的prototype属性的__proto__属性指向父类A的prototype属性。\n\n这样的结果是因为，类的继承是按照下面的模式实现的。\n\nclass A {\n}\n\nclass B {\n}\n\n// B 的实例继承 A 的实例\nObject.setPrototypeOf(B.prototype, A.prototype);\n\n// B 继承 A 的静态属性\nObject.setPrototypeOf(B, A);\n\nconst b = new B();\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n《对象的扩展》一章给出过Object.setPrototypeOf方法的实现。\n\nObject.setPrototypeOf = function (obj, proto) {\n  obj.__proto__ = proto;\n  return obj;\n}\n\n\n1\n2\n3\n4\n\n\n因此，就得到了上面的结果。\n\nObject.setPrototypeOf(B.prototype, A.prototype);\n// 等同于\nB.prototype.__proto__ = A.prototype;\n\nObject.setPrototypeOf(B, A);\n// 等同于\nB.__proto__ = A;\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n这两条继承链，可以这样理解：作为一个对象，子类（B）的原型（__proto__属性）是父类（A）；作为一个构造函数，子类（B）的原型对象（prototype属性）是父类的原型对象（prototype属性）的实例。\n\nB.prototype = Object.create(A.prototype);\n// 等同于\nB.prototype.__proto__ = A.prototype;\n\n\n1\n2\n3\n\n\nextends关键字后面可以跟多种类型的值。\n\nclass B extends A {\n}\n\n\n1\n2\n\n\n上面代码的A，只要是一个有prototype属性的函数，就能被B继承。由于函数都有prototype属性（除了Function.prototype函数），因此A可以是任意函数。\n\n下面，讨论两种情况。第一种，子类继承Object类。\n\nclass A extends Object {\n}\n\nA.__proto__ === Object // true\nA.prototype.__proto__ === Object.prototype // true\n\n\n1\n2\n3\n4\n5\n\n\n这种情况下，A其实就是构造函数Object的复制，A的实例就是Object的实例。\n\n第二种情况，不存在任何继承。\n\nclass A {\n}\n\nA.__proto__ === Function.prototype // true\nA.prototype.__proto__ === Object.prototype // true\n\n\n1\n2\n3\n4\n5\n\n\n这种情况下，A作为一个基类（即不存在任何继承），就是一个普通函数，所以直接继承Function.prototype。但是，A调用后返回一个空对象（即Object实例），所以A.prototype.__proto__指向构造函数（Object）的prototype属性。\n\n\n# 实例的 __proto__ 属性\n\n子类实例的__proto__属性的__proto__属性，指向父类实例的__proto__属性。也就是说，子类的原型的原型，是父类的原型。\n\nvar p1 = new Point(2, 3);\nvar p2 = new ColorPoint(2, 3, 'red');\n\np2.__proto__ === p1.__proto__ // false\np2.__proto__.__proto__ === p1.__proto__ // true\n\n\n1\n2\n3\n4\n5\n\n\n上面代码中，ColorPoint继承了Point，导致前者原型的原型是后者的原型。\n\n因此，通过子类实例的__proto__.__proto__属性，可以修改父类实例的行为。\n\np2.__proto__.__proto__.printName = function () {\n  console.log('Ha');\n};\n\np1.printName() // \"Ha\"\n\n\n1\n2\n3\n4\n5\n\n\n上面代码在ColorPoint的实例p2上向Point类添加方法，结果影响到了Point的实例p1。\n\n\n# 原生构造函数的继承\n\n原生构造函数是指语言内置的构造函数，通常用来生成数据结构。ECMAScript 的原生构造函数大致有下面这些。\n\n * Boolean()\n * Number()\n * String()\n * Array()\n * Date()\n * Function()\n * RegExp()\n * Error()\n * Object()\n\n以前，这些原生构造函数是无法继承的，比如，不能自己定义一个Array的子类。\n\nfunction MyArray() {\n  Array.apply(this, arguments);\n}\n\nMyArray.prototype = Object.create(Array.prototype, {\n  constructor: {\n    value: MyArray,\n    writable: true,\n    configurable: true,\n    enumerable: true\n  }\n});\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n上面代码定义了一个继承 Array 的MyArray类。但是，这个类的行为与Array完全不一致。\n\nvar colors = new MyArray();\ncolors[0] = \"red\";\ncolors.length  // 0\n\ncolors.length = 0;\ncolors[0]  // \"red\"\n\n\n1\n2\n3\n4\n5\n6\n\n\n之所以会发生这种情况，是因为子类无法获得原生构造函数的内部属性，通过Array.apply()或者分配给原型对象都不行。原生构造函数会忽略apply方法传入的this，也就是说，原生构造函数的this无法绑定，导致拿不到内部属性。\n\nES5 是先新建子类的实例对象this，再将父类的属性添加到子类上，由于父类的内部属性无法获取，导致无法继承原生的构造函数。比如，Array构造函数有一个内部属性[[DefineOwnProperty]]，用来定义新属性时，更新length属性，这个内部属性无法在子类获取，导致子类的length属性行为不正常。\n\n下面的例子中，我们想让一个普通对象继承Error对象。\n\nvar e = {};\n\nObject.getOwnPropertyNames(Error.call(e))\n// [ 'stack' ]\n\nObject.getOwnPropertyNames(e)\n// []\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n上面代码中，我们想通过Error.call(e)这种写法，让普通对象e具有Error对象的实例属性。但是，Error.call()完全忽略传入的第一个参数，而是返回一个新对象，e本身没有任何变化。这证明了Error.call(e)这种写法，无法继承原生构造函数。\n\nES6 允许继承原生构造函数定义子类，因为 ES6 是先新建父类的实例对象this，然后再用子类的构造函数修饰this，使得父类的所有行为都可以继承。下面是一个继承Array的例子。\n\nclass MyArray extends Array {\n  constructor(...args) {\n    super(...args);\n  }\n}\n\nvar arr = new MyArray();\narr[0] = 12;\narr.length // 1\n\narr.length = 0;\narr[0] // undefined\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n上面代码定义了一个MyArray类，继承了Array构造函数，因此就可以从MyArray生成数组的实例。这意味着，ES6 可以自定义原生数据结构（比如Array、String等）的子类，这是 ES5 无法做到的。\n\n上面这个例子也说明，extends关键字不仅可以用来继承类，还可以用来继承原生的构造函数。因此可以在原生数据结构的基础上，定义自己的数据结构。下面就是定义了一个带版本功能的数组。\n\nclass VersionedArray extends Array {\n  constructor() {\n    super();\n    this.history = [[]];\n  }\n  commit() {\n    this.history.push(this.slice());\n  }\n  revert() {\n    this.splice(0, this.length, ...this.history[this.history.length - 1]);\n  }\n}\n\nvar x = new VersionedArray();\n\nx.push(1);\nx.push(2);\nx // [1, 2]\nx.history // [[]]\n\nx.commit();\nx.history // [[], [1, 2]]\n\nx.push(3);\nx // [1, 2, 3]\nx.history // [[], [1, 2]]\n\nx.revert();\nx // [1, 2]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n\n\n上面代码中，VersionedArray会通过commit方法，将自己的当前状态生成一个版本快照，存入history属性。revert方法用来将数组重置为最新一次保存的版本。除此之外，VersionedArray依然是一个普通数组，所有原生的数组方法都可以在它上面调用。\n\n下面是一个自定义Error子类的例子，可以用来定制报错时的行为。\n\nclass ExtendableError extends Error {\n  constructor(message) {\n    super();\n    this.message = message;\n    this.stack = (new Error()).stack;\n    this.name = this.constructor.name;\n  }\n}\n\nclass MyError extends ExtendableError {\n  constructor(m) {\n    super(m);\n  }\n}\n\nvar myerror = new MyError('ll');\nmyerror.message // \"ll\"\nmyerror instanceof Error // true\nmyerror.name // \"MyError\"\nmyerror.stack\n// Error\n//     at MyError.ExtendableError\n//     ...\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n\n\n注意，继承Object的子类，有一个行为差异。\n\nclass NewObj extends Object{\n  constructor(){\n    super(...arguments);\n  }\n}\nvar o = new NewObj({attr: true});\no.attr === true  // false\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n上面代码中，NewObj继承了Object，但是无法通过super方法向父类Object传参。这是因为 ES6 改变了Object构造函数的行为，一旦发现Object方法不是通过new Object()这种形式调用，ES6 规定Object构造函数会忽略参数。\n\n\n# Mixin 模式的实现\n\nMixin 指的是多个对象合成一个新的对象，新对象具有各个组成成员的接口。它的最简单实现如下。\n\nconst a = {\n  a: 'a'\n};\nconst b = {\n  b: 'b'\n};\nconst c = {...a, ...b}; // {a: 'a', b: 'b'}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n上面代码中，c对象是a对象和b对象的合成，具有两者的接口。\n\n下面是一个更完备的实现，将多个类的接口“混入”（mix in）另一个类。\n\nfunction mix(...mixins) {\n  class Mix {\n    constructor() {\n      for (let mixin of mixins) {\n        copyProperties(this, new mixin()); // 拷贝实例属性\n      }\n    }\n  }\n\n  for (let mixin of mixins) {\n    copyProperties(Mix, mixin); // 拷贝静态属性\n    copyProperties(Mix.prototype, mixin.prototype); // 拷贝原型属性\n  }\n\n  return Mix;\n}\n\nfunction copyProperties(target, source) {\n  for (let key of Reflect.ownKeys(source)) {\n    if ( key !== 'constructor'\n      && key !== 'prototype'\n      && key !== 'name'\n    ) {\n      let desc = Object.getOwnPropertyDescriptor(source, key);\n      Object.defineProperty(target, key, desc);\n    }\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n\n\n上面代码的mix函数，可以将多个对象合成为一个类。使用的时候，只要继承这个类即可。\n\nclass DistributedEdit extends mix(Loggable, Serializable) {\n  // ...\n}\n\n\n1\n2\n3\n",normalizedContent:"# class 的继承\n\n\n# 简介\n\nclass 可以通过extends关键字实现继承，这比 es5 的通过修改原型链实现继承，要清晰和方便很多。\n\nclass point {\n}\n\nclass colorpoint extends point {\n}\n\n\n1\n2\n3\n4\n5\n\n\n上面代码定义了一个colorpoint类，该类通过extends关键字，继承了point类的所有属性和方法。但是由于没有部署任何代码，所以这两个类完全一样，等于复制了一个point类。下面，我们在colorpoint内部加上代码。\n\nclass colorpoint extends point {\n  constructor(x, y, color) {\n    super(x, y); // 调用父类的constructor(x, y)\n    this.color = color;\n  }\n\n  tostring() {\n    return this.color + ' ' + super.tostring(); // 调用父类的tostring()\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n上面代码中，constructor方法和tostring方法之中，都出现了super关键字，它在这里表示父类的构造函数，用来新建父类的this对象。\n\n**子类必须在constructor方法中调用super方法，否则新建实例时会报错。**这是因为子类自己的this对象，必须先通过父类的构造函数完成塑造，得到与父类同样的实例属性和方法，然后再对其进行加工，加上子类自己的实例属性和方法。如果不调用super方法，子类就得不到this对象。\n\nclass point { /* ... */ }\n\nclass colorpoint extends point {\n  constructor() {\n  }\n}\n\nlet cp = new colorpoint(); // referenceerror\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n上面代码中，colorpoint继承了父类point，但是它的构造函数没有调用super方法，导致新建实例时报错。\n\nes5 的继承，实质是先创造子类的实例对象this，然后再将父类的方法添加到this上面（parent.apply(this)）。es6 的继承机制完全不同，实质是先将父类实例对象的属性和方法，加到this上面（所以必须先调用super方法），然后再用子类的构造函数修改this。\n\n如果子类没有定义constructor方法，这个方法会被默认添加，代码如下。也就是说，不管有没有显式定义，任何一个子类都有constructor方法。\n\nclass colorpoint extends point {\n}\n\n// 等同于\nclass colorpoint extends point {\n  constructor(...args) {\n    super(...args);\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n另一个需要注意的地方是，**在子类的构造函数中，只有调用super之后，才可以使用this关键字，否则会报错。**这是因为子类实例的构建，基于父类实例，只有super方法才能调用父类实例。\n\nclass point {\n  constructor(x, y) {\n    this.x = x;\n    this.y = y;\n  }\n}\n\nclass colorpoint extends point {\n  constructor(x, y, color) {\n    this.color = color; // referenceerror\n    super(x, y);\n    this.color = color; // 正确\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n上面代码中，子类的constructor方法没有调用super之前，就使用this关键字，结果报错，而放在super方法之后就是正确的。\n\n下面是生成子类实例的代码。\n\nlet cp = new colorpoint(25, 8, 'green');\n\ncp instanceof colorpoint // true\ncp instanceof point // true\n\n\n1\n2\n3\n4\n\n\n上面代码中，实例对象cp同时是colorpoint和point两个类的实例，这与 es5 的行为完全一致。\n\n最后，父类的静态方法，也会被子类继承。\n\nclass a {\n  static hello() {\n    console.log('hello world');\n  }\n}\n\nclass b extends a {\n}\n\nb.hello()  // hello world\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n上面代码中，hello()是a类的静态方法，b继承a，也继承了a的静态方法。\n\n\n# object.getprototypeof()\n\nobject.getprototypeof方法可以用来从子类上获取父类。\n\nobject.getprototypeof(colorpoint) === point\n// true\n\n\n1\n2\n\n\n因此，可以使用这个方法判断，一个类是否继承了另一个类。\n\n\n# super 关键字\n\nsuper这个关键字，既可以当作函数使用，也可以当作对象使用。在这两种情况下，它的用法完全不同。\n\n第一种情况，super作为函数调用时，代表父类的构造函数。es6 要求，子类的构造函数必须执行一次super函数。\n\nclass a {}\n\nclass b extends a {\n  constructor() {\n    super();\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n上面代码中，子类b的构造函数之中的super()，代表调用父类的构造函数。这是必须的，否则 javascript 引擎会报错。\n\n注意，super虽然代表了父类a的构造函数，但是返回的是子类b的实例，即super内部的this指的是b的实例，因此super()在这里相当于a.prototype.constructor.call(this)。\n\nclass a {\n  constructor() {\n    console.log(new.target.name);\n  }\n}\nclass b extends a {\n  constructor() {\n    super();\n  }\n}\nnew a() // a\nnew b() // b\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n上面代码中，new.target指向当前正在执行的函数。可以看到，在super()执行时，它指向的是子类b的构造函数，而不是父类a的构造函数。也就是说，super()内部的this指向的是b。\n\n作为函数时，super()只能用在子类的构造函数之中，用在其他地方就会报错。\n\nclass a {}\n\nclass b extends a {\n  m() {\n    super(); // 报错\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n上面代码中，super()用在b类的m方法之中，就会造成语法错误。\n\n第二种情况，super作为对象时，在普通方法中，指向父类的原型对象；在静态方法中，指向父类。\n\nclass a {\n  p() {\n    return 2;\n  }\n}\n\nclass b extends a {\n  constructor() {\n    super();\n    console.log(super.p()); // 2\n  }\n}\n\nlet b = new b();\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n上面代码中，子类b当中的super.p()，就是将super当作一个对象使用。这时，super在普通方法之中，指向a.prototype，所以super.p()就相当于a.prototype.p()。\n\n这里需要注意，由于super指向父类的原型对象，所以定义在父类实例上的方法或属性，是无法通过super调用的。\n\nclass a {\n  constructor() {\n    this.p = 2; // 这是定于在实例上的属性\n  }\n}\n\nclass b extends a {\n  get m() {\n    return super.p;\n  }\n}\n\nlet b = new b();\nb.m // undefined\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n上面代码中，p是父类a实例的属性，super.p就引用不到它。\n\n如果属性定义在父类的原型对象上，super就可以取到。\n\nclass a {}\na.prototype.x = 2;\n\nclass b extends a {\n  constructor() {\n    super();\n    console.log(super.x) // 2\n  }\n}\n\nlet b = new b();\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n上面代码中，属性x是定义在a.prototype上面的，所以super.x可以取到它的值。\n\nes6 规定，在子类普通方法中通过super调用父类的方法时，方法内部的this指向当前的子类实例。\n\nclass a {\n  constructor() {\n    this.x = 1;\n  }\n  print() {\n    console.log(this.x);\n  }\n}\n\nclass b extends a {\n  constructor() {\n    super();\n    this.x = 2;\n  }\n  m() {\n    super.print();\n  }\n}\n\nlet b = new b();\nb.m() // 2\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n\n\n上面代码中，super.print()虽然调用的是a.prototype.print()，但是a.prototype.print()内部的this指向子类b的实例，导致输出的是2，而不是1。也就是说，实际上执行的是super.print.call(this)。\n\n由于this指向子类实例，所以如果通过super对某个属性赋值，这时super就是this，赋值的属性会变成子类实例的属性。\n\nclass a {\n  constructor() {\n    this.x = 1;\n  }\n}\n\nclass b extends a {\n  constructor() {\n    super();\n    this.x = 2;\n    super.x = 3;\n    console.log(super.x); // undefined\n    console.log(this.x); // 3\n  }\n}\n\nlet b = new b();\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n上面代码中，super.x赋值为3，这时等同于对this.x赋值为3。而当读取super.x的时候，读的是a.prototype.x，所以返回undefined。\n\n如果super作为对象，用在静态方法之中，这时super将指向父类，而不是父类的原型对象。\n\nclass parent {\n  static mymethod(msg) {\n    console.log('static', msg);\n  }\n\n  mymethod(msg) {\n    console.log('instance', msg);\n  }\n}\n\nclass child extends parent {\n  static mymethod(msg) {\n    super.mymethod(msg);\n  }\n\n  mymethod(msg) {\n    super.mymethod(msg);\n  }\n}\n\nchild.mymethod(1); // static 1\n\nvar child = new child();\nchild.mymethod(2); // instance 2\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n\n\n上面代码中，super在静态方法之中指向父类，在普通方法之中指向父类的原型对象。\n\n另外，在子类的静态方法中通过super调用父类的方法时，方法内部的this指向当前的子类，而不是子类的实例。\n\nclass a {\n  constructor() {\n    this.x = 1;\n  }\n  static print() {\n    console.log(this.x);\n  }\n}\n\nclass b extends a {\n  constructor() {\n    super();\n    this.x = 2;\n  }\n  static m() {\n    super.print();\n  }\n}\n\nb.x = 3;\nb.m() // 3\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n\n\n上面代码中，静态方法b.m里面，super.print指向父类的静态方法。这个方法里面的this指向的是b，而不是b的实例。\n\n注意，使用super的时候，必须显式指定是作为函数、还是作为对象使用，否则会报错。\n\nclass a {}\n\nclass b extends a {\n  constructor() {\n    super();\n    console.log(super); // 报错\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n上面代码中，console.log(super)当中的super，无法看出是作为函数使用，还是作为对象使用，所以 javascript 引擎解析代码的时候就会报错。这时，如果能清晰地表明super的数据类型，就不会报错。\n\nclass a {}\n\nclass b extends a {\n  constructor() {\n    super();\n    console.log(super.valueof() instanceof b); // true\n  }\n}\n\nlet b = new b();\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n上面代码中，super.valueof()表明super是一个对象，因此就不会报错。同时，由于super使得this指向b的实例，所以super.valueof()返回的是一个b的实例。\n\n最后，由于对象总是继承其他对象的，所以可以在任意一个对象中，使用super关键字。\n\nvar obj = {\n  tostring() {\n    return \"myobject: \" + super.tostring();\n  }\n};\n\nobj.tostring(); // myobject: [object object]\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# 类的 prototype 属性和__proto__属性\n\n大多数浏览器的 es5 实现之中，每一个对象都有__proto__属性，指向对应的构造函数的prototype属性。class 作为构造函数的语法糖，同时有prototype属性和__proto__属性，因此同时存在两条继承链。\n\n（1）子类的__proto__属性，表示构造函数的继承，总是指向父类。\n\n（2）子类prototype属性的__proto__属性，表示方法的继承，总是指向父类的prototype属性。\n\nclass a {\n}\n\nclass b extends a {\n}\n\nb.__proto__ === a // true\nb.prototype.__proto__ === a.prototype // true\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n上面代码中，子类b的__proto__属性指向父类a，子类b的prototype属性的__proto__属性指向父类a的prototype属性。\n\n这样的结果是因为，类的继承是按照下面的模式实现的。\n\nclass a {\n}\n\nclass b {\n}\n\n// b 的实例继承 a 的实例\nobject.setprototypeof(b.prototype, a.prototype);\n\n// b 继承 a 的静态属性\nobject.setprototypeof(b, a);\n\nconst b = new b();\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n《对象的扩展》一章给出过object.setprototypeof方法的实现。\n\nobject.setprototypeof = function (obj, proto) {\n  obj.__proto__ = proto;\n  return obj;\n}\n\n\n1\n2\n3\n4\n\n\n因此，就得到了上面的结果。\n\nobject.setprototypeof(b.prototype, a.prototype);\n// 等同于\nb.prototype.__proto__ = a.prototype;\n\nobject.setprototypeof(b, a);\n// 等同于\nb.__proto__ = a;\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n这两条继承链，可以这样理解：作为一个对象，子类（b）的原型（__proto__属性）是父类（a）；作为一个构造函数，子类（b）的原型对象（prototype属性）是父类的原型对象（prototype属性）的实例。\n\nb.prototype = object.create(a.prototype);\n// 等同于\nb.prototype.__proto__ = a.prototype;\n\n\n1\n2\n3\n\n\nextends关键字后面可以跟多种类型的值。\n\nclass b extends a {\n}\n\n\n1\n2\n\n\n上面代码的a，只要是一个有prototype属性的函数，就能被b继承。由于函数都有prototype属性（除了function.prototype函数），因此a可以是任意函数。\n\n下面，讨论两种情况。第一种，子类继承object类。\n\nclass a extends object {\n}\n\na.__proto__ === object // true\na.prototype.__proto__ === object.prototype // true\n\n\n1\n2\n3\n4\n5\n\n\n这种情况下，a其实就是构造函数object的复制，a的实例就是object的实例。\n\n第二种情况，不存在任何继承。\n\nclass a {\n}\n\na.__proto__ === function.prototype // true\na.prototype.__proto__ === object.prototype // true\n\n\n1\n2\n3\n4\n5\n\n\n这种情况下，a作为一个基类（即不存在任何继承），就是一个普通函数，所以直接继承function.prototype。但是，a调用后返回一个空对象（即object实例），所以a.prototype.__proto__指向构造函数（object）的prototype属性。\n\n\n# 实例的 __proto__ 属性\n\n子类实例的__proto__属性的__proto__属性，指向父类实例的__proto__属性。也就是说，子类的原型的原型，是父类的原型。\n\nvar p1 = new point(2, 3);\nvar p2 = new colorpoint(2, 3, 'red');\n\np2.__proto__ === p1.__proto__ // false\np2.__proto__.__proto__ === p1.__proto__ // true\n\n\n1\n2\n3\n4\n5\n\n\n上面代码中，colorpoint继承了point，导致前者原型的原型是后者的原型。\n\n因此，通过子类实例的__proto__.__proto__属性，可以修改父类实例的行为。\n\np2.__proto__.__proto__.printname = function () {\n  console.log('ha');\n};\n\np1.printname() // \"ha\"\n\n\n1\n2\n3\n4\n5\n\n\n上面代码在colorpoint的实例p2上向point类添加方法，结果影响到了point的实例p1。\n\n\n# 原生构造函数的继承\n\n原生构造函数是指语言内置的构造函数，通常用来生成数据结构。ecmascript 的原生构造函数大致有下面这些。\n\n * boolean()\n * number()\n * string()\n * array()\n * date()\n * function()\n * regexp()\n * error()\n * object()\n\n以前，这些原生构造函数是无法继承的，比如，不能自己定义一个array的子类。\n\nfunction myarray() {\n  array.apply(this, arguments);\n}\n\nmyarray.prototype = object.create(array.prototype, {\n  constructor: {\n    value: myarray,\n    writable: true,\n    configurable: true,\n    enumerable: true\n  }\n});\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n上面代码定义了一个继承 array 的myarray类。但是，这个类的行为与array完全不一致。\n\nvar colors = new myarray();\ncolors[0] = \"red\";\ncolors.length  // 0\n\ncolors.length = 0;\ncolors[0]  // \"red\"\n\n\n1\n2\n3\n4\n5\n6\n\n\n之所以会发生这种情况，是因为子类无法获得原生构造函数的内部属性，通过array.apply()或者分配给原型对象都不行。原生构造函数会忽略apply方法传入的this，也就是说，原生构造函数的this无法绑定，导致拿不到内部属性。\n\nes5 是先新建子类的实例对象this，再将父类的属性添加到子类上，由于父类的内部属性无法获取，导致无法继承原生的构造函数。比如，array构造函数有一个内部属性[[defineownproperty]]，用来定义新属性时，更新length属性，这个内部属性无法在子类获取，导致子类的length属性行为不正常。\n\n下面的例子中，我们想让一个普通对象继承error对象。\n\nvar e = {};\n\nobject.getownpropertynames(error.call(e))\n// [ 'stack' ]\n\nobject.getownpropertynames(e)\n// []\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n上面代码中，我们想通过error.call(e)这种写法，让普通对象e具有error对象的实例属性。但是，error.call()完全忽略传入的第一个参数，而是返回一个新对象，e本身没有任何变化。这证明了error.call(e)这种写法，无法继承原生构造函数。\n\nes6 允许继承原生构造函数定义子类，因为 es6 是先新建父类的实例对象this，然后再用子类的构造函数修饰this，使得父类的所有行为都可以继承。下面是一个继承array的例子。\n\nclass myarray extends array {\n  constructor(...args) {\n    super(...args);\n  }\n}\n\nvar arr = new myarray();\narr[0] = 12;\narr.length // 1\n\narr.length = 0;\narr[0] // undefined\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n上面代码定义了一个myarray类，继承了array构造函数，因此就可以从myarray生成数组的实例。这意味着，es6 可以自定义原生数据结构（比如array、string等）的子类，这是 es5 无法做到的。\n\n上面这个例子也说明，extends关键字不仅可以用来继承类，还可以用来继承原生的构造函数。因此可以在原生数据结构的基础上，定义自己的数据结构。下面就是定义了一个带版本功能的数组。\n\nclass versionedarray extends array {\n  constructor() {\n    super();\n    this.history = [[]];\n  }\n  commit() {\n    this.history.push(this.slice());\n  }\n  revert() {\n    this.splice(0, this.length, ...this.history[this.history.length - 1]);\n  }\n}\n\nvar x = new versionedarray();\n\nx.push(1);\nx.push(2);\nx // [1, 2]\nx.history // [[]]\n\nx.commit();\nx.history // [[], [1, 2]]\n\nx.push(3);\nx // [1, 2, 3]\nx.history // [[], [1, 2]]\n\nx.revert();\nx // [1, 2]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n\n\n上面代码中，versionedarray会通过commit方法，将自己的当前状态生成一个版本快照，存入history属性。revert方法用来将数组重置为最新一次保存的版本。除此之外，versionedarray依然是一个普通数组，所有原生的数组方法都可以在它上面调用。\n\n下面是一个自定义error子类的例子，可以用来定制报错时的行为。\n\nclass extendableerror extends error {\n  constructor(message) {\n    super();\n    this.message = message;\n    this.stack = (new error()).stack;\n    this.name = this.constructor.name;\n  }\n}\n\nclass myerror extends extendableerror {\n  constructor(m) {\n    super(m);\n  }\n}\n\nvar myerror = new myerror('ll');\nmyerror.message // \"ll\"\nmyerror instanceof error // true\nmyerror.name // \"myerror\"\nmyerror.stack\n// error\n//     at myerror.extendableerror\n//     ...\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n\n\n注意，继承object的子类，有一个行为差异。\n\nclass newobj extends object{\n  constructor(){\n    super(...arguments);\n  }\n}\nvar o = new newobj({attr: true});\no.attr === true  // false\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n上面代码中，newobj继承了object，但是无法通过super方法向父类object传参。这是因为 es6 改变了object构造函数的行为，一旦发现object方法不是通过new object()这种形式调用，es6 规定object构造函数会忽略参数。\n\n\n# mixin 模式的实现\n\nmixin 指的是多个对象合成一个新的对象，新对象具有各个组成成员的接口。它的最简单实现如下。\n\nconst a = {\n  a: 'a'\n};\nconst b = {\n  b: 'b'\n};\nconst c = {...a, ...b}; // {a: 'a', b: 'b'}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n上面代码中，c对象是a对象和b对象的合成，具有两者的接口。\n\n下面是一个更完备的实现，将多个类的接口“混入”（mix in）另一个类。\n\nfunction mix(...mixins) {\n  class mix {\n    constructor() {\n      for (let mixin of mixins) {\n        copyproperties(this, new mixin()); // 拷贝实例属性\n      }\n    }\n  }\n\n  for (let mixin of mixins) {\n    copyproperties(mix, mixin); // 拷贝静态属性\n    copyproperties(mix.prototype, mixin.prototype); // 拷贝原型属性\n  }\n\n  return mix;\n}\n\nfunction copyproperties(target, source) {\n  for (let key of reflect.ownkeys(source)) {\n    if ( key !== 'constructor'\n      && key !== 'prototype'\n      && key !== 'name'\n    ) {\n      let desc = object.getownpropertydescriptor(source, key);\n      object.defineproperty(target, key, desc);\n    }\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n\n\n上面代码的mix函数，可以将多个对象合成为一个类。使用的时候，只要继承这个类即可。\n\nclass distributededit extends mix(loggable, serializable) {\n  // ...\n}\n\n\n1\n2\n3\n",charsets:{cjk:!0}},{title:"Class 的基本语法",frontmatter:{title:"Class 的基本语法",date:"2020-02-09T16:00:29.000Z",permalink:"/pages/e831e1593c82bbe0",author:"阮一峰",categories:["《ES6 教程》笔记"],tags:["ES6"],readingShow:"top"},regularPath:"/06.%E4%B9%A6%E7%B1%8D/05.%E3%80%8AES6%20%E6%95%99%E7%A8%8B%E3%80%8B%E7%AC%94%E8%AE%B0/21.Class%20%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95.html",relativePath:"06.书籍/05.《ES6 教程》笔记/21.Class 的基本语法.md",key:"v-ecbac2a2",path:"/pages/e831e1593c82bbe0/",headers:[{level:2,title:"简介",slug:"简介",normalizedTitle:"简介",charIndex:18},{level:3,title:"类的由来",slug:"类的由来",normalizedTitle:"类的由来",charIndex:25},{level:3,title:"constructor 方法",slug:"constructor-方法",normalizedTitle:"constructor 方法",charIndex:2634},{level:3,title:"类的实例",slug:"类的实例",normalizedTitle:"类的实例",charIndex:1522},{level:3,title:"取值函数（getter）和存值函数（setter）",slug:"取值函数-getter-和存值函数-setter",normalizedTitle:"取值函数（getter）和存值函数（setter）",charIndex:4982},{level:3,title:"属性表达式",slug:"属性表达式",normalizedTitle:"属性表达式",charIndex:5891},{level:3,title:"Class 表达式",slug:"class-表达式",normalizedTitle:"class 表达式",charIndex:6101},{level:3,title:"注意点",slug:"注意点",normalizedTitle:"注意点",charIndex:6764},{level:2,title:"静态方法",slug:"静态方法",normalizedTitle:"静态方法",charIndex:9310},{level:2,title:"实例属性的新写法",slug:"实例属性的新写法",normalizedTitle:"实例属性的新写法",charIndex:10519},{level:2,title:"静态属性",slug:"静态属性",normalizedTitle:"静态属性",charIndex:11358},{level:2,title:"私有方法和私有属性",slug:"私有方法和私有属性",normalizedTitle:"私有方法和私有属性",charIndex:11976},{level:3,title:"现有的解决方案",slug:"现有的解决方案",normalizedTitle:"现有的解决方案",charIndex:11990},{level:3,title:"私有属性的提案",slug:"私有属性的提案",normalizedTitle:"私有属性的提案",charIndex:13124},{level:2,title:"new.target 属性",slug:"new-target-属性",normalizedTitle:"new.target 属性",charIndex:15392}],excerpt:'<h1 id="class-的基本语法"><a class="header-anchor" href="#class-的基本语法">#</a> Class 的基本语法</h1>\n<h2 id="简介"><a class="header-anchor" href="#简介">#</a> 简介</h2>\n<h3 id="类的由来"><a class="header-anchor" href="#类的由来">#</a> 类的由来</h3>\n<p>JavaScript 语言中，生成实例对象的传统方法是通过构造函数。下面是一个例子。</p>\n\x3c!--beforebegin--\x3e<div class="language-javascript line-numbers-mode">\x3c!--afterbegin--\x3e<pre v-pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Point</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> x<span class="token punctuation">;</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">=</span> y<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token class-name">Point</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">toString</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token string">\'(\'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">+</span> <span class="token string">\', \'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">+</span> <span class="token string">\')\'</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Point</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div>\x3c!--beforeend--\x3e</div>\x3c!--afterend--\x3e',lastUpdated:"2022/9/22 下午4:28:09",lastUpdatedTimestamp:1663835289e3,headersStr:"简介 类的由来 constructor 方法 类的实例 取值函数（getter）和存值函数（setter） 属性表达式 Class 表达式 注意点 静态方法 实例属性的新写法 静态属性 私有方法和私有属性 现有的解决方案 私有属性的提案 new.target 属性",content:"# Class 的基本语法\n\n\n# 简介\n\n\n# 类的由来\n\nJavaScript 语言中，生成实例对象的传统方法是通过构造函数。下面是一个例子。\n\nfunction Point(x, y) {\n  this.x = x;\n  this.y = y;\n}\n\nPoint.prototype.toString = function () {\n  return '(' + this.x + ', ' + this.y + ')';\n};\n\nvar p = new Point(1, 2);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n上面这种写法跟传统的面向对象语言（比如 C++ 和 Java）差异很大，很容易让新学习这门语言的程序员感到困惑。\n\nES6 提供了更接近传统语言的写法，引入了 Class（类）这个概念，作为对象的模板。通过class关键字，可以定义类。\n\n基本上，ES6 的class可以看作只是一个语法糖，它的绝大部分功能，ES5 都可以做到，新的class写法只是让对象原型的写法更加清晰、更像面向对象编程的语法而已。上面的代码用 ES6 的class改写，就是下面这样。\n\nclass Point {\n  constructor(x, y) {\n    this.x = x;\n    this.y = y;\n  }\n\n  toString() {\n    return '(' + this.x + ', ' + this.y + ')';\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n上面代码定义了一个“类”，可以看到里面有一个constructor方法，这就是构造方法，而this关键字则代表实例对象。也就是说，ES5 的构造函数Point，对应 ES6 的Point类的构造方法。\n\nPoint类除了构造方法，还定义了一个toString方法。注意，定义“类”的方法的时候，前面不需要加上function这个关键字，直接把函数定义放进去了就可以了。另外，方法之间不需要逗号分隔，加了会报错。\n\nES6 的类，完全可以看作构造函数的另一种写法。\n\nclass Point {\n  // ...\n}\n\ntypeof Point // \"function\"\nPoint === Point.prototype.constructor // true\n\n\n1\n2\n3\n4\n5\n6\n\n\n上面代码表明，类的数据类型就是函数，类本身就指向构造函数。\n\n使用的时候，也是直接对类使用new命令，跟构造函数的用法完全一致。\n\nclass Bar {\n  doStuff() {\n    console.log('stuff');\n  }\n}\n\nvar b = new Bar();\nb.doStuff() // \"stuff\"\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n构造函数的prototype属性，在 ES6 的“类”上面继续存在。事实上，类的所有方法都定义在类的prototype属性上面。\n\nclass Point {\n  constructor() {\n    // ...\n  }\n\n  toString() {\n    // ...\n  }\n\n  toValue() {\n    // ...\n  }\n}\n\n// 等同于\n\nPoint.prototype = {\n  constructor() {},\n  toString() {},\n  toValue() {},\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n\n\n在类的实例上面调用方法，其实就是调用原型上的方法。\n\nclass B {}\nlet b = new B();\n\nb.constructor === B.prototype.constructor // true\n\n\n1\n2\n3\n4\n\n\n上面代码中，b是B类的实例，它的constructor方法就是B类原型的constructor方法。\n\n由于类的方法都定义在prototype对象上面，所以类的新方法可以添加在prototype对象上面。Object.assign方法可以很方便地一次向类添加多个方法。\n\nclass Point {\n  constructor(){\n    // ...\n  }\n}\n\nObject.assign(Point.prototype, {\n  toString(){},\n  toValue(){}\n});\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\nprototype对象的constructor属性，直接指向“类”的本身，这与 ES5 的行为是一致的。\n\nPoint.prototype.constructor === Point // true\n\n\n1\n\n\n另外，类的内部所有定义的方法，都是不可枚举的（non-enumerable）。\n\nclass Point {\n  constructor(x, y) {\n    // ...\n  }\n\n  toString() {\n    // ...\n  }\n}\n\nObject.keys(Point.prototype)\n// []\nObject.getOwnPropertyNames(Point.prototype)\n// [\"constructor\",\"toString\"]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n上面代码中，toString方法是Point类内部定义的方法，它是不可枚举的。这一点与 ES5 的行为不一致。\n\nvar Point = function (x, y) {\n  // ...\n};\n\nPoint.prototype.toString = function() {\n  // ...\n};\n\nObject.keys(Point.prototype)\n// [\"toString\"]\nObject.getOwnPropertyNames(Point.prototype)\n// [\"constructor\",\"toString\"]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n上面代码采用 ES5 的写法，toString方法就是可枚举的。\n\n\n# constructor 方法\n\nconstructor方法是类的默认方法，通过new命令生成对象实例时，自动调用该方法。一个类必须有constructor方法，如果没有显式定义，一个空的constructor方法会被默认添加。\n\nclass Point {\n}\n\n// 等同于\nclass Point {\n  constructor() {}\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n上面代码中，定义了一个空的类Point，JavaScript 引擎会自动为它添加一个空的constructor方法。\n\nconstructor方法默认返回实例对象（即this），完全可以指定返回另外一个对象。\n\nclass Foo {\n  constructor() {\n    return Object.create(null);\n  }\n}\n\nnew Foo() instanceof Foo\n// false\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n上面代码中，constructor函数返回一个全新的对象，结果导致实例对象不是Foo类的实例。\n\n类必须使用new调用，否则会报错。这是它跟普通构造函数的一个主要区别，后者不用new也可以执行。\n\nclass Foo {\n  constructor() {\n    return Object.create(null);\n  }\n}\n\nFoo()\n// TypeError: Class constructor Foo cannot be invoked without 'new'\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# 类的实例\n\n生成类的实例的写法，与 ES5 完全一样，也是使用new命令。前面说过，如果忘记加上new，像函数那样调用Class，将会报错。\n\nclass Point {\n  // ...\n}\n\n// 报错\nvar point = Point(2, 3);\n\n// 正确\nvar point = new Point(2, 3);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n与 ES5 一样，实例的属性除非显式定义在其本身（即定义在this对象上），否则都是定义在原型上（即定义在class上）。\n\n//定义类\nclass Point {\n\n  constructor(x, y) { // constructor属性定义在原型上\n    this.x = x; // x属性定义在实例上\n    this.y = y; // y属性定义在实例上\n  }\n\n  toString() { // toString属性定义在原型上\n    return '(' + this.x + ', ' + this.y + ')';\n  }\n\n}\n\nvar point = new Point(2, 3);\n\npoint.toString() // (2, 3)\n\npoint.hasOwnProperty('x') // true\npoint.hasOwnProperty('y') // true\npoint.hasOwnProperty('toString') // false\npoint.__proto__.hasOwnProperty('toString') // true\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n\n\n上面代码中，x和y都是实例对象point自身的属性（因为定义在this变量上），所以hasOwnProperty方法返回true，而toString是原型对象的属性（因为定义在Point类上），所以hasOwnProperty方法返回false。这些都与 ES5 的行为保持一致。\n\n与 ES5 一样，类的所有实例共享一个原型对象。\n\nvar p1 = new Point(2,3);\nvar p2 = new Point(3,2);\n\np1.__proto__ === p2.__proto__\n//true\n\n\n1\n2\n3\n4\n5\n\n\n上面代码中，p1和p2都是Point的实例，它们的原型都是Point.prototype，所以__proto__属性是相等的。\n\n这也意味着，可以通过实例的__proto__属性为“类”添加方法。\n\n> __proto__ 并不是语言本身的特性，这是各大厂商具体实现时添加的私有属性，虽然目前很多现代浏览器的 JS 引擎中都提供了这个私有属性，但依旧不建议在生产中使用该属性，避免对环境产生依赖。生产环境中，我们可以使用 Object.getPrototypeOf 方法来获取实例对象的原型，然后再来为原型添加方法/属性。\n\nvar p1 = new Point(2,3);\nvar p2 = new Point(3,2);\n\np1.__proto__.printName = function () { return 'Oops' };\n\np1.printName() // \"Oops\"\np2.printName() // \"Oops\"\n\nvar p3 = new Point(4,2);\np3.printName() // \"Oops\"\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n上面代码在p1的原型上添加了一个printName方法，由于p1的原型就是p2的原型，因此p2也可以调用这个方法。而且，此后新建的实例p3也可以调用这个方法。这意味着，使用实例的__proto__属性改写原型，必须相当谨慎，不推荐使用，因为这会改变“类”的原始定义，影响到所有实例。\n\n\n# 取值函数（getter）和存值函数（setter）\n\n与 ES5 一样，在“类”的内部可以使用get和set关键字，对某个属性设置存值函数和取值函数，拦截该属性的存取行为。\n\nclass MyClass {\n  constructor() {\n    // ...\n  }\n  get prop() {\n    return 'getter';\n  }\n  set prop(value) {\n    console.log('setter: '+value);\n  }\n}\n\nlet inst = new MyClass();\n\ninst.prop = 123;\n// setter: 123\n\ninst.prop\n// 'getter'\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\n上面代码中，prop属性有对应的存值函数和取值函数，因此赋值和读取行为都被自定义了。\n\n存值函数和取值函数是设置在属性的 Descriptor 对象上的。\n\nclass CustomHTMLElement {\n  constructor(element) {\n    this.element = element;\n  }\n\n  get html() {\n    return this.element.innerHTML;\n  }\n\n  set html(value) {\n    this.element.innerHTML = value;\n  }\n}\n\nvar descriptor = Object.getOwnPropertyDescriptor(\n  CustomHTMLElement.prototype, \"html\"\n);\n\n\"get\" in descriptor  // true\n\"set\" in descriptor  // true\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n\n上面代码中，存值函数和取值函数是定义在html属性的描述对象上面，这与 ES5 完全一致。\n\n\n# 属性表达式\n\n类的属性名，可以采用表达式。\n\nlet methodName = 'getArea';\n\nclass Square {\n  constructor(length) {\n    // ...\n  }\n\n  [methodName]() {\n    // ...\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n上面代码中，Square类的方法名getArea，是从表达式得到的。\n\n\n# Class 表达式\n\n与函数一样，类也可以使用表达式的形式定义。\n\nconst MyClass = class Me {\n  getClassName() {\n    return Me.name;\n  }\n};\n\n\n1\n2\n3\n4\n5\n\n\n上面代码使用表达式定义了一个类。需要注意的是，这个类的名字是Me，但是Me只在 Class 的内部可用，指代当前类。在 Class 外部，这个类只能用MyClass引用。\n\nlet inst = new MyClass();\ninst.getClassName() // Me\nMe.name // ReferenceError: Me is not defined\n\n\n1\n2\n3\n\n\n上面代码表示，Me只在 Class 内部有定义。\n\n如果类的内部没用到的话，可以省略Me，也就是可以写成下面的形式。\n\nconst MyClass = class { /* ... */ };\n\n\n1\n\n\n采用 Class 表达式，可以写出立即执行的 Class。\n\nlet person = new class {\n  constructor(name) {\n    this.name = name;\n  }\n\n  sayName() {\n    console.log(this.name);\n  }\n}('张三');\n\nperson.sayName(); // \"张三\"\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n上面代码中，person是一个立即执行的类的实例。\n\n\n# 注意点\n\n（1）严格模式\n\n类和模块的内部，默认就是严格模式，所以不需要使用use strict指定运行模式。只要你的代码写在类或模块之中，就只有严格模式可用。考虑到未来所有的代码，其实都是运行在模块之中，所以 ES6 实际上把整个语言升级到了严格模式。\n\n（2）不存在提升\n\n类不存在变量提升（hoist），这一点与 ES5 完全不同。\n\nnew Foo(); // ReferenceError\nclass Foo {}\n\n\n1\n2\n\n\n上面代码中，Foo类使用在前，定义在后，这样会报错，因为 ES6 不会把类的声明提升到代码头部。这种规定的原因与下文要提到的继承有关，必须保证子类在父类之后定义。\n\n{\n  let Foo = class {};\n  class Bar extends Foo {\n  }\n}\n\n\n1\n2\n3\n4\n5\n\n\n上面的代码不会报错，因为Bar继承Foo的时候，Foo已经有定义了。但是，如果存在class的提升，上面代码就会报错，因为class会被提升到代码头部，而let命令是不提升的，所以导致Bar继承Foo的时候，Foo还没有定义。\n\n（3）name 属性\n\n由于本质上，ES6 的类只是 ES5 的构造函数的一层包装，所以函数的许多特性都被Class继承，包括name属性。\n\nclass Point {}\nPoint.name // \"Point\"\n\n\n1\n2\n\n\nname属性总是返回紧跟在class关键字后面的类名。\n\n（4）Generator 方法\n\n如果某个方法之前加上星号（*），就表示该方法是一个 Generator 函数。\n\nclass Foo {\n  constructor(...args) {\n    this.args = args;\n  }\n  * [Symbol.iterator]() {\n    for (let arg of this.args) {\n      yield arg;\n    }\n  }\n}\n\nfor (let x of new Foo('hello', 'world')) {\n  console.log(x);\n}\n// hello\n// world\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n上面代码中，Foo类的Symbol.iterator方法前有一个星号，表示该方法是一个 Generator 函数。Symbol.iterator方法返回一个Foo类的默认遍历器，for...of循环会自动调用这个遍历器。\n\n（5）this 的指向\n\n类的方法内部如果含有this，它默认指向类的实例。但是，必须非常小心，一旦单独使用该方法，很可能报错。\n\nclass Logger {\n  printName(name = 'there') {\n    this.print(`Hello ${name}`);\n  }\n\n  print(text) {\n    console.log(text);\n  }\n}\n\nconst logger = new Logger();\nconst { printName } = logger;\nprintName(); // TypeError: Cannot read property 'print' of undefined\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n上面代码中，printName方法中的this，默认指向Logger类的实例。但是，如果将这个方法提取出来单独使用，this会指向该方法运行时所在的环境（由于 class 内部是严格模式，所以 this 实际指向的是undefined），从而导致找不到print方法而报错。\n\n一个比较简单的解决方法是，在构造方法中绑定this，这样就不会找不到print方法了。\n\nclass Logger {\n  constructor() {\n    this.printName = this.printName.bind(this);\n  }\n\n  // ...\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n另一种解决方法是使用箭头函数。\n\nclass Obj {\n  constructor() {\n    this.getThis = () => this;\n  }\n}\n\nconst myObj = new Obj();\nmyObj.getThis() === myObj // true\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n箭头函数内部的this总是指向定义时所在的对象。上面代码中，箭头函数位于构造函数内部，它的定义生效的时候，是在构造函数执行的时候。这时，箭头函数所在的运行环境，肯定是实例对象，所以this会总是指向实例对象。\n\n还有一种解决方法是使用Proxy，获取方法的时候，自动绑定this。\n\nfunction selfish (target) {\n  const cache = new WeakMap();\n  const handler = {\n    get (target, key) {\n      const value = Reflect.get(target, key);\n      if (typeof value !== 'function') {\n        return value;\n      }\n      if (!cache.has(value)) {\n        cache.set(value, value.bind(target));\n      }\n      return cache.get(value);\n    }\n  };\n  const proxy = new Proxy(target, handler);\n  return proxy;\n}\n\nconst logger = selfish(new Logger());\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\n\n# 静态方法\n\n类相当于实例的原型，所有在类中定义的方法，都会被实例继承。如果在一个方法前，加上static关键字，就表示该方法不会被实例继承，而是直接通过类来调用，这就称为“静态方法”。\n\nclass Foo {\n  static classMethod() {\n    return 'hello';\n  }\n}\n\nFoo.classMethod() // 'hello'\n\nvar foo = new Foo();\nfoo.classMethod()\n// TypeError: foo.classMethod is not a function\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n上面代码中，Foo类的classMethod方法前有static关键字，表明该方法是一个静态方法，可以直接在Foo类上调用（Foo.classMethod()），而不是在Foo类的实例上调用。如果在实例上调用静态方法，会抛出一个错误，表示不存在该方法。\n\n注意，如果静态方法包含this关键字，这个this指的是类，而不是实例。\n\nclass Foo {\n  static bar() {\n    this.baz();\n  }\n  static baz() {\n    console.log('hello');\n  }\n  baz() {\n    console.log('world');\n  }\n}\n\nFoo.bar() // hello\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n上面代码中，静态方法bar调用了this.baz，这里的this指的是Foo类，而不是Foo的实例，等同于调用Foo.baz。另外，从这个例子还可以看出，静态方法可以与非静态方法重名。\n\n父类的静态方法，可以被子类继承。\n\nclass Foo {\n  static classMethod() {\n    return 'hello';\n  }\n}\n\nclass Bar extends Foo {\n}\n\nBar.classMethod() // 'hello'\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n上面代码中，父类Foo有一个静态方法，子类Bar可以调用这个方法。\n\n静态方法也是可以从super对象上调用的。\n\nclass Foo {\n  static classMethod() {\n    return 'hello';\n  }\n}\n\nclass Bar extends Foo {\n  static classMethod() {\n    return super.classMethod() + ', too';\n  }\n}\n\nBar.classMethod() // \"hello, too\"\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n\n# 实例属性的新写法\n\n实例属性除了定义在constructor()方法里面的this上面，也可以定义在类的最顶层。\n\nclass IncreasingCounter {\n  constructor() {\n    this._count = 0;\n  }\n  get value() {\n    console.log('Getting the current value!');\n    return this._count;\n  }\n  increment() {\n    this._count++;\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n上面代码中，实例属性this._count定义在constructor()方法里面。另一种写法是，这个属性也可以定义在类的最顶层，其他都不变。\n\nclass IncreasingCounter {\n  _count = 0;\n  get value() {\n    console.log('Getting the current value!');\n    return this._count;\n  }\n  increment() {\n    this._count++;\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n上面代码中，实例属性_count与取值函数value()和increment()方法，处于同一个层级。这时，不需要在实例属性前面加上this。\n\n这种新写法的好处是，所有实例对象自身的属性都定义在类的头部，看上去比较整齐，一眼就能看出这个类有哪些实例属性。\n\nclass foo {\n  bar = 'hello';\n  baz = 'world';\n\n  constructor() {\n    // ...\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n上面的代码，一眼就能看出，foo类有两个实例属性，一目了然。另外，写起来也比较简洁。\n\n\n# 静态属性\n\n静态属性指的是 Class 本身的属性，即Class.propName，而不是定义在实例对象（this）上的属性。\n\nclass Foo {\n}\n\nFoo.prop = 1;\nFoo.prop // 1\n\n\n1\n2\n3\n4\n5\n\n\n上面的写法为Foo类定义了一个静态属性prop。\n\n目前，只有这种写法可行，因为 ES6 明确规定，Class 内部只有静态方法，没有静态属性。现在有一个提案提供了类的静态属性，写法是在实例属性的前面，加上static关键字。\n\nclass MyClass {\n  static myStaticProp = 42;\n\n  constructor() {\n    console.log(MyClass.myStaticProp); // 42\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n这个新写法大大方便了静态属性的表达。\n\n// 老写法\nclass Foo {\n  // ...\n}\nFoo.prop = 1;\n\n// 新写法\nclass Foo {\n  static prop = 1;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n上面代码中，老写法的静态属性定义在类的外部。整个类生成以后，再生成静态属性。这样让人很容易忽略这个静态属性，也不符合相关代码应该放在一起的代码组织原则。另外，新写法是显式声明（declarative），而不是赋值处理，语义更好。\n\n\n# 私有方法和私有属性\n\n\n# 现有的解决方案\n\n私有方法和私有属性，是只能在类的内部访问的方法和属性，外部不能访问。这是常见需求，有利于代码的封装，但 ES6 不提供，只能通过变通方法模拟实现。\n\n一种做法是在命名上加以区别。\n\nclass Widget {\n\n  // 公有方法\n  foo (baz) {\n    this._bar(baz);\n  }\n\n  // 私有方法\n  _bar(baz) {\n    return this.snaf = baz;\n  }\n\n  // ...\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n上面代码中，_bar方法前面的下划线，表示这是一个只限于内部使用的私有方法。但是，这种命名是不保险的，在类的外部，还是可以调用到这个方法。\n\n另一种方法就是索性将私有方法移出模块，因为模块内部的所有方法都是对外可见的。\n\nclass Widget {\n  foo (baz) {\n    bar.call(this, baz);\n  }\n\n  // ...\n}\n\nfunction bar(baz) {\n  return this.snaf = baz;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n上面代码中，foo是公开方法，内部调用了bar.call(this, baz)。这使得bar实际上成为了当前模块的私有方法。\n\n还有一种方法是利用Symbol值的唯一性，将私有方法的名字命名为一个Symbol值。\n\nconst bar = Symbol('bar');\nconst snaf = Symbol('snaf');\n\nexport default class myClass{\n\n  // 公有方法\n  foo(baz) {\n    this[bar](baz);\n  }\n\n  // 私有方法\n  [bar](baz) {\n    return this[snaf] = baz;\n  }\n\n  // ...\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n上面代码中，bar和snaf都是Symbol值，一般情况下无法获取到它们，因此达到了私有方法和私有属性的效果。但是也不是绝对不行，Reflect.ownKeys()依然可以拿到它们。\n\nconst inst = new myClass();\n\nReflect.ownKeys(myClass.prototype)\n// [ 'constructor', 'foo', Symbol(bar) ]\n\n\n1\n2\n3\n4\n\n\n上面代码中，Symbol 值的属性名依然可以从类的外部拿到。\n\n\n# 私有属性的提案\n\n目前，有一个提案，为class加了私有属性。方法是在属性名之前，使用#表示。\n\nclass IncreasingCounter {\n  #count = 0;\n  get value() {\n    console.log('Getting the current value!');\n    return this.#count;\n  }\n  increment() {\n    this.#count++;\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n上面代码中，#count就是私有属性，只能在类的内部使用（this.#count）。如果在类的外部使用，就会报错。\n\nconst counter = new IncreasingCounter();\ncounter.#count // 报错\ncounter.#count = 42 // 报错\n\n\n1\n2\n3\n\n\n上面代码在类的外部，读取私有属性，就会报错。\n\n下面是另一个例子。\n\nclass Point {\n  #x;\n\n  constructor(x = 0) {\n    this.#x = +x;\n  }\n\n  get x() {\n    return this.#x;\n  }\n\n  set x(value) {\n    this.#x = +value;\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n上面代码中，#x就是私有属性，在Point类之外是读取不到这个属性的。由于井号#是属性名的一部分，使用时必须带有#一起使用，所以#x和x是两个不同的属性。\n\n之所以要引入一个新的前缀#表示私有属性，而没有采用private关键字，是因为 JavaScript 是一门动态语言，没有类型声明，使用独立的符号似乎是唯一的比较方便可靠的方法，能够准确地区分一种属性是否为私有属性。另外，Ruby 语言使用@表示私有属性，ES6 没有用这个符号而使用#，是因为@已经被留给了 Decorator。\n\n这种写法不仅可以写私有属性，还可以用来写私有方法。\n\nclass Foo {\n  #a;\n  #b;\n  constructor(a, b) {\n    this.#a = a;\n    this.#b = b;\n  }\n  #sum() {\n    return #a + #b;\n  }\n  printSum() {\n    console.log(this.#sum());\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n上面代码中，#sum()就是一个私有方法。\n\n另外，私有属性也可以设置 getter 和 setter 方法。\n\nclass Counter {\n  #xValue = 0;\n\n  constructor() {\n    super();\n    // ...\n  }\n\n  get #x() { return #xValue; }\n  set #x(value) {\n    this.#xValue = value;\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n上面代码中，#x是一个私有属性，它的读写都通过get #x()和set #x()来完成。\n\n私有属性不限于从this引用，只要是在类的内部，实例也可以引用私有属性。\n\nclass Foo {\n  #privateValue = 42;\n  static getPrivateValue(foo) {\n    return foo.#privateValue;\n  }\n}\n\nFoo.getPrivateValue(new Foo()); // 42\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n上面代码允许从实例foo上面引用私有属性。\n\n私有属性和私有方法前面，也可以加上static关键字，表示这是一个静态的私有属性或私有方法。\n\nclass FakeMath {\n  static PI = 22 / 7;\n  static #totallyRandomNumber = 4;\n\n  static #computeRandomNumber() {\n    return FakeMath.#totallyRandomNumber;\n  }\n\n  static random() {\n    console.log('I heard you like random numbers…')\n    return FakeMath.#computeRandomNumber();\n  }\n}\n\nFakeMath.PI // 3.142857142857143\nFakeMath.random()\n// I heard you like random numbers…\n// 4\nFakeMath.#totallyRandomNumber // 报错\nFakeMath.#computeRandomNumber() // 报错\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n\n上面代码中，#totallyRandomNumber是私有属性，#computeRandomNumber()是私有方法，只能在FakeMath这个类的内部调用，外部调用就会报错。\n\n\n# new.target 属性\n\nnew是从构造函数生成实例对象的命令。ES6 为new命令引入了一个new.target属性，该属性一般用在构造函数之中，返回new命令作用于的那个构造函数。如果构造函数不是通过new命令或Reflect.construct()调用的，new.target会返回undefined，因此这个属性可以用来确定构造函数是怎么调用的。\n\nfunction Person(name) {\n  if (new.target !== undefined) {\n    this.name = name;\n  } else {\n    throw new Error('必须使用 new 命令生成实例');\n  }\n}\n\n// 另一种写法\nfunction Person(name) {\n  if (new.target === Person) {\n    this.name = name;\n  } else {\n    throw new Error('必须使用 new 命令生成实例');\n  }\n}\n\nvar person = new Person('张三'); // 正确\nvar notAPerson = Person.call(person, '张三');  // 报错\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\n上面代码确保构造函数只能通过new命令调用。\n\nClass 内部调用new.target，返回当前 Class。\n\nclass Rectangle {\n  constructor(length, width) {\n    console.log(new.target === Rectangle);\n    this.length = length;\n    this.width = width;\n  }\n}\n\nvar obj = new Rectangle(3, 4); // 输出 true\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n需要注意的是，子类继承父类时，new.target会返回子类。\n\nclass Rectangle {\n  constructor(length, width) {\n    console.log(new.target === Rectangle);\n    // ...\n  }\n}\n\nclass Square extends Rectangle {\n  constructor(length) {\n    super(length, width);\n  }\n}\n\nvar obj = new Square(3); // 输出 false\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n上面代码中，new.target会返回子类。\n\n利用这个特点，可以写出不能独立使用、必须继承后才能使用的类。\n\nclass Shape {\n  constructor() {\n    if (new.target === Shape) {\n      throw new Error('本类不能实例化');\n    }\n  }\n}\n\nclass Rectangle extends Shape {\n  constructor(length, width) {\n    super();\n    // ...\n  }\n}\n\nvar x = new Shape();  // 报错\nvar y = new Rectangle(3, 4);  // 正确\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n上面代码中，Shape类不能被实例化，只能用于继承。\n\n注意，在函数外部，使用new.target会报错。",normalizedContent:"# class 的基本语法\n\n\n# 简介\n\n\n# 类的由来\n\njavascript 语言中，生成实例对象的传统方法是通过构造函数。下面是一个例子。\n\nfunction point(x, y) {\n  this.x = x;\n  this.y = y;\n}\n\npoint.prototype.tostring = function () {\n  return '(' + this.x + ', ' + this.y + ')';\n};\n\nvar p = new point(1, 2);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n上面这种写法跟传统的面向对象语言（比如 c++ 和 java）差异很大，很容易让新学习这门语言的程序员感到困惑。\n\nes6 提供了更接近传统语言的写法，引入了 class（类）这个概念，作为对象的模板。通过class关键字，可以定义类。\n\n基本上，es6 的class可以看作只是一个语法糖，它的绝大部分功能，es5 都可以做到，新的class写法只是让对象原型的写法更加清晰、更像面向对象编程的语法而已。上面的代码用 es6 的class改写，就是下面这样。\n\nclass point {\n  constructor(x, y) {\n    this.x = x;\n    this.y = y;\n  }\n\n  tostring() {\n    return '(' + this.x + ', ' + this.y + ')';\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n上面代码定义了一个“类”，可以看到里面有一个constructor方法，这就是构造方法，而this关键字则代表实例对象。也就是说，es5 的构造函数point，对应 es6 的point类的构造方法。\n\npoint类除了构造方法，还定义了一个tostring方法。注意，定义“类”的方法的时候，前面不需要加上function这个关键字，直接把函数定义放进去了就可以了。另外，方法之间不需要逗号分隔，加了会报错。\n\nes6 的类，完全可以看作构造函数的另一种写法。\n\nclass point {\n  // ...\n}\n\ntypeof point // \"function\"\npoint === point.prototype.constructor // true\n\n\n1\n2\n3\n4\n5\n6\n\n\n上面代码表明，类的数据类型就是函数，类本身就指向构造函数。\n\n使用的时候，也是直接对类使用new命令，跟构造函数的用法完全一致。\n\nclass bar {\n  dostuff() {\n    console.log('stuff');\n  }\n}\n\nvar b = new bar();\nb.dostuff() // \"stuff\"\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n构造函数的prototype属性，在 es6 的“类”上面继续存在。事实上，类的所有方法都定义在类的prototype属性上面。\n\nclass point {\n  constructor() {\n    // ...\n  }\n\n  tostring() {\n    // ...\n  }\n\n  tovalue() {\n    // ...\n  }\n}\n\n// 等同于\n\npoint.prototype = {\n  constructor() {},\n  tostring() {},\n  tovalue() {},\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n\n\n在类的实例上面调用方法，其实就是调用原型上的方法。\n\nclass b {}\nlet b = new b();\n\nb.constructor === b.prototype.constructor // true\n\n\n1\n2\n3\n4\n\n\n上面代码中，b是b类的实例，它的constructor方法就是b类原型的constructor方法。\n\n由于类的方法都定义在prototype对象上面，所以类的新方法可以添加在prototype对象上面。object.assign方法可以很方便地一次向类添加多个方法。\n\nclass point {\n  constructor(){\n    // ...\n  }\n}\n\nobject.assign(point.prototype, {\n  tostring(){},\n  tovalue(){}\n});\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\nprototype对象的constructor属性，直接指向“类”的本身，这与 es5 的行为是一致的。\n\npoint.prototype.constructor === point // true\n\n\n1\n\n\n另外，类的内部所有定义的方法，都是不可枚举的（non-enumerable）。\n\nclass point {\n  constructor(x, y) {\n    // ...\n  }\n\n  tostring() {\n    // ...\n  }\n}\n\nobject.keys(point.prototype)\n// []\nobject.getownpropertynames(point.prototype)\n// [\"constructor\",\"tostring\"]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n上面代码中，tostring方法是point类内部定义的方法，它是不可枚举的。这一点与 es5 的行为不一致。\n\nvar point = function (x, y) {\n  // ...\n};\n\npoint.prototype.tostring = function() {\n  // ...\n};\n\nobject.keys(point.prototype)\n// [\"tostring\"]\nobject.getownpropertynames(point.prototype)\n// [\"constructor\",\"tostring\"]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n上面代码采用 es5 的写法，tostring方法就是可枚举的。\n\n\n# constructor 方法\n\nconstructor方法是类的默认方法，通过new命令生成对象实例时，自动调用该方法。一个类必须有constructor方法，如果没有显式定义，一个空的constructor方法会被默认添加。\n\nclass point {\n}\n\n// 等同于\nclass point {\n  constructor() {}\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n上面代码中，定义了一个空的类point，javascript 引擎会自动为它添加一个空的constructor方法。\n\nconstructor方法默认返回实例对象（即this），完全可以指定返回另外一个对象。\n\nclass foo {\n  constructor() {\n    return object.create(null);\n  }\n}\n\nnew foo() instanceof foo\n// false\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n上面代码中，constructor函数返回一个全新的对象，结果导致实例对象不是foo类的实例。\n\n类必须使用new调用，否则会报错。这是它跟普通构造函数的一个主要区别，后者不用new也可以执行。\n\nclass foo {\n  constructor() {\n    return object.create(null);\n  }\n}\n\nfoo()\n// typeerror: class constructor foo cannot be invoked without 'new'\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# 类的实例\n\n生成类的实例的写法，与 es5 完全一样，也是使用new命令。前面说过，如果忘记加上new，像函数那样调用class，将会报错。\n\nclass point {\n  // ...\n}\n\n// 报错\nvar point = point(2, 3);\n\n// 正确\nvar point = new point(2, 3);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n与 es5 一样，实例的属性除非显式定义在其本身（即定义在this对象上），否则都是定义在原型上（即定义在class上）。\n\n//定义类\nclass point {\n\n  constructor(x, y) { // constructor属性定义在原型上\n    this.x = x; // x属性定义在实例上\n    this.y = y; // y属性定义在实例上\n  }\n\n  tostring() { // tostring属性定义在原型上\n    return '(' + this.x + ', ' + this.y + ')';\n  }\n\n}\n\nvar point = new point(2, 3);\n\npoint.tostring() // (2, 3)\n\npoint.hasownproperty('x') // true\npoint.hasownproperty('y') // true\npoint.hasownproperty('tostring') // false\npoint.__proto__.hasownproperty('tostring') // true\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n\n\n上面代码中，x和y都是实例对象point自身的属性（因为定义在this变量上），所以hasownproperty方法返回true，而tostring是原型对象的属性（因为定义在point类上），所以hasownproperty方法返回false。这些都与 es5 的行为保持一致。\n\n与 es5 一样，类的所有实例共享一个原型对象。\n\nvar p1 = new point(2,3);\nvar p2 = new point(3,2);\n\np1.__proto__ === p2.__proto__\n//true\n\n\n1\n2\n3\n4\n5\n\n\n上面代码中，p1和p2都是point的实例，它们的原型都是point.prototype，所以__proto__属性是相等的。\n\n这也意味着，可以通过实例的__proto__属性为“类”添加方法。\n\n> __proto__ 并不是语言本身的特性，这是各大厂商具体实现时添加的私有属性，虽然目前很多现代浏览器的 js 引擎中都提供了这个私有属性，但依旧不建议在生产中使用该属性，避免对环境产生依赖。生产环境中，我们可以使用 object.getprototypeof 方法来获取实例对象的原型，然后再来为原型添加方法/属性。\n\nvar p1 = new point(2,3);\nvar p2 = new point(3,2);\n\np1.__proto__.printname = function () { return 'oops' };\n\np1.printname() // \"oops\"\np2.printname() // \"oops\"\n\nvar p3 = new point(4,2);\np3.printname() // \"oops\"\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n上面代码在p1的原型上添加了一个printname方法，由于p1的原型就是p2的原型，因此p2也可以调用这个方法。而且，此后新建的实例p3也可以调用这个方法。这意味着，使用实例的__proto__属性改写原型，必须相当谨慎，不推荐使用，因为这会改变“类”的原始定义，影响到所有实例。\n\n\n# 取值函数（getter）和存值函数（setter）\n\n与 es5 一样，在“类”的内部可以使用get和set关键字，对某个属性设置存值函数和取值函数，拦截该属性的存取行为。\n\nclass myclass {\n  constructor() {\n    // ...\n  }\n  get prop() {\n    return 'getter';\n  }\n  set prop(value) {\n    console.log('setter: '+value);\n  }\n}\n\nlet inst = new myclass();\n\ninst.prop = 123;\n// setter: 123\n\ninst.prop\n// 'getter'\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\n上面代码中，prop属性有对应的存值函数和取值函数，因此赋值和读取行为都被自定义了。\n\n存值函数和取值函数是设置在属性的 descriptor 对象上的。\n\nclass customhtmlelement {\n  constructor(element) {\n    this.element = element;\n  }\n\n  get html() {\n    return this.element.innerhtml;\n  }\n\n  set html(value) {\n    this.element.innerhtml = value;\n  }\n}\n\nvar descriptor = object.getownpropertydescriptor(\n  customhtmlelement.prototype, \"html\"\n);\n\n\"get\" in descriptor  // true\n\"set\" in descriptor  // true\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n\n上面代码中，存值函数和取值函数是定义在html属性的描述对象上面，这与 es5 完全一致。\n\n\n# 属性表达式\n\n类的属性名，可以采用表达式。\n\nlet methodname = 'getarea';\n\nclass square {\n  constructor(length) {\n    // ...\n  }\n\n  [methodname]() {\n    // ...\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n上面代码中，square类的方法名getarea，是从表达式得到的。\n\n\n# class 表达式\n\n与函数一样，类也可以使用表达式的形式定义。\n\nconst myclass = class me {\n  getclassname() {\n    return me.name;\n  }\n};\n\n\n1\n2\n3\n4\n5\n\n\n上面代码使用表达式定义了一个类。需要注意的是，这个类的名字是me，但是me只在 class 的内部可用，指代当前类。在 class 外部，这个类只能用myclass引用。\n\nlet inst = new myclass();\ninst.getclassname() // me\nme.name // referenceerror: me is not defined\n\n\n1\n2\n3\n\n\n上面代码表示，me只在 class 内部有定义。\n\n如果类的内部没用到的话，可以省略me，也就是可以写成下面的形式。\n\nconst myclass = class { /* ... */ };\n\n\n1\n\n\n采用 class 表达式，可以写出立即执行的 class。\n\nlet person = new class {\n  constructor(name) {\n    this.name = name;\n  }\n\n  sayname() {\n    console.log(this.name);\n  }\n}('张三');\n\nperson.sayname(); // \"张三\"\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n上面代码中，person是一个立即执行的类的实例。\n\n\n# 注意点\n\n（1）严格模式\n\n类和模块的内部，默认就是严格模式，所以不需要使用use strict指定运行模式。只要你的代码写在类或模块之中，就只有严格模式可用。考虑到未来所有的代码，其实都是运行在模块之中，所以 es6 实际上把整个语言升级到了严格模式。\n\n（2）不存在提升\n\n类不存在变量提升（hoist），这一点与 es5 完全不同。\n\nnew foo(); // referenceerror\nclass foo {}\n\n\n1\n2\n\n\n上面代码中，foo类使用在前，定义在后，这样会报错，因为 es6 不会把类的声明提升到代码头部。这种规定的原因与下文要提到的继承有关，必须保证子类在父类之后定义。\n\n{\n  let foo = class {};\n  class bar extends foo {\n  }\n}\n\n\n1\n2\n3\n4\n5\n\n\n上面的代码不会报错，因为bar继承foo的时候，foo已经有定义了。但是，如果存在class的提升，上面代码就会报错，因为class会被提升到代码头部，而let命令是不提升的，所以导致bar继承foo的时候，foo还没有定义。\n\n（3）name 属性\n\n由于本质上，es6 的类只是 es5 的构造函数的一层包装，所以函数的许多特性都被class继承，包括name属性。\n\nclass point {}\npoint.name // \"point\"\n\n\n1\n2\n\n\nname属性总是返回紧跟在class关键字后面的类名。\n\n（4）generator 方法\n\n如果某个方法之前加上星号（*），就表示该方法是一个 generator 函数。\n\nclass foo {\n  constructor(...args) {\n    this.args = args;\n  }\n  * [symbol.iterator]() {\n    for (let arg of this.args) {\n      yield arg;\n    }\n  }\n}\n\nfor (let x of new foo('hello', 'world')) {\n  console.log(x);\n}\n// hello\n// world\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n上面代码中，foo类的symbol.iterator方法前有一个星号，表示该方法是一个 generator 函数。symbol.iterator方法返回一个foo类的默认遍历器，for...of循环会自动调用这个遍历器。\n\n（5）this 的指向\n\n类的方法内部如果含有this，它默认指向类的实例。但是，必须非常小心，一旦单独使用该方法，很可能报错。\n\nclass logger {\n  printname(name = 'there') {\n    this.print(`hello ${name}`);\n  }\n\n  print(text) {\n    console.log(text);\n  }\n}\n\nconst logger = new logger();\nconst { printname } = logger;\nprintname(); // typeerror: cannot read property 'print' of undefined\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n上面代码中，printname方法中的this，默认指向logger类的实例。但是，如果将这个方法提取出来单独使用，this会指向该方法运行时所在的环境（由于 class 内部是严格模式，所以 this 实际指向的是undefined），从而导致找不到print方法而报错。\n\n一个比较简单的解决方法是，在构造方法中绑定this，这样就不会找不到print方法了。\n\nclass logger {\n  constructor() {\n    this.printname = this.printname.bind(this);\n  }\n\n  // ...\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n另一种解决方法是使用箭头函数。\n\nclass obj {\n  constructor() {\n    this.getthis = () => this;\n  }\n}\n\nconst myobj = new obj();\nmyobj.getthis() === myobj // true\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n箭头函数内部的this总是指向定义时所在的对象。上面代码中，箭头函数位于构造函数内部，它的定义生效的时候，是在构造函数执行的时候。这时，箭头函数所在的运行环境，肯定是实例对象，所以this会总是指向实例对象。\n\n还有一种解决方法是使用proxy，获取方法的时候，自动绑定this。\n\nfunction selfish (target) {\n  const cache = new weakmap();\n  const handler = {\n    get (target, key) {\n      const value = reflect.get(target, key);\n      if (typeof value !== 'function') {\n        return value;\n      }\n      if (!cache.has(value)) {\n        cache.set(value, value.bind(target));\n      }\n      return cache.get(value);\n    }\n  };\n  const proxy = new proxy(target, handler);\n  return proxy;\n}\n\nconst logger = selfish(new logger());\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\n\n# 静态方法\n\n类相当于实例的原型，所有在类中定义的方法，都会被实例继承。如果在一个方法前，加上static关键字，就表示该方法不会被实例继承，而是直接通过类来调用，这就称为“静态方法”。\n\nclass foo {\n  static classmethod() {\n    return 'hello';\n  }\n}\n\nfoo.classmethod() // 'hello'\n\nvar foo = new foo();\nfoo.classmethod()\n// typeerror: foo.classmethod is not a function\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n上面代码中，foo类的classmethod方法前有static关键字，表明该方法是一个静态方法，可以直接在foo类上调用（foo.classmethod()），而不是在foo类的实例上调用。如果在实例上调用静态方法，会抛出一个错误，表示不存在该方法。\n\n注意，如果静态方法包含this关键字，这个this指的是类，而不是实例。\n\nclass foo {\n  static bar() {\n    this.baz();\n  }\n  static baz() {\n    console.log('hello');\n  }\n  baz() {\n    console.log('world');\n  }\n}\n\nfoo.bar() // hello\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n上面代码中，静态方法bar调用了this.baz，这里的this指的是foo类，而不是foo的实例，等同于调用foo.baz。另外，从这个例子还可以看出，静态方法可以与非静态方法重名。\n\n父类的静态方法，可以被子类继承。\n\nclass foo {\n  static classmethod() {\n    return 'hello';\n  }\n}\n\nclass bar extends foo {\n}\n\nbar.classmethod() // 'hello'\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n上面代码中，父类foo有一个静态方法，子类bar可以调用这个方法。\n\n静态方法也是可以从super对象上调用的。\n\nclass foo {\n  static classmethod() {\n    return 'hello';\n  }\n}\n\nclass bar extends foo {\n  static classmethod() {\n    return super.classmethod() + ', too';\n  }\n}\n\nbar.classmethod() // \"hello, too\"\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n\n# 实例属性的新写法\n\n实例属性除了定义在constructor()方法里面的this上面，也可以定义在类的最顶层。\n\nclass increasingcounter {\n  constructor() {\n    this._count = 0;\n  }\n  get value() {\n    console.log('getting the current value!');\n    return this._count;\n  }\n  increment() {\n    this._count++;\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n上面代码中，实例属性this._count定义在constructor()方法里面。另一种写法是，这个属性也可以定义在类的最顶层，其他都不变。\n\nclass increasingcounter {\n  _count = 0;\n  get value() {\n    console.log('getting the current value!');\n    return this._count;\n  }\n  increment() {\n    this._count++;\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n上面代码中，实例属性_count与取值函数value()和increment()方法，处于同一个层级。这时，不需要在实例属性前面加上this。\n\n这种新写法的好处是，所有实例对象自身的属性都定义在类的头部，看上去比较整齐，一眼就能看出这个类有哪些实例属性。\n\nclass foo {\n  bar = 'hello';\n  baz = 'world';\n\n  constructor() {\n    // ...\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n上面的代码，一眼就能看出，foo类有两个实例属性，一目了然。另外，写起来也比较简洁。\n\n\n# 静态属性\n\n静态属性指的是 class 本身的属性，即class.propname，而不是定义在实例对象（this）上的属性。\n\nclass foo {\n}\n\nfoo.prop = 1;\nfoo.prop // 1\n\n\n1\n2\n3\n4\n5\n\n\n上面的写法为foo类定义了一个静态属性prop。\n\n目前，只有这种写法可行，因为 es6 明确规定，class 内部只有静态方法，没有静态属性。现在有一个提案提供了类的静态属性，写法是在实例属性的前面，加上static关键字。\n\nclass myclass {\n  static mystaticprop = 42;\n\n  constructor() {\n    console.log(myclass.mystaticprop); // 42\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n这个新写法大大方便了静态属性的表达。\n\n// 老写法\nclass foo {\n  // ...\n}\nfoo.prop = 1;\n\n// 新写法\nclass foo {\n  static prop = 1;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n上面代码中，老写法的静态属性定义在类的外部。整个类生成以后，再生成静态属性。这样让人很容易忽略这个静态属性，也不符合相关代码应该放在一起的代码组织原则。另外，新写法是显式声明（declarative），而不是赋值处理，语义更好。\n\n\n# 私有方法和私有属性\n\n\n# 现有的解决方案\n\n私有方法和私有属性，是只能在类的内部访问的方法和属性，外部不能访问。这是常见需求，有利于代码的封装，但 es6 不提供，只能通过变通方法模拟实现。\n\n一种做法是在命名上加以区别。\n\nclass widget {\n\n  // 公有方法\n  foo (baz) {\n    this._bar(baz);\n  }\n\n  // 私有方法\n  _bar(baz) {\n    return this.snaf = baz;\n  }\n\n  // ...\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n上面代码中，_bar方法前面的下划线，表示这是一个只限于内部使用的私有方法。但是，这种命名是不保险的，在类的外部，还是可以调用到这个方法。\n\n另一种方法就是索性将私有方法移出模块，因为模块内部的所有方法都是对外可见的。\n\nclass widget {\n  foo (baz) {\n    bar.call(this, baz);\n  }\n\n  // ...\n}\n\nfunction bar(baz) {\n  return this.snaf = baz;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n上面代码中，foo是公开方法，内部调用了bar.call(this, baz)。这使得bar实际上成为了当前模块的私有方法。\n\n还有一种方法是利用symbol值的唯一性，将私有方法的名字命名为一个symbol值。\n\nconst bar = symbol('bar');\nconst snaf = symbol('snaf');\n\nexport default class myclass{\n\n  // 公有方法\n  foo(baz) {\n    this[bar](baz);\n  }\n\n  // 私有方法\n  [bar](baz) {\n    return this[snaf] = baz;\n  }\n\n  // ...\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n上面代码中，bar和snaf都是symbol值，一般情况下无法获取到它们，因此达到了私有方法和私有属性的效果。但是也不是绝对不行，reflect.ownkeys()依然可以拿到它们。\n\nconst inst = new myclass();\n\nreflect.ownkeys(myclass.prototype)\n// [ 'constructor', 'foo', symbol(bar) ]\n\n\n1\n2\n3\n4\n\n\n上面代码中，symbol 值的属性名依然可以从类的外部拿到。\n\n\n# 私有属性的提案\n\n目前，有一个提案，为class加了私有属性。方法是在属性名之前，使用#表示。\n\nclass increasingcounter {\n  #count = 0;\n  get value() {\n    console.log('getting the current value!');\n    return this.#count;\n  }\n  increment() {\n    this.#count++;\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n上面代码中，#count就是私有属性，只能在类的内部使用（this.#count）。如果在类的外部使用，就会报错。\n\nconst counter = new increasingcounter();\ncounter.#count // 报错\ncounter.#count = 42 // 报错\n\n\n1\n2\n3\n\n\n上面代码在类的外部，读取私有属性，就会报错。\n\n下面是另一个例子。\n\nclass point {\n  #x;\n\n  constructor(x = 0) {\n    this.#x = +x;\n  }\n\n  get x() {\n    return this.#x;\n  }\n\n  set x(value) {\n    this.#x = +value;\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n上面代码中，#x就是私有属性，在point类之外是读取不到这个属性的。由于井号#是属性名的一部分，使用时必须带有#一起使用，所以#x和x是两个不同的属性。\n\n之所以要引入一个新的前缀#表示私有属性，而没有采用private关键字，是因为 javascript 是一门动态语言，没有类型声明，使用独立的符号似乎是唯一的比较方便可靠的方法，能够准确地区分一种属性是否为私有属性。另外，ruby 语言使用@表示私有属性，es6 没有用这个符号而使用#，是因为@已经被留给了 decorator。\n\n这种写法不仅可以写私有属性，还可以用来写私有方法。\n\nclass foo {\n  #a;\n  #b;\n  constructor(a, b) {\n    this.#a = a;\n    this.#b = b;\n  }\n  #sum() {\n    return #a + #b;\n  }\n  printsum() {\n    console.log(this.#sum());\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n上面代码中，#sum()就是一个私有方法。\n\n另外，私有属性也可以设置 getter 和 setter 方法。\n\nclass counter {\n  #xvalue = 0;\n\n  constructor() {\n    super();\n    // ...\n  }\n\n  get #x() { return #xvalue; }\n  set #x(value) {\n    this.#xvalue = value;\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n上面代码中，#x是一个私有属性，它的读写都通过get #x()和set #x()来完成。\n\n私有属性不限于从this引用，只要是在类的内部，实例也可以引用私有属性。\n\nclass foo {\n  #privatevalue = 42;\n  static getprivatevalue(foo) {\n    return foo.#privatevalue;\n  }\n}\n\nfoo.getprivatevalue(new foo()); // 42\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n上面代码允许从实例foo上面引用私有属性。\n\n私有属性和私有方法前面，也可以加上static关键字，表示这是一个静态的私有属性或私有方法。\n\nclass fakemath {\n  static pi = 22 / 7;\n  static #totallyrandomnumber = 4;\n\n  static #computerandomnumber() {\n    return fakemath.#totallyrandomnumber;\n  }\n\n  static random() {\n    console.log('i heard you like random numbers…')\n    return fakemath.#computerandomnumber();\n  }\n}\n\nfakemath.pi // 3.142857142857143\nfakemath.random()\n// i heard you like random numbers…\n// 4\nfakemath.#totallyrandomnumber // 报错\nfakemath.#computerandomnumber() // 报错\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n\n上面代码中，#totallyrandomnumber是私有属性，#computerandomnumber()是私有方法，只能在fakemath这个类的内部调用，外部调用就会报错。\n\n\n# new.target 属性\n\nnew是从构造函数生成实例对象的命令。es6 为new命令引入了一个new.target属性，该属性一般用在构造函数之中，返回new命令作用于的那个构造函数。如果构造函数不是通过new命令或reflect.construct()调用的，new.target会返回undefined，因此这个属性可以用来确定构造函数是怎么调用的。\n\nfunction person(name) {\n  if (new.target !== undefined) {\n    this.name = name;\n  } else {\n    throw new error('必须使用 new 命令生成实例');\n  }\n}\n\n// 另一种写法\nfunction person(name) {\n  if (new.target === person) {\n    this.name = name;\n  } else {\n    throw new error('必须使用 new 命令生成实例');\n  }\n}\n\nvar person = new person('张三'); // 正确\nvar notaperson = person.call(person, '张三');  // 报错\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\n上面代码确保构造函数只能通过new命令调用。\n\nclass 内部调用new.target，返回当前 class。\n\nclass rectangle {\n  constructor(length, width) {\n    console.log(new.target === rectangle);\n    this.length = length;\n    this.width = width;\n  }\n}\n\nvar obj = new rectangle(3, 4); // 输出 true\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n需要注意的是，子类继承父类时，new.target会返回子类。\n\nclass rectangle {\n  constructor(length, width) {\n    console.log(new.target === rectangle);\n    // ...\n  }\n}\n\nclass square extends rectangle {\n  constructor(length) {\n    super(length, width);\n  }\n}\n\nvar obj = new square(3); // 输出 false\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n上面代码中，new.target会返回子类。\n\n利用这个特点，可以写出不能独立使用、必须继承后才能使用的类。\n\nclass shape {\n  constructor() {\n    if (new.target === shape) {\n      throw new error('本类不能实例化');\n    }\n  }\n}\n\nclass rectangle extends shape {\n  constructor(length, width) {\n    super();\n    // ...\n  }\n}\n\nvar x = new shape();  // 报错\nvar y = new rectangle(3, 4);  // 正确\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n上面代码中，shape类不能被实例化，只能用于继承。\n\n注意，在函数外部，使用new.target会报错。",charsets:{cjk:!0}},{title:"Module 的加载实现",frontmatter:{title:"Module 的加载实现",date:"2020-02-09T16:00:29.000Z",permalink:"/pages/a79ca2e64ceae213",author:"阮一峰",categories:["《ES6 教程》笔记"],tags:["ES6"],readingShow:"top"},regularPath:"/06.%E4%B9%A6%E7%B1%8D/05.%E3%80%8AES6%20%E6%95%99%E7%A8%8B%E3%80%8B%E7%AC%94%E8%AE%B0/24.Module%20%E7%9A%84%E5%8A%A0%E8%BD%BD%E5%AE%9E%E7%8E%B0.html",relativePath:"06.书籍/05.《ES6 教程》笔记/24.Module 的加载实现.md",key:"v-347afce6",path:"/pages/a79ca2e64ceae213/",headers:[{level:2,title:"浏览器加载",slug:"浏览器加载",normalizedTitle:"浏览器加载",charIndex:90},{level:3,title:"传统方法",slug:"传统方法",normalizedTitle:"传统方法",charIndex:100},{level:3,title:"加载规则",slug:"加载规则",normalizedTitle:"加载规则",charIndex:990},{level:2,title:"ES6 模块与 CommonJS 模块的差异",slug:"es6-模块与-commonjs-模块的差异",normalizedTitle:"es6 模块与 commonjs 模块的差异",charIndex:2460},{level:2,title:"Node.js 加载",slug:"node-js-加载",normalizedTitle:"node.js 加载",charIndex:2487},{level:3,title:"概述",slug:"概述",normalizedTitle:"概述",charIndex:5283},{level:3,title:"main 字段",slug:"main-字段",normalizedTitle:"main 字段",charIndex:6048},{level:3,title:"exports 字段",slug:"exports-字段",normalizedTitle:"exports 字段",charIndex:6676},{level:3,title:"ES6 模块加载 CommonJS 模块",slug:"es6-模块加载-commonjs-模块",normalizedTitle:"es6 模块加载 commonjs 模块",charIndex:8575},{level:3,title:"CommonJS 模块加载 ES6 模块",slug:"commonjs-模块加载-es6-模块",normalizedTitle:"commonjs 模块加载 es6 模块",charIndex:9699},{level:3,title:"Node.js 的内置模块",slug:"node-js-的内置模块",normalizedTitle:"node.js 的内置模块",charIndex:9868},{level:3,title:"加载路径",slug:"加载路径",normalizedTitle:"加载路径",charIndex:10193},{level:3,title:"内部变量",slug:"内部变量",normalizedTitle:"内部变量",charIndex:2982},{level:2,title:"循环加载",slug:"循环加载",normalizedTitle:"循环加载",charIndex:79},{level:3,title:"CommonJS 模块的加载原理",slug:"commonjs-模块的加载原理",normalizedTitle:"commonjs 模块的加载原理",charIndex:11337},{level:3,title:"CommonJS 模块的循环加载",slug:"commonjs-模块的循环加载",normalizedTitle:"commonjs 模块的循环加载",charIndex:11795},{level:3,title:"ES6 模块的循环加载",slug:"es6-模块的循环加载",normalizedTitle:"es6 模块的循环加载",charIndex:13477}],excerpt:'<h1 id="module-的加载实现"><a class="header-anchor" href="#module-的加载实现">#</a> Module 的加载实现</h1>\n<p>上一章介绍了模块的语法，本章介绍如何在浏览器和 Node.js 之中加载 ES6 模块，以及实际开发中经常遇到的一些问题（比如循环加载）。</p>\n',lastUpdated:"2022/9/22 下午4:28:09",lastUpdatedTimestamp:1663835289e3,headersStr:"浏览器加载 传统方法 加载规则 ES6 模块与 CommonJS 模块的差异 Node.js 加载 概述 main 字段 exports 字段 ES6 模块加载 CommonJS 模块 CommonJS 模块加载 ES6 模块 Node.js 的内置模块 加载路径 内部变量 循环加载 CommonJS 模块的加载原理 CommonJS 模块的循环加载 ES6 模块的循环加载",content:'# Module 的加载实现\n\n上一章介绍了模块的语法，本章介绍如何在浏览器和 Node.js 之中加载 ES6 模块，以及实际开发中经常遇到的一些问题（比如循环加载）。\n\n\n# 浏览器加载\n\n\n# 传统方法\n\nHTML 网页中，浏览器通过<script>标签加载 JavaScript 脚本。\n\n\x3c!-- 页面内嵌的脚本 --\x3e\n<script type="application/javascript">\n  // module code\n<\/script>\n\n\x3c!-- 外部脚本 --\x3e\n<script type="application/javascript" src="path/to/myModule.js">\n<\/script>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n上面代码中，由于浏览器脚本的默认语言是 JavaScript，因此type="application/javascript"可以省略。\n\n默认情况下，浏览器是同步加载 JavaScript 脚本，即渲染引擎遇到<script>标签就会停下来，等到执行完脚本，再继续向下渲染。如果是外部脚本，还必须加入脚本下载的时间。\n\n如果脚本体积很大，下载和执行的时间就会很长，因此造成浏览器堵塞，用户会感觉到浏览器“卡死”了，没有任何响应。这显然是很不好的体验，所以浏览器允许脚本异步加载，下面就是两种异步加载的语法。\n\n<script src="path/to/myModule.js" defer><\/script>\n<script src="path/to/myModule.js" async><\/script>\n\n\n1\n2\n\n\n上面代码中，<script>标签打开defer或async属性，脚本就会异步加载。渲染引擎遇到这一行命令，就会开始下载外部脚本，但不会等它下载和执行，而是直接执行后面的命令。\n\ndefer与async的区别是：defer要等到整个页面在内存中正常渲染结束（DOM 结构完全生成，以及其他脚本执行完成），才会执行；async一旦下载完，渲染引擎就会中断渲染，执行这个脚本以后，再继续渲染。一句话，defer是“渲染完再执行”，async是“下载完就执行”。另外，如果有多个defer脚本，会按照它们在页面出现的顺序加载，而多个async脚本是不能保证加载顺序的。\n\n\n# 加载规则\n\n浏览器加载 ES6 模块，也使用<script>标签，但是要加入type="module"属性。\n\n<script type="module" src="./foo.js"><\/script>\n\n\n1\n\n\n上面代码在网页中插入一个模块foo.js，由于type属性设为module，所以浏览器知道这是一个 ES6 模块。\n\n浏览器对于带有type="module"的<script>，都是异步加载，不会造成堵塞浏览器，即等到整个页面渲染完，再执行模块脚本，等同于打开了<script>标签的defer属性。\n\n<script type="module" src="./foo.js"><\/script>\n\x3c!-- 等同于 --\x3e\n<script type="module" src="./foo.js" defer><\/script>\n\n\n1\n2\n3\n\n\n如果网页有多个<script type="module">，它们会按照在页面出现的顺序依次执行。\n\n<script>标签的async属性也可以打开，这时只要加载完成，渲染引擎就会中断渲染立即执行。执行完成后，再恢复渲染。\n\n<script type="module" src="./foo.js" async><\/script>\n\n\n1\n\n\n一旦使用了async属性，<script type="module">就不会按照在页面出现的顺序执行，而是只要该模块加载完成，就执行该模块。\n\nES6 模块也允许内嵌在网页中，语法行为与加载外部脚本完全一致。\n\n<script type="module">\n  import utils from "./utils.js";\n\n  // other code\n<\/script>\n\n\n1\n2\n3\n4\n5\n\n\n举例来说，jQuery 就支持模块加载。\n\n<script type="module">\n  import $ from "./jquery/src/jquery.js";\n  $(\'#message\').text(\'Hi from jQuery!\');\n<\/script>\n\n\n1\n2\n3\n4\n\n\n对于外部的模块脚本（上例是foo.js），有几点需要注意。\n\n * 代码是在模块作用域之中运行，而不是在全局作用域运行。模块内部的顶层变量，外部不可见。\n * 模块脚本自动采用严格模式，不管有没有声明use strict。\n * 模块之中，可以使用import命令加载其他模块（.js后缀不可省略，需要提供绝对 URL 或相对 URL），也可以使用export命令输出对外接口。\n * 模块之中，顶层的this关键字返回undefined，而不是指向window。也就是说，在模块顶层使用this关键字，是无意义的。\n * 同一个模块如果加载多次，将只执行一次。\n\n下面是一个示例模块。\n\nimport utils from \'https://example.com/js/utils.js\';\n\nconst x = 1;\n\nconsole.log(x === window.x); //false\nconsole.log(this === undefined); // true\n\n\n1\n2\n3\n4\n5\n6\n\n\n利用顶层的this等于undefined这个语法点，可以侦测当前代码是否在 ES6 模块之中。\n\nconst isNotModuleScript = this !== undefined;\n\n\n1\n\n\n\n# ES6 模块与 CommonJS 模块的差异\n\n讨论 Node.js 加载 ES6 模块之前，必须了解 ES6 模块与 CommonJS 模块完全不同。\n\n它们有两个重大差异。\n\n * CommonJS 模块输出的是一个值的拷贝，ES6 模块输出的是值的引用。\n * CommonJS 模块是运行时加载，ES6 模块是编译时输出接口。\n\n第二个差异是因为 CommonJS 加载的是一个对象（即module.exports属性），该对象只有在脚本运行完才会生成。而 ES6 模块不是对象，它的对外接口只是一种静态定义，在代码静态解析阶段就会生成。\n\n下面重点解释第一个差异。\n\nCommonJS 模块输出的是值的拷贝，也就是说，一旦输出一个值，模块内部的变化就影响不到这个值。请看下面这个模块文件lib.js的例子。\n\n// lib.js\nvar counter = 3;\nfunction incCounter() {\n  counter++;\n}\nmodule.exports = {\n  counter: counter,\n  incCounter: incCounter,\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n上面代码输出内部变量counter和改写这个变量的内部方法incCounter。然后，在main.js里面加载这个模块。\n\n// main.js\nvar mod = require(\'./lib\');\n\nconsole.log(mod.counter);  // 3\nmod.incCounter();\nconsole.log(mod.counter); // 3\n\n\n1\n2\n3\n4\n5\n6\n\n\n上面代码说明，lib.js模块加载以后，它的内部变化就影响不到输出的mod.counter了。这是因为mod.counter是一个原始类型的值，会被缓存。除非写成一个函数，才能得到内部变动后的值。\n\n// lib.js\nvar counter = 3;\nfunction incCounter() {\n  counter++;\n}\nmodule.exports = {\n  get counter() {\n    return counter\n  },\n  incCounter: incCounter,\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n上面代码中，输出的counter属性实际上是一个取值器函数。现在再执行main.js，就可以正确读取内部变量counter的变动了。\n\n$ node main.js\n3\n4\n\n\n1\n2\n3\n\n\nES6 模块的运行机制与 CommonJS 不一样。JS 引擎对脚本静态分析的时候，遇到模块加载命令import，就会生成一个只读引用。等到脚本真正执行时，再根据这个只读引用，到被加载的那个模块里面去取值。换句话说，ES6 的import有点像 Unix 系统的“符号连接”，原始值变了，import加载的值也会跟着变。因此，ES6 模块是动态引用，并且不会缓存值，模块里面的变量绑定其所在的模块。\n\n还是举上面的例子。\n\n// lib.js\nexport let counter = 3;\nexport function incCounter() {\n  counter++;\n}\n\n// main.js\nimport { counter, incCounter } from \'./lib\';\nconsole.log(counter); // 3\nincCounter();\nconsole.log(counter); // 4\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n上面代码说明，ES6 模块输入的变量counter是活的，完全反应其所在模块lib.js内部的变化。\n\n再举一个出现在export一节中的例子。\n\n// m1.js\nexport var foo = \'bar\';\nsetTimeout(() => foo = \'baz\', 500);\n\n// m2.js\nimport {foo} from \'./m1.js\';\nconsole.log(foo);\nsetTimeout(() => console.log(foo), 500);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n上面代码中，m1.js的变量foo，在刚加载时等于bar，过了 500 毫秒，又变为等于baz。\n\n让我们看看，m2.js能否正确读取这个变化。\n\n$ babel-node m2.js\n\nbar\nbaz\n\n\n1\n2\n3\n4\n\n\n上面代码表明，ES6 模块不会缓存运行结果，而是动态地去被加载的模块取值，并且变量总是绑定其所在的模块。\n\n由于 ES6 输入的模块变量，只是一个“符号连接”，所以这个变量是只读的，对它进行重新赋值会报错。\n\n// lib.js\nexport let obj = {};\n\n// main.js\nimport { obj } from \'./lib\';\n\nobj.prop = 123; // OK\nobj = {}; // TypeError\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n上面代码中，main.js从lib.js输入变量obj，可以对obj添加属性，但是重新赋值就会报错。因为变量obj指向的地址是只读的，不能重新赋值，这就好比main.js创造了一个名为obj的const变量。\n\n最后，export通过接口，输出的是同一个值。不同的脚本加载这个接口，得到的都是同样的实例。\n\n// mod.js\nfunction C() {\n  this.sum = 0;\n  this.add = function () {\n    this.sum += 1;\n  };\n  this.show = function () {\n    console.log(this.sum);\n  };\n}\n\nexport let c = new C();\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n上面的脚本mod.js，输出的是一个C的实例。不同的脚本加载这个模块，得到的都是同一个实例。\n\n// x.js\nimport {c} from \'./mod\';\nc.add();\n\n// y.js\nimport {c} from \'./mod\';\nc.show();\n\n// main.js\nimport \'./x\';\nimport \'./y\';\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n现在执行main.js，输出的是1。\n\n$ babel-node main.js\n1\n\n\n1\n2\n\n\n这就证明了x.js和y.js加载的都是C的同一个实例。\n\n\n# Node.js 加载\n\n\n# 概述\n\nNode.js 对 ES6 模块的处理比较麻烦，因为它有自己的 CommonJS 模块格式，与 ES6 模块格式是不兼容的。目前的解决方案是，将两者分开，ES6 模块和 CommonJS 采用各自的加载方案。从 v13.2 版本开始，Node.js 已经默认打开了 ES6 模块支持。\n\nNode.js 要求 ES6 模块采用.mjs后缀文件名。也就是说，只要脚本文件里面使用import或者export命令，那么就必须采用.mjs后缀名。Node.js 遇到.mjs文件，就认为它是 ES6 模块，默认启用严格模式，不必在每个模块文件顶部指定"use strict"。\n\n如果不希望将后缀名改成.mjs，可以在项目的package.json文件中，指定type字段为module。\n\n{\n   "type": "module"\n}\n\n\n1\n2\n3\n\n\n一旦设置了以后，该目录里面的 JS 脚本，就被解释用 ES6 模块。\n\n# 解释成 ES6 模块\n$ node my-app.js\n\n\n1\n2\n\n\n如果这时还要使用 CommonJS 模块，那么需要将 CommonJS 脚本的后缀名都改成.cjs。如果没有type字段，或者type字段为commonjs，则.js脚本会被解释成 CommonJS 模块。\n\n总结为一句话：.mjs文件总是以 ES6 模块加载，.cjs文件总是以 CommonJS 模块加载，.js文件的加载取决于package.json里面type字段的设置。\n\n注意，ES6 模块与 CommonJS 模块尽量不要混用。require命令不能加载.mjs文件，会报错，只有import命令才可以加载.mjs文件。反过来，.mjs文件里面也不能使用require命令，必须使用import。\n\n\n# main 字段\n\npackage.json文件有两个字段可以指定模块的入口文件：main和exports。比较简单的模块，可以只使用main字段，指定模块加载的入口文件。\n\n// ./node_modules/es-module-package/package.json\n{\n  "type": "module",\n  "main": "./src/index.js"\n}\n\n\n1\n2\n3\n4\n5\n\n\n上面代码指定项目的入口脚本为./src/index.js，它的格式为 ES6 模块。如果没有type字段，index.js就会被解释为 CommonJS 模块。\n\n然后，import命令就可以加载这个模块。\n\n// ./my-app.mjs\n\nimport { something } from \'es-module-package\';\n// 实际加载的是 ./node_modules/es-module-package/src/index.js\n\n\n1\n2\n3\n4\n\n\n上面代码中，运行该脚本以后，Node.js 就会到./node_modules目录下面，寻找es-module-package模块，然后根据该模块package.json的main字段去执行入口文件。\n\n这时，如果用 CommonJS 模块的require()命令去加载es-module-package模块会报错，因为 CommonJS 模块不能处理export命令。\n\n\n# exports 字段\n\nexports字段的优先级高于main字段。它有多种用法。\n\n（1）子目录别名\n\npackage.json文件的exports字段可以指定脚本或子目录的别名。\n\n// ./node_modules/es-module-package/package.json\n{\n  "exports": {\n    "./submodule": "./src/submodule.js"\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n\n\n上面的代码指定src/submodule.js别名为submodule，然后就可以从别名加载这个文件。\n\nimport submodule from \'es-module-package/submodule\';\n// 加载 ./node_modules/es-module-package/src/submodule.js\n\n\n1\n2\n\n\n下面是子目录别名的例子。\n\n// ./node_modules/es-module-package/package.json\n{\n  "exports": {\n    "./features/": "./src/features/"\n  }\n}\n\nimport feature from \'es-module-package/features/x.js\';\n// 加载 ./node_modules/es-module-package/src/features/x.js\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n如果没有指定别名，就不能用“模块+脚本名”这种形式加载脚本。\n\n// 报错\nimport submodule from \'es-module-package/private-module.js\';\n\n// 不报错\nimport submodule from \'./node_modules/es-module-package/private-module.js\';\n\n\n1\n2\n3\n4\n5\n\n\n（2）main 的别名\n\nexports字段的别名如果是.，就代表模块的主入口，优先级高于main字段，并且可以直接简写成exports字段的值。\n\n{\n  "exports": {\n    ".": "./main.js"\n  }\n}\n\n// 等同于\n{\n  "exports": "./main.js"\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n由于exports字段只有支持 ES6 的 Node.js 才认识，所以可以用来兼容旧版本的 Node.js。\n\n{\n  "main": "./main-legacy.cjs",\n  "exports": {\n    ".": "./main-modern.cjs"\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n\n\n上面代码中，老版本的 Node.js （不支持 ES6 模块）的入口文件是main-legacy.cjs，新版本的 Node.js 的入口文件是main-modern.cjs。\n\n（3）条件加载\n\n利用.这个别名，可以为 ES6 模块和 CommonJS 指定不同的入口。目前，这个功能需要在 Node.js 运行的时候，打开--experimental-conditional-exports标志。\n\n{\n  "type": "module",\n  "exports": {\n    ".": {\n      "require": "./main.cjs",\n      "default": "./main.js"\n    }\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n上面代码中，别名.的require条件指定require()命令的入口文件（即 CommonJS 的入口），default条件指定其他情况的入口（即 ES6 的入口）。\n\n上面的写法可以简写如下。\n\n{\n  "exports": {\n    "require": "./main.cjs",\n    "default": "./main.js"\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n\n\n注意，如果同时还有其他别名，就不能采用简写，否则或报错。\n\n{\n  // 报错\n  "exports": {\n    "./feature": "./lib/feature.js",\n    "require": "./main.cjs",\n    "default": "./main.js"\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# ES6 模块加载 CommonJS 模块\n\n目前，一个模块同时支持 ES6 和 CommonJS 两种格式的常见方法是，package.json文件的main字段指定 CommonJS 入口，给 Node.js 使用；module字段指定 ES6 模块入口，给打包工具使用，因为 Node.js 不认识module字段。\n\n有了上一节的条件加载以后，Node.js 本身就可以同时处理两种模块。\n\n// ./node_modules/pkg/package.json\n{\n  "type": "module",\n  "main": "./index.cjs",\n  "exports": {\n    "require": "./index.cjs",\n    "default": "./wrapper.mjs"\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n上面代码指定了 CommonJS 入口文件index.cjs，下面是这个文件的代码。\n\n// ./node_modules/pkg/index.cjs\nexports.name = \'value\';\n\n\n1\n2\n\n\n然后，ES6 模块可以加载这个文件。\n\n// ./node_modules/pkg/wrapper.mjs\nimport cjsModule from \'./index.cjs\';\nexport const name = cjsModule.name;\n\n\n1\n2\n3\n\n\n注意，import命令加载 CommonJS 模块，只能整体加载，不能只加载单一的输出项。\n\n// 正确\nimport packageMain from \'commonjs-package\';\n\n// 报错\nimport { method } from \'commonjs-package\';\n\n\n1\n2\n3\n4\n5\n\n\n还有一种变通的加载方法，就是使用 Node.js 内置的module.createRequire()方法。\n\n// cjs.cjs\nmodule.exports = \'cjs\';\n\n// esm.mjs\nimport { createRequire } from \'module\';\n\nconst require = createRequire(import.meta.url);\n\nconst cjs = require(\'./cjs.cjs\');\ncjs === \'cjs\'; // true\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n上面代码中，ES6 模块通过module.createRequire()方法可以加载 CommonJS 模块\n\n\n# CommonJS 模块加载 ES6 模块\n\nCommonJS 的require命令不能加载 ES6 模块，会报错，只能使用import()这个方法加载。\n\n(async () => {\n  await import(\'./my-app.mjs\');\n})();\n\n\n1\n2\n3\n\n\n上面代码可以在 CommonJS 模块中运行。\n\n\n# Node.js 的内置模块\n\nNode.js 的内置模块可以整体加载，也可以加载指定的输出项。\n\n// 整体加载\nimport EventEmitter from \'events\';\nconst e = new EventEmitter();\n\n// 加载指定的输出项\nimport { readFile } from \'fs\';\nreadFile(\'./foo.txt\', (err, source) => {\n  if (err) {\n    console.error(err);\n  } else {\n    console.log(source);\n  }\n});\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n\n# 加载路径\n\nES6 模块的加载路径必须给出脚本的完整路径，不能省略脚本的后缀名。import命令和package.json文件的main字段如果省略脚本的后缀名，会报错。\n\n// ES6 模块中将报错\nimport { something } from \'./index\';\n\n\n1\n2\n\n\n为了与浏览器的import加载规则相同，Node.js 的.mjs文件支持 URL 路径。\n\nimport \'./foo.mjs?query=1\'; // 加载 ./foo 传入参数 ?query=1\n\n\n1\n\n\n上面代码中，脚本路径带有参数?query=1，Node 会按 URL 规则解读。同一个脚本只要参数不同，就会被加载多次，并且保存成不同的缓存。由于这个原因，只要文件名中含有:、%、#、?等特殊字符，最好对这些字符进行转义。\n\n目前，Node.js 的import命令只支持加载本地模块（file:协议）和data:协议，不支持加载远程模块。另外，脚本路径只支持相对路径，不支持绝对路径（即以/或//开头的路径）。\n\n最后，Node 的import命令是异步加载，这一点与浏览器的处理方法相同。\n\n\n# 内部变量\n\nES6 模块应该是通用的，同一个模块不用修改，就可以用在浏览器环境和服务器环境。为了达到这个目标，Node 规定 ES6 模块之中不能使用 CommonJS 模块的特有的一些内部变量。\n\n首先，就是this关键字。ES6 模块之中，顶层的this指向undefined；CommonJS 模块的顶层this指向当前模块，这是两者的一个重大差异。\n\n其次，以下这些顶层变量在 ES6 模块之中都是不存在的。\n\n * arguments\n * require\n * module\n * exports\n * __filename\n * __dirname\n\n\n# 循环加载\n\n“循环加载”（circular dependency）指的是，a脚本的执行依赖b脚本，而b脚本的执行又依赖a脚本。\n\n// a.js\nvar b = require(\'b\');\n\n// b.js\nvar a = require(\'a\');\n\n\n1\n2\n3\n4\n5\n\n\n通常，“循环加载”表示存在强耦合，如果处理不好，还可能导致递归加载，使得程序无法执行，因此应该避免出现。\n\n但是实际上，这是很难避免的，尤其是依赖关系复杂的大项目，很容易出现a依赖b，b依赖c，c又依赖a这样的情况。这意味着，模块加载机制必须考虑“循环加载”的情况。\n\n对于 JavaScript 语言来说，目前最常见的两种模块格式 CommonJS 和 ES6，处理“循环加载”的方法是不一样的，返回的结果也不一样。\n\n\n# CommonJS 模块的加载原理\n\n介绍 ES6 如何处理“循环加载”之前，先介绍目前最流行的 CommonJS 模块格式的加载原理。\n\nCommonJS 的一个模块，就是一个脚本文件。require命令第一次加载该脚本，就会执行整个脚本，然后在内存生成一个对象。\n\n{\n  id: \'...\',\n  exports: { ... },\n  loaded: true,\n  ...\n}\n\n\n1\n2\n3\n4\n5\n6\n\n\n上面代码就是 Node 内部加载模块后生成的一个对象。该对象的id属性是模块名，exports属性是模块输出的各个接口，loaded属性是一个布尔值，表示该模块的脚本是否执行完毕。其他还有很多属性，这里都省略了。\n\n以后需要用到这个模块的时候，就会到exports属性上面取值。即使再次执行require命令，也不会再次执行该模块，而是到缓存之中取值。也就是说，CommonJS 模块无论加载多少次，都只会在第一次加载时运行一次，以后再加载，就返回第一次运行的结果，除非手动清除系统缓存。\n\n\n# CommonJS 模块的循环加载\n\nCommonJS 模块的重要特性是加载时执行，即脚本代码在require的时候，就会全部执行。一旦出现某个模块被"循环加载"，就只输出已经执行的部分，还未执行的部分不会输出。\n\n让我们来看，Node 官方文档里面的例子。脚本文件a.js代码如下。\n\nexports.done = false;\nvar b = require(\'./b.js\');\nconsole.log(\'在 a.js 之中，b.done = %j\', b.done);\nexports.done = true;\nconsole.log(\'a.js 执行完毕\');\n\n\n1\n2\n3\n4\n5\n\n\n上面代码之中，a.js脚本先输出一个done变量，然后加载另一个脚本文件b.js。注意，此时a.js代码就停在这里，等待b.js执行完毕，再往下执行。\n\n再看b.js的代码。\n\nexports.done = false;\nvar a = require(\'./a.js\');\nconsole.log(\'在 b.js 之中，a.done = %j\', a.done);\nexports.done = true;\nconsole.log(\'b.js 执行完毕\');\n\n\n1\n2\n3\n4\n5\n\n\n上面代码之中，b.js执行到第二行，就会去加载a.js，这时，就发生了“循环加载”。系统会去a.js模块对应对象的exports属性取值，可是因为a.js还没有执行完，从exports属性只能取回已经执行的部分，而不是最后的值。\n\na.js已经执行的部分，只有一行。\n\nexports.done = false;\n\n\n1\n\n\n因此，对于b.js来说，它从a.js只输入一个变量done，值为false。\n\n然后，b.js接着往下执行，等到全部执行完毕，再把执行权交还给a.js。于是，a.js接着往下执行，直到执行完毕。我们写一个脚本main.js，验证这个过程。\n\nvar a = require(\'./a.js\');\nvar b = require(\'./b.js\');\nconsole.log(\'在 main.js 之中, a.done=%j, b.done=%j\', a.done, b.done);\n\n\n1\n2\n3\n\n\n执行main.js，运行结果如下。\n\n$ node main.js\n\n在 b.js 之中，a.done = false\nb.js 执行完毕\n在 a.js 之中，b.done = true\na.js 执行完毕\n在 main.js 之中, a.done=true, b.done=true\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n上面的代码证明了两件事。一是，在b.js之中，a.js没有执行完毕，只执行了第一行。二是，main.js执行到第二行时，不会再次执行b.js，而是输出缓存的b.js的执行结果，即它的第四行。\n\nexports.done = true;\n\n\n1\n\n\n总之，CommonJS 输入的是被输出值的拷贝，不是引用。\n\n另外，由于 CommonJS 模块遇到循环加载时，返回的是当前已经执行的部分的值，而不是代码全部执行后的值，两者可能会有差异。所以，输入变量的时候，必须非常小心。\n\nvar a = require(\'a\'); // 安全的写法\nvar foo = require(\'a\').foo; // 危险的写法\n\nexports.good = function (arg) {\n  return a.foo(\'good\', arg); // 使用的是 a.foo 的最新值\n};\n\nexports.bad = function (arg) {\n  return foo(\'bad\', arg); // 使用的是一个部分加载时的值\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n上面代码中，如果发生循环加载，require(\'a\').foo的值很可能后面会被改写，改用require(\'a\')会更保险一点。\n\n\n# ES6 模块的循环加载\n\nES6 处理“循环加载”与 CommonJS 有本质的不同。ES6 模块是动态引用，如果使用import从一个模块加载变量（即import foo from \'foo\'），那些变量不会被缓存，而是成为一个指向被加载模块的引用，需要开发者自己保证，真正取值的时候能够取到值。\n\n请看下面这个例子。\n\n// a.mjs\nimport {bar} from \'./b\';\nconsole.log(\'a.mjs\');\nconsole.log(bar);\nexport let foo = \'foo\';\n\n// b.mjs\nimport {foo} from \'./a\';\nconsole.log(\'b.mjs\');\nconsole.log(foo);\nexport let bar = \'bar\';\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n上面代码中，a.mjs加载b.mjs，b.mjs又加载a.mjs，构成循环加载。执行a.mjs，结果如下。\n\n$ node --experimental-modules a.mjs\nb.mjs\nReferenceError: foo is not defined\n\n\n1\n2\n3\n\n\n上面代码中，执行a.mjs以后会报错，foo变量未定义，这是为什么？\n\n让我们一行行来看，ES6 循环加载是怎么处理的。首先，执行a.mjs以后，引擎发现它加载了b.mjs，因此会优先执行b.mjs，然后再执行a.mjs。接着，执行b.mjs的时候，已知它从a.mjs输入了foo接口，这时不会去执行a.mjs，而是认为这个接口已经存在了，继续往下执行。执行到第三行console.log(foo)的时候，才发现这个接口根本没定义，因此报错。\n\n解决这个问题的方法，就是让b.mjs运行的时候，foo已经有定义了。这可以通过将foo写成函数来解决。\n\n// a.mjs\nimport {bar} from \'./b\';\nconsole.log(\'a.mjs\');\nconsole.log(bar());\nfunction foo() { return \'foo\' }\nexport {foo};\n\n// b.mjs\nimport {foo} from \'./a\';\nconsole.log(\'b.mjs\');\nconsole.log(foo());\nfunction bar() { return \'bar\' }\nexport {bar};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n这时再执行a.mjs就可以得到预期结果。\n\n$ node --experimental-modules a.mjs\nb.mjs\nfoo\na.mjs\nbar\n\n\n1\n2\n3\n4\n5\n\n\n这是因为函数具有提升作用，在执行import {bar} from \'./b\'时，函数foo就已经有定义了，所以b.mjs加载的时候不会报错。这也意味着，如果把函数foo改写成函数表达式，也会报错。\n\n// a.mjs\nimport {bar} from \'./b\';\nconsole.log(\'a.mjs\');\nconsole.log(bar());\nconst foo = () => \'foo\';\nexport {foo};\n\n\n1\n2\n3\n4\n5\n6\n\n\n上面代码的第四行，改成了函数表达式，就不具有提升作用，执行就会报错。\n\n我们再来看 ES6 模块加载器SystemJS给出的一个例子。\n\n// even.js\nimport { odd } from \'./odd\'\nexport var counter = 0;\nexport function even(n) {\n  counter++;\n  return n === 0 || odd(n - 1);\n}\n\n// odd.js\nimport { even } from \'./even\';\nexport function odd(n) {\n  return n !== 0 && even(n - 1);\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n上面代码中，even.js里面的函数even有一个参数n，只要不等于 0，就会减去 1，传入加载的odd()。odd.js也会做类似操作。\n\n运行上面这段代码，结果如下。\n\n$ babel-node\n> import * as m from \'./even.js\';\n> m.even(10);\ntrue\n> m.counter\n6\n> m.even(20)\ntrue\n> m.counter\n17\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n上面代码中，参数n从 10 变为 0 的过程中，even()一共会执行 6 次，所以变量counter等于 6。第二次调用even()时，参数n从 20 变为 0，even()一共会执行 11 次，加上前面的 6 次，所以变量counter等于 17。\n\n这个例子要是改写成 CommonJS，就根本无法执行，会报错。\n\n// even.js\nvar odd = require(\'./odd\');\nvar counter = 0;\nexports.counter = counter;\nexports.even = function (n) {\n  counter++;\n  return n == 0 || odd(n - 1);\n}\n\n// odd.js\nvar even = require(\'./even\').even;\nmodule.exports = function (n) {\n  return n != 0 && even(n - 1);\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n上面代码中，even.js加载odd.js，而odd.js又去加载even.js，形成“循环加载”。这时，执行引擎就会输出even.js已经执行的部分（不存在任何结果），所以在odd.js之中，变量even等于undefined，等到后面调用even(n - 1)就会报错。\n\n$ node\n> var m = require(\'./even\');\n> m.even(10)\nTypeError: even is not a function\n\n\n1\n2\n3\n4\n',normalizedContent:'# module 的加载实现\n\n上一章介绍了模块的语法，本章介绍如何在浏览器和 node.js 之中加载 es6 模块，以及实际开发中经常遇到的一些问题（比如循环加载）。\n\n\n# 浏览器加载\n\n\n# 传统方法\n\nhtml 网页中，浏览器通过<script>标签加载 javascript 脚本。\n\n\x3c!-- 页面内嵌的脚本 --\x3e\n<script type="application/javascript">\n  // module code\n<\/script>\n\n\x3c!-- 外部脚本 --\x3e\n<script type="application/javascript" src="path/to/mymodule.js">\n<\/script>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n上面代码中，由于浏览器脚本的默认语言是 javascript，因此type="application/javascript"可以省略。\n\n默认情况下，浏览器是同步加载 javascript 脚本，即渲染引擎遇到<script>标签就会停下来，等到执行完脚本，再继续向下渲染。如果是外部脚本，还必须加入脚本下载的时间。\n\n如果脚本体积很大，下载和执行的时间就会很长，因此造成浏览器堵塞，用户会感觉到浏览器“卡死”了，没有任何响应。这显然是很不好的体验，所以浏览器允许脚本异步加载，下面就是两种异步加载的语法。\n\n<script src="path/to/mymodule.js" defer><\/script>\n<script src="path/to/mymodule.js" async><\/script>\n\n\n1\n2\n\n\n上面代码中，<script>标签打开defer或async属性，脚本就会异步加载。渲染引擎遇到这一行命令，就会开始下载外部脚本，但不会等它下载和执行，而是直接执行后面的命令。\n\ndefer与async的区别是：defer要等到整个页面在内存中正常渲染结束（dom 结构完全生成，以及其他脚本执行完成），才会执行；async一旦下载完，渲染引擎就会中断渲染，执行这个脚本以后，再继续渲染。一句话，defer是“渲染完再执行”，async是“下载完就执行”。另外，如果有多个defer脚本，会按照它们在页面出现的顺序加载，而多个async脚本是不能保证加载顺序的。\n\n\n# 加载规则\n\n浏览器加载 es6 模块，也使用<script>标签，但是要加入type="module"属性。\n\n<script type="module" src="./foo.js"><\/script>\n\n\n1\n\n\n上面代码在网页中插入一个模块foo.js，由于type属性设为module，所以浏览器知道这是一个 es6 模块。\n\n浏览器对于带有type="module"的<script>，都是异步加载，不会造成堵塞浏览器，即等到整个页面渲染完，再执行模块脚本，等同于打开了<script>标签的defer属性。\n\n<script type="module" src="./foo.js"><\/script>\n\x3c!-- 等同于 --\x3e\n<script type="module" src="./foo.js" defer><\/script>\n\n\n1\n2\n3\n\n\n如果网页有多个<script type="module">，它们会按照在页面出现的顺序依次执行。\n\n<script>标签的async属性也可以打开，这时只要加载完成，渲染引擎就会中断渲染立即执行。执行完成后，再恢复渲染。\n\n<script type="module" src="./foo.js" async><\/script>\n\n\n1\n\n\n一旦使用了async属性，<script type="module">就不会按照在页面出现的顺序执行，而是只要该模块加载完成，就执行该模块。\n\nes6 模块也允许内嵌在网页中，语法行为与加载外部脚本完全一致。\n\n<script type="module">\n  import utils from "./utils.js";\n\n  // other code\n<\/script>\n\n\n1\n2\n3\n4\n5\n\n\n举例来说，jquery 就支持模块加载。\n\n<script type="module">\n  import $ from "./jquery/src/jquery.js";\n  $(\'#message\').text(\'hi from jquery!\');\n<\/script>\n\n\n1\n2\n3\n4\n\n\n对于外部的模块脚本（上例是foo.js），有几点需要注意。\n\n * 代码是在模块作用域之中运行，而不是在全局作用域运行。模块内部的顶层变量，外部不可见。\n * 模块脚本自动采用严格模式，不管有没有声明use strict。\n * 模块之中，可以使用import命令加载其他模块（.js后缀不可省略，需要提供绝对 url 或相对 url），也可以使用export命令输出对外接口。\n * 模块之中，顶层的this关键字返回undefined，而不是指向window。也就是说，在模块顶层使用this关键字，是无意义的。\n * 同一个模块如果加载多次，将只执行一次。\n\n下面是一个示例模块。\n\nimport utils from \'https://example.com/js/utils.js\';\n\nconst x = 1;\n\nconsole.log(x === window.x); //false\nconsole.log(this === undefined); // true\n\n\n1\n2\n3\n4\n5\n6\n\n\n利用顶层的this等于undefined这个语法点，可以侦测当前代码是否在 es6 模块之中。\n\nconst isnotmodulescript = this !== undefined;\n\n\n1\n\n\n\n# es6 模块与 commonjs 模块的差异\n\n讨论 node.js 加载 es6 模块之前，必须了解 es6 模块与 commonjs 模块完全不同。\n\n它们有两个重大差异。\n\n * commonjs 模块输出的是一个值的拷贝，es6 模块输出的是值的引用。\n * commonjs 模块是运行时加载，es6 模块是编译时输出接口。\n\n第二个差异是因为 commonjs 加载的是一个对象（即module.exports属性），该对象只有在脚本运行完才会生成。而 es6 模块不是对象，它的对外接口只是一种静态定义，在代码静态解析阶段就会生成。\n\n下面重点解释第一个差异。\n\ncommonjs 模块输出的是值的拷贝，也就是说，一旦输出一个值，模块内部的变化就影响不到这个值。请看下面这个模块文件lib.js的例子。\n\n// lib.js\nvar counter = 3;\nfunction inccounter() {\n  counter++;\n}\nmodule.exports = {\n  counter: counter,\n  inccounter: inccounter,\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n上面代码输出内部变量counter和改写这个变量的内部方法inccounter。然后，在main.js里面加载这个模块。\n\n// main.js\nvar mod = require(\'./lib\');\n\nconsole.log(mod.counter);  // 3\nmod.inccounter();\nconsole.log(mod.counter); // 3\n\n\n1\n2\n3\n4\n5\n6\n\n\n上面代码说明，lib.js模块加载以后，它的内部变化就影响不到输出的mod.counter了。这是因为mod.counter是一个原始类型的值，会被缓存。除非写成一个函数，才能得到内部变动后的值。\n\n// lib.js\nvar counter = 3;\nfunction inccounter() {\n  counter++;\n}\nmodule.exports = {\n  get counter() {\n    return counter\n  },\n  inccounter: inccounter,\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n上面代码中，输出的counter属性实际上是一个取值器函数。现在再执行main.js，就可以正确读取内部变量counter的变动了。\n\n$ node main.js\n3\n4\n\n\n1\n2\n3\n\n\nes6 模块的运行机制与 commonjs 不一样。js 引擎对脚本静态分析的时候，遇到模块加载命令import，就会生成一个只读引用。等到脚本真正执行时，再根据这个只读引用，到被加载的那个模块里面去取值。换句话说，es6 的import有点像 unix 系统的“符号连接”，原始值变了，import加载的值也会跟着变。因此，es6 模块是动态引用，并且不会缓存值，模块里面的变量绑定其所在的模块。\n\n还是举上面的例子。\n\n// lib.js\nexport let counter = 3;\nexport function inccounter() {\n  counter++;\n}\n\n// main.js\nimport { counter, inccounter } from \'./lib\';\nconsole.log(counter); // 3\ninccounter();\nconsole.log(counter); // 4\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n上面代码说明，es6 模块输入的变量counter是活的，完全反应其所在模块lib.js内部的变化。\n\n再举一个出现在export一节中的例子。\n\n// m1.js\nexport var foo = \'bar\';\nsettimeout(() => foo = \'baz\', 500);\n\n// m2.js\nimport {foo} from \'./m1.js\';\nconsole.log(foo);\nsettimeout(() => console.log(foo), 500);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n上面代码中，m1.js的变量foo，在刚加载时等于bar，过了 500 毫秒，又变为等于baz。\n\n让我们看看，m2.js能否正确读取这个变化。\n\n$ babel-node m2.js\n\nbar\nbaz\n\n\n1\n2\n3\n4\n\n\n上面代码表明，es6 模块不会缓存运行结果，而是动态地去被加载的模块取值，并且变量总是绑定其所在的模块。\n\n由于 es6 输入的模块变量，只是一个“符号连接”，所以这个变量是只读的，对它进行重新赋值会报错。\n\n// lib.js\nexport let obj = {};\n\n// main.js\nimport { obj } from \'./lib\';\n\nobj.prop = 123; // ok\nobj = {}; // typeerror\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n上面代码中，main.js从lib.js输入变量obj，可以对obj添加属性，但是重新赋值就会报错。因为变量obj指向的地址是只读的，不能重新赋值，这就好比main.js创造了一个名为obj的const变量。\n\n最后，export通过接口，输出的是同一个值。不同的脚本加载这个接口，得到的都是同样的实例。\n\n// mod.js\nfunction c() {\n  this.sum = 0;\n  this.add = function () {\n    this.sum += 1;\n  };\n  this.show = function () {\n    console.log(this.sum);\n  };\n}\n\nexport let c = new c();\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n上面的脚本mod.js，输出的是一个c的实例。不同的脚本加载这个模块，得到的都是同一个实例。\n\n// x.js\nimport {c} from \'./mod\';\nc.add();\n\n// y.js\nimport {c} from \'./mod\';\nc.show();\n\n// main.js\nimport \'./x\';\nimport \'./y\';\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n现在执行main.js，输出的是1。\n\n$ babel-node main.js\n1\n\n\n1\n2\n\n\n这就证明了x.js和y.js加载的都是c的同一个实例。\n\n\n# node.js 加载\n\n\n# 概述\n\nnode.js 对 es6 模块的处理比较麻烦，因为它有自己的 commonjs 模块格式，与 es6 模块格式是不兼容的。目前的解决方案是，将两者分开，es6 模块和 commonjs 采用各自的加载方案。从 v13.2 版本开始，node.js 已经默认打开了 es6 模块支持。\n\nnode.js 要求 es6 模块采用.mjs后缀文件名。也就是说，只要脚本文件里面使用import或者export命令，那么就必须采用.mjs后缀名。node.js 遇到.mjs文件，就认为它是 es6 模块，默认启用严格模式，不必在每个模块文件顶部指定"use strict"。\n\n如果不希望将后缀名改成.mjs，可以在项目的package.json文件中，指定type字段为module。\n\n{\n   "type": "module"\n}\n\n\n1\n2\n3\n\n\n一旦设置了以后，该目录里面的 js 脚本，就被解释用 es6 模块。\n\n# 解释成 es6 模块\n$ node my-app.js\n\n\n1\n2\n\n\n如果这时还要使用 commonjs 模块，那么需要将 commonjs 脚本的后缀名都改成.cjs。如果没有type字段，或者type字段为commonjs，则.js脚本会被解释成 commonjs 模块。\n\n总结为一句话：.mjs文件总是以 es6 模块加载，.cjs文件总是以 commonjs 模块加载，.js文件的加载取决于package.json里面type字段的设置。\n\n注意，es6 模块与 commonjs 模块尽量不要混用。require命令不能加载.mjs文件，会报错，只有import命令才可以加载.mjs文件。反过来，.mjs文件里面也不能使用require命令，必须使用import。\n\n\n# main 字段\n\npackage.json文件有两个字段可以指定模块的入口文件：main和exports。比较简单的模块，可以只使用main字段，指定模块加载的入口文件。\n\n// ./node_modules/es-module-package/package.json\n{\n  "type": "module",\n  "main": "./src/index.js"\n}\n\n\n1\n2\n3\n4\n5\n\n\n上面代码指定项目的入口脚本为./src/index.js，它的格式为 es6 模块。如果没有type字段，index.js就会被解释为 commonjs 模块。\n\n然后，import命令就可以加载这个模块。\n\n// ./my-app.mjs\n\nimport { something } from \'es-module-package\';\n// 实际加载的是 ./node_modules/es-module-package/src/index.js\n\n\n1\n2\n3\n4\n\n\n上面代码中，运行该脚本以后，node.js 就会到./node_modules目录下面，寻找es-module-package模块，然后根据该模块package.json的main字段去执行入口文件。\n\n这时，如果用 commonjs 模块的require()命令去加载es-module-package模块会报错，因为 commonjs 模块不能处理export命令。\n\n\n# exports 字段\n\nexports字段的优先级高于main字段。它有多种用法。\n\n（1）子目录别名\n\npackage.json文件的exports字段可以指定脚本或子目录的别名。\n\n// ./node_modules/es-module-package/package.json\n{\n  "exports": {\n    "./submodule": "./src/submodule.js"\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n\n\n上面的代码指定src/submodule.js别名为submodule，然后就可以从别名加载这个文件。\n\nimport submodule from \'es-module-package/submodule\';\n// 加载 ./node_modules/es-module-package/src/submodule.js\n\n\n1\n2\n\n\n下面是子目录别名的例子。\n\n// ./node_modules/es-module-package/package.json\n{\n  "exports": {\n    "./features/": "./src/features/"\n  }\n}\n\nimport feature from \'es-module-package/features/x.js\';\n// 加载 ./node_modules/es-module-package/src/features/x.js\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n如果没有指定别名，就不能用“模块+脚本名”这种形式加载脚本。\n\n// 报错\nimport submodule from \'es-module-package/private-module.js\';\n\n// 不报错\nimport submodule from \'./node_modules/es-module-package/private-module.js\';\n\n\n1\n2\n3\n4\n5\n\n\n（2）main 的别名\n\nexports字段的别名如果是.，就代表模块的主入口，优先级高于main字段，并且可以直接简写成exports字段的值。\n\n{\n  "exports": {\n    ".": "./main.js"\n  }\n}\n\n// 等同于\n{\n  "exports": "./main.js"\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n由于exports字段只有支持 es6 的 node.js 才认识，所以可以用来兼容旧版本的 node.js。\n\n{\n  "main": "./main-legacy.cjs",\n  "exports": {\n    ".": "./main-modern.cjs"\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n\n\n上面代码中，老版本的 node.js （不支持 es6 模块）的入口文件是main-legacy.cjs，新版本的 node.js 的入口文件是main-modern.cjs。\n\n（3）条件加载\n\n利用.这个别名，可以为 es6 模块和 commonjs 指定不同的入口。目前，这个功能需要在 node.js 运行的时候，打开--experimental-conditional-exports标志。\n\n{\n  "type": "module",\n  "exports": {\n    ".": {\n      "require": "./main.cjs",\n      "default": "./main.js"\n    }\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n上面代码中，别名.的require条件指定require()命令的入口文件（即 commonjs 的入口），default条件指定其他情况的入口（即 es6 的入口）。\n\n上面的写法可以简写如下。\n\n{\n  "exports": {\n    "require": "./main.cjs",\n    "default": "./main.js"\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n\n\n注意，如果同时还有其他别名，就不能采用简写，否则或报错。\n\n{\n  // 报错\n  "exports": {\n    "./feature": "./lib/feature.js",\n    "require": "./main.cjs",\n    "default": "./main.js"\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# es6 模块加载 commonjs 模块\n\n目前，一个模块同时支持 es6 和 commonjs 两种格式的常见方法是，package.json文件的main字段指定 commonjs 入口，给 node.js 使用；module字段指定 es6 模块入口，给打包工具使用，因为 node.js 不认识module字段。\n\n有了上一节的条件加载以后，node.js 本身就可以同时处理两种模块。\n\n// ./node_modules/pkg/package.json\n{\n  "type": "module",\n  "main": "./index.cjs",\n  "exports": {\n    "require": "./index.cjs",\n    "default": "./wrapper.mjs"\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n上面代码指定了 commonjs 入口文件index.cjs，下面是这个文件的代码。\n\n// ./node_modules/pkg/index.cjs\nexports.name = \'value\';\n\n\n1\n2\n\n\n然后，es6 模块可以加载这个文件。\n\n// ./node_modules/pkg/wrapper.mjs\nimport cjsmodule from \'./index.cjs\';\nexport const name = cjsmodule.name;\n\n\n1\n2\n3\n\n\n注意，import命令加载 commonjs 模块，只能整体加载，不能只加载单一的输出项。\n\n// 正确\nimport packagemain from \'commonjs-package\';\n\n// 报错\nimport { method } from \'commonjs-package\';\n\n\n1\n2\n3\n4\n5\n\n\n还有一种变通的加载方法，就是使用 node.js 内置的module.createrequire()方法。\n\n// cjs.cjs\nmodule.exports = \'cjs\';\n\n// esm.mjs\nimport { createrequire } from \'module\';\n\nconst require = createrequire(import.meta.url);\n\nconst cjs = require(\'./cjs.cjs\');\ncjs === \'cjs\'; // true\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n上面代码中，es6 模块通过module.createrequire()方法可以加载 commonjs 模块\n\n\n# commonjs 模块加载 es6 模块\n\ncommonjs 的require命令不能加载 es6 模块，会报错，只能使用import()这个方法加载。\n\n(async () => {\n  await import(\'./my-app.mjs\');\n})();\n\n\n1\n2\n3\n\n\n上面代码可以在 commonjs 模块中运行。\n\n\n# node.js 的内置模块\n\nnode.js 的内置模块可以整体加载，也可以加载指定的输出项。\n\n// 整体加载\nimport eventemitter from \'events\';\nconst e = new eventemitter();\n\n// 加载指定的输出项\nimport { readfile } from \'fs\';\nreadfile(\'./foo.txt\', (err, source) => {\n  if (err) {\n    console.error(err);\n  } else {\n    console.log(source);\n  }\n});\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n\n# 加载路径\n\nes6 模块的加载路径必须给出脚本的完整路径，不能省略脚本的后缀名。import命令和package.json文件的main字段如果省略脚本的后缀名，会报错。\n\n// es6 模块中将报错\nimport { something } from \'./index\';\n\n\n1\n2\n\n\n为了与浏览器的import加载规则相同，node.js 的.mjs文件支持 url 路径。\n\nimport \'./foo.mjs?query=1\'; // 加载 ./foo 传入参数 ?query=1\n\n\n1\n\n\n上面代码中，脚本路径带有参数?query=1，node 会按 url 规则解读。同一个脚本只要参数不同，就会被加载多次，并且保存成不同的缓存。由于这个原因，只要文件名中含有:、%、#、?等特殊字符，最好对这些字符进行转义。\n\n目前，node.js 的import命令只支持加载本地模块（file:协议）和data:协议，不支持加载远程模块。另外，脚本路径只支持相对路径，不支持绝对路径（即以/或//开头的路径）。\n\n最后，node 的import命令是异步加载，这一点与浏览器的处理方法相同。\n\n\n# 内部变量\n\nes6 模块应该是通用的，同一个模块不用修改，就可以用在浏览器环境和服务器环境。为了达到这个目标，node 规定 es6 模块之中不能使用 commonjs 模块的特有的一些内部变量。\n\n首先，就是this关键字。es6 模块之中，顶层的this指向undefined；commonjs 模块的顶层this指向当前模块，这是两者的一个重大差异。\n\n其次，以下这些顶层变量在 es6 模块之中都是不存在的。\n\n * arguments\n * require\n * module\n * exports\n * __filename\n * __dirname\n\n\n# 循环加载\n\n“循环加载”（circular dependency）指的是，a脚本的执行依赖b脚本，而b脚本的执行又依赖a脚本。\n\n// a.js\nvar b = require(\'b\');\n\n// b.js\nvar a = require(\'a\');\n\n\n1\n2\n3\n4\n5\n\n\n通常，“循环加载”表示存在强耦合，如果处理不好，还可能导致递归加载，使得程序无法执行，因此应该避免出现。\n\n但是实际上，这是很难避免的，尤其是依赖关系复杂的大项目，很容易出现a依赖b，b依赖c，c又依赖a这样的情况。这意味着，模块加载机制必须考虑“循环加载”的情况。\n\n对于 javascript 语言来说，目前最常见的两种模块格式 commonjs 和 es6，处理“循环加载”的方法是不一样的，返回的结果也不一样。\n\n\n# commonjs 模块的加载原理\n\n介绍 es6 如何处理“循环加载”之前，先介绍目前最流行的 commonjs 模块格式的加载原理。\n\ncommonjs 的一个模块，就是一个脚本文件。require命令第一次加载该脚本，就会执行整个脚本，然后在内存生成一个对象。\n\n{\n  id: \'...\',\n  exports: { ... },\n  loaded: true,\n  ...\n}\n\n\n1\n2\n3\n4\n5\n6\n\n\n上面代码就是 node 内部加载模块后生成的一个对象。该对象的id属性是模块名，exports属性是模块输出的各个接口，loaded属性是一个布尔值，表示该模块的脚本是否执行完毕。其他还有很多属性，这里都省略了。\n\n以后需要用到这个模块的时候，就会到exports属性上面取值。即使再次执行require命令，也不会再次执行该模块，而是到缓存之中取值。也就是说，commonjs 模块无论加载多少次，都只会在第一次加载时运行一次，以后再加载，就返回第一次运行的结果，除非手动清除系统缓存。\n\n\n# commonjs 模块的循环加载\n\ncommonjs 模块的重要特性是加载时执行，即脚本代码在require的时候，就会全部执行。一旦出现某个模块被"循环加载"，就只输出已经执行的部分，还未执行的部分不会输出。\n\n让我们来看，node 官方文档里面的例子。脚本文件a.js代码如下。\n\nexports.done = false;\nvar b = require(\'./b.js\');\nconsole.log(\'在 a.js 之中，b.done = %j\', b.done);\nexports.done = true;\nconsole.log(\'a.js 执行完毕\');\n\n\n1\n2\n3\n4\n5\n\n\n上面代码之中，a.js脚本先输出一个done变量，然后加载另一个脚本文件b.js。注意，此时a.js代码就停在这里，等待b.js执行完毕，再往下执行。\n\n再看b.js的代码。\n\nexports.done = false;\nvar a = require(\'./a.js\');\nconsole.log(\'在 b.js 之中，a.done = %j\', a.done);\nexports.done = true;\nconsole.log(\'b.js 执行完毕\');\n\n\n1\n2\n3\n4\n5\n\n\n上面代码之中，b.js执行到第二行，就会去加载a.js，这时，就发生了“循环加载”。系统会去a.js模块对应对象的exports属性取值，可是因为a.js还没有执行完，从exports属性只能取回已经执行的部分，而不是最后的值。\n\na.js已经执行的部分，只有一行。\n\nexports.done = false;\n\n\n1\n\n\n因此，对于b.js来说，它从a.js只输入一个变量done，值为false。\n\n然后，b.js接着往下执行，等到全部执行完毕，再把执行权交还给a.js。于是，a.js接着往下执行，直到执行完毕。我们写一个脚本main.js，验证这个过程。\n\nvar a = require(\'./a.js\');\nvar b = require(\'./b.js\');\nconsole.log(\'在 main.js 之中, a.done=%j, b.done=%j\', a.done, b.done);\n\n\n1\n2\n3\n\n\n执行main.js，运行结果如下。\n\n$ node main.js\n\n在 b.js 之中，a.done = false\nb.js 执行完毕\n在 a.js 之中，b.done = true\na.js 执行完毕\n在 main.js 之中, a.done=true, b.done=true\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n上面的代码证明了两件事。一是，在b.js之中，a.js没有执行完毕，只执行了第一行。二是，main.js执行到第二行时，不会再次执行b.js，而是输出缓存的b.js的执行结果，即它的第四行。\n\nexports.done = true;\n\n\n1\n\n\n总之，commonjs 输入的是被输出值的拷贝，不是引用。\n\n另外，由于 commonjs 模块遇到循环加载时，返回的是当前已经执行的部分的值，而不是代码全部执行后的值，两者可能会有差异。所以，输入变量的时候，必须非常小心。\n\nvar a = require(\'a\'); // 安全的写法\nvar foo = require(\'a\').foo; // 危险的写法\n\nexports.good = function (arg) {\n  return a.foo(\'good\', arg); // 使用的是 a.foo 的最新值\n};\n\nexports.bad = function (arg) {\n  return foo(\'bad\', arg); // 使用的是一个部分加载时的值\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n上面代码中，如果发生循环加载，require(\'a\').foo的值很可能后面会被改写，改用require(\'a\')会更保险一点。\n\n\n# es6 模块的循环加载\n\nes6 处理“循环加载”与 commonjs 有本质的不同。es6 模块是动态引用，如果使用import从一个模块加载变量（即import foo from \'foo\'），那些变量不会被缓存，而是成为一个指向被加载模块的引用，需要开发者自己保证，真正取值的时候能够取到值。\n\n请看下面这个例子。\n\n// a.mjs\nimport {bar} from \'./b\';\nconsole.log(\'a.mjs\');\nconsole.log(bar);\nexport let foo = \'foo\';\n\n// b.mjs\nimport {foo} from \'./a\';\nconsole.log(\'b.mjs\');\nconsole.log(foo);\nexport let bar = \'bar\';\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n上面代码中，a.mjs加载b.mjs，b.mjs又加载a.mjs，构成循环加载。执行a.mjs，结果如下。\n\n$ node --experimental-modules a.mjs\nb.mjs\nreferenceerror: foo is not defined\n\n\n1\n2\n3\n\n\n上面代码中，执行a.mjs以后会报错，foo变量未定义，这是为什么？\n\n让我们一行行来看，es6 循环加载是怎么处理的。首先，执行a.mjs以后，引擎发现它加载了b.mjs，因此会优先执行b.mjs，然后再执行a.mjs。接着，执行b.mjs的时候，已知它从a.mjs输入了foo接口，这时不会去执行a.mjs，而是认为这个接口已经存在了，继续往下执行。执行到第三行console.log(foo)的时候，才发现这个接口根本没定义，因此报错。\n\n解决这个问题的方法，就是让b.mjs运行的时候，foo已经有定义了。这可以通过将foo写成函数来解决。\n\n// a.mjs\nimport {bar} from \'./b\';\nconsole.log(\'a.mjs\');\nconsole.log(bar());\nfunction foo() { return \'foo\' }\nexport {foo};\n\n// b.mjs\nimport {foo} from \'./a\';\nconsole.log(\'b.mjs\');\nconsole.log(foo());\nfunction bar() { return \'bar\' }\nexport {bar};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n这时再执行a.mjs就可以得到预期结果。\n\n$ node --experimental-modules a.mjs\nb.mjs\nfoo\na.mjs\nbar\n\n\n1\n2\n3\n4\n5\n\n\n这是因为函数具有提升作用，在执行import {bar} from \'./b\'时，函数foo就已经有定义了，所以b.mjs加载的时候不会报错。这也意味着，如果把函数foo改写成函数表达式，也会报错。\n\n// a.mjs\nimport {bar} from \'./b\';\nconsole.log(\'a.mjs\');\nconsole.log(bar());\nconst foo = () => \'foo\';\nexport {foo};\n\n\n1\n2\n3\n4\n5\n6\n\n\n上面代码的第四行，改成了函数表达式，就不具有提升作用，执行就会报错。\n\n我们再来看 es6 模块加载器systemjs给出的一个例子。\n\n// even.js\nimport { odd } from \'./odd\'\nexport var counter = 0;\nexport function even(n) {\n  counter++;\n  return n === 0 || odd(n - 1);\n}\n\n// odd.js\nimport { even } from \'./even\';\nexport function odd(n) {\n  return n !== 0 && even(n - 1);\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n上面代码中，even.js里面的函数even有一个参数n，只要不等于 0，就会减去 1，传入加载的odd()。odd.js也会做类似操作。\n\n运行上面这段代码，结果如下。\n\n$ babel-node\n> import * as m from \'./even.js\';\n> m.even(10);\ntrue\n> m.counter\n6\n> m.even(20)\ntrue\n> m.counter\n17\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n上面代码中，参数n从 10 变为 0 的过程中，even()一共会执行 6 次，所以变量counter等于 6。第二次调用even()时，参数n从 20 变为 0，even()一共会执行 11 次，加上前面的 6 次，所以变量counter等于 17。\n\n这个例子要是改写成 commonjs，就根本无法执行，会报错。\n\n// even.js\nvar odd = require(\'./odd\');\nvar counter = 0;\nexports.counter = counter;\nexports.even = function (n) {\n  counter++;\n  return n == 0 || odd(n - 1);\n}\n\n// odd.js\nvar even = require(\'./even\').even;\nmodule.exports = function (n) {\n  return n != 0 && even(n - 1);\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n上面代码中，even.js加载odd.js，而odd.js又去加载even.js，形成“循环加载”。这时，执行引擎就会输出even.js已经执行的部分（不存在任何结果），所以在odd.js之中，变量even等于undefined，等到后面调用even(n - 1)就会报错。\n\n$ node\n> var m = require(\'./even\');\n> m.even(10)\ntypeerror: even is not a function\n\n\n1\n2\n3\n4\n',charsets:{cjk:!0}},{title:"Module 的语法",frontmatter:{title:"Module 的语法",date:"2020-02-09T16:00:29.000Z",permalink:"/pages/efe2fb04eb8ac5fb",author:"阮一峰",categories:["《ES6 教程》笔记"],tags:["ES6"],readingShow:"top"},regularPath:"/06.%E4%B9%A6%E7%B1%8D/05.%E3%80%8AES6%20%E6%95%99%E7%A8%8B%E3%80%8B%E7%AC%94%E8%AE%B0/23.Module%20%E7%9A%84%E8%AF%AD%E6%B3%95.html",relativePath:"06.书籍/05.《ES6 教程》笔记/23.Module 的语法.md",key:"v-dcb6a428",path:"/pages/efe2fb04eb8ac5fb/",headers:[{level:2,title:"概述",slug:"概述",normalizedTitle:"概述",charIndex:17},{level:2,title:"严格模式",slug:"严格模式",normalizedTitle:"严格模式",charIndex:1328},{level:2,title:"export 命令",slug:"export-命令",normalizedTitle:"export 命令",charIndex:1904},{level:2,title:"import 命令",slug:"import-命令",normalizedTitle:"import 命令",charIndex:3872},{level:2,title:"模块的整体加载-(星号*)",slug:"模块的整体加载-星号",normalizedTitle:"模块的整体加载-(星号*)",charIndex:5996},{level:2,title:"export default 命令",slug:"export-default-命令",normalizedTitle:"export default 命令",charIndex:6797},{level:2,title:"export 与 import 的复合写法",slug:"export-与-import-的复合写法",normalizedTitle:"export 与 import 的复合写法",charIndex:9298},{level:2,title:"模块的继承",slug:"模块的继承",normalizedTitle:"模块的继承",charIndex:10367},{level:2,title:"跨模块常量",slug:"跨模块常量",normalizedTitle:"跨模块常量",charIndex:10989},{level:2,title:"import()",slug:"import",normalizedTitle:"import()",charIndex:11948},{level:3,title:"简介",slug:"简介",normalizedTitle:"简介",charIndex:11961},{level:3,title:"适用场合",slug:"适用场合",normalizedTitle:"适用场合",charIndex:13119},{level:3,title:"注意点",slug:"注意点",normalizedTitle:"注意点",charIndex:13710}],excerpt:'<h1 id="module-的语法"><a class="header-anchor" href="#module-的语法">#</a> Module 的语法</h1>\n<h2 id="概述"><a class="header-anchor" href="#概述">#</a> 概述</h2>\n<p>历史上，JavaScript 一直没有模块（module）体系，无法将一个大程序拆分成互相依赖的小文件，再用简单的方法拼装起来。其他语言都有这项功能，比如 Ruby 的<code>require</code>、Python 的<code>import</code>，甚至就连 CSS 都有<code>@import</code>，但是 JavaScript 任何这方面的支持都没有，这对开发大型的、复杂的项目形成了巨大障碍。</p>\n',lastUpdated:"2022/9/22 下午4:28:09",lastUpdatedTimestamp:1663835289e3,headersStr:"概述 严格模式 export 命令 import 命令 模块的整体加载-(星号*) export default 命令 export 与 import 的复合写法 模块的继承 跨模块常量 import() 简介 适用场合 注意点",content:"# Module 的语法\n\n\n# 概述\n\n历史上，JavaScript 一直没有模块（module）体系，无法将一个大程序拆分成互相依赖的小文件，再用简单的方法拼装起来。其他语言都有这项功能，比如 Ruby 的require、Python 的import，甚至就连 CSS 都有@import，但是 JavaScript 任何这方面的支持都没有，这对开发大型的、复杂的项目形成了巨大障碍。 在 ES6 之前，社区制定了一些模块加载方案，最主要的有 CommonJS 和 AMD 两种。前者用于服务器，后者用于浏览器。ES6 在语言标准的层面上，实现了模块功能，而且实现得相当简单，完全可以取代 CommonJS 和 AMD 规范，成为浏览器和服务器通用的模块解决方案。\n\nES6 模块的设计思想是尽量的静态化，使得编译时就能确定模块的依赖关系，以及输入和输出的变量。CommonJS 和 AMD 模块，都只能在运行时确定这些东西。比如，CommonJS 模块就是对象，输入时必须查找对象属性。\n\n// CommonJS模块\nlet { stat, exists, readFile } = require('fs');\n\n// 等同于\nlet _fs = require('fs');\nlet stat = _fs.stat;\nlet exists = _fs.exists;\nlet readfile = _fs.readfile;\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n上面代码的实质是整体加载fs模块（即加载fs的所有方法），生成一个对象（_fs），然后再从这个对象上面读取 3 个方法。这种加载称为“运行时加载”，因为只有运行时才能得到这个对象，导致完全没办法在编译时做“静态优化”。\n\nES6 模块不是对象，而是通过export命令显式指定输出的代码，再通过import命令输入。\n\n// ES6模块\nimport { stat, exists, readFile } from 'fs';\n\n\n1\n2\n\n\n上面代码的实质是从fs模块加载 3 个方法，其他方法不加载。这种加载称为“编译时加载”或者静态加载，**即 ES6 可以在编译时就完成模块加载，**效率要比 CommonJS 模块的加载方式高。当然，这也导致了没法引用 ES6 模块本身，因为它不是对象。\n\n由于 ES6 模块是编译时加载，使得静态分析成为可能。有了它，就能进一步拓宽 JavaScript 的语法，比如引入宏（macro）和类型检验（type system）这些只能靠静态分析实现的功能。\n\n除了静态加载带来的各种好处，ES6 模块还有以下好处。\n\n * 不再需要UMD模块格式了，将来服务器和浏览器都会支持 ES6 模块格式。目前，通过各种工具库，其实已经做到了这一点。\n * 将来浏览器的新 API 就能用模块格式提供，不再必须做成全局变量或者navigator对象的属性。\n * 不再需要对象作为命名空间（比如Math对象），未来这些功能可以通过模块提供。\n\n本章介绍 ES6 模块的语法，下一章介绍如何在浏览器和 Node 之中，加载 ES6 模块。\n\n\n# 严格模式\n\nES6 的模块自动采用严格模式，不管你有没有在模块头部加上\"use strict\";。\n\n严格模式主要有以下限制。\n\n * 变量必须声明后再使用\n * 函数的参数不能有同名属性，否则报错\n * 不能使用with语句\n * 不能对只读属性赋值，否则报错\n * 不能使用前缀 0 表示八进制数，否则报错\n * 不能删除不可删除的属性，否则报错\n * 不能删除变量delete prop，会报错，只能删除属性delete global[prop]\n * eval不会在它的外层作用域引入变量\n * eval和arguments不能被重新赋值\n * arguments不会自动反映函数参数的变化\n * 不能使用arguments.callee\n * 不能使用arguments.caller\n * 禁止this指向全局对象\n * 不能使用fn.caller和fn.arguments获取函数调用的堆栈\n * 增加了保留字（比如protected、static和interface）\n\n上面这些限制，模块都必须遵守。由于严格模式是 ES5 引入的，不属于 ES6，所以请参阅相关 ES5 书籍，本书不再详细介绍了。\n\n其中，尤其需要注意this的限制。ES6 模块之中，顶层的this指向undefined，即不应该在顶层代码使用this。\n\n\n# export 命令\n\n模块功能主要由两个命令构成：export和import。export命令用于规定模块的对外接口，import命令用于输入其他模块提供的功能。\n\n一个模块就是一个独立的文件。该文件内部的所有变量，外部无法获取。如果你希望外部能够读取模块内部的某个变量，就必须使用export关键字输出该变量。下面是一个 JS 文件，里面使用export命令输出变量。\n\n// profile.js\nexport var firstName = 'Michael';\nexport var lastName = 'Jackson';\nexport var year = 1958;\n\n\n1\n2\n3\n4\n\n\n上面代码是profile.js文件，保存了用户信息。ES6 将其视为一个模块，里面用export命令对外部输出了三个变量。\n\nexport的写法，除了像上面这样，还有另外一种。\n\n// profile.js\nvar firstName = 'Michael';\nvar lastName = 'Jackson';\nvar year = 1958;\n\nexport { firstName, lastName, year };\n\n\n1\n2\n3\n4\n5\n6\n\n\n上面代码在export命令后面，使用大括号指定所要输出的一组变量。它与前一种写法（直接放置在var语句前）是等价的，但是应该优先考虑使用这种写法。因为这样就可以在脚本尾部，一眼看清楚输出了哪些变量。\n\nexport命令除了输出变量，还可以输出函数或类（class）。\n\nexport function multiply(x, y) {\n  return x * y;\n};\n\n\n1\n2\n3\n\n\n上面代码对外输出一个函数multiply。\n\n通常情况下，export输出的变量就是本来的名字，但是可以使用as关键字重命名。\n\nfunction v1() { ... }\nfunction v2() { ... }\n\nexport {\n  v1 as streamV1,\n  v2 as streamV2,\n  v2 as streamLatestVersion\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n上面代码使用as关键字，重命名了函数v1和v2的对外接口。重命名后，v2可以用不同的名字输出两次。\n\n需要特别注意的是，export命令规定的是对外的接口，必须与模块内部的变量建立一一对应关系。\n\n// 报错\nexport 1;\n\n// 报错\nvar m = 1;\nexport m;\n\n\n1\n2\n3\n4\n5\n6\n\n\n上面两种写法都会报错，因为没有提供对外的接口。第一种写法直接输出 1，第二种写法通过变量m，还是直接输出 1。1只是一个值，不是接口。正确的写法是下面这样。\n\n// 写法一\nexport var m = 1;\n\n// 写法二\nvar m = 1;\nexport {m};\n\n// 写法三\nvar n = 1;\nexport {n as m};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n上面三种写法都是正确的，规定了对外的接口m。其他脚本可以通过这个接口，取到值1。它们的实质是，在接口名与模块内部变量之间，建立了一一对应的关系。\n\n同样的，function和class的输出，也必须遵守这样的写法。\n\n// 报错\nfunction f() {}\nexport f;\n\n// 正确\nexport function f() {};\n\n// 正确\nfunction f() {}\nexport {f};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n另外，export语句输出的接口，与其对应的值是动态绑定关系，即通过该接口，可以取到模块内部实时的值。\n\nexport var foo = 'bar';\nsetTimeout(() => foo = 'baz', 500);\n\n\n1\n2\n\n\n上面代码输出变量foo，值为bar，500 毫秒之后变成baz。\n\n这一点与 CommonJS 规范完全不同。CommonJS 模块输出的是值的缓存，不存在动态更新，详见下文《Module 的加载实现》一节。\n\n最后，export命令可以出现在模块的任何位置，只要处于模块顶层就可以。如果处于块级作用域内，就会报错，下一节的import命令也是如此。这是因为处于条件代码块之中，就没法做静态优化了，违背了 ES6 模块的设计初衷。\n\nfunction foo() {\n  export default 'bar' // SyntaxError\n}\nfoo()\n\n\n1\n2\n3\n4\n\n\n上面代码中，export语句放在函数之中，结果报错。\n\n\n# import 命令\n\n使用export命令定义了模块的对外接口以后，其他 JS 文件就可以通过import命令加载这个模块。\n\n// main.js\nimport { firstName, lastName, year } from './profile.js';\n\nfunction setName(element) {\n  element.textContent = firstName + ' ' + lastName;\n}\n\n\n1\n2\n3\n4\n5\n6\n\n\n上面代码的import命令，用于加载profile.js文件，并从中输入变量。import命令接受一对大括号，里面指定要从其他模块导入的变量名。大括号里面的变量名，必须与被导入模块（profile.js）对外接口的名称相同。\n\n如果想为输入的变量重新取一个名字**，import命令要使用as关键字，将输入的变量重命名。**\n\nimport { lastName as surname } from './profile.js';\n\n\n1\n\n\nimport命令输入的变量都是只读的，因为它的本质是输入接口。也就是说，不允许在加载模块的脚本里面，改写接口。\n\nimport {a} from './xxx.js'\n\na = {}; // Syntax Error : 'a' is read-only;\n\n\n1\n2\n3\n\n\n上面代码中，脚本加载了变量a，对其重新赋值就会报错，因为a是一个只读的接口。但是**，如果a是一个对象，改写a的属性是允许的**。\n\nimport {a} from './xxx.js'\n\na.foo = 'hello'; // 合法操作\n\n\n1\n2\n3\n\n\n上面代码中，a的属性可以成功改写，并且其他模块也可以读到改写后的值。不过，这种写法很难查错，建议凡是输入的变量，都当作完全只读，不要轻易改变它的属性。\n\nimport后面的from指定模块文件的位置，可以是相对路径，也可以是绝对路径，.js后缀可以省略。如果只是模块名，不带有路径，那么必须有配置文件，告诉 JavaScript 引擎该模块的位置。\n\nimport {myMethod} from 'util';\n\n\n1\n\n\n上面代码中，util是模块文件名，由于不带有路径，必须通过配置，告诉引擎怎么取到这个模块。\n\n注意，import命令具有提升效果，会提升到整个模块的头部，首先执行。\n\nfoo();\n\nimport { foo } from 'my_module';\n\n\n1\n2\n3\n\n\n上面的代码不会报错，因为import的执行早于foo的调用。这种行为的本质是，import命令是编译阶段执行的，在代码运行之前。\n\n由于import是静态执行，所以不能使用表达式和变量，这些只有在运行时才能得到结果的语法结构。\n\n// 报错\nimport { 'f' + 'oo' } from 'my_module';\n\n// 报错\nlet module = 'my_module';\nimport { foo } from module;\n\n// 报错\nif (x === 1) {\n  import { foo } from 'module1';\n} else {\n  import { foo } from 'module2';\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n上面三种写法都会报错，因为它们用到了表达式、变量和if结构。在静态分析阶段，这些语法都是没法得到值的。\n\n最后，import语句会执行所加载的模块，因此可以有下面的写法。\n\nimport 'lodash';\n\n\n1\n\n\n上面代码仅仅执行lodash模块，但是不输入任何值。\n\n如果多次重复执行同一句import语句，那么只会执行一次，而不会执行多次。\n\nimport 'lodash';\nimport 'lodash';\n\n\n1\n2\n\n\n上面代码加载了两次lodash，但是只会执行一次。\n\nimport { foo } from 'my_module';\nimport { bar } from 'my_module';\n\n// 等同于\nimport { foo, bar } from 'my_module';\n\n\n1\n2\n3\n4\n5\n\n\n上面代码中，虽然foo和bar在两个语句中加载，但是它们对应的是同一个my_module实例。也就是说，import语句是 Singleton 模式。\n\n目前阶段，通过 Babel 转码，CommonJS 模块的require命令和 ES6 模块的import命令，可以写在同一个模块里面，但是最好不要这样做。因为import在静态解析阶段执行，所以它是一个模块之中最早执行的。下面的代码可能不会得到预期结果。\n\nrequire('core-js/modules/es6.symbol');\nrequire('core-js/modules/es6.promise');\nimport React from 'React';\n\n\n1\n2\n3\n\n\n\n# 模块的整体加载-(星号*)\n\n除了指定加载某个输出值，还可以使用整体加载，即用星号（*）指定一个对象，所有输出值都加载在这个对象上面。\n\n下面是一个circle.js文件，它输出两个方法area和circumference。\n\n// circle.js\n\nexport function area(radius) {\n  return Math.PI * radius * radius;\n}\n\nexport function circumference(radius) {\n  return 2 * Math.PI * radius;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n现在，加载这个模块。\n\n// main.js\n\nimport { area, circumference } from './circle';\n\nconsole.log('圆面积：' + area(4));\nconsole.log('圆周长：' + circumference(14));\n\n\n1\n2\n3\n4\n5\n6\n\n\n上面写法是逐一指定要加载的方法，整体加载的写法如下。\n\nimport * as circle from './circle';\n\nconsole.log('圆面积：' + circle.area(4));\nconsole.log('圆周长：' + circle.circumference(14));\n\n\n1\n2\n3\n4\n\n\n注意，模块整体加载所在的那个对象（上例是circle），应该是可以静态分析的，所以不允许运行时改变。下面的写法都是不允许的。\n\nimport * as circle from './circle';\n\n// 下面两行都是不允许的\ncircle.foo = 'hello';\ncircle.area = function () {};\n\n\n1\n2\n3\n4\n5\n\n\n\n# export default 命令\n\n从前面的例子可以看出，使用import命令的时候，用户需要知道所要加载的变量名或函数名，否则无法加载。但是，用户肯定希望快速上手，未必愿意阅读文档，去了解模块有哪些属性和方法。\n\n为了给用户提供方便，让他们不用阅读文档就能加载模块，就要用到**export default命令，为模块指定默认输出。**\n\n// export-default.js\nexport default function () {\n  console.log('foo');\n}\n\n\n1\n2\n3\n4\n\n\n上面代码是一个模块文件export-default.js，它的默认输出是一个函数。\n\n其他模块加载该模块时，import命令可以为该匿名函数指定任意名字。\n\n// import-default.js\nimport customName from './export-default';\ncustomName(); // 'foo'\n\n\n1\n2\n3\n\n\n上面代码的import命令，可以用任意名称指向export-default.js输出的方法，这时就不需要知道原模块输出的函数名。需要注意的是，这时import命令后面，不使用大括号。\n\nexport default命令用在非匿名函数前，也是可以的。\n\n// export-default.js\nexport default function foo() {\n  console.log('foo');\n}\n\n// 或者写成\n\nfunction foo() {\n  console.log('foo');\n}\n\nexport default foo;\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n上面代码中，foo函数的函数名foo，在模块外部是无效的。加载的时候，视同匿名函数加载。\n\n下面比较一下默认输出和正常输出。\n\n// 第一组\nexport default function crc32() { // 输出\n  // ...\n}\n\nimport crc32 from 'crc32'; // 输入\n\n// 第二组\nexport function crc32() { // 输出\n  // ...\n};\n\nimport {crc32} from 'crc32'; // 输入\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n上面代码的两组写法，第一组是使用export default时，对应的import语句不需要使用大括号；第二组是不使用export default时，对应的import语句需要使用大括号。\n\nexport default命令用于指定模块的默认输出。显然，一个模块只能有一个默认输出，因此export default命令只能使用一次。所以，import命令后面才不用加大括号，因为只可能唯一对应export default命令。\n\n**本质上，export default就是输出一个叫做default的变量或方法，**然后系统允许你为它取任意名字。所以，下面的写法是有效的。\n\n// modules.js\nfunction add(x, y) {\n  return x * y;\n}\nexport {add as default};\n// 等同于\n// export default add;\n\n// app.js\nimport { default as foo } from 'modules';\n// 等同于\n// import foo from 'modules';\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n正是因为export default命令其实只是输出一个叫做default的变量，所以它后面不能跟变量声明语句。\n\n// 正确\nexport var a = 1;\n\n// 正确\nvar a = 1;\nexport default a;\n\n// 错误\nexport default var a = 1;\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n上面代码中，export default a的含义是将变量a的值赋给变量default。所以，最后一种写法会报错。\n\n同样地，因为export default命令的本质是将后面的值，赋给default变量，所以可以直接将一个值写在export default之后。\n\n// 正确\nexport default 42;\n\n// 报错\nexport 42;\n\n\n1\n2\n3\n4\n5\n\n\n上面代码中，后一句报错是因为没有指定对外的接口，而前一句指定对外接口为default。\n\n有了export default命令，输入模块时就非常直观了，以输入 lodash 模块为例。\n\nimport _ from 'lodash';\n\n\n1\n\n\n如果想在一条import语句中，同时输入默认方法和其他接口，可以写成下面这样。\n\nimport _, { each, forEach } from 'lodash';\n\n\n1\n\n\n对应上面代码的export语句如下。\n\nexport default function (obj) {\n  // ···\n}\n\nexport function each(obj, iterator, context) {\n  // ···\n}\n\nexport { each as forEach };\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n上面代码的最后一行的意思是，暴露出forEach接口，默认指向each接口，即forEach和each指向同一个方法。\n\nexport default也可以用来输出类。\n\n// MyClass.js\nexport default class { ... }\n\n// main.js\nimport MyClass from 'MyClass';\nlet o = new MyClass();\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# export 与 import 的复合写法\n\n如果在一个模块之中，先输入后输出同一个模块，import语句可以与export语句写在一起。\n\nexport { foo, bar } from 'my_module';\n\n// 可以简单理解为\nimport { foo, bar } from 'my_module';\nexport { foo, bar };\n\n\n1\n2\n3\n4\n5\n\n\n上面代码中，export和import语句可以结合在一起，写成一行。但需要注意的是，写成一行以后，foo和bar实际上并没有被导入当前模块，只是相当于对外转发了这两个接口，导致当前模块不能直接使用foo和bar。\n\n模块的接口改名和整体输出，也可以采用这种写法。\n\n// 接口改名\nexport { foo as myFoo } from 'my_module';\n\n// 整体输出\nexport * from 'my_module';\n\n\n1\n2\n3\n4\n5\n\n\n默认接口的写法如下。\n\nexport { default } from 'foo';\n\n\n1\n\n\n具名接口改为默认接口的写法如下。\n\nexport { es6 as default } from './someModule';\n\n// 等同于\nimport { es6 } from './someModule';\nexport default es6;\n\n\n1\n2\n3\n4\n5\n\n\n同样地，默认接口也可以改名为具名接口。\n\nexport { default as es6 } from './someModule';\n\n\n1\n\n\n下面三种import语句，没有对应的复合写法。\n\nimport * as someIdentifier from \"someModule\";\nimport someIdentifier from \"someModule\";\nimport someIdentifier, { namedIdentifier } from \"someModule\";\n\n\n1\n2\n3\n\n\n为了做到形式的对称，现在有提案，提出补上这三种复合写法。\n\nexport * as someIdentifier from \"someModule\";\nexport someIdentifier from \"someModule\";\nexport someIdentifier, { namedIdentifier } from \"someModule\";\n\n\n1\n2\n3\n\n\n\n# 模块的继承\n\n模块之间也可以继承。\n\n假设有一个circleplus模块，继承了circle模块。\n\n// circleplus.js\n\nexport * from 'circle';\nexport var e = 2.71828182846;\nexport default function(x) {\n  return Math.exp(x);\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n上面代码中的export *，表示再输出circle模块的所有属性和方法。注意，export *命令会忽略circle模块的default方法。然后，上面代码又输出了自定义的e变量和默认方法。\n\n这时，也可以将circle的属性或方法，改名后再输出。\n\n// circleplus.js\n\nexport { area as circleArea } from 'circle';\n\n\n1\n2\n3\n\n\n上面代码表示，只输出circle模块的area方法，且将其改名为circleArea。\n\n加载上面模块的写法如下。\n\n// main.js\n\nimport * as math from 'circleplus';\nimport exp from 'circleplus';\nconsole.log(exp(math.e));\n\n\n1\n2\n3\n4\n5\n\n\n上面代码中的import exp表示，将circleplus模块的默认方法加载为exp方法。\n\n\n# 跨模块常量\n\n本书介绍const命令的时候说过，const声明的常量只在当前代码块有效。如果想设置跨模块的常量（即跨多个文件），或者说一个值要被多个模块共享，可以采用下面的写法。\n\n// constants.js 模块\nexport const A = 1;\nexport const B = 3;\nexport const C = 4;\n\n// test1.js 模块\nimport * as constants from './constants';\nconsole.log(constants.A); // 1\nconsole.log(constants.B); // 3\n\n// test2.js 模块\nimport {A, B} from './constants';\nconsole.log(A); // 1\nconsole.log(B); // 3\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n如果要使用的常量非常多，可以建一个专门的constants目录，将各种常量写在不同的文件里面，保存在该目录下。\n\n// constants/db.js\nexport const db = {\n  url: 'http://my.couchdbserver.local:5984',\n  admin_username: 'admin',\n  admin_password: 'admin password'\n};\n\n// constants/user.js\nexport const users = ['root', 'admin', 'staff', 'ceo', 'chief', 'moderator'];\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n然后，将这些文件输出的常量，合并在index.js里面。\n\n// constants/index.js\nexport {db} from './db';\nexport {users} from './users';\n\n\n1\n2\n3\n\n\n使用的时候，直接加载index.js就可以了。\n\n// script.js\nimport {db, users} from './constants/index';\n\n\n1\n2\n\n\n\n# import()\n\n\n# 简介\n\n前面介绍过，import命令会被 JavaScript 引擎静态分析，先于模块内的其他语句执行（import命令叫做“连接” binding 其实更合适）。所以，下面的代码会报错。\n\n// 报错\nif (x === 2) {\n  import MyModual from './myModual';\n}\n\n\n1\n2\n3\n4\n\n\n上面代码中，引擎处理import语句是在编译时，这时不会去分析或执行if语句，所以import语句放在if代码块之中毫无意义，因此会报句法错误，而不是执行时错误。也就是说，import和export命令只能在模块的顶层，不能在代码块之中（比如，在if代码块之中，或在函数之中）。\n\n这样的设计，固然有利于编译器提高效率，但也导致无法在运行时加载模块。在语法上，条件加载就不可能实现。如果import命令要取代 Node 的require方法，这就形成了一个障碍。因为require是运行时加载模块，import命令无法取代require的动态加载功能。\n\nconst path = './' + fileName;\nconst myModual = require(path);\n\n\n1\n2\n\n\n上面的语句就是动态加载，require到底加载哪一个模块，只有运行时才知道。import命令做不到这一点。\n\nES2020提案 引入import()函数，支持动态加载模块。\n\nimport(specifier)\n\n\n1\n\n\n上面代码中，import函数的参数specifier，指定所要加载的模块的位置。import命令能够接受什么参数，import()函数就能接受什么参数，两者区别主要是后者为动态加载。\n\nimport()返回一个 Promise 对象。下面是一个例子。\n\nconst main = document.querySelector('main');\n\nimport(`./section-modules/${someVariable}.js`)\n  .then(module => {\n    module.loadPageInto(main);\n  })\n  .catch(err => {\n    main.textContent = err.message;\n  });\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\nimport()函数可以用在任何地方，不仅仅是模块，非模块的脚本也可以使用。它是运行时执行，也就是说，什么时候运行到这一句，就会加载指定的模块。另外，import()函数与所加载的模块没有静态连接关系，这点也是与import语句不相同。import()类似于 Node 的require方法，区别主要是前者是异步加载，后者是同步加载。\n\n\n# 适用场合\n\n下面是import()的一些适用场合。\n\n（1）按需加载。\n\nimport()可以在需要的时候，再加载某个模块。\n\nbutton.addEventListener('click', event => {\n  import('./dialogBox.js')\n  .then(dialogBox => {\n    dialogBox.open();\n  })\n  .catch(error => {\n    /* Error handling */\n  })\n});\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n上面代码中，import()方法放在click事件的监听函数之中，只有用户点击了按钮，才会加载这个模块。\n\n（2）条件加载\n\nimport()可以放在if代码块，根据不同的情况，加载不同的模块。\n\nif (condition) {\n  import('moduleA').then(...);\n} else {\n  import('moduleB').then(...);\n}\n\n\n1\n2\n3\n4\n5\n\n\n上面代码中，如果满足条件，就加载模块 A，否则加载模块 B。\n\n（3）动态的模块路径\n\nimport()允许模块路径动态生成。\n\nimport(f())\n.then(...);\n\n\n1\n2\n\n\n上面代码中，根据函数f的返回结果，加载不同的模块。\n\n\n# 注意点\n\nimport()加载模块成功以后，这个模块会作为一个对象，当作then方法的参数。因此，可以使用对象解构赋值的语法，获取输出接口。\n\nimport('./myModule.js')\n.then(({export1, export2}) => {\n  // ...·\n});\n\n\n1\n2\n3\n4\n\n\n上面代码中，export1和export2都是myModule.js的输出接口，可以解构获得。\n\n如果模块有default输出接口，可以用参数直接获得。\n\nimport('./myModule.js')\n.then(myModule => {\n  console.log(myModule.default);\n});\n\n\n1\n2\n3\n4\n\n\n上面的代码也可以使用具名输入的形式。\n\nimport('./myModule.js')\n.then(({default: theDefault}) => {\n  console.log(theDefault);\n});\n\n\n1\n2\n3\n4\n\n\n如果想同时加载多个模块，可以采用下面的写法。\n\nPromise.all([\n  import('./module1.js'),\n  import('./module2.js'),\n  import('./module3.js'),\n])\n.then(([module1, module2, module3]) => {\n   ···\n});\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\nimport()也可以用在 async 函数之中。\n\nasync function main() {\n  const myModule = await import('./myModule.js');\n  const {export1, export2} = await import('./myModule.js');\n  const [module1, module2, module3] =\n    await Promise.all([\n      import('./module1.js'),\n      import('./module2.js'),\n      import('./module3.js'),\n    ]);\n}\nmain();\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n",normalizedContent:"# module 的语法\n\n\n# 概述\n\n历史上，javascript 一直没有模块（module）体系，无法将一个大程序拆分成互相依赖的小文件，再用简单的方法拼装起来。其他语言都有这项功能，比如 ruby 的require、python 的import，甚至就连 css 都有@import，但是 javascript 任何这方面的支持都没有，这对开发大型的、复杂的项目形成了巨大障碍。 在 es6 之前，社区制定了一些模块加载方案，最主要的有 commonjs 和 amd 两种。前者用于服务器，后者用于浏览器。es6 在语言标准的层面上，实现了模块功能，而且实现得相当简单，完全可以取代 commonjs 和 amd 规范，成为浏览器和服务器通用的模块解决方案。\n\nes6 模块的设计思想是尽量的静态化，使得编译时就能确定模块的依赖关系，以及输入和输出的变量。commonjs 和 amd 模块，都只能在运行时确定这些东西。比如，commonjs 模块就是对象，输入时必须查找对象属性。\n\n// commonjs模块\nlet { stat, exists, readfile } = require('fs');\n\n// 等同于\nlet _fs = require('fs');\nlet stat = _fs.stat;\nlet exists = _fs.exists;\nlet readfile = _fs.readfile;\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n上面代码的实质是整体加载fs模块（即加载fs的所有方法），生成一个对象（_fs），然后再从这个对象上面读取 3 个方法。这种加载称为“运行时加载”，因为只有运行时才能得到这个对象，导致完全没办法在编译时做“静态优化”。\n\nes6 模块不是对象，而是通过export命令显式指定输出的代码，再通过import命令输入。\n\n// es6模块\nimport { stat, exists, readfile } from 'fs';\n\n\n1\n2\n\n\n上面代码的实质是从fs模块加载 3 个方法，其他方法不加载。这种加载称为“编译时加载”或者静态加载，**即 es6 可以在编译时就完成模块加载，**效率要比 commonjs 模块的加载方式高。当然，这也导致了没法引用 es6 模块本身，因为它不是对象。\n\n由于 es6 模块是编译时加载，使得静态分析成为可能。有了它，就能进一步拓宽 javascript 的语法，比如引入宏（macro）和类型检验（type system）这些只能靠静态分析实现的功能。\n\n除了静态加载带来的各种好处，es6 模块还有以下好处。\n\n * 不再需要umd模块格式了，将来服务器和浏览器都会支持 es6 模块格式。目前，通过各种工具库，其实已经做到了这一点。\n * 将来浏览器的新 api 就能用模块格式提供，不再必须做成全局变量或者navigator对象的属性。\n * 不再需要对象作为命名空间（比如math对象），未来这些功能可以通过模块提供。\n\n本章介绍 es6 模块的语法，下一章介绍如何在浏览器和 node 之中，加载 es6 模块。\n\n\n# 严格模式\n\nes6 的模块自动采用严格模式，不管你有没有在模块头部加上\"use strict\";。\n\n严格模式主要有以下限制。\n\n * 变量必须声明后再使用\n * 函数的参数不能有同名属性，否则报错\n * 不能使用with语句\n * 不能对只读属性赋值，否则报错\n * 不能使用前缀 0 表示八进制数，否则报错\n * 不能删除不可删除的属性，否则报错\n * 不能删除变量delete prop，会报错，只能删除属性delete global[prop]\n * eval不会在它的外层作用域引入变量\n * eval和arguments不能被重新赋值\n * arguments不会自动反映函数参数的变化\n * 不能使用arguments.callee\n * 不能使用arguments.caller\n * 禁止this指向全局对象\n * 不能使用fn.caller和fn.arguments获取函数调用的堆栈\n * 增加了保留字（比如protected、static和interface）\n\n上面这些限制，模块都必须遵守。由于严格模式是 es5 引入的，不属于 es6，所以请参阅相关 es5 书籍，本书不再详细介绍了。\n\n其中，尤其需要注意this的限制。es6 模块之中，顶层的this指向undefined，即不应该在顶层代码使用this。\n\n\n# export 命令\n\n模块功能主要由两个命令构成：export和import。export命令用于规定模块的对外接口，import命令用于输入其他模块提供的功能。\n\n一个模块就是一个独立的文件。该文件内部的所有变量，外部无法获取。如果你希望外部能够读取模块内部的某个变量，就必须使用export关键字输出该变量。下面是一个 js 文件，里面使用export命令输出变量。\n\n// profile.js\nexport var firstname = 'michael';\nexport var lastname = 'jackson';\nexport var year = 1958;\n\n\n1\n2\n3\n4\n\n\n上面代码是profile.js文件，保存了用户信息。es6 将其视为一个模块，里面用export命令对外部输出了三个变量。\n\nexport的写法，除了像上面这样，还有另外一种。\n\n// profile.js\nvar firstname = 'michael';\nvar lastname = 'jackson';\nvar year = 1958;\n\nexport { firstname, lastname, year };\n\n\n1\n2\n3\n4\n5\n6\n\n\n上面代码在export命令后面，使用大括号指定所要输出的一组变量。它与前一种写法（直接放置在var语句前）是等价的，但是应该优先考虑使用这种写法。因为这样就可以在脚本尾部，一眼看清楚输出了哪些变量。\n\nexport命令除了输出变量，还可以输出函数或类（class）。\n\nexport function multiply(x, y) {\n  return x * y;\n};\n\n\n1\n2\n3\n\n\n上面代码对外输出一个函数multiply。\n\n通常情况下，export输出的变量就是本来的名字，但是可以使用as关键字重命名。\n\nfunction v1() { ... }\nfunction v2() { ... }\n\nexport {\n  v1 as streamv1,\n  v2 as streamv2,\n  v2 as streamlatestversion\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n上面代码使用as关键字，重命名了函数v1和v2的对外接口。重命名后，v2可以用不同的名字输出两次。\n\n需要特别注意的是，export命令规定的是对外的接口，必须与模块内部的变量建立一一对应关系。\n\n// 报错\nexport 1;\n\n// 报错\nvar m = 1;\nexport m;\n\n\n1\n2\n3\n4\n5\n6\n\n\n上面两种写法都会报错，因为没有提供对外的接口。第一种写法直接输出 1，第二种写法通过变量m，还是直接输出 1。1只是一个值，不是接口。正确的写法是下面这样。\n\n// 写法一\nexport var m = 1;\n\n// 写法二\nvar m = 1;\nexport {m};\n\n// 写法三\nvar n = 1;\nexport {n as m};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n上面三种写法都是正确的，规定了对外的接口m。其他脚本可以通过这个接口，取到值1。它们的实质是，在接口名与模块内部变量之间，建立了一一对应的关系。\n\n同样的，function和class的输出，也必须遵守这样的写法。\n\n// 报错\nfunction f() {}\nexport f;\n\n// 正确\nexport function f() {};\n\n// 正确\nfunction f() {}\nexport {f};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n另外，export语句输出的接口，与其对应的值是动态绑定关系，即通过该接口，可以取到模块内部实时的值。\n\nexport var foo = 'bar';\nsettimeout(() => foo = 'baz', 500);\n\n\n1\n2\n\n\n上面代码输出变量foo，值为bar，500 毫秒之后变成baz。\n\n这一点与 commonjs 规范完全不同。commonjs 模块输出的是值的缓存，不存在动态更新，详见下文《module 的加载实现》一节。\n\n最后，export命令可以出现在模块的任何位置，只要处于模块顶层就可以。如果处于块级作用域内，就会报错，下一节的import命令也是如此。这是因为处于条件代码块之中，就没法做静态优化了，违背了 es6 模块的设计初衷。\n\nfunction foo() {\n  export default 'bar' // syntaxerror\n}\nfoo()\n\n\n1\n2\n3\n4\n\n\n上面代码中，export语句放在函数之中，结果报错。\n\n\n# import 命令\n\n使用export命令定义了模块的对外接口以后，其他 js 文件就可以通过import命令加载这个模块。\n\n// main.js\nimport { firstname, lastname, year } from './profile.js';\n\nfunction setname(element) {\n  element.textcontent = firstname + ' ' + lastname;\n}\n\n\n1\n2\n3\n4\n5\n6\n\n\n上面代码的import命令，用于加载profile.js文件，并从中输入变量。import命令接受一对大括号，里面指定要从其他模块导入的变量名。大括号里面的变量名，必须与被导入模块（profile.js）对外接口的名称相同。\n\n如果想为输入的变量重新取一个名字**，import命令要使用as关键字，将输入的变量重命名。**\n\nimport { lastname as surname } from './profile.js';\n\n\n1\n\n\nimport命令输入的变量都是只读的，因为它的本质是输入接口。也就是说，不允许在加载模块的脚本里面，改写接口。\n\nimport {a} from './xxx.js'\n\na = {}; // syntax error : 'a' is read-only;\n\n\n1\n2\n3\n\n\n上面代码中，脚本加载了变量a，对其重新赋值就会报错，因为a是一个只读的接口。但是**，如果a是一个对象，改写a的属性是允许的**。\n\nimport {a} from './xxx.js'\n\na.foo = 'hello'; // 合法操作\n\n\n1\n2\n3\n\n\n上面代码中，a的属性可以成功改写，并且其他模块也可以读到改写后的值。不过，这种写法很难查错，建议凡是输入的变量，都当作完全只读，不要轻易改变它的属性。\n\nimport后面的from指定模块文件的位置，可以是相对路径，也可以是绝对路径，.js后缀可以省略。如果只是模块名，不带有路径，那么必须有配置文件，告诉 javascript 引擎该模块的位置。\n\nimport {mymethod} from 'util';\n\n\n1\n\n\n上面代码中，util是模块文件名，由于不带有路径，必须通过配置，告诉引擎怎么取到这个模块。\n\n注意，import命令具有提升效果，会提升到整个模块的头部，首先执行。\n\nfoo();\n\nimport { foo } from 'my_module';\n\n\n1\n2\n3\n\n\n上面的代码不会报错，因为import的执行早于foo的调用。这种行为的本质是，import命令是编译阶段执行的，在代码运行之前。\n\n由于import是静态执行，所以不能使用表达式和变量，这些只有在运行时才能得到结果的语法结构。\n\n// 报错\nimport { 'f' + 'oo' } from 'my_module';\n\n// 报错\nlet module = 'my_module';\nimport { foo } from module;\n\n// 报错\nif (x === 1) {\n  import { foo } from 'module1';\n} else {\n  import { foo } from 'module2';\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n上面三种写法都会报错，因为它们用到了表达式、变量和if结构。在静态分析阶段，这些语法都是没法得到值的。\n\n最后，import语句会执行所加载的模块，因此可以有下面的写法。\n\nimport 'lodash';\n\n\n1\n\n\n上面代码仅仅执行lodash模块，但是不输入任何值。\n\n如果多次重复执行同一句import语句，那么只会执行一次，而不会执行多次。\n\nimport 'lodash';\nimport 'lodash';\n\n\n1\n2\n\n\n上面代码加载了两次lodash，但是只会执行一次。\n\nimport { foo } from 'my_module';\nimport { bar } from 'my_module';\n\n// 等同于\nimport { foo, bar } from 'my_module';\n\n\n1\n2\n3\n4\n5\n\n\n上面代码中，虽然foo和bar在两个语句中加载，但是它们对应的是同一个my_module实例。也就是说，import语句是 singleton 模式。\n\n目前阶段，通过 babel 转码，commonjs 模块的require命令和 es6 模块的import命令，可以写在同一个模块里面，但是最好不要这样做。因为import在静态解析阶段执行，所以它是一个模块之中最早执行的。下面的代码可能不会得到预期结果。\n\nrequire('core-js/modules/es6.symbol');\nrequire('core-js/modules/es6.promise');\nimport react from 'react';\n\n\n1\n2\n3\n\n\n\n# 模块的整体加载-(星号*)\n\n除了指定加载某个输出值，还可以使用整体加载，即用星号（*）指定一个对象，所有输出值都加载在这个对象上面。\n\n下面是一个circle.js文件，它输出两个方法area和circumference。\n\n// circle.js\n\nexport function area(radius) {\n  return math.pi * radius * radius;\n}\n\nexport function circumference(radius) {\n  return 2 * math.pi * radius;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n现在，加载这个模块。\n\n// main.js\n\nimport { area, circumference } from './circle';\n\nconsole.log('圆面积：' + area(4));\nconsole.log('圆周长：' + circumference(14));\n\n\n1\n2\n3\n4\n5\n6\n\n\n上面写法是逐一指定要加载的方法，整体加载的写法如下。\n\nimport * as circle from './circle';\n\nconsole.log('圆面积：' + circle.area(4));\nconsole.log('圆周长：' + circle.circumference(14));\n\n\n1\n2\n3\n4\n\n\n注意，模块整体加载所在的那个对象（上例是circle），应该是可以静态分析的，所以不允许运行时改变。下面的写法都是不允许的。\n\nimport * as circle from './circle';\n\n// 下面两行都是不允许的\ncircle.foo = 'hello';\ncircle.area = function () {};\n\n\n1\n2\n3\n4\n5\n\n\n\n# export default 命令\n\n从前面的例子可以看出，使用import命令的时候，用户需要知道所要加载的变量名或函数名，否则无法加载。但是，用户肯定希望快速上手，未必愿意阅读文档，去了解模块有哪些属性和方法。\n\n为了给用户提供方便，让他们不用阅读文档就能加载模块，就要用到**export default命令，为模块指定默认输出。**\n\n// export-default.js\nexport default function () {\n  console.log('foo');\n}\n\n\n1\n2\n3\n4\n\n\n上面代码是一个模块文件export-default.js，它的默认输出是一个函数。\n\n其他模块加载该模块时，import命令可以为该匿名函数指定任意名字。\n\n// import-default.js\nimport customname from './export-default';\ncustomname(); // 'foo'\n\n\n1\n2\n3\n\n\n上面代码的import命令，可以用任意名称指向export-default.js输出的方法，这时就不需要知道原模块输出的函数名。需要注意的是，这时import命令后面，不使用大括号。\n\nexport default命令用在非匿名函数前，也是可以的。\n\n// export-default.js\nexport default function foo() {\n  console.log('foo');\n}\n\n// 或者写成\n\nfunction foo() {\n  console.log('foo');\n}\n\nexport default foo;\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n上面代码中，foo函数的函数名foo，在模块外部是无效的。加载的时候，视同匿名函数加载。\n\n下面比较一下默认输出和正常输出。\n\n// 第一组\nexport default function crc32() { // 输出\n  // ...\n}\n\nimport crc32 from 'crc32'; // 输入\n\n// 第二组\nexport function crc32() { // 输出\n  // ...\n};\n\nimport {crc32} from 'crc32'; // 输入\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n上面代码的两组写法，第一组是使用export default时，对应的import语句不需要使用大括号；第二组是不使用export default时，对应的import语句需要使用大括号。\n\nexport default命令用于指定模块的默认输出。显然，一个模块只能有一个默认输出，因此export default命令只能使用一次。所以，import命令后面才不用加大括号，因为只可能唯一对应export default命令。\n\n**本质上，export default就是输出一个叫做default的变量或方法，**然后系统允许你为它取任意名字。所以，下面的写法是有效的。\n\n// modules.js\nfunction add(x, y) {\n  return x * y;\n}\nexport {add as default};\n// 等同于\n// export default add;\n\n// app.js\nimport { default as foo } from 'modules';\n// 等同于\n// import foo from 'modules';\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n正是因为export default命令其实只是输出一个叫做default的变量，所以它后面不能跟变量声明语句。\n\n// 正确\nexport var a = 1;\n\n// 正确\nvar a = 1;\nexport default a;\n\n// 错误\nexport default var a = 1;\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n上面代码中，export default a的含义是将变量a的值赋给变量default。所以，最后一种写法会报错。\n\n同样地，因为export default命令的本质是将后面的值，赋给default变量，所以可以直接将一个值写在export default之后。\n\n// 正确\nexport default 42;\n\n// 报错\nexport 42;\n\n\n1\n2\n3\n4\n5\n\n\n上面代码中，后一句报错是因为没有指定对外的接口，而前一句指定对外接口为default。\n\n有了export default命令，输入模块时就非常直观了，以输入 lodash 模块为例。\n\nimport _ from 'lodash';\n\n\n1\n\n\n如果想在一条import语句中，同时输入默认方法和其他接口，可以写成下面这样。\n\nimport _, { each, foreach } from 'lodash';\n\n\n1\n\n\n对应上面代码的export语句如下。\n\nexport default function (obj) {\n  // ···\n}\n\nexport function each(obj, iterator, context) {\n  // ···\n}\n\nexport { each as foreach };\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n上面代码的最后一行的意思是，暴露出foreach接口，默认指向each接口，即foreach和each指向同一个方法。\n\nexport default也可以用来输出类。\n\n// myclass.js\nexport default class { ... }\n\n// main.js\nimport myclass from 'myclass';\nlet o = new myclass();\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# export 与 import 的复合写法\n\n如果在一个模块之中，先输入后输出同一个模块，import语句可以与export语句写在一起。\n\nexport { foo, bar } from 'my_module';\n\n// 可以简单理解为\nimport { foo, bar } from 'my_module';\nexport { foo, bar };\n\n\n1\n2\n3\n4\n5\n\n\n上面代码中，export和import语句可以结合在一起，写成一行。但需要注意的是，写成一行以后，foo和bar实际上并没有被导入当前模块，只是相当于对外转发了这两个接口，导致当前模块不能直接使用foo和bar。\n\n模块的接口改名和整体输出，也可以采用这种写法。\n\n// 接口改名\nexport { foo as myfoo } from 'my_module';\n\n// 整体输出\nexport * from 'my_module';\n\n\n1\n2\n3\n4\n5\n\n\n默认接口的写法如下。\n\nexport { default } from 'foo';\n\n\n1\n\n\n具名接口改为默认接口的写法如下。\n\nexport { es6 as default } from './somemodule';\n\n// 等同于\nimport { es6 } from './somemodule';\nexport default es6;\n\n\n1\n2\n3\n4\n5\n\n\n同样地，默认接口也可以改名为具名接口。\n\nexport { default as es6 } from './somemodule';\n\n\n1\n\n\n下面三种import语句，没有对应的复合写法。\n\nimport * as someidentifier from \"somemodule\";\nimport someidentifier from \"somemodule\";\nimport someidentifier, { namedidentifier } from \"somemodule\";\n\n\n1\n2\n3\n\n\n为了做到形式的对称，现在有提案，提出补上这三种复合写法。\n\nexport * as someidentifier from \"somemodule\";\nexport someidentifier from \"somemodule\";\nexport someidentifier, { namedidentifier } from \"somemodule\";\n\n\n1\n2\n3\n\n\n\n# 模块的继承\n\n模块之间也可以继承。\n\n假设有一个circleplus模块，继承了circle模块。\n\n// circleplus.js\n\nexport * from 'circle';\nexport var e = 2.71828182846;\nexport default function(x) {\n  return math.exp(x);\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n上面代码中的export *，表示再输出circle模块的所有属性和方法。注意，export *命令会忽略circle模块的default方法。然后，上面代码又输出了自定义的e变量和默认方法。\n\n这时，也可以将circle的属性或方法，改名后再输出。\n\n// circleplus.js\n\nexport { area as circlearea } from 'circle';\n\n\n1\n2\n3\n\n\n上面代码表示，只输出circle模块的area方法，且将其改名为circlearea。\n\n加载上面模块的写法如下。\n\n// main.js\n\nimport * as math from 'circleplus';\nimport exp from 'circleplus';\nconsole.log(exp(math.e));\n\n\n1\n2\n3\n4\n5\n\n\n上面代码中的import exp表示，将circleplus模块的默认方法加载为exp方法。\n\n\n# 跨模块常量\n\n本书介绍const命令的时候说过，const声明的常量只在当前代码块有效。如果想设置跨模块的常量（即跨多个文件），或者说一个值要被多个模块共享，可以采用下面的写法。\n\n// constants.js 模块\nexport const a = 1;\nexport const b = 3;\nexport const c = 4;\n\n// test1.js 模块\nimport * as constants from './constants';\nconsole.log(constants.a); // 1\nconsole.log(constants.b); // 3\n\n// test2.js 模块\nimport {a, b} from './constants';\nconsole.log(a); // 1\nconsole.log(b); // 3\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n如果要使用的常量非常多，可以建一个专门的constants目录，将各种常量写在不同的文件里面，保存在该目录下。\n\n// constants/db.js\nexport const db = {\n  url: 'http://my.couchdbserver.local:5984',\n  admin_username: 'admin',\n  admin_password: 'admin password'\n};\n\n// constants/user.js\nexport const users = ['root', 'admin', 'staff', 'ceo', 'chief', 'moderator'];\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n然后，将这些文件输出的常量，合并在index.js里面。\n\n// constants/index.js\nexport {db} from './db';\nexport {users} from './users';\n\n\n1\n2\n3\n\n\n使用的时候，直接加载index.js就可以了。\n\n// script.js\nimport {db, users} from './constants/index';\n\n\n1\n2\n\n\n\n# import()\n\n\n# 简介\n\n前面介绍过，import命令会被 javascript 引擎静态分析，先于模块内的其他语句执行（import命令叫做“连接” binding 其实更合适）。所以，下面的代码会报错。\n\n// 报错\nif (x === 2) {\n  import mymodual from './mymodual';\n}\n\n\n1\n2\n3\n4\n\n\n上面代码中，引擎处理import语句是在编译时，这时不会去分析或执行if语句，所以import语句放在if代码块之中毫无意义，因此会报句法错误，而不是执行时错误。也就是说，import和export命令只能在模块的顶层，不能在代码块之中（比如，在if代码块之中，或在函数之中）。\n\n这样的设计，固然有利于编译器提高效率，但也导致无法在运行时加载模块。在语法上，条件加载就不可能实现。如果import命令要取代 node 的require方法，这就形成了一个障碍。因为require是运行时加载模块，import命令无法取代require的动态加载功能。\n\nconst path = './' + filename;\nconst mymodual = require(path);\n\n\n1\n2\n\n\n上面的语句就是动态加载，require到底加载哪一个模块，只有运行时才知道。import命令做不到这一点。\n\nes2020提案 引入import()函数，支持动态加载模块。\n\nimport(specifier)\n\n\n1\n\n\n上面代码中，import函数的参数specifier，指定所要加载的模块的位置。import命令能够接受什么参数，import()函数就能接受什么参数，两者区别主要是后者为动态加载。\n\nimport()返回一个 promise 对象。下面是一个例子。\n\nconst main = document.queryselector('main');\n\nimport(`./section-modules/${somevariable}.js`)\n  .then(module => {\n    module.loadpageinto(main);\n  })\n  .catch(err => {\n    main.textcontent = err.message;\n  });\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\nimport()函数可以用在任何地方，不仅仅是模块，非模块的脚本也可以使用。它是运行时执行，也就是说，什么时候运行到这一句，就会加载指定的模块。另外，import()函数与所加载的模块没有静态连接关系，这点也是与import语句不相同。import()类似于 node 的require方法，区别主要是前者是异步加载，后者是同步加载。\n\n\n# 适用场合\n\n下面是import()的一些适用场合。\n\n（1）按需加载。\n\nimport()可以在需要的时候，再加载某个模块。\n\nbutton.addeventlistener('click', event => {\n  import('./dialogbox.js')\n  .then(dialogbox => {\n    dialogbox.open();\n  })\n  .catch(error => {\n    /* error handling */\n  })\n});\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n上面代码中，import()方法放在click事件的监听函数之中，只有用户点击了按钮，才会加载这个模块。\n\n（2）条件加载\n\nimport()可以放在if代码块，根据不同的情况，加载不同的模块。\n\nif (condition) {\n  import('modulea').then(...);\n} else {\n  import('moduleb').then(...);\n}\n\n\n1\n2\n3\n4\n5\n\n\n上面代码中，如果满足条件，就加载模块 a，否则加载模块 b。\n\n（3）动态的模块路径\n\nimport()允许模块路径动态生成。\n\nimport(f())\n.then(...);\n\n\n1\n2\n\n\n上面代码中，根据函数f的返回结果，加载不同的模块。\n\n\n# 注意点\n\nimport()加载模块成功以后，这个模块会作为一个对象，当作then方法的参数。因此，可以使用对象解构赋值的语法，获取输出接口。\n\nimport('./mymodule.js')\n.then(({export1, export2}) => {\n  // ...·\n});\n\n\n1\n2\n3\n4\n\n\n上面代码中，export1和export2都是mymodule.js的输出接口，可以解构获得。\n\n如果模块有default输出接口，可以用参数直接获得。\n\nimport('./mymodule.js')\n.then(mymodule => {\n  console.log(mymodule.default);\n});\n\n\n1\n2\n3\n4\n\n\n上面的代码也可以使用具名输入的形式。\n\nimport('./mymodule.js')\n.then(({default: thedefault}) => {\n  console.log(thedefault);\n});\n\n\n1\n2\n3\n4\n\n\n如果想同时加载多个模块，可以采用下面的写法。\n\npromise.all([\n  import('./module1.js'),\n  import('./module2.js'),\n  import('./module3.js'),\n])\n.then(([module1, module2, module3]) => {\n   ···\n});\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\nimport()也可以用在 async 函数之中。\n\nasync function main() {\n  const mymodule = await import('./mymodule.js');\n  const {export1, export2} = await import('./mymodule.js');\n  const [module1, module2, module3] =\n    await promise.all([\n      import('./module1.js'),\n      import('./module2.js'),\n      import('./module3.js'),\n    ]);\n}\nmain();\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n",charsets:{cjk:!0}},{title:"最新提案",frontmatter:{title:"最新提案",date:"2020-02-09T16:00:30.000Z",permalink:"/pages/7188882b8d65af1b",author:"阮一峰",categories:["《ES6 教程》笔记"],tags:["ES6"],readingShow:"top"},regularPath:"/06.%E4%B9%A6%E7%B1%8D/05.%E3%80%8AES6%20%E6%95%99%E7%A8%8B%E3%80%8B%E7%AC%94%E8%AE%B0/29.%E6%9C%80%E6%96%B0%E6%8F%90%E6%A1%88.html",relativePath:"06.书籍/05.《ES6 教程》笔记/29.最新提案.md",key:"v-4864b371",path:"/pages/7188882b8d65af1b/",headers:[{level:2,title:"do 表达式",slug:"do-表达式",normalizedTitle:"do 表达式",charIndex:37},{level:2,title:"throw 表达式",slug:"throw-表达式",normalizedTitle:"throw 表达式",charIndex:1009},{level:2,title:"函数的部分执行",slug:"函数的部分执行",normalizedTitle:"函数的部分执行",charIndex:1983},{level:3,title:"语法",slug:"语法",normalizedTitle:"语法",charIndex:724},{level:3,title:"注意点",slug:"注意点",normalizedTitle:"注意点",charIndex:2862},{level:2,title:"管道运算符",slug:"管道运算符",normalizedTitle:"管道运算符",charIndex:3777},{level:2,title:"数值分隔符",slug:"数值分隔符",normalizedTitle:"数值分隔符",charIndex:5042},{level:2,title:"Math.signbit()",slug:"math-signbit",normalizedTitle:"math.signbit()",charIndex:6012},{level:2,title:"双冒号运算符",slug:"双冒号运算符",normalizedTitle:"双冒号运算符",charIndex:6558},{level:2,title:"Realm API",slug:"realm-api",normalizedTitle:"realm api",charIndex:7418},{level:2,title:"#!命令",slug:"命令",normalizedTitle:"#!命令",charIndex:9349},{level:2,title:"import.meta",slug:"import-meta",normalizedTitle:"import.meta",charIndex:9834}],excerpt:'<h1 id="最新提案"><a class="header-anchor" href="#最新提案">#</a> 最新提案</h1>\n<p>本章介绍一些尚未进入标准、但很有希望的最新提案。</p>\n<h2 id="do-表达式"><a class="header-anchor" href="#do-表达式">#</a> do 表达式</h2>\n<p>本质上，块级作用域是一个语句，将多个操作封装在一起，没有返回值。</p>\n\x3c!--beforebegin--\x3e<div class="language-javascript line-numbers-mode">\x3c!--afterbegin--\x3e<pre v-pre class="language-javascript"><code><span class="token punctuation">{</span>\n  <span class="token keyword">let</span> t <span class="token operator">=</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  t <span class="token operator">=</span> t <span class="token operator">*</span> t <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div>\x3c!--beforeend--\x3e</div>\x3c!--afterend--\x3e',lastUpdated:"2022/9/22 下午4:28:09",lastUpdatedTimestamp:1663835289e3,headersStr:"do 表达式 throw 表达式 函数的部分执行 语法 注意点 管道运算符 数值分隔符 Math.signbit() 双冒号运算符 Realm API #!命令 import.meta",content:"# 最新提案\n\n本章介绍一些尚未进入标准、但很有希望的最新提案。\n\n\n# do 表达式\n\n本质上，块级作用域是一个语句，将多个操作封装在一起，没有返回值。\n\n{\n  let t = f();\n  t = t * t + 1;\n}\n\n\n1\n2\n3\n4\n\n\n上面代码中，块级作用域将两个语句封装在一起。但是，在块级作用域以外，没有办法得到t的值，因为块级作用域不返回值，除非t是全局变量。\n\n现在有一个提案，使得块级作用域可以变为表达式，也就是说可以返回值，办法就是在块级作用域之前加上do，使它变为do表达式，然后就会返回内部最后执行的表达式的值。\n\nlet x = do {\n  let t = f();\n  t * t + 1;\n};\n\n\n1\n2\n3\n4\n\n\n上面代码中，变量x会得到整个块级作用域的返回值（t * t + 1）。\n\ndo表达式的逻辑非常简单：封装的是什么，就会返回什么。\n\n// 等同于 <表达式>\ndo { <表达式>; }\n\n// 等同于 <语句>\ndo { <语句> }\n\n\n1\n2\n3\n4\n5\n\n\ndo表达式的好处是可以封装多个语句，让程序更加模块化，就像乐高积木那样一块块拼装起来。\n\nlet x = do {\n  if (foo()) { f() }\n  else if (bar()) { g() }\n  else { h() }\n};\n\n\n1\n2\n3\n4\n5\n\n\n上面代码的本质，就是根据函数foo的执行结果，调用不同的函数，将返回结果赋给变量x。使用do表达式，就将这个操作的意图表达得非常简洁清晰。而且，do块级作用域提供了单独的作用域，内部操作可以与全局作用域隔绝。\n\n值得一提的是，do表达式在 JSX 语法中非常好用。\n\nreturn (\n  <nav>\n    <Home />\n    {\n      do {\n        if (loggedIn) {\n          <LogoutButton />\n        } else {\n          <LoginButton />\n        }\n      }\n    }\n  </nav>\n)\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n上面代码中，如果不用do表达式，就只能用三元判断运算符（?:）。那样的话，一旦判断逻辑复杂，代码就会变得很不易读。\n\n\n# throw 表达式\n\nJavaScript 语法规定throw是一个命令，用来抛出错误，不能用于表达式之中。\n\n// 报错\nconsole.log(throw new Error());\n\n\n1\n2\n\n\n上面代码中，console.log的参数必须是一个表达式，如果是一个throw语句就会报错。\n\n现在有一个提案，允许throw用于表达式。\n\n// 参数的默认值\nfunction save(filename = throw new TypeError(\"Argument required\")) {\n}\n\n// 箭头函数的返回值\nlint(ast, {\n  with: () => throw new Error(\"avoid using 'with' statements.\")\n});\n\n// 条件表达式\nfunction getEncoder(encoding) {\n  const encoder = encoding === \"utf8\" ?\n    new UTF8Encoder() :\n    encoding === \"utf16le\" ?\n      new UTF16Encoder(false) :\n      encoding === \"utf16be\" ?\n        new UTF16Encoder(true) :\n        throw new Error(\"Unsupported encoding\");\n}\n\n// 逻辑表达式\nclass Product {\n  get id() {\n    return this._id;\n  }\n  set id(value) {\n    this._id = value || throw new Error(\"Invalid value\");\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n\n\n上面代码中，throw都出现在表达式里面。\n\n语法上，throw表达式里面的throw不再是一个命令，而是一个运算符。为了避免与throw命令混淆，规定throw出现在行首，一律解释为throw语句，而不是throw表达式。\n\n\n# 函数的部分执行\n\n\n# 语法\n\n多参数的函数有时需要绑定其中的一个或多个参数，然后返回一个新函数。\n\nfunction add(x, y) { return x + y; }\nfunction add7(x) { return x + 7; }\n\n\n1\n2\n\n\n上面代码中，add7函数其实是add函数的一个特殊版本，通过将一个参数绑定为7，就可以从add得到add7。\n\n// bind 方法\nconst add7 = add.bind(null, 7);\n\n// 箭头函数\nconst add7 = x => add(x, 7);\n\n\n1\n2\n3\n4\n5\n\n\n上面两种写法都有些冗余。其中，bind方法的局限更加明显，它必须提供this，并且只能从前到后一个个绑定参数，无法只绑定非头部的参数。\n\n现在有一个提案，使得绑定参数并返回一个新函数更加容易。这叫做函数的部分执行（partial application）。\n\nconst add = (x, y) => x + y;\nconst addOne = add(1, ?);\n\nconst maxGreaterThanZero = Math.max(0, ...);\n\n\n1\n2\n3\n4\n\n\n根据新提案，?是单个参数的占位符，...是多个参数的占位符。以下的形式都属于函数的部分执行。\n\nf(x, ?)\nf(x, ...)\nf(?, x)\nf(..., x)\nf(?, x, ?)\nf(..., x, ...)\n\n\n1\n2\n3\n4\n5\n6\n\n\n?和...只能出现在函数的调用之中，并且会返回一个新函数。\n\nconst g = f(?, 1, ...);\n// 等同于\nconst g = (x, ...y) => f(x, 1, ...y);\n\n\n1\n2\n3\n\n\n函数的部分执行，也可以用于对象的方法。\n\nlet obj = {\n  f(x, y) { return x + y; },\n};\n\nconst g = obj.f(?, 3);\ng(1) // 4\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# 注意点\n\n函数的部分执行有一些特别注意的地方。\n\n（1）函数的部分执行是基于原函数的。如果原函数发生变化，部分执行生成的新函数也会立即反映这种变化。\n\nlet f = (x, y) => x + y;\n\nconst g = f(?, 3);\ng(1); // 4\n\n// 替换函数 f\nf = (x, y) => x * y;\n\ng(1); // 3\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n上面代码中，定义了函数的部分执行以后，更换原函数会立即影响到新函数。\n\n（2）如果预先提供的那个值是一个表达式，那么这个表达式并不会在定义时求值，而是在每次调用时求值。\n\nlet a = 3;\nconst f = (x, y) => x + y;\n\nconst g = f(?, a);\ng(1); // 4\n\n// 改变 a 的值\na = 10;\ng(1); // 11\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n上面代码中，预先提供的参数是变量a，那么每次调用函数g的时候，才会对a进行求值。\n\n（3）如果新函数的参数多于占位符的数量，那么多余的参数将被忽略。\n\nconst f = (x, ...y) => [x, ...y];\nconst g = f(?, 1);\ng(2, 3, 4); // [2, 1]\n\n\n1\n2\n3\n\n\n上面代码中，函数g只有一个占位符，也就意味着它只能接受一个参数，多余的参数都会被忽略。\n\n写成下面这样，多余的参数就没有问题。\n\nconst f = (x, ...y) => [x, ...y];\nconst g = f(?, 1, ...);\ng(2, 3, 4); // [2, 1, 3, 4];\n\n\n1\n2\n3\n\n\n（4）...只会被采集一次，如果函数的部分执行使用了多个...，那么每个...的值都将相同。\n\nconst f = (...x) => x;\nconst g = f(..., 9, ...);\ng(1, 2, 3); // [1, 2, 3, 9, 1, 2, 3]\n\n\n1\n2\n3\n\n\n上面代码中，g定义了两个...占位符，真正执行的时候，它们的值是一样的。\n\n\n# 管道运算符\n\nUnix 操作系统有一个管道机制（pipeline），可以把前一个操作的值传给后一个操作。这个机制非常有用，使得简单的操作可以组合成为复杂的操作。许多语言都有管道的实现，现在有一个提案，让 JavaScript 也拥有管道机制。\n\nJavaScript 的管道是一个运算符，写作|>。它的左边是一个表达式，右边是一个函数。管道运算符把左边表达式的值，传入右边的函数进行求值。\n\nx |> f\n// 等同于\nf(x)\n\n\n1\n2\n3\n\n\n管道运算符最大的好处，就是可以把嵌套的函数，写成从左到右的链式表达式。\n\nfunction doubleSay (str) {\n  return str + \", \" + str;\n}\n\nfunction capitalize (str) {\n  return str[0].toUpperCase() + str.substring(1);\n}\n\nfunction exclaim (str) {\n  return str + '!';\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n上面是三个简单的函数。如果要嵌套执行，传统的写法和管道的写法分别如下。\n\n// 传统的写法\nexclaim(capitalize(doubleSay('hello')))\n// \"Hello, hello!\"\n\n// 管道的写法\n'hello'\n  |> doubleSay\n  |> capitalize\n  |> exclaim\n// \"Hello, hello!\"\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n管道运算符只能传递一个值，这意味着它右边的函数必须是一个单参数函数。如果是多参数函数，就必须进行柯里化，改成单参数的版本。\n\nfunction double (x) { return x + x; }\nfunction add (x, y) { return x + y; }\n\nlet person = { score: 25 };\nperson.score\n  |> double\n  |> (_ => add(7, _))\n// 57\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n上面代码中，add函数需要两个参数。但是，管道运算符只能传入一个值，因此需要事先提供另一个参数，并将其改成单参数的箭头函数_ => add(7, _)。这个函数里面的下划线并没有特别的含义，可以用其他符号代替，使用下划线只是因为，它能够形象地表示这里是占位符。\n\n管道运算符对于await函数也适用。\n\nx |> await f\n// 等同于\nawait f(x)\n\nconst userAge = userId |> await fetchUserById |> getAgeFromUser;\n// 等同于\nconst userAge = getAgeFromUser(await fetchUserById(userId));\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# 数值分隔符\n\n欧美语言中，较长的数值允许每三位添加一个分隔符（通常是一个逗号），增加数值的可读性。比如，1000可以写作1,000。\n\n现在有一个提案，允许 JavaScript 的数值使用下划线（_）作为分隔符。\n\nlet budget = 1_000_000_000_000;\nbudget === 10 ** 12 // true\n\n\n1\n2\n\n\nJavaScript 的数值分隔符没有指定间隔的位数，也就是说，可以每三位添加一个分隔符，也可以每一位、每两位、每四位添加一个。\n\n123_00 === 12_300 // true\n\n12345_00 === 123_4500 // true\n12345_00 === 1_234_500 // true\n\n\n1\n2\n3\n4\n\n\n小数和科学计数法也可以使用数值分隔符。\n\n// 小数\n0.000_001\n// 科学计数法\n1e10_000\n\n\n1\n2\n3\n4\n\n\n数值分隔符有几个使用注意点。\n\n * 不能在数值的最前面（leading）或最后面（trailing）。\n * 不能两个或两个以上的分隔符连在一起。\n * 小数点的前后不能有分隔符。\n * 科学计数法里面，表示指数的e或E前后不能有分隔符。\n\n下面的写法都会报错。\n\n// 全部报错\n3_.141\n3._141\n1_e12\n1e_12\n123__456\n_1464301\n1464301_\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n除了十进制，其他进制的数值也可以使用分隔符。\n\n// 二进制\n0b1010_0001_1000_0101\n// 十六进制\n0xA0_B0_C0\n\n\n1\n2\n3\n4\n\n\n注意，分隔符不能紧跟着进制的前缀0b、0B、0o、0O、0x、0X。\n\n// 报错\n0_b111111000\n0b_111111000\n\n\n1\n2\n3\n\n\n下面三个将字符串转成数值的函数，不支持数值分隔符。主要原因是提案的设计者认为，数值分隔符主要是为了编码时书写数值的方便，而不是为了处理外部输入的数据。\n\n * Number()\n * parseInt()\n * parseFloat()\n\nNumber('123_456') // NaN\nparseInt('123_456') // 123\n\n\n1\n2\n\n\n\n# Math.signbit()\n\nMath.sign()用来判断一个值的正负，但是如果参数是-0，它会返回-0。\n\nMath.sign(-0) // -0\n\n\n1\n\n\n这导致对于判断符号位的正负，Math.sign()不是很有用。JavaScript 内部使用 64 位浮点数（国际标准 IEEE 754）表示数值，IEEE 754 规定第一位是符号位，0表示正数，1表示负数。所以会有两种零，+0是符号位为0时的零值，-0是符号位为1时的零值。实际编程中，判断一个值是+0还是-0非常麻烦，因为它们是相等的。\n\n+0 === -0 // true\n\n\n1\n\n\n目前，有一个提案，引入了Math.signbit()方法判断一个数的符号位是否设置了。\n\nMath.signbit(2) //false\nMath.signbit(-2) //true\nMath.signbit(0) //false\nMath.signbit(-0) //true\n\n\n1\n2\n3\n4\n\n\n可以看到，该方法正确返回了-0的符号位是设置了的。\n\n该方法的算法如下。\n\n * 如果参数是NaN，返回false\n * 如果参数是-0，返回true\n * 如果参数是负值，返回true\n * 其他情况返回false\n\n\n# 双冒号运算符\n\n箭头函数可以绑定this对象，大大减少了显式绑定this对象的写法（call、apply、bind）。但是，箭头函数并不适用于所有场合，所以现在有一个提案，提出了“函数绑定”（function bind）运算符，用来取代call、apply、bind调用。\n\n函数绑定运算符是并排的两个冒号（::），双冒号左边是一个对象，右边是一个函数。该运算符会自动将左边的对象，作为上下文环境（即this对象），绑定到右边的函数上面。\n\nfoo::bar;\n// 等同于\nbar.bind(foo);\n\nfoo::bar(...arguments);\n// 等同于\nbar.apply(foo, arguments);\n\nconst hasOwnProperty = Object.prototype.hasOwnProperty;\nfunction hasOwn(obj, key) {\n  return obj::hasOwnProperty(key);\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n如果双冒号左边为空，右边是一个对象的方法，则等于将该方法绑定在该对象上面。\n\nvar method = obj::obj.foo;\n// 等同于\nvar method = ::obj.foo;\n\nlet log = ::console.log;\n// 等同于\nvar log = console.log.bind(console);\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n如果双冒号运算符的运算结果，还是一个对象，就可以采用链式写法。\n\nimport { map, takeWhile, forEach } from \"iterlib\";\n\ngetPlayers()\n::map(x => x.character())\n::takeWhile(x => x.strength > 100)\n::forEach(x => console.log(x));\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# Realm API\n\nRealm API 提供沙箱功能（sandbox），允许隔离代码，防止那些被隔离的代码拿到全局对象。\n\n以前，经常使用<iframe>作为沙箱。\n\nconst globalOne = window;\nlet iframe = document.createElement('iframe');\ndocument.body.appendChild(iframe);\nconst globalTwo = iframe.contentWindow;\n\n\n1\n2\n3\n4\n\n\n上面代码中，<iframe>的全局对象是独立的（iframe.contentWindow）。Realm API 可以取代这个功能。\n\nconst globalOne = window;\nconst globalTwo = new Realm().global;\n\n\n1\n2\n\n\n上面代码中，Realm API单独提供了一个全局对象new Realm().global。\n\nRealm API 提供一个Realm()构造函数，用来生成一个 Realm 对象。该对象的global属性指向一个新的顶层对象，这个顶层对象跟原始的顶层对象类似。\n\nconst globalOne = window;\nconst globalTwo = new Realm().global;\n\nglobalOne.evaluate('1 + 2') // 3\nglobalTwo.evaluate('1 + 2') // 3\n\n\n1\n2\n3\n4\n5\n\n\n上面代码中，Realm 生成的顶层对象的evaluate()方法，可以运行代码。\n\n下面的代码可以证明，Realm 顶层对象与原始顶层对象是两个对象。\n\nlet a1 = globalOne.evaluate('[1,2,3]');\nlet a2 = globalTwo.evaluate('[1,2,3]');\na1.prototype === a2.prototype; // false\na1 instanceof globalTwo.Array; // false\na2 instanceof globalOne.Array; // false\n\n\n1\n2\n3\n4\n5\n\n\n上面代码中，Realm 沙箱里面的数组的原型对象，跟原始环境里面的数组是不一样的。\n\nRealm 沙箱里面只能运行 ECMAScript 语法提供的 API，不能运行宿主环境提供的 API。\n\nglobalTwo.evaluate('console.log(1)')\n// throw an error: console is undefined\n\n\n1\n2\n\n\n上面代码中，Realm 沙箱里面没有console对象，导致报错。因为console不是语法标准，是宿主环境提供的。\n\n如果要解决这个问题，可以使用下面的代码。\n\nglobalTwo.console = globalOne.console;\n\n\n1\n\n\nRealm()构造函数可以接受一个参数对象，该参数对象的intrinsics属性可以指定 Realm 沙箱继承原始顶层对象的方法。\n\nconst r1 = new Realm();\nr1.global === this;\nr1.global.JSON === JSON; // false\n\nconst r2 = new Realm({ intrinsics: 'inherit' });\nr2.global === this; // false\nr2.global.JSON === JSON; // true\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n上面代码中，正常情况下，沙箱的JSON方法不同于原始的JSON对象。但是，Realm()构造函数接受{ intrinsics: 'inherit' }作为参数以后，就会继承原始顶层对象的方法。\n\n用户可以自己定义Realm的子类，用来定制自己的沙箱。\n\nclass FakeWindow extends Realm {\n  init() {\n    super.init();\n    let global = this.global;\n\n    global.document = new FakeDocument(...);\n    global.alert = new Proxy(fakeAlert, { ... });\n    // ...\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n上面代码中，FakeWindow模拟了一个假的顶层对象window。\n\n\n# #!命令\n\nUnix 的命令行脚本都支持#!命令，又称为 Shebang 或 Hashbang。这个命令放在脚本的第一行，用来指定脚本的执行器。\n\n比如 Bash 脚本的第一行。\n\n#!/bin/sh\n\n\n1\n\n\nPython 脚本的第一行。\n\n#!/usr/bin/env python\n\n\n1\n\n\n现在有一个提案，为 JavaScript 脚本引入了#!命令，写在脚本文件或者模块文件的第一行。\n\n// 写在脚本文件第一行\n#!/usr/bin/env node\n'use strict';\nconsole.log(1);\n\n// 写在模块文件第一行\n#!/usr/bin/env node\nexport {};\nconsole.log(1);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n有了这一行以后，Unix 命令行就可以直接执行脚本。\n\n# 以前执行脚本的方式\n$ node hello.js\n\n# hashbang 的方式\n$ hello.js\n\n\n1\n2\n3\n4\n5\n\n\n对于 JavaScript 引擎来说，会把#!理解成注释，忽略掉这一行。\n\n\n# import.meta\n\n开发者使用一个模块时，有时需要知道模板本身的一些信息（比如模块的路径）。现在有一个提案，为 import 命令添加了一个元属性import.beta，返回当前模块的元信息。\n\nimport.meta只能在模块内部使用，如果在模块外部使用会报错。\n\n这个属性返回一个对象，该对象的各种属性就是当前运行的脚本的元信息。具体包含哪些属性，标准没有规定，由各个运行环境自行决定。一般来说，import.meta至少会有下面两个属性。\n\n（1）import.meta.url\n\nimport.meta.url返回当前模块的 URL 路径。举例来说，当前模块主文件的路径是https://foo.com/main.js，import.meta.url就返回这个路径。如果模块里面还有一个数据文件data.txt，那么就可以用下面的代码，获取这个数据文件的路径。\n\nnew URL('data.txt', import.meta.url)\n\n\n1\n\n\n注意，Node.js 环境中，import.meta.url返回的总是本地路径，即是file:URL协议的字符串，比如file:///home/user/foo.js。\n\n（2）import.meta.scriptElement\n\nimport.meta.scriptElement是浏览器特有的元属性，返回加载模块的那个<script>元素，相当于document.currentScript属性。\n\n// HTML 代码为\n// <script type=\"module\" src=\"my-module.js\" data-foo=\"abc\"><\/script>\n\n// my-module.js 内部执行下面的代码\nimport.meta.scriptElement.dataset.foo\n// \"abc\"\n\n\n1\n2\n3\n4\n5\n6\n",normalizedContent:"# 最新提案\n\n本章介绍一些尚未进入标准、但很有希望的最新提案。\n\n\n# do 表达式\n\n本质上，块级作用域是一个语句，将多个操作封装在一起，没有返回值。\n\n{\n  let t = f();\n  t = t * t + 1;\n}\n\n\n1\n2\n3\n4\n\n\n上面代码中，块级作用域将两个语句封装在一起。但是，在块级作用域以外，没有办法得到t的值，因为块级作用域不返回值，除非t是全局变量。\n\n现在有一个提案，使得块级作用域可以变为表达式，也就是说可以返回值，办法就是在块级作用域之前加上do，使它变为do表达式，然后就会返回内部最后执行的表达式的值。\n\nlet x = do {\n  let t = f();\n  t * t + 1;\n};\n\n\n1\n2\n3\n4\n\n\n上面代码中，变量x会得到整个块级作用域的返回值（t * t + 1）。\n\ndo表达式的逻辑非常简单：封装的是什么，就会返回什么。\n\n// 等同于 <表达式>\ndo { <表达式>; }\n\n// 等同于 <语句>\ndo { <语句> }\n\n\n1\n2\n3\n4\n5\n\n\ndo表达式的好处是可以封装多个语句，让程序更加模块化，就像乐高积木那样一块块拼装起来。\n\nlet x = do {\n  if (foo()) { f() }\n  else if (bar()) { g() }\n  else { h() }\n};\n\n\n1\n2\n3\n4\n5\n\n\n上面代码的本质，就是根据函数foo的执行结果，调用不同的函数，将返回结果赋给变量x。使用do表达式，就将这个操作的意图表达得非常简洁清晰。而且，do块级作用域提供了单独的作用域，内部操作可以与全局作用域隔绝。\n\n值得一提的是，do表达式在 jsx 语法中非常好用。\n\nreturn (\n  <nav>\n    <home />\n    {\n      do {\n        if (loggedin) {\n          <logoutbutton />\n        } else {\n          <loginbutton />\n        }\n      }\n    }\n  </nav>\n)\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n上面代码中，如果不用do表达式，就只能用三元判断运算符（?:）。那样的话，一旦判断逻辑复杂，代码就会变得很不易读。\n\n\n# throw 表达式\n\njavascript 语法规定throw是一个命令，用来抛出错误，不能用于表达式之中。\n\n// 报错\nconsole.log(throw new error());\n\n\n1\n2\n\n\n上面代码中，console.log的参数必须是一个表达式，如果是一个throw语句就会报错。\n\n现在有一个提案，允许throw用于表达式。\n\n// 参数的默认值\nfunction save(filename = throw new typeerror(\"argument required\")) {\n}\n\n// 箭头函数的返回值\nlint(ast, {\n  with: () => throw new error(\"avoid using 'with' statements.\")\n});\n\n// 条件表达式\nfunction getencoder(encoding) {\n  const encoder = encoding === \"utf8\" ?\n    new utf8encoder() :\n    encoding === \"utf16le\" ?\n      new utf16encoder(false) :\n      encoding === \"utf16be\" ?\n        new utf16encoder(true) :\n        throw new error(\"unsupported encoding\");\n}\n\n// 逻辑表达式\nclass product {\n  get id() {\n    return this._id;\n  }\n  set id(value) {\n    this._id = value || throw new error(\"invalid value\");\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n\n\n上面代码中，throw都出现在表达式里面。\n\n语法上，throw表达式里面的throw不再是一个命令，而是一个运算符。为了避免与throw命令混淆，规定throw出现在行首，一律解释为throw语句，而不是throw表达式。\n\n\n# 函数的部分执行\n\n\n# 语法\n\n多参数的函数有时需要绑定其中的一个或多个参数，然后返回一个新函数。\n\nfunction add(x, y) { return x + y; }\nfunction add7(x) { return x + 7; }\n\n\n1\n2\n\n\n上面代码中，add7函数其实是add函数的一个特殊版本，通过将一个参数绑定为7，就可以从add得到add7。\n\n// bind 方法\nconst add7 = add.bind(null, 7);\n\n// 箭头函数\nconst add7 = x => add(x, 7);\n\n\n1\n2\n3\n4\n5\n\n\n上面两种写法都有些冗余。其中，bind方法的局限更加明显，它必须提供this，并且只能从前到后一个个绑定参数，无法只绑定非头部的参数。\n\n现在有一个提案，使得绑定参数并返回一个新函数更加容易。这叫做函数的部分执行（partial application）。\n\nconst add = (x, y) => x + y;\nconst addone = add(1, ?);\n\nconst maxgreaterthanzero = math.max(0, ...);\n\n\n1\n2\n3\n4\n\n\n根据新提案，?是单个参数的占位符，...是多个参数的占位符。以下的形式都属于函数的部分执行。\n\nf(x, ?)\nf(x, ...)\nf(?, x)\nf(..., x)\nf(?, x, ?)\nf(..., x, ...)\n\n\n1\n2\n3\n4\n5\n6\n\n\n?和...只能出现在函数的调用之中，并且会返回一个新函数。\n\nconst g = f(?, 1, ...);\n// 等同于\nconst g = (x, ...y) => f(x, 1, ...y);\n\n\n1\n2\n3\n\n\n函数的部分执行，也可以用于对象的方法。\n\nlet obj = {\n  f(x, y) { return x + y; },\n};\n\nconst g = obj.f(?, 3);\ng(1) // 4\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# 注意点\n\n函数的部分执行有一些特别注意的地方。\n\n（1）函数的部分执行是基于原函数的。如果原函数发生变化，部分执行生成的新函数也会立即反映这种变化。\n\nlet f = (x, y) => x + y;\n\nconst g = f(?, 3);\ng(1); // 4\n\n// 替换函数 f\nf = (x, y) => x * y;\n\ng(1); // 3\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n上面代码中，定义了函数的部分执行以后，更换原函数会立即影响到新函数。\n\n（2）如果预先提供的那个值是一个表达式，那么这个表达式并不会在定义时求值，而是在每次调用时求值。\n\nlet a = 3;\nconst f = (x, y) => x + y;\n\nconst g = f(?, a);\ng(1); // 4\n\n// 改变 a 的值\na = 10;\ng(1); // 11\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n上面代码中，预先提供的参数是变量a，那么每次调用函数g的时候，才会对a进行求值。\n\n（3）如果新函数的参数多于占位符的数量，那么多余的参数将被忽略。\n\nconst f = (x, ...y) => [x, ...y];\nconst g = f(?, 1);\ng(2, 3, 4); // [2, 1]\n\n\n1\n2\n3\n\n\n上面代码中，函数g只有一个占位符，也就意味着它只能接受一个参数，多余的参数都会被忽略。\n\n写成下面这样，多余的参数就没有问题。\n\nconst f = (x, ...y) => [x, ...y];\nconst g = f(?, 1, ...);\ng(2, 3, 4); // [2, 1, 3, 4];\n\n\n1\n2\n3\n\n\n（4）...只会被采集一次，如果函数的部分执行使用了多个...，那么每个...的值都将相同。\n\nconst f = (...x) => x;\nconst g = f(..., 9, ...);\ng(1, 2, 3); // [1, 2, 3, 9, 1, 2, 3]\n\n\n1\n2\n3\n\n\n上面代码中，g定义了两个...占位符，真正执行的时候，它们的值是一样的。\n\n\n# 管道运算符\n\nunix 操作系统有一个管道机制（pipeline），可以把前一个操作的值传给后一个操作。这个机制非常有用，使得简单的操作可以组合成为复杂的操作。许多语言都有管道的实现，现在有一个提案，让 javascript 也拥有管道机制。\n\njavascript 的管道是一个运算符，写作|>。它的左边是一个表达式，右边是一个函数。管道运算符把左边表达式的值，传入右边的函数进行求值。\n\nx |> f\n// 等同于\nf(x)\n\n\n1\n2\n3\n\n\n管道运算符最大的好处，就是可以把嵌套的函数，写成从左到右的链式表达式。\n\nfunction doublesay (str) {\n  return str + \", \" + str;\n}\n\nfunction capitalize (str) {\n  return str[0].touppercase() + str.substring(1);\n}\n\nfunction exclaim (str) {\n  return str + '!';\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n上面是三个简单的函数。如果要嵌套执行，传统的写法和管道的写法分别如下。\n\n// 传统的写法\nexclaim(capitalize(doublesay('hello')))\n// \"hello, hello!\"\n\n// 管道的写法\n'hello'\n  |> doublesay\n  |> capitalize\n  |> exclaim\n// \"hello, hello!\"\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n管道运算符只能传递一个值，这意味着它右边的函数必须是一个单参数函数。如果是多参数函数，就必须进行柯里化，改成单参数的版本。\n\nfunction double (x) { return x + x; }\nfunction add (x, y) { return x + y; }\n\nlet person = { score: 25 };\nperson.score\n  |> double\n  |> (_ => add(7, _))\n// 57\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n上面代码中，add函数需要两个参数。但是，管道运算符只能传入一个值，因此需要事先提供另一个参数，并将其改成单参数的箭头函数_ => add(7, _)。这个函数里面的下划线并没有特别的含义，可以用其他符号代替，使用下划线只是因为，它能够形象地表示这里是占位符。\n\n管道运算符对于await函数也适用。\n\nx |> await f\n// 等同于\nawait f(x)\n\nconst userage = userid |> await fetchuserbyid |> getagefromuser;\n// 等同于\nconst userage = getagefromuser(await fetchuserbyid(userid));\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# 数值分隔符\n\n欧美语言中，较长的数值允许每三位添加一个分隔符（通常是一个逗号），增加数值的可读性。比如，1000可以写作1,000。\n\n现在有一个提案，允许 javascript 的数值使用下划线（_）作为分隔符。\n\nlet budget = 1_000_000_000_000;\nbudget === 10 ** 12 // true\n\n\n1\n2\n\n\njavascript 的数值分隔符没有指定间隔的位数，也就是说，可以每三位添加一个分隔符，也可以每一位、每两位、每四位添加一个。\n\n123_00 === 12_300 // true\n\n12345_00 === 123_4500 // true\n12345_00 === 1_234_500 // true\n\n\n1\n2\n3\n4\n\n\n小数和科学计数法也可以使用数值分隔符。\n\n// 小数\n0.000_001\n// 科学计数法\n1e10_000\n\n\n1\n2\n3\n4\n\n\n数值分隔符有几个使用注意点。\n\n * 不能在数值的最前面（leading）或最后面（trailing）。\n * 不能两个或两个以上的分隔符连在一起。\n * 小数点的前后不能有分隔符。\n * 科学计数法里面，表示指数的e或e前后不能有分隔符。\n\n下面的写法都会报错。\n\n// 全部报错\n3_.141\n3._141\n1_e12\n1e_12\n123__456\n_1464301\n1464301_\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n除了十进制，其他进制的数值也可以使用分隔符。\n\n// 二进制\n0b1010_0001_1000_0101\n// 十六进制\n0xa0_b0_c0\n\n\n1\n2\n3\n4\n\n\n注意，分隔符不能紧跟着进制的前缀0b、0b、0o、0o、0x、0x。\n\n// 报错\n0_b111111000\n0b_111111000\n\n\n1\n2\n3\n\n\n下面三个将字符串转成数值的函数，不支持数值分隔符。主要原因是提案的设计者认为，数值分隔符主要是为了编码时书写数值的方便，而不是为了处理外部输入的数据。\n\n * number()\n * parseint()\n * parsefloat()\n\nnumber('123_456') // nan\nparseint('123_456') // 123\n\n\n1\n2\n\n\n\n# math.signbit()\n\nmath.sign()用来判断一个值的正负，但是如果参数是-0，它会返回-0。\n\nmath.sign(-0) // -0\n\n\n1\n\n\n这导致对于判断符号位的正负，math.sign()不是很有用。javascript 内部使用 64 位浮点数（国际标准 ieee 754）表示数值，ieee 754 规定第一位是符号位，0表示正数，1表示负数。所以会有两种零，+0是符号位为0时的零值，-0是符号位为1时的零值。实际编程中，判断一个值是+0还是-0非常麻烦，因为它们是相等的。\n\n+0 === -0 // true\n\n\n1\n\n\n目前，有一个提案，引入了math.signbit()方法判断一个数的符号位是否设置了。\n\nmath.signbit(2) //false\nmath.signbit(-2) //true\nmath.signbit(0) //false\nmath.signbit(-0) //true\n\n\n1\n2\n3\n4\n\n\n可以看到，该方法正确返回了-0的符号位是设置了的。\n\n该方法的算法如下。\n\n * 如果参数是nan，返回false\n * 如果参数是-0，返回true\n * 如果参数是负值，返回true\n * 其他情况返回false\n\n\n# 双冒号运算符\n\n箭头函数可以绑定this对象，大大减少了显式绑定this对象的写法（call、apply、bind）。但是，箭头函数并不适用于所有场合，所以现在有一个提案，提出了“函数绑定”（function bind）运算符，用来取代call、apply、bind调用。\n\n函数绑定运算符是并排的两个冒号（::），双冒号左边是一个对象，右边是一个函数。该运算符会自动将左边的对象，作为上下文环境（即this对象），绑定到右边的函数上面。\n\nfoo::bar;\n// 等同于\nbar.bind(foo);\n\nfoo::bar(...arguments);\n// 等同于\nbar.apply(foo, arguments);\n\nconst hasownproperty = object.prototype.hasownproperty;\nfunction hasown(obj, key) {\n  return obj::hasownproperty(key);\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n如果双冒号左边为空，右边是一个对象的方法，则等于将该方法绑定在该对象上面。\n\nvar method = obj::obj.foo;\n// 等同于\nvar method = ::obj.foo;\n\nlet log = ::console.log;\n// 等同于\nvar log = console.log.bind(console);\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n如果双冒号运算符的运算结果，还是一个对象，就可以采用链式写法。\n\nimport { map, takewhile, foreach } from \"iterlib\";\n\ngetplayers()\n::map(x => x.character())\n::takewhile(x => x.strength > 100)\n::foreach(x => console.log(x));\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# realm api\n\nrealm api 提供沙箱功能（sandbox），允许隔离代码，防止那些被隔离的代码拿到全局对象。\n\n以前，经常使用<iframe>作为沙箱。\n\nconst globalone = window;\nlet iframe = document.createelement('iframe');\ndocument.body.appendchild(iframe);\nconst globaltwo = iframe.contentwindow;\n\n\n1\n2\n3\n4\n\n\n上面代码中，<iframe>的全局对象是独立的（iframe.contentwindow）。realm api 可以取代这个功能。\n\nconst globalone = window;\nconst globaltwo = new realm().global;\n\n\n1\n2\n\n\n上面代码中，realm api单独提供了一个全局对象new realm().global。\n\nrealm api 提供一个realm()构造函数，用来生成一个 realm 对象。该对象的global属性指向一个新的顶层对象，这个顶层对象跟原始的顶层对象类似。\n\nconst globalone = window;\nconst globaltwo = new realm().global;\n\nglobalone.evaluate('1 + 2') // 3\nglobaltwo.evaluate('1 + 2') // 3\n\n\n1\n2\n3\n4\n5\n\n\n上面代码中，realm 生成的顶层对象的evaluate()方法，可以运行代码。\n\n下面的代码可以证明，realm 顶层对象与原始顶层对象是两个对象。\n\nlet a1 = globalone.evaluate('[1,2,3]');\nlet a2 = globaltwo.evaluate('[1,2,3]');\na1.prototype === a2.prototype; // false\na1 instanceof globaltwo.array; // false\na2 instanceof globalone.array; // false\n\n\n1\n2\n3\n4\n5\n\n\n上面代码中，realm 沙箱里面的数组的原型对象，跟原始环境里面的数组是不一样的。\n\nrealm 沙箱里面只能运行 ecmascript 语法提供的 api，不能运行宿主环境提供的 api。\n\nglobaltwo.evaluate('console.log(1)')\n// throw an error: console is undefined\n\n\n1\n2\n\n\n上面代码中，realm 沙箱里面没有console对象，导致报错。因为console不是语法标准，是宿主环境提供的。\n\n如果要解决这个问题，可以使用下面的代码。\n\nglobaltwo.console = globalone.console;\n\n\n1\n\n\nrealm()构造函数可以接受一个参数对象，该参数对象的intrinsics属性可以指定 realm 沙箱继承原始顶层对象的方法。\n\nconst r1 = new realm();\nr1.global === this;\nr1.global.json === json; // false\n\nconst r2 = new realm({ intrinsics: 'inherit' });\nr2.global === this; // false\nr2.global.json === json; // true\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n上面代码中，正常情况下，沙箱的json方法不同于原始的json对象。但是，realm()构造函数接受{ intrinsics: 'inherit' }作为参数以后，就会继承原始顶层对象的方法。\n\n用户可以自己定义realm的子类，用来定制自己的沙箱。\n\nclass fakewindow extends realm {\n  init() {\n    super.init();\n    let global = this.global;\n\n    global.document = new fakedocument(...);\n    global.alert = new proxy(fakealert, { ... });\n    // ...\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n上面代码中，fakewindow模拟了一个假的顶层对象window。\n\n\n# #!命令\n\nunix 的命令行脚本都支持#!命令，又称为 shebang 或 hashbang。这个命令放在脚本的第一行，用来指定脚本的执行器。\n\n比如 bash 脚本的第一行。\n\n#!/bin/sh\n\n\n1\n\n\npython 脚本的第一行。\n\n#!/usr/bin/env python\n\n\n1\n\n\n现在有一个提案，为 javascript 脚本引入了#!命令，写在脚本文件或者模块文件的第一行。\n\n// 写在脚本文件第一行\n#!/usr/bin/env node\n'use strict';\nconsole.log(1);\n\n// 写在模块文件第一行\n#!/usr/bin/env node\nexport {};\nconsole.log(1);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n有了这一行以后，unix 命令行就可以直接执行脚本。\n\n# 以前执行脚本的方式\n$ node hello.js\n\n# hashbang 的方式\n$ hello.js\n\n\n1\n2\n3\n4\n5\n\n\n对于 javascript 引擎来说，会把#!理解成注释，忽略掉这一行。\n\n\n# import.meta\n\n开发者使用一个模块时，有时需要知道模板本身的一些信息（比如模块的路径）。现在有一个提案，为 import 命令添加了一个元属性import.beta，返回当前模块的元信息。\n\nimport.meta只能在模块内部使用，如果在模块外部使用会报错。\n\n这个属性返回一个对象，该对象的各种属性就是当前运行的脚本的元信息。具体包含哪些属性，标准没有规定，由各个运行环境自行决定。一般来说，import.meta至少会有下面两个属性。\n\n（1）import.meta.url\n\nimport.meta.url返回当前模块的 url 路径。举例来说，当前模块主文件的路径是https://foo.com/main.js，import.meta.url就返回这个路径。如果模块里面还有一个数据文件data.txt，那么就可以用下面的代码，获取这个数据文件的路径。\n\nnew url('data.txt', import.meta.url)\n\n\n1\n\n\n注意，node.js 环境中，import.meta.url返回的总是本地路径，即是file:url协议的字符串，比如file:///home/user/foo.js。\n\n（2）import.meta.scriptelement\n\nimport.meta.scriptelement是浏览器特有的元属性，返回加载模块的那个<script>元素，相当于document.currentscript属性。\n\n// html 代码为\n// <script type=\"module\" src=\"my-module.js\" data-foo=\"abc\"><\/script>\n\n// my-module.js 内部执行下面的代码\nimport.meta.scriptelement.dataset.foo\n// \"abc\"\n\n\n1\n2\n3\n4\n5\n6\n",charsets:{cjk:!0}},{title:"编程风格",frontmatter:{title:"编程风格",date:"2020-02-09T16:00:29.000Z",permalink:"/pages/984bf549204bb266",author:"阮一峰",categories:["《ES6 教程》笔记"],tags:["ES6"],readingShow:"top"},regularPath:"/06.%E4%B9%A6%E7%B1%8D/05.%E3%80%8AES6%20%E6%95%99%E7%A8%8B%E3%80%8B%E7%AC%94%E8%AE%B0/25.%E7%BC%96%E7%A8%8B%E9%A3%8E%E6%A0%BC.html",relativePath:"06.书籍/05.《ES6 教程》笔记/25.编程风格.md",key:"v-ba4844aa",path:"/pages/984bf549204bb266/",headers:[{level:2,title:"块级作用域",slug:"块级作用域",normalizedTitle:"块级作用域",charIndex:141},{level:2,title:"字符串",slug:"字符串",normalizedTitle:"字符串",charIndex:1251},{level:2,title:"解构赋值",slug:"解构赋值",normalizedTitle:"解构赋值",charIndex:1465},{level:2,title:"对象",slug:"对象",normalizedTitle:"对象",charIndex:1640},{level:2,title:"数组",slug:"数组",normalizedTitle:"数组",charIndex:1473},{level:2,title:"函数",slug:"函数",normalizedTitle:"函数",charIndex:787},{level:2,title:"Map 结构",slug:"map-结构",normalizedTitle:"map 结构",charIndex:5039},{level:2,title:"Class",slug:"class",normalizedTitle:"class",charIndex:5384},{level:2,title:"模块",slug:"模块",normalizedTitle:"模块",charIndex:6272},{level:2,title:"ESLint 的使用",slug:"eslint-的使用",normalizedTitle:"eslint 的使用",charIndex:7372}],excerpt:'<h1 id="编程风格"><a class="header-anchor" href="#编程风格">#</a> 编程风格</h1>\n<p>本章探讨如何将 ES6 的新语法，运用到编码实践之中，与传统的 JavaScript 语法结合在一起，写出合理的、易于阅读和维护的代码。</p>\n<p>多家公司和组织已经公开了它们的风格规范，下面的内容主要参考了 <a href="https://github.com/airbnb/javascript" target="_blank" rel="noopener noreferrer">Airbnb<OutboundLink/></a> 公司的 JavaScript 风格规范。</p>\n',lastUpdated:"2022/9/22 下午4:28:09",lastUpdatedTimestamp:1663835289e3,headersStr:"块级作用域 字符串 解构赋值 对象 数组 函数 Map 结构 Class 模块 ESLint 的使用",content:"# 编程风格\n\n本章探讨如何将 ES6 的新语法，运用到编码实践之中，与传统的 JavaScript 语法结合在一起，写出合理的、易于阅读和维护的代码。\n\n多家公司和组织已经公开了它们的风格规范，下面的内容主要参考了 Airbnb 公司的 JavaScript 风格规范。\n\n\n# 块级作用域\n\n（1）let 取代 var\n\nES6 提出了两个新的声明变量的命令：let和const。其中，let完全可以取代var，因为两者语义相同，而且let没有副作用。\n\n'use strict';\n\nif (true) {\n  let x = 'hello';\n}\n\nfor (let i = 0; i < 10; i++) {\n  console.log(i);\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n上面代码如果用var替代let，实际上就声明了两个全局变量，这显然不是本意。变量应该只在其声明的代码块内有效，var命令做不到这一点。\n\nvar命令存在变量提升效用，let命令没有这个问题。\n\n'use strict';\n\nif (true) {\n  console.log(x); // ReferenceError\n  let x = 'hello';\n}\n\n\n1\n2\n3\n4\n5\n6\n\n\n上面代码如果使用var替代let，console.log那一行就不会报错，而是会输出undefined，因为变量声明提升到代码块的头部。这违反了变量先声明后使用的原则。\n\n所以，建议不再使用var命令，而是使用let命令取代。\n\n（2）全局常量和线程安全\n\n在let和const之间，建议优先使用const，尤其是在全局环境，不应该设置变量，只应设置常量。\n\nconst优于let有几个原因。一个是const可以提醒阅读程序的人，这个变量不应该改变；另一个是const比较符合函数式编程思想，运算不改变值，只是新建值，而且这样也有利于将来的分布式运算；最后一个原因是 JavaScript 编译器会对const进行优化，所以多使用const，有利于提高程序的运行效率，也就是说let和const的本质区别，其实是编译器内部的处理不同。\n\n// bad\nvar a = 1, b = 2, c = 3;\n\n// good\nconst a = 1;\nconst b = 2;\nconst c = 3;\n\n// best\nconst [a, b, c] = [1, 2, 3];\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\nconst声明常量还有两个好处，一是阅读代码的人立刻会意识到不应该修改这个值，二是防止了无意间修改变量值所导致的错误。\n\n所有的函数都应该设置为常量。\n\n长远来看，JavaScript 可能会有多线程的实现（比如 Intel 公司的 River Trail 那一类的项目），这时let表示的变量，只应出现在单线程运行的代码中，不能是多线程共享的，这样有利于保证线程安全。\n\n\n# 字符串\n\n静态字符串一律使用单引号或反引号，不使用双引号。动态字符串使用反引号。\n\n// bad\nconst a = \"foobar\";\nconst b = 'foo' + a + 'bar';\n\n// acceptable\nconst c = `foobar`;\n\n// good\nconst a = 'foobar';\nconst b = `foo${a}bar`;\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n\n# 解构赋值\n\n使用数组成员对变量赋值时，优先使用解构赋值。\n\nconst arr = [1, 2, 3, 4];\n\n// bad\nconst first = arr[0];\nconst second = arr[1];\n\n// good\nconst [first, second] = arr;\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n函数的参数如果是对象的成员，优先使用解构赋值。\n\n// bad\nfunction getFullName(user) {\n  const firstName = user.firstName;\n  const lastName = user.lastName;\n}\n\n// good\nfunction getFullName(obj) {\n  const { firstName, lastName } = obj;\n}\n\n// best\nfunction getFullName({ firstName, lastName }) {\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n如果函数返回多个值，优先使用对象的解构赋值，而不是数组的解构赋值。这样便于以后添加返回值，以及更改返回值的顺序。\n\n// bad\nfunction processInput(input) {\n  return [left, right, top, bottom];\n}\n\n// good\nfunction processInput(input) {\n  return { left, right, top, bottom };\n}\n\nconst { left, right } = processInput(input);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n\n# 对象\n\n单行定义的对象，最后一个成员不以逗号结尾。多行定义的对象，最后一个成员以逗号结尾。\n\n// bad\nconst a = { k1: v1, k2: v2, };\nconst b = {\n  k1: v1,\n  k2: v2\n};\n\n// good\nconst a = { k1: v1, k2: v2 };\nconst b = {\n  k1: v1,\n  k2: v2,\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n对象尽量静态化，一旦定义，就不得随意添加新的属性。如果添加属性不可避免，要使用Object.assign方法。\n\n// bad\nconst a = {};\na.x = 3;\n\n// if reshape unavoidable\nconst a = {};\nObject.assign(a, { x: 3 });\n\n// good\nconst a = { x: null };\na.x = 3;\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n如果对象的属性名是动态的，可以在创造对象的时候，使用属性表达式定义。\n\n// bad\nconst obj = {\n  id: 5,\n  name: 'San Francisco',\n};\nobj[getKey('enabled')] = true;\n\n// good\nconst obj = {\n  id: 5,\n  name: 'San Francisco',\n  [getKey('enabled')]: true,\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n上面代码中，对象obj的最后一个属性名，需要计算得到。这时最好采用属性表达式，在新建obj的时候，将该属性与其他属性定义在一起。这样一来，所有属性就在一个地方定义了。\n\n另外，对象的属性和方法，尽量采用简洁表达法，这样易于描述和书写。\n\nvar ref = 'some value';\n\n// bad\nconst atom = {\n  ref: ref,\n\n  value: 1,\n\n  addValue: function (value) {\n    return atom.value + value;\n  },\n};\n\n// good\nconst atom = {\n  ref,\n\n  value: 1,\n\n  addValue(value) {\n    return atom.value + value;\n  },\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n\n\n\n# 数组\n\n使用扩展运算符（...）拷贝数组。\n\n// bad\nconst len = items.length;\nconst itemsCopy = [];\nlet i;\n\nfor (i = 0; i < len; i++) {\n  itemsCopy[i] = items[i];\n}\n\n// good\nconst itemsCopy = [...items];\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n使用 Array.from 方法，将类似数组的对象转为数组。\n\nconst foo = document.querySelectorAll('.foo');\nconst nodes = Array.from(foo);\n\n\n1\n2\n\n\n\n# 函数\n\n立即执行函数可以写成箭头函数的形式。\n\n(() => {\n  console.log('Welcome to the Internet.');\n})();\n\n\n1\n2\n3\n\n\n那些使用匿名函数当作参数的场合，尽量用箭头函数代替。因为这样更简洁，而且绑定了 this。\n\n// bad\n[1, 2, 3].map(function (x) {\n  return x * x;\n});\n\n// good\n[1, 2, 3].map((x) => {\n  return x * x;\n});\n\n// best\n[1, 2, 3].map(x => x * x);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n箭头函数取代Function.prototype.bind，不应再用 self/_this/that 绑定 this。\n\n// bad\nconst self = this;\nconst boundMethod = function(...params) {\n  return method.apply(self, params);\n}\n\n// acceptable\nconst boundMethod = method.bind(this);\n\n// best\nconst boundMethod = (...params) => method.apply(this, params);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n简单的、单行的、不会复用的函数，建议采用箭头函数。如果函数体较为复杂，行数较多，还是应该采用传统的函数写法。\n\n所有配置项都应该集中在一个对象，放在最后一个参数，布尔值不可以直接作为参数。\n\n// bad\nfunction divide(a, b, option = false ) {\n}\n\n// good\nfunction divide(a, b, { option = false } = {}) {\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n不要在函数体内使用 arguments 变量，使用 rest 运算符（...）代替。因为 rest 运算符显式表明你想要获取参数，而且 arguments 是一个类似数组的对象，而 rest 运算符可以提供一个真正的数组。\n\n// bad\nfunction concatenateAll() {\n  const args = Array.prototype.slice.call(arguments);\n  return args.join('');\n}\n\n// good\nfunction concatenateAll(...args) {\n  return args.join('');\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n使用默认值语法设置函数参数的默认值。\n\n// bad\nfunction handleThings(opts) {\n  opts = opts || {};\n}\n\n// good\nfunction handleThings(opts = {}) {\n  // ...\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n\n# Map 结构\n\n注意区分 Object 和 Map，只有模拟现实世界的实体对象时，才使用 Object。如果只是需要key: value的数据结构，使用 Map 结构。因为 Map 有内建的遍历机制。\n\nlet map = new Map(arr);\n\nfor (let key of map.keys()) {\n  console.log(key);\n}\n\nfor (let value of map.values()) {\n  console.log(value);\n}\n\nfor (let item of map.entries()) {\n  console.log(item[0], item[1]);\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n\n# Class\n\n总是用 Class，取代需要 prototype 的操作。因为 Class 的写法更简洁，更易于理解。\n\n// bad\nfunction Queue(contents = []) {\n  this._queue = [...contents];\n}\nQueue.prototype.pop = function() {\n  const value = this._queue[0];\n  this._queue.splice(0, 1);\n  return value;\n}\n\n// good\nclass Queue {\n  constructor(contents = []) {\n    this._queue = [...contents];\n  }\n  pop() {\n    const value = this._queue[0];\n    this._queue.splice(0, 1);\n    return value;\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n\n\n使用extends实现继承，因为这样更简单，不会有破坏instanceof运算的危险。\n\n// bad\nconst inherits = require('inherits');\nfunction PeekableQueue(contents) {\n  Queue.apply(this, contents);\n}\ninherits(PeekableQueue, Queue);\nPeekableQueue.prototype.peek = function() {\n  return this._queue[0];\n}\n\n// good\nclass PeekableQueue extends Queue {\n  peek() {\n    return this._queue[0];\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n\n# 模块\n\n首先，Module 语法是 JavaScript 模块的标准写法，坚持使用这种写法。使用import取代require。\n\n// bad\nconst moduleA = require('moduleA');\nconst func1 = moduleA.func1;\nconst func2 = moduleA.func2;\n\n// good\nimport { func1, func2 } from 'moduleA';\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n使用export取代module.exports。\n\n// commonJS的写法\nvar React = require('react');\n\nvar Breadcrumbs = React.createClass({\n  render() {\n    return <nav />;\n  }\n});\n\nmodule.exports = Breadcrumbs;\n\n// ES6的写法\nimport React from 'react';\n\nclass Breadcrumbs extends React.Component {\n  render() {\n    return <nav />;\n  }\n};\n\nexport default Breadcrumbs;\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n\n\n如果模块只有一个输出值，就使用export default，如果模块有多个输出值，就不使用export default，export default与普通的export不要同时使用。\n\n不要在模块输入中使用通配符。因为这样可以确保你的模块之中，有一个默认输出（export default）。\n\n// bad\nimport * as myObject from './importModule';\n\n// good\nimport myObject from './importModule';\n\n\n1\n2\n3\n4\n5\n\n\n如果模块默认输出一个函数，函数名的首字母应该小写。\n\nfunction makeStyleGuide() {\n}\n\nexport default makeStyleGuide;\n\n\n1\n2\n3\n4\n\n\n如果模块默认输出一个对象，对象名的首字母应该大写。\n\nconst StyleGuide = {\n  es6: {\n  }\n};\n\nexport default StyleGuide;\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# ESLint 的使用\n\nESLint 是一个语法规则和代码风格的检查工具，可以用来保证写出语法正确、风格统一的代码。\n\n首先，安装 ESLint。\n\n$ npm i -g eslint\n\n\n1\n\n\n然后，安装 Airbnb 语法规则，以及 import、a11y、react 插件。\n\n$ npm i -g eslint-config-airbnb\n$ npm i -g eslint-plugin-import eslint-plugin-jsx-a11y eslint-plugin-react\n\n\n1\n2\n\n\n最后，在项目的根目录下新建一个.eslintrc文件，配置 ESLint。\n\n{\n  \"extends\": \"eslint-config-airbnb\"\n}\n\n\n1\n2\n3\n\n\n现在就可以检查，当前项目的代码是否符合预设的规则。\n\nindex.js文件的代码如下。\n\nvar unusued = 'I have no purpose!';\n\nfunction greet() {\n    var message = 'Hello, World!';\n    alert(message);\n}\n\ngreet();\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n使用 ESLint 检查这个文件，就会报出错误。\n\n$ eslint index.js\nindex.js\n  1:1  error  Unexpected var, use let or const instead          no-var\n  1:5  error  unusued is defined but never used                 no-unused-vars\n  4:5  error  Expected indentation of 2 characters but found 4  indent\n  4:5  error  Unexpected var, use let or const instead          no-var\n  5:5  error  Expected indentation of 2 characters but found 4  indent\n\n✖ 5 problems (5 errors, 0 warnings)\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n上面代码说明，原文件有五个错误，其中两个是不应该使用var命令，而要使用let或const；一个是定义了变量，却没有使用；另外两个是行首缩进为 4 个空格，而不是规定的 2 个空格。",normalizedContent:"# 编程风格\n\n本章探讨如何将 es6 的新语法，运用到编码实践之中，与传统的 javascript 语法结合在一起，写出合理的、易于阅读和维护的代码。\n\n多家公司和组织已经公开了它们的风格规范，下面的内容主要参考了 airbnb 公司的 javascript 风格规范。\n\n\n# 块级作用域\n\n（1）let 取代 var\n\nes6 提出了两个新的声明变量的命令：let和const。其中，let完全可以取代var，因为两者语义相同，而且let没有副作用。\n\n'use strict';\n\nif (true) {\n  let x = 'hello';\n}\n\nfor (let i = 0; i < 10; i++) {\n  console.log(i);\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n上面代码如果用var替代let，实际上就声明了两个全局变量，这显然不是本意。变量应该只在其声明的代码块内有效，var命令做不到这一点。\n\nvar命令存在变量提升效用，let命令没有这个问题。\n\n'use strict';\n\nif (true) {\n  console.log(x); // referenceerror\n  let x = 'hello';\n}\n\n\n1\n2\n3\n4\n5\n6\n\n\n上面代码如果使用var替代let，console.log那一行就不会报错，而是会输出undefined，因为变量声明提升到代码块的头部。这违反了变量先声明后使用的原则。\n\n所以，建议不再使用var命令，而是使用let命令取代。\n\n（2）全局常量和线程安全\n\n在let和const之间，建议优先使用const，尤其是在全局环境，不应该设置变量，只应设置常量。\n\nconst优于let有几个原因。一个是const可以提醒阅读程序的人，这个变量不应该改变；另一个是const比较符合函数式编程思想，运算不改变值，只是新建值，而且这样也有利于将来的分布式运算；最后一个原因是 javascript 编译器会对const进行优化，所以多使用const，有利于提高程序的运行效率，也就是说let和const的本质区别，其实是编译器内部的处理不同。\n\n// bad\nvar a = 1, b = 2, c = 3;\n\n// good\nconst a = 1;\nconst b = 2;\nconst c = 3;\n\n// best\nconst [a, b, c] = [1, 2, 3];\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\nconst声明常量还有两个好处，一是阅读代码的人立刻会意识到不应该修改这个值，二是防止了无意间修改变量值所导致的错误。\n\n所有的函数都应该设置为常量。\n\n长远来看，javascript 可能会有多线程的实现（比如 intel 公司的 river trail 那一类的项目），这时let表示的变量，只应出现在单线程运行的代码中，不能是多线程共享的，这样有利于保证线程安全。\n\n\n# 字符串\n\n静态字符串一律使用单引号或反引号，不使用双引号。动态字符串使用反引号。\n\n// bad\nconst a = \"foobar\";\nconst b = 'foo' + a + 'bar';\n\n// acceptable\nconst c = `foobar`;\n\n// good\nconst a = 'foobar';\nconst b = `foo${a}bar`;\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n\n# 解构赋值\n\n使用数组成员对变量赋值时，优先使用解构赋值。\n\nconst arr = [1, 2, 3, 4];\n\n// bad\nconst first = arr[0];\nconst second = arr[1];\n\n// good\nconst [first, second] = arr;\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n函数的参数如果是对象的成员，优先使用解构赋值。\n\n// bad\nfunction getfullname(user) {\n  const firstname = user.firstname;\n  const lastname = user.lastname;\n}\n\n// good\nfunction getfullname(obj) {\n  const { firstname, lastname } = obj;\n}\n\n// best\nfunction getfullname({ firstname, lastname }) {\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n如果函数返回多个值，优先使用对象的解构赋值，而不是数组的解构赋值。这样便于以后添加返回值，以及更改返回值的顺序。\n\n// bad\nfunction processinput(input) {\n  return [left, right, top, bottom];\n}\n\n// good\nfunction processinput(input) {\n  return { left, right, top, bottom };\n}\n\nconst { left, right } = processinput(input);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n\n# 对象\n\n单行定义的对象，最后一个成员不以逗号结尾。多行定义的对象，最后一个成员以逗号结尾。\n\n// bad\nconst a = { k1: v1, k2: v2, };\nconst b = {\n  k1: v1,\n  k2: v2\n};\n\n// good\nconst a = { k1: v1, k2: v2 };\nconst b = {\n  k1: v1,\n  k2: v2,\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n对象尽量静态化，一旦定义，就不得随意添加新的属性。如果添加属性不可避免，要使用object.assign方法。\n\n// bad\nconst a = {};\na.x = 3;\n\n// if reshape unavoidable\nconst a = {};\nobject.assign(a, { x: 3 });\n\n// good\nconst a = { x: null };\na.x = 3;\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n如果对象的属性名是动态的，可以在创造对象的时候，使用属性表达式定义。\n\n// bad\nconst obj = {\n  id: 5,\n  name: 'san francisco',\n};\nobj[getkey('enabled')] = true;\n\n// good\nconst obj = {\n  id: 5,\n  name: 'san francisco',\n  [getkey('enabled')]: true,\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n上面代码中，对象obj的最后一个属性名，需要计算得到。这时最好采用属性表达式，在新建obj的时候，将该属性与其他属性定义在一起。这样一来，所有属性就在一个地方定义了。\n\n另外，对象的属性和方法，尽量采用简洁表达法，这样易于描述和书写。\n\nvar ref = 'some value';\n\n// bad\nconst atom = {\n  ref: ref,\n\n  value: 1,\n\n  addvalue: function (value) {\n    return atom.value + value;\n  },\n};\n\n// good\nconst atom = {\n  ref,\n\n  value: 1,\n\n  addvalue(value) {\n    return atom.value + value;\n  },\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n\n\n\n# 数组\n\n使用扩展运算符（...）拷贝数组。\n\n// bad\nconst len = items.length;\nconst itemscopy = [];\nlet i;\n\nfor (i = 0; i < len; i++) {\n  itemscopy[i] = items[i];\n}\n\n// good\nconst itemscopy = [...items];\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n使用 array.from 方法，将类似数组的对象转为数组。\n\nconst foo = document.queryselectorall('.foo');\nconst nodes = array.from(foo);\n\n\n1\n2\n\n\n\n# 函数\n\n立即执行函数可以写成箭头函数的形式。\n\n(() => {\n  console.log('welcome to the internet.');\n})();\n\n\n1\n2\n3\n\n\n那些使用匿名函数当作参数的场合，尽量用箭头函数代替。因为这样更简洁，而且绑定了 this。\n\n// bad\n[1, 2, 3].map(function (x) {\n  return x * x;\n});\n\n// good\n[1, 2, 3].map((x) => {\n  return x * x;\n});\n\n// best\n[1, 2, 3].map(x => x * x);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n箭头函数取代function.prototype.bind，不应再用 self/_this/that 绑定 this。\n\n// bad\nconst self = this;\nconst boundmethod = function(...params) {\n  return method.apply(self, params);\n}\n\n// acceptable\nconst boundmethod = method.bind(this);\n\n// best\nconst boundmethod = (...params) => method.apply(this, params);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n简单的、单行的、不会复用的函数，建议采用箭头函数。如果函数体较为复杂，行数较多，还是应该采用传统的函数写法。\n\n所有配置项都应该集中在一个对象，放在最后一个参数，布尔值不可以直接作为参数。\n\n// bad\nfunction divide(a, b, option = false ) {\n}\n\n// good\nfunction divide(a, b, { option = false } = {}) {\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n不要在函数体内使用 arguments 变量，使用 rest 运算符（...）代替。因为 rest 运算符显式表明你想要获取参数，而且 arguments 是一个类似数组的对象，而 rest 运算符可以提供一个真正的数组。\n\n// bad\nfunction concatenateall() {\n  const args = array.prototype.slice.call(arguments);\n  return args.join('');\n}\n\n// good\nfunction concatenateall(...args) {\n  return args.join('');\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n使用默认值语法设置函数参数的默认值。\n\n// bad\nfunction handlethings(opts) {\n  opts = opts || {};\n}\n\n// good\nfunction handlethings(opts = {}) {\n  // ...\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n\n# map 结构\n\n注意区分 object 和 map，只有模拟现实世界的实体对象时，才使用 object。如果只是需要key: value的数据结构，使用 map 结构。因为 map 有内建的遍历机制。\n\nlet map = new map(arr);\n\nfor (let key of map.keys()) {\n  console.log(key);\n}\n\nfor (let value of map.values()) {\n  console.log(value);\n}\n\nfor (let item of map.entries()) {\n  console.log(item[0], item[1]);\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n\n# class\n\n总是用 class，取代需要 prototype 的操作。因为 class 的写法更简洁，更易于理解。\n\n// bad\nfunction queue(contents = []) {\n  this._queue = [...contents];\n}\nqueue.prototype.pop = function() {\n  const value = this._queue[0];\n  this._queue.splice(0, 1);\n  return value;\n}\n\n// good\nclass queue {\n  constructor(contents = []) {\n    this._queue = [...contents];\n  }\n  pop() {\n    const value = this._queue[0];\n    this._queue.splice(0, 1);\n    return value;\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n\n\n使用extends实现继承，因为这样更简单，不会有破坏instanceof运算的危险。\n\n// bad\nconst inherits = require('inherits');\nfunction peekablequeue(contents) {\n  queue.apply(this, contents);\n}\ninherits(peekablequeue, queue);\npeekablequeue.prototype.peek = function() {\n  return this._queue[0];\n}\n\n// good\nclass peekablequeue extends queue {\n  peek() {\n    return this._queue[0];\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n\n# 模块\n\n首先，module 语法是 javascript 模块的标准写法，坚持使用这种写法。使用import取代require。\n\n// bad\nconst modulea = require('modulea');\nconst func1 = modulea.func1;\nconst func2 = modulea.func2;\n\n// good\nimport { func1, func2 } from 'modulea';\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n使用export取代module.exports。\n\n// commonjs的写法\nvar react = require('react');\n\nvar breadcrumbs = react.createclass({\n  render() {\n    return <nav />;\n  }\n});\n\nmodule.exports = breadcrumbs;\n\n// es6的写法\nimport react from 'react';\n\nclass breadcrumbs extends react.component {\n  render() {\n    return <nav />;\n  }\n};\n\nexport default breadcrumbs;\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n\n\n如果模块只有一个输出值，就使用export default，如果模块有多个输出值，就不使用export default，export default与普通的export不要同时使用。\n\n不要在模块输入中使用通配符。因为这样可以确保你的模块之中，有一个默认输出（export default）。\n\n// bad\nimport * as myobject from './importmodule';\n\n// good\nimport myobject from './importmodule';\n\n\n1\n2\n3\n4\n5\n\n\n如果模块默认输出一个函数，函数名的首字母应该小写。\n\nfunction makestyleguide() {\n}\n\nexport default makestyleguide;\n\n\n1\n2\n3\n4\n\n\n如果模块默认输出一个对象，对象名的首字母应该大写。\n\nconst styleguide = {\n  es6: {\n  }\n};\n\nexport default styleguide;\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# eslint 的使用\n\neslint 是一个语法规则和代码风格的检查工具，可以用来保证写出语法正确、风格统一的代码。\n\n首先，安装 eslint。\n\n$ npm i -g eslint\n\n\n1\n\n\n然后，安装 airbnb 语法规则，以及 import、a11y、react 插件。\n\n$ npm i -g eslint-config-airbnb\n$ npm i -g eslint-plugin-import eslint-plugin-jsx-a11y eslint-plugin-react\n\n\n1\n2\n\n\n最后，在项目的根目录下新建一个.eslintrc文件，配置 eslint。\n\n{\n  \"extends\": \"eslint-config-airbnb\"\n}\n\n\n1\n2\n3\n\n\n现在就可以检查，当前项目的代码是否符合预设的规则。\n\nindex.js文件的代码如下。\n\nvar unusued = 'i have no purpose!';\n\nfunction greet() {\n    var message = 'hello, world!';\n    alert(message);\n}\n\ngreet();\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n使用 eslint 检查这个文件，就会报出错误。\n\n$ eslint index.js\nindex.js\n  1:1  error  unexpected var, use let or const instead          no-var\n  1:5  error  unusued is defined but never used                 no-unused-vars\n  4:5  error  expected indentation of 2 characters but found 4  indent\n  4:5  error  unexpected var, use let or const instead          no-var\n  5:5  error  expected indentation of 2 characters but found 4  indent\n\n✖ 5 problems (5 errors, 0 warnings)\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n上面代码说明，原文件有五个错误，其中两个是不应该使用var命令，而要使用let或const；一个是定义了变量，却没有使用；另外两个是行首缩进为 4 个空格，而不是规定的 2 个空格。",charsets:{cjk:!0}},{title:"ArrayBuffer",frontmatter:{title:"ArrayBuffer",date:"2020-02-09T16:00:29.000Z",permalink:"/pages/a2ba314746bfdbdd",author:"阮一峰",categories:["《ES6 教程》笔记"],tags:["ES6"],readingShow:"top"},regularPath:"/06.%E4%B9%A6%E7%B1%8D/05.%E3%80%8AES6%20%E6%95%99%E7%A8%8B%E3%80%8B%E7%AC%94%E8%AE%B0/28.ArrayBuffer.html",relativePath:"06.书籍/05.《ES6 教程》笔记/28.ArrayBuffer.md",key:"v-1d6c1177",path:"/pages/a2ba314746bfdbdd/",headers:[{level:2,title:"ArrayBuffer 对象",slug:"arraybuffer-对象",normalizedTitle:"arraybuffer 对象",charIndex:1609},{level:3,title:"概述",slug:"概述",normalizedTitle:"概述",charIndex:1628},{level:3,title:"ArrayBuffer.prototype.byteLength",slug:"arraybuffer-prototype-bytelength",normalizedTitle:"arraybuffer.prototype.bytelength",charIndex:2801},{level:3,title:"ArrayBuffer.prototype.slice()",slug:"arraybuffer-prototype-slice",normalizedTitle:"arraybuffer.prototype.slice()",charIndex:3078},{level:3,title:"ArrayBuffer.isView()",slug:"arraybuffer-isview",normalizedTitle:"arraybuffer.isview()",charIndex:3529},{level:2,title:"TypedArray 视图",slug:"typedarray-视图",normalizedTitle:"typedarray 视图",charIndex:3804},{level:3,title:"概述",slug:"概述-2",normalizedTitle:"概述",charIndex:1628},{level:3,title:"构造函数",slug:"构造函数",normalizedTitle:"构造函数",charIndex:1739},{level:3,title:"数组方法",slug:"数组方法",normalizedTitle:"数组方法",charIndex:7066},{level:3,title:"字节序",slug:"字节序",normalizedTitle:"字节序",charIndex:849},{level:3,title:"BYTESPERELEMENT 属性",slug:"bytes-per-element-属性",normalizedTitle:"bytesperelement 属性",charIndex:null},{level:3,title:"ArrayBuffer 与字符串的互相转换",slug:"arraybuffer-与字符串的互相转换",normalizedTitle:"arraybuffer 与字符串的互相转换",charIndex:11652},{level:3,title:"溢出",slug:"溢出",normalizedTitle:"溢出",charIndex:1175},{level:3,title:"TypedArray.prototype.buffer",slug:"typedarray-prototype-buffer",normalizedTitle:"typedarray.prototype.buffer",charIndex:14118},{level:3,title:"TypedArray.prototype.byteLength，TypedArray.prototype.byteOffset",slug:"typedarray-prototype-bytelength-typedarray-prototype-byteoffset",normalizedTitle:"typedarray.prototype.bytelength，typedarray.prototype.byteoffset",charIndex:14329},{level:3,title:"TypedArray.prototype.length",slug:"typedarray-prototype-length",normalizedTitle:"typedarray.prototype.length",charIndex:14785},{level:3,title:"TypedArray.prototype.set()",slug:"typedarray-prototype-set",normalizedTitle:"typedarray.prototype.set()",charIndex:14973},{level:3,title:"TypedArray.prototype.subarray()",slug:"typedarray-prototype-subarray",normalizedTitle:"typedarray.prototype.subarray()",charIndex:15355},{level:3,title:"TypedArray.prototype.slice()",slug:"typedarray-prototype-slice",normalizedTitle:"typedarray.prototype.slice()",charIndex:15657},{level:3,title:"TypedArray.of()",slug:"typedarray-of",normalizedTitle:"typedarray.of()",charIndex:15951},{level:3,title:"TypedArray.from()",slug:"typedarray-from",normalizedTitle:"typedarray.from()",charIndex:16322},{level:2,title:"复合视图",slug:"复合视图",normalizedTitle:"复合视图",charIndex:16924},{level:2,title:"DataView 视图",slug:"dataview-视图",normalizedTitle:"dataview 视图",charIndex:17436},{level:2,title:"二进制数组的应用",slug:"二进制数组的应用",normalizedTitle:"二进制数组的应用",charIndex:19853},{level:3,title:"AJAX",slug:"ajax",normalizedTitle:"ajax",charIndex:19904},{level:3,title:"Canvas",slug:"canvas",normalizedTitle:"canvas",charIndex:1541},{level:3,title:"WebSocket",slug:"websocket",normalizedTitle:"websocket",charIndex:1576},{level:3,title:"Fetch API",slug:"fetch-api",normalizedTitle:"fetch api",charIndex:1551},{level:3,title:"File API",slug:"file-api",normalizedTitle:"file api",charIndex:1564},{level:2,title:"SharedArrayBuffer",slug:"sharedarraybuffer",normalizedTitle:"sharedarraybuffer",charIndex:24086},{level:2,title:"Atomics 对象",slug:"atomics-对象",normalizedTitle:"atomics 对象",charIndex:26147}],excerpt:'<h1 id="arraybuffer"><a class="header-anchor" href="#arraybuffer">#</a> ArrayBuffer</h1>\n<p><code>ArrayBuffer</code>对象、<code>TypedArray</code>视图和<code>DataView</code>视图是 JavaScript 操作二进制数据的一个接口。这些对象早就存在，属于独立的规格（2011 年 2 月发布），ES6 将它们纳入了 ECMAScript 规格，并且增加了新的方法。它们都是以数组的语法处理二进制数据，所以统称为二进制数组。</p>\n',lastUpdated:"2022/9/22 下午4:28:09",lastUpdatedTimestamp:1663835289e3,headersStr:"ArrayBuffer 对象 概述 ArrayBuffer.prototype.byteLength ArrayBuffer.prototype.slice() ArrayBuffer.isView() TypedArray 视图 概述 构造函数 数组方法 字节序 BYTESPERELEMENT 属性 ArrayBuffer 与字符串的互相转换 溢出 TypedArray.prototype.buffer TypedArray.prototype.byteLength，TypedArray.prototype.byteOffset TypedArray.prototype.length TypedArray.prototype.set() TypedArray.prototype.subarray() TypedArray.prototype.slice() TypedArray.of() TypedArray.from() 复合视图 DataView 视图 二进制数组的应用 AJAX Canvas WebSocket Fetch API File API SharedArrayBuffer Atomics 对象",content:"# ArrayBuffer\n\nArrayBuffer对象、TypedArray视图和DataView视图是 JavaScript 操作二进制数据的一个接口。这些对象早就存在，属于独立的规格（2011 年 2 月发布），ES6 将它们纳入了 ECMAScript 规格，并且增加了新的方法。它们都是以数组的语法处理二进制数据，所以统称为二进制数组。 这个接口的原始设计目的，与 WebGL 项目有关。所谓 WebGL，就是指浏览器与显卡之间的通信接口，为了满足 JavaScript 与显卡之间大量的、实时的数据交换，它们之间的数据通信必须是二进制的，而不能是传统的文本格式。文本格式传递一个 32 位整数，两端的 JavaScript 脚本与显卡都要进行格式转化，将非常耗时。这时要是存在一种机制，可以像 C 语言那样，直接操作字节，将 4 个字节的 32 位整数，以二进制形式原封不动地送入显卡，脚本的性能就会大幅提升。\n\n二进制数组就是在这种背景下诞生的。它很像 C 语言的数组，允许开发者以数组下标的形式，直接操作内存，大大增强了 JavaScript 处理二进制数据的能力，使得开发者有可能通过 JavaScript 与操作系统的原生接口进行二进制通信。\n\n二进制数组由三类对象组成。\n\n（1）ArrayBuffer对象：代表内存之中的一段二进制数据，可以通过“视图”进行操作。“视图”部署了数组接口，这意味着，可以用数组的方法操作内存。\n\n（2）TypedArray视图：共包括 9 种类型的视图，比如Uint8Array（无符号 8 位整数）数组视图, Int16Array（16 位整数）数组视图, Float32Array（32 位浮点数）数组视图等等。\n\n（3）DataView视图：可以自定义复合格式的视图，比如第一个字节是 Uint8（无符号 8 位整数）、第二、三个字节是 Int16（16 位整数）、第四个字节开始是 Float32（32 位浮点数）等等，此外还可以自定义字节序。\n\n简单说，ArrayBuffer对象代表原始的二进制数据，TypedArray视图用来读写简单类型的二进制数据，DataView视图用来读写复杂类型的二进制数据。\n\nTypedArray视图支持的数据类型一共有 9 种（DataView视图支持除Uint8C以外的其他 8 种）。\n\n数据类型      字节长度   含义                  对应的 C 语言类型\nInt8      1      8 位带符号整数            signed char\nUint8     1      8 位不带符号整数           unsigned char\nUint8C    1      8 位不带符号整数（自动过滤溢出）   unsigned char\nInt16     2      16 位带符号整数           short\nUint16    2      16 位不带符号整数          unsigned short\nInt32     4      32 位带符号整数           int\nUint32    4      32 位不带符号的整数         unsigned int\nFloat32   4      32 位浮点数             float\nFloat64   8      64 位浮点数             double\n\n注意，二进制数组并不是真正的数组，而是类似数组的对象。\n\n很多浏览器操作的 API，用到了二进制数组操作二进制数据，下面是其中的几个。\n\n * Canvas\n * Fetch API\n * File API\n * WebSockets\n * XMLHttpRequest\n\n\n# ArrayBuffer 对象\n\n\n# 概述\n\nArrayBuffer对象代表储存二进制数据的一段内存，它不能直接读写，只能通过视图（TypedArray视图和DataView视图)来读写，视图的作用是以指定格式解读二进制数据。\n\nArrayBuffer也是一个构造函数，可以分配一段可以存放数据的连续内存区域。\n\nconst buf = new ArrayBuffer(32);\n\n\n1\n\n\n上面代码生成了一段 32 字节的内存区域，每个字节的值默认都是 0。可以看到，ArrayBuffer构造函数的参数是所需要的内存大小（单位字节）。\n\n为了读写这段内容，需要为它指定视图。DataView视图的创建，需要提供ArrayBuffer对象实例作为参数。\n\nconst buf = new ArrayBuffer(32);\nconst dataView = new DataView(buf);\ndataView.getUint8(0) // 0\n\n\n1\n2\n3\n\n\n上面代码对一段 32 字节的内存，建立DataView视图，然后以不带符号的 8 位整数格式，从头读取 8 位二进制数据，结果得到 0，因为原始内存的ArrayBuffer对象，默认所有位都是 0。\n\n另一种TypedArray视图，与DataView视图的一个区别是，它不是一个构造函数，而是一组构造函数，代表不同的数据格式。\n\nconst buffer = new ArrayBuffer(12);\n\nconst x1 = new Int32Array(buffer);\nx1[0] = 1;\nconst x2 = new Uint8Array(buffer);\nx2[0]  = 2;\n\nx1[0] // 2\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n上面代码对同一段内存，分别建立两种视图：32 位带符号整数（Int32Array构造函数）和 8 位不带符号整数（Uint8Array构造函数）。由于两个视图对应的是同一段内存，一个视图修改底层内存，会影响到另一个视图。\n\nTypedArray视图的构造函数，除了接受ArrayBuffer实例作为参数，还可以接受普通数组作为参数，直接分配内存生成底层的ArrayBuffer实例，并同时完成对这段内存的赋值。\n\nconst typedArray = new Uint8Array([0,1,2]);\ntypedArray.length // 3\n\ntypedArray[0] = 5;\ntypedArray // [5, 1, 2]\n\n\n1\n2\n3\n4\n5\n\n\n上面代码使用TypedArray视图的Uint8Array构造函数，新建一个不带符号的 8 位整数视图。可以看到，Uint8Array直接使用普通数组作为参数，对底层内存的赋值同时完成。\n\n\n# ArrayBuffer.prototype.byteLength\n\nArrayBuffer实例的byteLength属性，返回所分配的内存区域的字节长度。\n\nconst buffer = new ArrayBuffer(32);\nbuffer.byteLength\n// 32\n\n\n1\n2\n3\n\n\n如果要分配的内存区域很大，有可能分配失败（因为没有那么多的连续空余内存），所以有必要检查是否分配成功。\n\nif (buffer.byteLength === n) {\n  // 成功\n} else {\n  // 失败\n}\n\n\n1\n2\n3\n4\n5\n\n\n\n# ArrayBuffer.prototype.slice()\n\nArrayBuffer实例有一个slice方法，允许将内存区域的一部分，拷贝生成一个新的ArrayBuffer对象。\n\nconst buffer = new ArrayBuffer(8);\nconst newBuffer = buffer.slice(0, 3);\n\n\n1\n2\n\n\n上面代码拷贝buffer对象的前 3 个字节（从 0 开始，到第 3 个字节前面结束），生成一个新的ArrayBuffer对象。slice方法其实包含两步，第一步是先分配一段新内存，第二步是将原来那个ArrayBuffer对象拷贝过去。\n\nslice方法接受两个参数，第一个参数表示拷贝开始的字节序号（含该字节），第二个参数表示拷贝截止的字节序号（不含该字节）。如果省略第二个参数，则默认到原ArrayBuffer对象的结尾。\n\n除了slice方法，ArrayBuffer对象不提供任何直接读写内存的方法，只允许在其上方建立视图，然后通过视图读写。\n\n\n# ArrayBuffer.isView()\n\nArrayBuffer有一个静态方法isView，返回一个布尔值，表示参数是否为ArrayBuffer的视图实例。这个方法大致相当于判断参数，是否为TypedArray实例或DataView实例。\n\nconst buffer = new ArrayBuffer(8);\nArrayBuffer.isView(buffer) // false\n\nconst v = new Int32Array(buffer);\nArrayBuffer.isView(v) // true\n\n\n1\n2\n3\n4\n5\n\n\n\n# TypedArray 视图\n\n\n# 概述\n\nArrayBuffer对象作为内存区域，可以存放多种类型的数据。同一段内存，不同数据有不同的解读方式，这就叫做“视图”（view）。ArrayBuffer有两种视图，一种是TypedArray视图，另一种是DataView视图。前者的数组成员都是同一个数据类型，后者的数组成员可以是不同的数据类型。\n\n目前，TypedArray视图一共包括 9 种类型，每一种视图都是一种构造函数。\n\n * Int8Array：8 位有符号整数，长度 1 个字节。\n * Uint8Array：8 位无符号整数，长度 1 个字节。\n * Uint8ClampedArray：8 位无符号整数，长度 1 个字节，溢出处理不同。\n * Int16Array：16 位有符号整数，长度 2 个字节。\n * Uint16Array：16 位无符号整数，长度 2 个字节。\n * Int32Array：32 位有符号整数，长度 4 个字节。\n * Uint32Array：32 位无符号整数，长度 4 个字节。\n * Float32Array：32 位浮点数，长度 4 个字节。\n * Float64Array：64 位浮点数，长度 8 个字节。\n\n这 9 个构造函数生成的数组，统称为TypedArray视图。它们很像普通数组，都有length属性，都能用方括号运算符（[]）获取单个元素，所有数组的方法，在它们上面都能使用。普通数组与 TypedArray 数组的差异主要在以下方面。\n\n * TypedArray 数组的所有成员，都是同一种类型。\n * TypedArray 数组的成员是连续的，不会有空位。\n * TypedArray 数组成员的默认值为 0。比如，new Array(10)返回一个普通数组，里面没有任何成员，只是 10 个空位；new Uint8Array(10)返回一个 TypedArray 数组，里面 10 个成员都是 0。\n * TypedArray 数组只是一层视图，本身不储存数据，它的数据都储存在底层的ArrayBuffer对象之中，要获取底层对象必须使用buffer属性。\n\n\n# 构造函数\n\nTypedArray 数组提供 9 种构造函数，用来生成相应类型的数组实例。\n\n构造函数有多种用法。\n\n（1）TypedArray(buffer, byteOffset=0, length?)\n\n同一个ArrayBuffer对象之上，可以根据不同的数据类型，建立多个视图。\n\n// 创建一个8字节的ArrayBuffer\nconst b = new ArrayBuffer(8);\n\n// 创建一个指向b的Int32视图，开始于字节0，直到缓冲区的末尾\nconst v1 = new Int32Array(b);\n\n// 创建一个指向b的Uint8视图，开始于字节2，直到缓冲区的末尾\nconst v2 = new Uint8Array(b, 2);\n\n// 创建一个指向b的Int16视图，开始于字节2，长度为2\nconst v3 = new Int16Array(b, 2, 2);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n上面代码在一段长度为 8 个字节的内存（b）之上，生成了三个视图：v1、v2和v3。\n\n视图的构造函数可以接受三个参数：\n\n * 第一个参数（必需）：视图对应的底层ArrayBuffer对象。\n * 第二个参数（可选）：视图开始的字节序号，默认从 0 开始。\n * 第三个参数（可选）：视图包含的数据个数，默认直到本段内存区域结束。\n\n因此，v1、v2和v3是重叠的：v1[0]是一个 32 位整数，指向字节 0 ～字节 3；v2[0]是一个 8 位无符号整数，指向字节 2；v3[0]是一个 16 位整数，指向字节 2 ～字节 3。只要任何一个视图对内存有所修改，就会在另外两个视图上反应出来。\n\n注意，byteOffset必须与所要建立的数据类型一致，否则会报错。\n\nconst buffer = new ArrayBuffer(8);\nconst i16 = new Int16Array(buffer, 1);\n// Uncaught RangeError: start offset of Int16Array should be a multiple of 2\n\n\n1\n2\n3\n\n\n上面代码中，新生成一个 8 个字节的ArrayBuffer对象，然后在这个对象的第一个字节，建立带符号的 16 位整数视图，结果报错。因为，带符号的 16 位整数需要两个字节，所以byteOffset参数必须能够被 2 整除。\n\n如果想从任意字节开始解读ArrayBuffer对象，必须使用DataView视图，因为TypedArray视图只提供 9 种固定的解读格式。\n\n（2）TypedArray(length)\n\n视图还可以不通过ArrayBuffer对象，直接分配内存而生成。\n\nconst f64a = new Float64Array(8);\nf64a[0] = 10;\nf64a[1] = 20;\nf64a[2] = f64a[0] + f64a[1];\n\n\n1\n2\n3\n4\n\n\n上面代码生成一个 8 个成员的Float64Array数组（共 64 字节），然后依次对每个成员赋值。这时，视图构造函数的参数就是成员的个数。可以看到，视图数组的赋值操作与普通数组的操作毫无两样。\n\n（3）TypedArray(typedArray)\n\nTypedArray 数组的构造函数，可以接受另一个TypedArray实例作为参数。\n\nconst typedArray = new Int8Array(new Uint8Array(4));\n\n\n1\n\n\n上面代码中，Int8Array构造函数接受一个Uint8Array实例作为参数。\n\n注意，此时生成的新数组，只是复制了参数数组的值，对应的底层内存是不一样的。新数组会开辟一段新的内存储存数据，不会在原数组的内存之上建立视图。\n\nconst x = new Int8Array([1, 1]);\nconst y = new Int8Array(x);\nx[0] // 1\ny[0] // 1\n\nx[0] = 2;\ny[0] // 1\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n上面代码中，数组y是以数组x为模板而生成的，当x变动的时候，y并没有变动。\n\n如果想基于同一段内存，构造不同的视图，可以采用下面的写法。\n\nconst x = new Int8Array([1, 1]);\nconst y = new Int8Array(x.buffer);\nx[0] // 1\ny[0] // 1\n\nx[0] = 2;\ny[0] // 2\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n（4）TypedArray(arrayLikeObject)\n\n构造函数的参数也可以是一个普通数组，然后直接生成TypedArray实例。\n\nconst typedArray = new Uint8Array([1, 2, 3, 4]);\n\n\n1\n\n\n注意，这时TypedArray视图会重新开辟内存，不会在原数组的内存上建立视图。\n\n上面代码从一个普通的数组，生成一个 8 位无符号整数的TypedArray实例。\n\nTypedArray 数组也可以转换回普通数组。\n\nconst normalArray = [...typedArray];\n// or\nconst normalArray = Array.from(typedArray);\n// or\nconst normalArray = Array.prototype.slice.call(typedArray);\n\n\n1\n2\n3\n4\n5\n\n\n\n# 数组方法\n\n普通数组的操作方法和属性，对 TypedArray 数组完全适用。\n\n * TypedArray.prototype.copyWithin(target, start[, end = this.length])\n * TypedArray.prototype.entries()\n * TypedArray.prototype.every(callbackfn, thisArg?)\n * TypedArray.prototype.fill(value, start=0, end=this.length)\n * TypedArray.prototype.filter(callbackfn, thisArg?)\n * TypedArray.prototype.find(predicate, thisArg?)\n * TypedArray.prototype.findIndex(predicate, thisArg?)\n * TypedArray.prototype.forEach(callbackfn, thisArg?)\n * TypedArray.prototype.indexOf(searchElement, fromIndex=0)\n * TypedArray.prototype.join(separator)\n * TypedArray.prototype.keys()\n * TypedArray.prototype.lastIndexOf(searchElement, fromIndex?)\n * TypedArray.prototype.map(callbackfn, thisArg?)\n * TypedArray.prototype.reduce(callbackfn, initialValue?)\n * TypedArray.prototype.reduceRight(callbackfn, initialValue?)\n * TypedArray.prototype.reverse()\n * TypedArray.prototype.slice(start=0, end=this.length)\n * TypedArray.prototype.some(callbackfn, thisArg?)\n * TypedArray.prototype.sort(comparefn)\n * TypedArray.prototype.toLocaleString(reserved1?, reserved2?)\n * TypedArray.prototype.toString()\n * TypedArray.prototype.values()\n\n上面所有方法的用法，请参阅数组方法的介绍，这里不再重复了。\n\n注意，TypedArray 数组没有concat方法。如果想要合并多个 TypedArray 数组，可以用下面这个函数。\n\nfunction concatenate(resultConstructor, ...arrays) {\n  let totalLength = 0;\n  for (let arr of arrays) {\n    totalLength += arr.length;\n  }\n  let result = new resultConstructor(totalLength);\n  let offset = 0;\n  for (let arr of arrays) {\n    result.set(arr, offset);\n    offset += arr.length;\n  }\n  return result;\n}\n\nconcatenate(Uint8Array, Uint8Array.of(1, 2), Uint8Array.of(3, 4))\n// Uint8Array [1, 2, 3, 4]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n另外，TypedArray 数组与普通数组一样，部署了 Iterator 接口，所以可以被遍历。\n\nlet ui8 = Uint8Array.of(0, 1, 2);\nfor (let byte of ui8) {\n  console.log(byte);\n}\n// 0\n// 1\n// 2\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# 字节序\n\n字节序指的是数值在内存中的表示方式。\n\nconst buffer = new ArrayBuffer(16);\nconst int32View = new Int32Array(buffer);\n\nfor (let i = 0; i < int32View.length; i++) {\n  int32View[i] = i * 2;\n}\n\n\n1\n2\n3\n4\n5\n6\n\n\n上面代码生成一个 16 字节的ArrayBuffer对象，然后在它的基础上，建立了一个 32 位整数的视图。由于每个 32 位整数占据 4 个字节，所以一共可以写入 4 个整数，依次为 0，2，4，6。\n\n如果在这段数据上接着建立一个 16 位整数的视图，则可以读出完全不一样的结果。\n\nconst int16View = new Int16Array(buffer);\n\nfor (let i = 0; i < int16View.length; i++) {\n  console.log(\"Entry \" + i + \": \" + int16View[i]);\n}\n// Entry 0: 0\n// Entry 1: 0\n// Entry 2: 2\n// Entry 3: 0\n// Entry 4: 4\n// Entry 5: 0\n// Entry 6: 6\n// Entry 7: 0\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n由于每个 16 位整数占据 2 个字节，所以整个ArrayBuffer对象现在分成 8 段。然后，由于 x86 体系的计算机都采用小端字节序（little endian），相对重要的字节排在后面的内存地址，相对不重要字节排在前面的内存地址，所以就得到了上面的结果。\n\n比如，一个占据四个字节的 16 进制数0x12345678，决定其大小的最重要的字节是“12”，最不重要的是“78”。小端字节序将最不重要的字节排在前面，储存顺序就是78563412；大端字节序则完全相反，将最重要的字节排在前面，储存顺序就是12345678。目前，所有个人电脑几乎都是小端字节序，所以 TypedArray 数组内部也采用小端字节序读写数据，或者更准确的说，按照本机操作系统设定的字节序读写数据。\n\n这并不意味大端字节序不重要，事实上，很多网络设备和特定的操作系统采用的是大端字节序。这就带来一个严重的问题：如果一段数据是大端字节序，TypedArray 数组将无法正确解析，因为它只能处理小端字节序！为了解决这个问题，JavaScript 引入DataView对象，可以设定字节序，下文会详细介绍。\n\n下面是另一个例子。\n\n// 假定某段buffer包含如下字节 [0x02, 0x01, 0x03, 0x07]\nconst buffer = new ArrayBuffer(4);\nconst v1 = new Uint8Array(buffer);\nv1[0] = 2;\nv1[1] = 1;\nv1[2] = 3;\nv1[3] = 7;\n\nconst uInt16View = new Uint16Array(buffer);\n\n// 计算机采用小端字节序\n// 所以头两个字节等于258\nif (uInt16View[0] === 258) {\n  console.log('OK'); // \"OK\"\n}\n\n// 赋值运算\nuInt16View[0] = 255;    // 字节变为[0xFF, 0x00, 0x03, 0x07]\nuInt16View[0] = 0xff05; // 字节变为[0x05, 0xFF, 0x03, 0x07]\nuInt16View[1] = 0x0210; // 字节变为[0x05, 0xFF, 0x10, 0x02]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n\n下面的函数可以用来判断，当前视图是小端字节序，还是大端字节序。\n\nconst BIG_ENDIAN = Symbol('BIG_ENDIAN');\nconst LITTLE_ENDIAN = Symbol('LITTLE_ENDIAN');\n\nfunction getPlatformEndianness() {\n  let arr32 = Uint32Array.of(0x12345678);\n  let arr8 = new Uint8Array(arr32.buffer);\n  switch ((arr8[0]*0x1000000) + (arr8[1]*0x10000) + (arr8[2]*0x100) + (arr8[3])) {\n    case 0x12345678:\n      return BIG_ENDIAN;\n    case 0x78563412:\n      return LITTLE_ENDIAN;\n    default:\n      throw new Error('Unknown endianness');\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n总之，与普通数组相比，TypedArray 数组的最大优点就是可以直接操作内存，不需要数据类型转换，所以速度快得多。\n\n\n# BYTES_PER_ELEMENT 属性\n\n每一种视图的构造函数，都有一个BYTES_PER_ELEMENT属性，表示这种数据类型占据的字节数。\n\nInt8Array.BYTES_PER_ELEMENT // 1\nUint8Array.BYTES_PER_ELEMENT // 1\nUint8ClampedArray.BYTES_PER_ELEMENT // 1\nInt16Array.BYTES_PER_ELEMENT // 2\nUint16Array.BYTES_PER_ELEMENT // 2\nInt32Array.BYTES_PER_ELEMENT // 4\nUint32Array.BYTES_PER_ELEMENT // 4\nFloat32Array.BYTES_PER_ELEMENT // 4\nFloat64Array.BYTES_PER_ELEMENT // 8\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n这个属性在TypedArray实例上也能获取，即有TypedArray.prototype.BYTES_PER_ELEMENT。\n\n\n# ArrayBuffer 与字符串的互相转换\n\nArrayBuffer 和字符串的相互转换，使用原生 TextEncoder 和 TextDecoder 方法。为了便于说明用法，下面的代码都按照 TypeScript 的用法，给出了类型签名。\n\n/**\n * Convert ArrayBuffer/TypedArray to String via TextDecoder\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/API/TextDecoder\n */\nfunction ab2str(\n  input: ArrayBuffer | Uint8Array | Int8Array | Uint16Array | Int16Array | Uint32Array | Int32Array,\n  outputEncoding: string = 'utf8',\n): string {\n  const decoder = new TextDecoder(outputEncoding)\n  return decoder.decode(input)\n}\n\n/**\n * Convert String to ArrayBuffer via TextEncoder\n *\n * @see https://developer.mozilla.org/zh-CN/docs/Web/API/TextEncoder\n */\nfunction str2ab(input: string): ArrayBuffer {\n  const view = str2Uint8Array(input)\n  return view.buffer\n}\n\n/** Convert String to Uint8Array */\nfunction str2Uint8Array(input: string): Uint8Array {\n  const encoder = new TextEncoder()\n  const view = encoder.encode(input)\n  return view\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n\n\n上面代码中，ab2str()的第二个参数outputEncoding给出了输出编码的编码，一般保持默认值（utf-8），其他可选值参见官方文档或 Node.js 文档。\n\n\n# 溢出\n\n不同的视图类型，所能容纳的数值范围是确定的。超出这个范围，就会出现溢出。比如，8 位视图只能容纳一个 8 位的二进制值，如果放入一个 9 位的值，就会溢出。\n\nTypedArray 数组的溢出处理规则，简单来说，就是抛弃溢出的位，然后按照视图类型进行解释。\n\nconst uint8 = new Uint8Array(1);\n\nuint8[0] = 256;\nuint8[0] // 0\n\nuint8[0] = -1;\nuint8[0] // 255\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n上面代码中，uint8是一个 8 位视图，而 256 的二进制形式是一个 9 位的值100000000，这时就会发生溢出。根据规则，只会保留后 8 位，即00000000。uint8视图的解释规则是无符号的 8 位整数，所以00000000就是0。\n\n负数在计算机内部采用“2 的补码”表示，也就是说，将对应的正数值进行否运算，然后加1。比如，-1对应的正值是1，进行否运算以后，得到11111110，再加上1就是补码形式11111111。uint8按照无符号的 8 位整数解释11111111，返回结果就是255。\n\n一个简单转换规则，可以这样表示。\n\n * 正向溢出（overflow）：当输入值大于当前数据类型的最大值，结果等于当前数据类型的最小值加上余值，再减去 1。\n * 负向溢出（underflow）：当输入值小于当前数据类型的最小值，结果等于当前数据类型的最大值减去余值的绝对值，再加上 1。\n\n上面的“余值”就是模运算的结果，即 JavaScript 里面的%运算符的结果。\n\n12 % 4 // 0\n12 % 5 // 2\n\n\n1\n2\n\n\n上面代码中，12 除以 4 是没有余值的，而除以 5 会得到余值 2。\n\n请看下面的例子。\n\nconst int8 = new Int8Array(1);\n\nint8[0] = 128;\nint8[0] // -128\n\nint8[0] = -129;\nint8[0] // 127\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n上面例子中，int8是一个带符号的 8 位整数视图，它的最大值是 127，最小值是-128。输入值为128时，相当于正向溢出1，根据“最小值加上余值（128 除以 127 的余值是 1），再减去 1”的规则，就会返回-128；输入值为-129时，相当于负向溢出1，根据“最大值减去余值的绝对值（-129 除以-128 的余值的绝对值是 1），再加上 1”的规则，就会返回127。\n\nUint8ClampedArray视图的溢出规则，与上面的规则不同。它规定，凡是发生正向溢出，该值一律等于当前数据类型的最大值，即 255；如果发生负向溢出，该值一律等于当前数据类型的最小值，即 0。\n\nconst uint8c = new Uint8ClampedArray(1);\n\nuint8c[0] = 256;\nuint8c[0] // 255\n\nuint8c[0] = -1;\nuint8c[0] // 0\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n上面例子中，uint8C是一个Uint8ClampedArray视图，正向溢出时都返回 255，负向溢出都返回 0。\n\n\n# TypedArray.prototype.buffer\n\nTypedArray实例的buffer属性，返回整段内存区域对应的ArrayBuffer对象。该属性为只读属性。\n\nconst a = new Float32Array(64);\nconst b = new Uint8Array(a.buffer);\n\n\n1\n2\n\n\n上面代码的a视图对象和b视图对象，对应同一个ArrayBuffer对象，即同一段内存。\n\n\n# TypedArray.prototype.byteLength，TypedArray.prototype.byteOffset\n\nbyteLength属性返回 TypedArray 数组占据的内存长度，单位为字节。byteOffset属性返回 TypedArray 数组从底层ArrayBuffer对象的哪个字节开始。这两个属性都是只读属性。\n\nconst b = new ArrayBuffer(8);\n\nconst v1 = new Int32Array(b);\nconst v2 = new Uint8Array(b, 2);\nconst v3 = new Int16Array(b, 2, 2);\n\nv1.byteLength // 8\nv2.byteLength // 6\nv3.byteLength // 4\n\nv1.byteOffset // 0\nv2.byteOffset // 2\nv3.byteOffset // 2\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n\n# TypedArray.prototype.length\n\nlength属性表示 TypedArray 数组含有多少个成员。注意将 length 属性和 byteLength 属性区分，前者是成员长度，后者是字节长度。\n\nconst a = new Int16Array(8);\n\na.length // 8\na.byteLength // 16\n\n\n1\n2\n3\n4\n\n\n\n# TypedArray.prototype.set()\n\nTypedArray 数组的set方法用于复制数组（普通数组或 TypedArray 数组），也就是将一段内容完全复制到另一段内存。\n\nconst a = new Uint8Array(8);\nconst b = new Uint8Array(8);\n\nb.set(a);\n\n\n1\n2\n3\n4\n\n\n上面代码复制a数组的内容到b数组，它是整段内存的复制，比一个个拷贝成员的那种复制快得多。\n\nset方法还可以接受第二个参数，表示从b对象的哪一个成员开始复制a对象。\n\nconst a = new Uint16Array(8);\nconst b = new Uint16Array(10);\n\nb.set(a, 2)\n\n\n1\n2\n3\n4\n\n\n上面代码的b数组比a数组多两个成员，所以从b[2]开始复制。\n\n\n# TypedArray.prototype.subarray()\n\nsubarray方法是对于 TypedArray 数组的一部分，再建立一个新的视图。\n\nconst a = new Uint16Array(8);\nconst b = a.subarray(2,3);\n\na.byteLength // 16\nb.byteLength // 2\n\n\n1\n2\n3\n4\n5\n\n\nsubarray方法的第一个参数是起始的成员序号，第二个参数是结束的成员序号（不含该成员），如果省略则包含剩余的全部成员。所以，上面代码的a.subarray(2,3)，意味着 b 只包含a[2]一个成员，字节长度为 2。\n\n\n# TypedArray.prototype.slice()\n\nTypeArray 实例的slice方法，可以返回一个指定位置的新的TypedArray实例。\n\nlet ui8 = Uint8Array.of(0, 1, 2);\nui8.slice(-1)\n// Uint8Array [ 2 ]\n\n\n1\n2\n3\n\n\n上面代码中，ui8是 8 位无符号整数数组视图的一个实例。它的slice方法可以从当前视图之中，返回一个新的视图实例。\n\nslice方法的参数，表示原数组的具体位置，开始生成新数组。负值表示逆向的位置，即-1 为倒数第一个位置，-2 表示倒数第二个位置，以此类推。\n\n\n# TypedArray.of()\n\nTypedArray 数组的所有构造函数，都有一个静态方法of，用于将参数转为一个TypedArray实例。\n\nFloat32Array.of(0.151, -8, 3.7)\n// Float32Array [ 0.151, -8, 3.7 ]\n\n\n1\n2\n\n\n下面三种方法都会生成同样一个 TypedArray 数组。\n\n// 方法一\nlet tarr = new Uint8Array([1,2,3]);\n\n// 方法二\nlet tarr = Uint8Array.of(1,2,3);\n\n// 方法三\nlet tarr = new Uint8Array(3);\ntarr[0] = 1;\ntarr[1] = 2;\ntarr[2] = 3;\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n\n# TypedArray.from()\n\n静态方法from接受一个可遍历的数据结构（比如数组）作为参数，返回一个基于这个结构的TypedArray实例。\n\nUint16Array.from([0, 1, 2])\n// Uint16Array [ 0, 1, 2 ]\n\n\n1\n2\n\n\n这个方法还可以将一种TypedArray实例，转为另一种。\n\nconst ui16 = Uint16Array.from(Uint8Array.of(0, 1, 2));\nui16 instanceof Uint16Array // true\n\n\n1\n2\n\n\nfrom方法还可以接受一个函数，作为第二个参数，用来对每个元素进行遍历，功能类似map方法。\n\nInt8Array.of(127, 126, 125).map(x => 2 * x)\n// Int8Array [ -2, -4, -6 ]\n\nInt16Array.from(Int8Array.of(127, 126, 125), x => 2 * x)\n// Int16Array [ 254, 252, 250 ]\n\n\n1\n2\n3\n4\n5\n\n\n上面的例子中，from方法没有发生溢出，这说明遍历不是针对原来的 8 位整数数组。也就是说，from会将第一个参数指定的 TypedArray 数组，拷贝到另一段内存之中，处理之后再将结果转成指定的数组格式。\n\n\n# 复合视图\n\n由于视图的构造函数可以指定起始位置和长度，所以在同一段内存之中，可以依次存放不同类型的数据，这叫做“复合视图”。\n\nconst buffer = new ArrayBuffer(24);\n\nconst idView = new Uint32Array(buffer, 0, 1);\nconst usernameView = new Uint8Array(buffer, 4, 16);\nconst amountDueView = new Float32Array(buffer, 20, 1);\n\n\n1\n2\n3\n4\n5\n\n\n上面代码将一个 24 字节长度的ArrayBuffer对象，分成三个部分：\n\n * 字节 0 到字节 3：1 个 32 位无符号整数\n * 字节 4 到字节 19：16 个 8 位整数\n * 字节 20 到字节 23：1 个 32 位浮点数\n\n这种数据结构可以用如下的 C 语言描述：\n\nstruct someStruct {\n  unsigned long id;\n  char username[16];\n  float amountDue;\n};\n\n\n1\n2\n3\n4\n5\n\n\n\n# DataView 视图\n\n如果一段数据包括多种类型（比如服务器传来的 HTTP 数据），这时除了建立ArrayBuffer对象的复合视图以外，还可以通过DataView视图进行操作。\n\nDataView视图提供更多操作选项，而且支持设定字节序。本来，在设计目的上，ArrayBuffer对象的各种TypedArray视图，是用来向网卡、声卡之类的本机设备传送数据，所以使用本机的字节序就可以了；而DataView视图的设计目的，是用来处理网络设备传来的数据，所以大端字节序或小端字节序是可以自行设定的。\n\nDataView视图本身也是构造函数，接受一个ArrayBuffer对象作为参数，生成视图。\n\nDataView(ArrayBuffer buffer [, 字节起始位置 [, 长度]]);\n\n\n1\n\n\n下面是一个例子。\n\nconst buffer = new ArrayBuffer(24);\nconst dv = new DataView(buffer);\n\n\n1\n2\n\n\nDataView实例有以下属性，含义与TypedArray实例的同名方法相同。\n\n * DataView.prototype.buffer：返回对应的 ArrayBuffer 对象\n * DataView.prototype.byteLength：返回占据的内存字节长度\n * DataView.prototype.byteOffset：返回当前视图从对应的 ArrayBuffer 对象的哪个字节开始\n\nDataView实例提供 8 个方法读取内存。\n\n * getInt8：读取 1 个字节，返回一个 8 位整数。\n * getUint8：读取 1 个字节，返回一个无符号的 8 位整数。\n * getInt16：读取 2 个字节，返回一个 16 位整数。\n * getUint16：读取 2 个字节，返回一个无符号的 16 位整数。\n * getInt32：读取 4 个字节，返回一个 32 位整数。\n * getUint32：读取 4 个字节，返回一个无符号的 32 位整数。\n * getFloat32：读取 4 个字节，返回一个 32 位浮点数。\n * getFloat64：读取 8 个字节，返回一个 64 位浮点数。\n\n这一系列get方法的参数都是一个字节序号（不能是负数，否则会报错），表示从哪个字节开始读取。\n\nconst buffer = new ArrayBuffer(24);\nconst dv = new DataView(buffer);\n\n// 从第1个字节读取一个8位无符号整数\nconst v1 = dv.getUint8(0);\n\n// 从第2个字节读取一个16位无符号整数\nconst v2 = dv.getUint16(1);\n\n// 从第4个字节读取一个16位无符号整数\nconst v3 = dv.getUint16(3);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n上面代码读取了ArrayBuffer对象的前 5 个字节，其中有一个 8 位整数和两个十六位整数。\n\n如果一次读取两个或两个以上字节，就必须明确数据的存储方式，到底是小端字节序还是大端字节序。默认情况下，DataView的get方法使用大端字节序解读数据，如果需要使用小端字节序解读，必须在get方法的第二个参数指定true。\n\n// 小端字节序\nconst v1 = dv.getUint16(1, true);\n\n// 大端字节序\nconst v2 = dv.getUint16(3, false);\n\n// 大端字节序\nconst v3 = dv.getUint16(3);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\nDataView 视图提供 8 个方法写入内存。\n\n * setInt8：写入 1 个字节的 8 位整数。\n * setUint8：写入 1 个字节的 8 位无符号整数。\n * setInt16：写入 2 个字节的 16 位整数。\n * setUint16：写入 2 个字节的 16 位无符号整数。\n * setInt32：写入 4 个字节的 32 位整数。\n * setUint32：写入 4 个字节的 32 位无符号整数。\n * setFloat32：写入 4 个字节的 32 位浮点数。\n * setFloat64：写入 8 个字节的 64 位浮点数。\n\n这一系列set方法，接受两个参数，第一个参数是字节序号，表示从哪个字节开始写入，第二个参数为写入的数据。对于那些写入两个或两个以上字节的方法，需要指定第三个参数，false或者undefined表示使用大端字节序写入，true表示使用小端字节序写入。\n\n// 在第1个字节，以大端字节序写入值为25的32位整数\ndv.setInt32(0, 25, false);\n\n// 在第5个字节，以大端字节序写入值为25的32位整数\ndv.setInt32(4, 25);\n\n// 在第9个字节，以小端字节序写入值为2.5的32位浮点数\ndv.setFloat32(8, 2.5, true);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n如果不确定正在使用的计算机的字节序，可以采用下面的判断方式。\n\nconst littleEndian = (function() {\n  const buffer = new ArrayBuffer(2);\n  new DataView(buffer).setInt16(0, 256, true);\n  return new Int16Array(buffer)[0] === 256;\n})();\n\n\n1\n2\n3\n4\n5\n\n\n如果返回true，就是小端字节序；如果返回false，就是大端字节序。\n\n\n# 二进制数组的应用\n\n大量的 Web API 用到了ArrayBuffer对象和它的视图对象。\n\n\n# AJAX\n\n传统上，服务器通过 AJAX 操作只能返回文本数据，即responseType属性默认为text。XMLHttpRequest第二版XHR2允许服务器返回二进制数据，这时分成两种情况。如果明确知道返回的二进制数据类型，可以把返回类型（responseType）设为arraybuffer；如果不知道，就设为blob。\n\nlet xhr = new XMLHttpRequest();\nxhr.open('GET', someUrl);\nxhr.responseType = 'arraybuffer';\n\nxhr.onload = function () {\n  let arrayBuffer = xhr.response;\n  // ···\n};\n\nxhr.send();\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n如果知道传回来的是 32 位整数，可以像下面这样处理。\n\nxhr.onreadystatechange = function () {\n  if (req.readyState === 4 ) {\n    const arrayResponse = xhr.response;\n    const dataView = new DataView(arrayResponse);\n    const ints = new Uint32Array(dataView.byteLength / 4);\n\n    xhrDiv.style.backgroundColor = \"#00FF00\";\n    xhrDiv.innerText = \"Array is \" + ints.length + \"uints long\";\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n\n# Canvas\n\n网页Canvas元素输出的二进制像素数据，就是 TypedArray 数组。\n\nconst canvas = document.getElementById('myCanvas');\nconst ctx = canvas.getContext('2d');\n\nconst imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\nconst uint8ClampedArray = imageData.data;\n\n\n1\n2\n3\n4\n5\n\n\n需要注意的是，上面代码的uint8ClampedArray虽然是一个 TypedArray 数组，但是它的视图类型是一种针对Canvas元素的专有类型Uint8ClampedArray。这个视图类型的特点，就是专门针对颜色，把每个字节解读为无符号的 8 位整数，即只能取值 0 ～ 255，而且发生运算的时候自动过滤高位溢出。这为图像处理带来了巨大的方便。\n\n举例来说，如果把像素的颜色值设为Uint8Array类型，那么乘以一个 gamma 值的时候，就必须这样计算：\n\nu8[i] = Math.min(255, Math.max(0, u8[i] * gamma));\n\n\n1\n\n\n因为Uint8Array类型对于大于 255 的运算结果（比如0xFF+1），会自动变为0x00，所以图像处理必须要像上面这样算。这样做很麻烦，而且影响性能。如果将颜色值设为Uint8ClampedArray类型，计算就简化许多。\n\npixels[i] *= gamma;\n\n\n1\n\n\nUint8ClampedArray类型确保将小于 0 的值设为 0，将大于 255 的值设为 255。注意，IE 10 不支持该类型。\n\n\n# WebSocket\n\nWebSocket可以通过ArrayBuffer，发送或接收二进制数据。\n\nlet socket = new WebSocket('ws://127.0.0.1:8081');\nsocket.binaryType = 'arraybuffer';\n\n// Wait until socket is open\nsocket.addEventListener('open', function (event) {\n  // Send binary data\n  const typedArray = new Uint8Array(4);\n  socket.send(typedArray.buffer);\n});\n\n// Receive binary data\nsocket.addEventListener('message', function (event) {\n  const arrayBuffer = event.data;\n  // ···\n});\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n\n# Fetch API\n\nFetch API 取回的数据，就是ArrayBuffer对象。\n\nfetch(url)\n.then(function(response){\n  return response.arrayBuffer()\n})\n.then(function(arrayBuffer){\n  // ...\n});\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# File API\n\n如果知道一个文件的二进制数据类型，也可以将这个文件读取为ArrayBuffer对象。\n\nconst fileInput = document.getElementById('fileInput');\nconst file = fileInput.files[0];\nconst reader = new FileReader();\nreader.readAsArrayBuffer(file);\nreader.onload = function () {\n  const arrayBuffer = reader.result;\n  // ···\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n下面以处理 bmp 文件为例。假定file变量是一个指向 bmp 文件的文件对象，首先读取文件。\n\nconst reader = new FileReader();\nreader.addEventListener(\"load\", processimage, false);\nreader.readAsArrayBuffer(file);\n\n\n1\n2\n3\n\n\n然后，定义处理图像的回调函数：先在二进制数据之上建立一个DataView视图，再建立一个bitmap对象，用于存放处理后的数据，最后将图像展示在Canvas元素之中。\n\nfunction processimage(e) {\n  const buffer = e.target.result;\n  const datav = new DataView(buffer);\n  const bitmap = {};\n  // 具体的处理步骤\n}\n\n\n1\n2\n3\n4\n5\n6\n\n\n具体处理图像数据时，先处理 bmp 的文件头。具体每个文件头的格式和定义，请参阅有关资料。\n\nbitmap.fileheader = {};\nbitmap.fileheader.bfType = datav.getUint16(0, true);\nbitmap.fileheader.bfSize = datav.getUint32(2, true);\nbitmap.fileheader.bfReserved1 = datav.getUint16(6, true);\nbitmap.fileheader.bfReserved2 = datav.getUint16(8, true);\nbitmap.fileheader.bfOffBits = datav.getUint32(10, true);\n\n\n1\n2\n3\n4\n5\n6\n\n\n接着处理图像元信息部分。\n\nbitmap.infoheader = {};\nbitmap.infoheader.biSize = datav.getUint32(14, true);\nbitmap.infoheader.biWidth = datav.getUint32(18, true);\nbitmap.infoheader.biHeight = datav.getUint32(22, true);\nbitmap.infoheader.biPlanes = datav.getUint16(26, true);\nbitmap.infoheader.biBitCount = datav.getUint16(28, true);\nbitmap.infoheader.biCompression = datav.getUint32(30, true);\nbitmap.infoheader.biSizeImage = datav.getUint32(34, true);\nbitmap.infoheader.biXPelsPerMeter = datav.getUint32(38, true);\nbitmap.infoheader.biYPelsPerMeter = datav.getUint32(42, true);\nbitmap.infoheader.biClrUsed = datav.getUint32(46, true);\nbitmap.infoheader.biClrImportant = datav.getUint32(50, true);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n最后处理图像本身的像素信息。\n\nconst start = bitmap.fileheader.bfOffBits;\nbitmap.pixels = new Uint8Array(buffer, start);\n\n\n1\n2\n\n\n至此，图像文件的数据全部处理完成。下一步，可以根据需要，进行图像变形，或者转换格式，或者展示在Canvas网页元素之中。\n\n\n# SharedArrayBuffer\n\nJavaScript 是单线程的，Web worker 引入了多线程：主线程用来与用户互动，Worker 线程用来承担计算任务。每个线程的数据都是隔离的，通过postMessage()通信。下面是一个例子。\n\n// 主线程\nconst w = new Worker('myworker.js');\n\n\n1\n2\n\n\n上面代码中，主线程新建了一个 Worker 线程。该线程与主线程之间会有一个通信渠道，主线程通过w.postMessage向 Worker 线程发消息，同时通过message事件监听 Worker 线程的回应。\n\n// 主线程\nw.postMessage('hi');\nw.onmessage = function (ev) {\n  console.log(ev.data);\n}\n\n\n1\n2\n3\n4\n5\n\n\n上面代码中，主线程先发一个消息hi，然后在监听到 Worker 线程的回应后，就将其打印出来。\n\nWorker 线程也是通过监听message事件，来获取主线程发来的消息，并作出反应。\n\n// Worker 线程\nonmessage = function (ev) {\n  console.log(ev.data);\n  postMessage('ho');\n}\n\n\n1\n2\n3\n4\n5\n\n\n线程之间的数据交换可以是各种格式，不仅仅是字符串，也可以是二进制数据。这种交换采用的是复制机制，即一个进程将需要分享的数据复制一份，通过postMessage方法交给另一个进程。如果数据量比较大，这种通信的效率显然比较低。很容易想到，这时可以留出一块内存区域，由主线程与 Worker 线程共享，两方都可以读写，那么就会大大提高效率，协作起来也会比较简单（不像postMessage那么麻烦）。\n\nES2017 引入SharedArrayBuffer，允许 Worker 线程与主线程共享同一块内存。SharedArrayBuffer的 API 与ArrayBuffer一模一样，唯一的区别是后者无法共享数据。\n\n// 主线程\n\n// 新建 1KB 共享内存\nconst sharedBuffer = new SharedArrayBuffer(1024);\n\n// 主线程将共享内存的地址发送出去\nw.postMessage(sharedBuffer);\n\n// 在共享内存上建立视图，供写入数据\nconst sharedArray = new Int32Array(sharedBuffer);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n上面代码中，postMessage方法的参数是SharedArrayBuffer对象。\n\nWorker 线程从事件的data属性上面取到数据。\n\n// Worker 线程\nonmessage = function (ev) {\n  // 主线程共享的数据，就是 1KB 的共享内存\n  const sharedBuffer = ev.data;\n\n  // 在共享内存上建立视图，方便读写\n  const sharedArray = new Int32Array(sharedBuffer);\n\n  // ...\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n共享内存也可以在 Worker 线程创建，发给主线程。\n\nSharedArrayBuffer与ArrayBuffer一样，本身是无法读写的，必须在上面建立视图，然后通过视图读写。\n\n// 分配 10 万个 32 位整数占据的内存空间\nconst sab = new SharedArrayBuffer(Int32Array.BYTES_PER_ELEMENT * 100000);\n\n// 建立 32 位整数视图\nconst ia = new Int32Array(sab);  // ia.length == 100000\n\n// 新建一个质数生成器\nconst primes = new PrimeGenerator();\n\n// 将 10 万个质数，写入这段内存空间\nfor ( let i=0 ; i < ia.length ; i++ )\n  ia[i] = primes.next();\n\n// 向 Worker 线程发送这段共享内存\nw.postMessage(ia);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\nWorker 线程收到数据后的处理如下。\n\n// Worker 线程\nlet ia;\nonmessage = function (ev) {\n  ia = ev.data;\n  console.log(ia.length); // 100000\n  console.log(ia[37]); // 输出 163，因为这是第38个质数\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# Atomics 对象\n\n多线程共享内存，最大的问题就是如何防止两个线程同时修改某个地址，或者说，当一个线程修改共享内存以后，必须有一个机制让其他线程同步。SharedArrayBuffer API 提供Atomics对象，保证所有共享内存的操作都是“原子性”的，并且可以在所有线程内同步。\n\n什么叫“原子性操作”呢？现代编程语言中，一条普通的命令被编译器处理以后，会变成多条机器指令。如果是单线程运行，这是没有问题的；多线程环境并且共享内存时，就会出问题，因为这一组机器指令的运行期间，可能会插入其他线程的指令，从而导致运行结果出错。请看下面的例子。\n\n// 主线程\nia[42] = 314159;  // 原先的值 191\nia[37] = 123456;  // 原先的值 163\n\n// Worker 线程\nconsole.log(ia[37]);\nconsole.log(ia[42]);\n// 可能的结果\n// 123456\n// 191\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n上面代码中，主线程的原始顺序是先对 42 号位置赋值，再对 37 号位置赋值。但是，编译器和 CPU 为了优化，可能会改变这两个操作的执行顺序（因为它们之间互不依赖），先对 37 号位置赋值，再对 42 号位置赋值。而执行到一半的时候，Worker 线程可能就会来读取数据，导致打印出123456和191。\n\n下面是另一个例子。\n\n// 主线程\nconst sab = new SharedArrayBuffer(Int32Array.BYTES_PER_ELEMENT * 100000);\nconst ia = new Int32Array(sab);\n\nfor (let i = 0; i < ia.length; i++) {\n  ia[i] = primes.next(); // 将质数放入 ia\n}\n\n// worker 线程\nia[112]++; // 错误\nAtomics.add(ia, 112, 1); // 正确\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n上面代码中，Worker 线程直接改写共享内存ia[112]++是不正确的。因为这行语句会被编译成多条机器指令，这些指令之间无法保证不会插入其他进程的指令。请设想如果两个线程同时ia[112]++，很可能它们得到的结果都是不正确的。\n\nAtomics对象就是为了解决这个问题而提出，它可以保证一个操作所对应的多条机器指令，一定是作为一个整体运行的，中间不会被打断。也就是说，它所涉及的操作都可以看作是原子性的单操作，这可以避免线程竞争，提高多线程共享内存时的操作安全。所以，ia[112]++要改写成Atomics.add(ia, 112, 1)。\n\nAtomics对象提供多种方法。\n\n（1）Atomics.store()，Atomics.load()\n\nstore()方法用来向共享内存写入数据，load()方法用来从共享内存读出数据。比起直接的读写操作，它们的好处是保证了读写操作的原子性。\n\n此外，它们还用来解决一个问题：多个线程使用共享内存的某个位置作为开关（flag），一旦该位置的值变了，就执行特定操作。这时，必须保证该位置的赋值操作，一定是在它前面的所有可能会改写内存的操作结束后执行；而该位置的取值操作，一定是在它后面所有可能会读取该位置的操作开始之前执行。store方法和load方法就能做到这一点，编译器不会为了优化，而打乱机器指令的执行顺序。\n\nAtomics.load(array, index)\nAtomics.store(array, index, value)\n\n\n1\n2\n\n\nstore方法接受三个参数：SharedBuffer 的视图、位置索引和值，返回sharedArray[index]的值。load方法只接受两个参数：SharedBuffer 的视图和位置索引，也是返回sharedArray[index]的值。\n\n// 主线程 main.js\nia[42] = 314159;  // 原先的值 191\nAtomics.store(ia, 37, 123456);  // 原先的值是 163\n\n// Worker 线程 worker.js\nwhile (Atomics.load(ia, 37) == 163);\nconsole.log(ia[37]);  // 123456\nconsole.log(ia[42]);  // 314159\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n上面代码中，主线程的Atomics.store向 42 号位置的赋值，一定是早于 37 位置的赋值。只要 37 号位置等于 163，Worker 线程就不会终止循环，而对 37 号位置和 42 号位置的取值，一定是在Atomics.load操作之后。\n\n下面是另一个例子。\n\n// 主线程\nconst worker = new Worker('worker.js');\nconst length = 10;\nconst size = Int32Array.BYTES_PER_ELEMENT * length;\n// 新建一段共享内存\nconst sharedBuffer = new SharedArrayBuffer(size);\nconst sharedArray = new Int32Array(sharedBuffer);\nfor (let i = 0; i < 10; i++) {\n  // 向共享内存写入 10 个整数\n  Atomics.store(sharedArray, i, 0);\n}\nworker.postMessage(sharedBuffer);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n上面代码中，主线程用Atomics.store()方法写入数据。下面是 Worker 线程用Atomics.load()方法读取数据。\n\n// worker.js\nself.addEventListener('message', (event) => {\n  const sharedArray = new Int32Array(event.data);\n  for (let i = 0; i < 10; i++) {\n    const arrayValue = Atomics.load(sharedArray, i);\n    console.log(`The item at array index ${i} is ${arrayValue}`);\n  }\n}, false);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n（2）Atomics.exchange()\n\nWorker 线程如果要写入数据，可以使用上面的Atomics.store()方法，也可以使用Atomics.exchange()方法。它们的区别是，Atomics.store()返回写入的值，而Atomics.exchange()返回被替换的值。\n\n// Worker 线程\nself.addEventListener('message', (event) => {\n  const sharedArray = new Int32Array(event.data);\n  for (let i = 0; i < 10; i++) {\n    if (i % 2 === 0) {\n      const storedValue = Atomics.store(sharedArray, i, 1);\n      console.log(`The item at array index ${i} is now ${storedValue}`);\n    } else {\n      const exchangedValue = Atomics.exchange(sharedArray, i, 2);\n      console.log(`The item at array index ${i} was ${exchangedValue}, now 2`);\n    }\n  }\n}, false);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n上面代码将共享内存的偶数位置的值改成1，奇数位置的值改成2。\n\n（3）Atomics.wait()，Atomics.wake()\n\n使用while循环等待主线程的通知，不是很高效，如果用在主线程，就会造成卡顿，Atomics对象提供了wait()和wake()两个方法用于等待通知。这两个方法相当于锁内存，即在一个线程进行操作时，让其他线程休眠（建立锁），等到操作结束，再唤醒那些休眠的线程（解除锁）。\n\n// Worker 线程\nself.addEventListener('message', (event) => {\n  const sharedArray = new Int32Array(event.data);\n  const arrayIndex = 0;\n  const expectedStoredValue = 50;\n  Atomics.wait(sharedArray, arrayIndex, expectedStoredValue);\n  console.log(Atomics.load(sharedArray, arrayIndex));\n}, false);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n上面代码中，Atomics.wait()方法等同于告诉 Worker 线程，只要满足给定条件（sharedArray的0号位置等于50），就在这一行 Worker 线程进入休眠。\n\n主线程一旦更改了指定位置的值，就可以唤醒 Worker 线程。\n\n// 主线程\nconst newArrayValue = 100;\nAtomics.store(sharedArray, 0, newArrayValue);\nconst arrayIndex = 0;\nconst queuePos = 1;\nAtomics.wake(sharedArray, arrayIndex, queuePos);\n\n\n1\n2\n3\n4\n5\n6\n\n\n上面代码中，sharedArray的0号位置改为100，然后就执行Atomics.wake()方法，唤醒在sharedArray的0号位置休眠队列里的一个线程。\n\nAtomics.wait()方法的使用格式如下。\n\nAtomics.wait(sharedArray, index, value, timeout)\n\n\n1\n\n\n它的四个参数含义如下。\n\n * sharedArray：共享内存的视图数组。\n * index：视图数据的位置（从0开始）。\n * value：该位置的预期值。一旦实际值等于预期值，就进入休眠。\n * timeout：整数，表示过了这个时间以后，就自动唤醒，单位毫秒。该参数可选，默认值是Infinity，即无限期的休眠，只有通过Atomics.wake()方法才能唤醒。\n\nAtomics.wait()的返回值是一个字符串，共有三种可能的值。如果sharedArray[index]不等于value，就返回字符串not-equal，否则就进入休眠。如果Atomics.wake()方法唤醒，就返回字符串ok；如果因为超时唤醒，就返回字符串timed-out。\n\nAtomics.wake()方法的使用格式如下。\n\nAtomics.wake(sharedArray, index, count)\n\n\n1\n\n\n它的三个参数含义如下。\n\n * sharedArray：共享内存的视图数组。\n * index：视图数据的位置（从0开始）。\n * count：需要唤醒的 Worker 线程的数量，默认为Infinity。\n\nAtomics.wake()方法一旦唤醒休眠的 Worker 线程，就会让它继续往下运行。\n\n请看一个例子。\n\n// 主线程\nconsole.log(ia[37]);  // 163\nAtomics.store(ia, 37, 123456);\nAtomics.wake(ia, 37, 1);\n\n// Worker 线程\nAtomics.wait(ia, 37, 163);\nconsole.log(ia[37]);  // 123456\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n上面代码中，视图数组ia的第 37 号位置，原来的值是163。Worker 线程使用Atomics.wait()方法，指定只要ia[37]等于163，就进入休眠状态。主线程使用Atomics.store()方法，将123456写入ia[37]，然后使用Atomics.wake()方法唤醒 Worker 线程。\n\n另外，基于wait和wake这两个方法的锁内存实现，可以看 Lars T Hansen 的 js-lock-and-condition 这个库。\n\n注意，浏览器的主线程不宜设置休眠，这会导致用户失去响应。而且，主线程实际上会拒绝进入休眠。\n\n（4）运算方法\n\n共享内存上面的某些运算是不能被打断的，即不能在运算过程中，让其他线程改写内存上面的值。Atomics 对象提供了一些运算方法，防止数据被改写。\n\nAtomics.add(sharedArray, index, value)\n\n\n1\n\n\nAtomics.add用于将value加到sharedArray[index]，返回sharedArray[index]旧的值。\n\nAtomics.sub(sharedArray, index, value)\n\n\n1\n\n\nAtomics.sub用于将value从sharedArray[index]减去，返回sharedArray[index]旧的值。\n\nAtomics.and(sharedArray, index, value)\n\n\n1\n\n\nAtomics.and用于将value与sharedArray[index]进行位运算and，放入sharedArray[index]，并返回旧的值。\n\nAtomics.or(sharedArray, index, value)\n\n\n1\n\n\nAtomics.or用于将value与sharedArray[index]进行位运算or，放入sharedArray[index]，并返回旧的值。\n\nAtomics.xor(sharedArray, index, value)\n\n\n1\n\n\nAtomic.xor用于将vaule与sharedArray[index]进行位运算xor，放入sharedArray[index]，并返回旧的值。\n\n（5）其他方法\n\nAtomics对象还有以下方法。\n\n * Atomics.compareExchange(sharedArray, index, oldval, newval)：如果sharedArray[index]等于oldval，就写入newval，返回oldval。\n * Atomics.isLockFree(size)：返回一个布尔值，表示Atomics对象是否可以处理某个size的内存锁定。如果返回false，应用程序就需要自己来实现锁定。\n\nAtomics.compareExchange的一个用途是，从 SharedArrayBuffer 读取一个值，然后对该值进行某个操作，操作结束以后，检查一下 SharedArrayBuffer 里面原来那个值是否发生变化（即被其他线程改写过）。如果没有改写过，就将它写回原来的位置，否则读取新的值，再重头进行一次操作。",normalizedContent:"# arraybuffer\n\narraybuffer对象、typedarray视图和dataview视图是 javascript 操作二进制数据的一个接口。这些对象早就存在，属于独立的规格（2011 年 2 月发布），es6 将它们纳入了 ecmascript 规格，并且增加了新的方法。它们都是以数组的语法处理二进制数据，所以统称为二进制数组。 这个接口的原始设计目的，与 webgl 项目有关。所谓 webgl，就是指浏览器与显卡之间的通信接口，为了满足 javascript 与显卡之间大量的、实时的数据交换，它们之间的数据通信必须是二进制的，而不能是传统的文本格式。文本格式传递一个 32 位整数，两端的 javascript 脚本与显卡都要进行格式转化，将非常耗时。这时要是存在一种机制，可以像 c 语言那样，直接操作字节，将 4 个字节的 32 位整数，以二进制形式原封不动地送入显卡，脚本的性能就会大幅提升。\n\n二进制数组就是在这种背景下诞生的。它很像 c 语言的数组，允许开发者以数组下标的形式，直接操作内存，大大增强了 javascript 处理二进制数据的能力，使得开发者有可能通过 javascript 与操作系统的原生接口进行二进制通信。\n\n二进制数组由三类对象组成。\n\n（1）arraybuffer对象：代表内存之中的一段二进制数据，可以通过“视图”进行操作。“视图”部署了数组接口，这意味着，可以用数组的方法操作内存。\n\n（2）typedarray视图：共包括 9 种类型的视图，比如uint8array（无符号 8 位整数）数组视图, int16array（16 位整数）数组视图, float32array（32 位浮点数）数组视图等等。\n\n（3）dataview视图：可以自定义复合格式的视图，比如第一个字节是 uint8（无符号 8 位整数）、第二、三个字节是 int16（16 位整数）、第四个字节开始是 float32（32 位浮点数）等等，此外还可以自定义字节序。\n\n简单说，arraybuffer对象代表原始的二进制数据，typedarray视图用来读写简单类型的二进制数据，dataview视图用来读写复杂类型的二进制数据。\n\ntypedarray视图支持的数据类型一共有 9 种（dataview视图支持除uint8c以外的其他 8 种）。\n\n数据类型      字节长度   含义                  对应的 c 语言类型\nint8      1      8 位带符号整数            signed char\nuint8     1      8 位不带符号整数           unsigned char\nuint8c    1      8 位不带符号整数（自动过滤溢出）   unsigned char\nint16     2      16 位带符号整数           short\nuint16    2      16 位不带符号整数          unsigned short\nint32     4      32 位带符号整数           int\nuint32    4      32 位不带符号的整数         unsigned int\nfloat32   4      32 位浮点数             float\nfloat64   8      64 位浮点数             double\n\n注意，二进制数组并不是真正的数组，而是类似数组的对象。\n\n很多浏览器操作的 api，用到了二进制数组操作二进制数据，下面是其中的几个。\n\n * canvas\n * fetch api\n * file api\n * websockets\n * xmlhttprequest\n\n\n# arraybuffer 对象\n\n\n# 概述\n\narraybuffer对象代表储存二进制数据的一段内存，它不能直接读写，只能通过视图（typedarray视图和dataview视图)来读写，视图的作用是以指定格式解读二进制数据。\n\narraybuffer也是一个构造函数，可以分配一段可以存放数据的连续内存区域。\n\nconst buf = new arraybuffer(32);\n\n\n1\n\n\n上面代码生成了一段 32 字节的内存区域，每个字节的值默认都是 0。可以看到，arraybuffer构造函数的参数是所需要的内存大小（单位字节）。\n\n为了读写这段内容，需要为它指定视图。dataview视图的创建，需要提供arraybuffer对象实例作为参数。\n\nconst buf = new arraybuffer(32);\nconst dataview = new dataview(buf);\ndataview.getuint8(0) // 0\n\n\n1\n2\n3\n\n\n上面代码对一段 32 字节的内存，建立dataview视图，然后以不带符号的 8 位整数格式，从头读取 8 位二进制数据，结果得到 0，因为原始内存的arraybuffer对象，默认所有位都是 0。\n\n另一种typedarray视图，与dataview视图的一个区别是，它不是一个构造函数，而是一组构造函数，代表不同的数据格式。\n\nconst buffer = new arraybuffer(12);\n\nconst x1 = new int32array(buffer);\nx1[0] = 1;\nconst x2 = new uint8array(buffer);\nx2[0]  = 2;\n\nx1[0] // 2\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n上面代码对同一段内存，分别建立两种视图：32 位带符号整数（int32array构造函数）和 8 位不带符号整数（uint8array构造函数）。由于两个视图对应的是同一段内存，一个视图修改底层内存，会影响到另一个视图。\n\ntypedarray视图的构造函数，除了接受arraybuffer实例作为参数，还可以接受普通数组作为参数，直接分配内存生成底层的arraybuffer实例，并同时完成对这段内存的赋值。\n\nconst typedarray = new uint8array([0,1,2]);\ntypedarray.length // 3\n\ntypedarray[0] = 5;\ntypedarray // [5, 1, 2]\n\n\n1\n2\n3\n4\n5\n\n\n上面代码使用typedarray视图的uint8array构造函数，新建一个不带符号的 8 位整数视图。可以看到，uint8array直接使用普通数组作为参数，对底层内存的赋值同时完成。\n\n\n# arraybuffer.prototype.bytelength\n\narraybuffer实例的bytelength属性，返回所分配的内存区域的字节长度。\n\nconst buffer = new arraybuffer(32);\nbuffer.bytelength\n// 32\n\n\n1\n2\n3\n\n\n如果要分配的内存区域很大，有可能分配失败（因为没有那么多的连续空余内存），所以有必要检查是否分配成功。\n\nif (buffer.bytelength === n) {\n  // 成功\n} else {\n  // 失败\n}\n\n\n1\n2\n3\n4\n5\n\n\n\n# arraybuffer.prototype.slice()\n\narraybuffer实例有一个slice方法，允许将内存区域的一部分，拷贝生成一个新的arraybuffer对象。\n\nconst buffer = new arraybuffer(8);\nconst newbuffer = buffer.slice(0, 3);\n\n\n1\n2\n\n\n上面代码拷贝buffer对象的前 3 个字节（从 0 开始，到第 3 个字节前面结束），生成一个新的arraybuffer对象。slice方法其实包含两步，第一步是先分配一段新内存，第二步是将原来那个arraybuffer对象拷贝过去。\n\nslice方法接受两个参数，第一个参数表示拷贝开始的字节序号（含该字节），第二个参数表示拷贝截止的字节序号（不含该字节）。如果省略第二个参数，则默认到原arraybuffer对象的结尾。\n\n除了slice方法，arraybuffer对象不提供任何直接读写内存的方法，只允许在其上方建立视图，然后通过视图读写。\n\n\n# arraybuffer.isview()\n\narraybuffer有一个静态方法isview，返回一个布尔值，表示参数是否为arraybuffer的视图实例。这个方法大致相当于判断参数，是否为typedarray实例或dataview实例。\n\nconst buffer = new arraybuffer(8);\narraybuffer.isview(buffer) // false\n\nconst v = new int32array(buffer);\narraybuffer.isview(v) // true\n\n\n1\n2\n3\n4\n5\n\n\n\n# typedarray 视图\n\n\n# 概述\n\narraybuffer对象作为内存区域，可以存放多种类型的数据。同一段内存，不同数据有不同的解读方式，这就叫做“视图”（view）。arraybuffer有两种视图，一种是typedarray视图，另一种是dataview视图。前者的数组成员都是同一个数据类型，后者的数组成员可以是不同的数据类型。\n\n目前，typedarray视图一共包括 9 种类型，每一种视图都是一种构造函数。\n\n * int8array：8 位有符号整数，长度 1 个字节。\n * uint8array：8 位无符号整数，长度 1 个字节。\n * uint8clampedarray：8 位无符号整数，长度 1 个字节，溢出处理不同。\n * int16array：16 位有符号整数，长度 2 个字节。\n * uint16array：16 位无符号整数，长度 2 个字节。\n * int32array：32 位有符号整数，长度 4 个字节。\n * uint32array：32 位无符号整数，长度 4 个字节。\n * float32array：32 位浮点数，长度 4 个字节。\n * float64array：64 位浮点数，长度 8 个字节。\n\n这 9 个构造函数生成的数组，统称为typedarray视图。它们很像普通数组，都有length属性，都能用方括号运算符（[]）获取单个元素，所有数组的方法，在它们上面都能使用。普通数组与 typedarray 数组的差异主要在以下方面。\n\n * typedarray 数组的所有成员，都是同一种类型。\n * typedarray 数组的成员是连续的，不会有空位。\n * typedarray 数组成员的默认值为 0。比如，new array(10)返回一个普通数组，里面没有任何成员，只是 10 个空位；new uint8array(10)返回一个 typedarray 数组，里面 10 个成员都是 0。\n * typedarray 数组只是一层视图，本身不储存数据，它的数据都储存在底层的arraybuffer对象之中，要获取底层对象必须使用buffer属性。\n\n\n# 构造函数\n\ntypedarray 数组提供 9 种构造函数，用来生成相应类型的数组实例。\n\n构造函数有多种用法。\n\n（1）typedarray(buffer, byteoffset=0, length?)\n\n同一个arraybuffer对象之上，可以根据不同的数据类型，建立多个视图。\n\n// 创建一个8字节的arraybuffer\nconst b = new arraybuffer(8);\n\n// 创建一个指向b的int32视图，开始于字节0，直到缓冲区的末尾\nconst v1 = new int32array(b);\n\n// 创建一个指向b的uint8视图，开始于字节2，直到缓冲区的末尾\nconst v2 = new uint8array(b, 2);\n\n// 创建一个指向b的int16视图，开始于字节2，长度为2\nconst v3 = new int16array(b, 2, 2);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n上面代码在一段长度为 8 个字节的内存（b）之上，生成了三个视图：v1、v2和v3。\n\n视图的构造函数可以接受三个参数：\n\n * 第一个参数（必需）：视图对应的底层arraybuffer对象。\n * 第二个参数（可选）：视图开始的字节序号，默认从 0 开始。\n * 第三个参数（可选）：视图包含的数据个数，默认直到本段内存区域结束。\n\n因此，v1、v2和v3是重叠的：v1[0]是一个 32 位整数，指向字节 0 ～字节 3；v2[0]是一个 8 位无符号整数，指向字节 2；v3[0]是一个 16 位整数，指向字节 2 ～字节 3。只要任何一个视图对内存有所修改，就会在另外两个视图上反应出来。\n\n注意，byteoffset必须与所要建立的数据类型一致，否则会报错。\n\nconst buffer = new arraybuffer(8);\nconst i16 = new int16array(buffer, 1);\n// uncaught rangeerror: start offset of int16array should be a multiple of 2\n\n\n1\n2\n3\n\n\n上面代码中，新生成一个 8 个字节的arraybuffer对象，然后在这个对象的第一个字节，建立带符号的 16 位整数视图，结果报错。因为，带符号的 16 位整数需要两个字节，所以byteoffset参数必须能够被 2 整除。\n\n如果想从任意字节开始解读arraybuffer对象，必须使用dataview视图，因为typedarray视图只提供 9 种固定的解读格式。\n\n（2）typedarray(length)\n\n视图还可以不通过arraybuffer对象，直接分配内存而生成。\n\nconst f64a = new float64array(8);\nf64a[0] = 10;\nf64a[1] = 20;\nf64a[2] = f64a[0] + f64a[1];\n\n\n1\n2\n3\n4\n\n\n上面代码生成一个 8 个成员的float64array数组（共 64 字节），然后依次对每个成员赋值。这时，视图构造函数的参数就是成员的个数。可以看到，视图数组的赋值操作与普通数组的操作毫无两样。\n\n（3）typedarray(typedarray)\n\ntypedarray 数组的构造函数，可以接受另一个typedarray实例作为参数。\n\nconst typedarray = new int8array(new uint8array(4));\n\n\n1\n\n\n上面代码中，int8array构造函数接受一个uint8array实例作为参数。\n\n注意，此时生成的新数组，只是复制了参数数组的值，对应的底层内存是不一样的。新数组会开辟一段新的内存储存数据，不会在原数组的内存之上建立视图。\n\nconst x = new int8array([1, 1]);\nconst y = new int8array(x);\nx[0] // 1\ny[0] // 1\n\nx[0] = 2;\ny[0] // 1\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n上面代码中，数组y是以数组x为模板而生成的，当x变动的时候，y并没有变动。\n\n如果想基于同一段内存，构造不同的视图，可以采用下面的写法。\n\nconst x = new int8array([1, 1]);\nconst y = new int8array(x.buffer);\nx[0] // 1\ny[0] // 1\n\nx[0] = 2;\ny[0] // 2\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n（4）typedarray(arraylikeobject)\n\n构造函数的参数也可以是一个普通数组，然后直接生成typedarray实例。\n\nconst typedarray = new uint8array([1, 2, 3, 4]);\n\n\n1\n\n\n注意，这时typedarray视图会重新开辟内存，不会在原数组的内存上建立视图。\n\n上面代码从一个普通的数组，生成一个 8 位无符号整数的typedarray实例。\n\ntypedarray 数组也可以转换回普通数组。\n\nconst normalarray = [...typedarray];\n// or\nconst normalarray = array.from(typedarray);\n// or\nconst normalarray = array.prototype.slice.call(typedarray);\n\n\n1\n2\n3\n4\n5\n\n\n\n# 数组方法\n\n普通数组的操作方法和属性，对 typedarray 数组完全适用。\n\n * typedarray.prototype.copywithin(target, start[, end = this.length])\n * typedarray.prototype.entries()\n * typedarray.prototype.every(callbackfn, thisarg?)\n * typedarray.prototype.fill(value, start=0, end=this.length)\n * typedarray.prototype.filter(callbackfn, thisarg?)\n * typedarray.prototype.find(predicate, thisarg?)\n * typedarray.prototype.findindex(predicate, thisarg?)\n * typedarray.prototype.foreach(callbackfn, thisarg?)\n * typedarray.prototype.indexof(searchelement, fromindex=0)\n * typedarray.prototype.join(separator)\n * typedarray.prototype.keys()\n * typedarray.prototype.lastindexof(searchelement, fromindex?)\n * typedarray.prototype.map(callbackfn, thisarg?)\n * typedarray.prototype.reduce(callbackfn, initialvalue?)\n * typedarray.prototype.reduceright(callbackfn, initialvalue?)\n * typedarray.prototype.reverse()\n * typedarray.prototype.slice(start=0, end=this.length)\n * typedarray.prototype.some(callbackfn, thisarg?)\n * typedarray.prototype.sort(comparefn)\n * typedarray.prototype.tolocalestring(reserved1?, reserved2?)\n * typedarray.prototype.tostring()\n * typedarray.prototype.values()\n\n上面所有方法的用法，请参阅数组方法的介绍，这里不再重复了。\n\n注意，typedarray 数组没有concat方法。如果想要合并多个 typedarray 数组，可以用下面这个函数。\n\nfunction concatenate(resultconstructor, ...arrays) {\n  let totallength = 0;\n  for (let arr of arrays) {\n    totallength += arr.length;\n  }\n  let result = new resultconstructor(totallength);\n  let offset = 0;\n  for (let arr of arrays) {\n    result.set(arr, offset);\n    offset += arr.length;\n  }\n  return result;\n}\n\nconcatenate(uint8array, uint8array.of(1, 2), uint8array.of(3, 4))\n// uint8array [1, 2, 3, 4]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n另外，typedarray 数组与普通数组一样，部署了 iterator 接口，所以可以被遍历。\n\nlet ui8 = uint8array.of(0, 1, 2);\nfor (let byte of ui8) {\n  console.log(byte);\n}\n// 0\n// 1\n// 2\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# 字节序\n\n字节序指的是数值在内存中的表示方式。\n\nconst buffer = new arraybuffer(16);\nconst int32view = new int32array(buffer);\n\nfor (let i = 0; i < int32view.length; i++) {\n  int32view[i] = i * 2;\n}\n\n\n1\n2\n3\n4\n5\n6\n\n\n上面代码生成一个 16 字节的arraybuffer对象，然后在它的基础上，建立了一个 32 位整数的视图。由于每个 32 位整数占据 4 个字节，所以一共可以写入 4 个整数，依次为 0，2，4，6。\n\n如果在这段数据上接着建立一个 16 位整数的视图，则可以读出完全不一样的结果。\n\nconst int16view = new int16array(buffer);\n\nfor (let i = 0; i < int16view.length; i++) {\n  console.log(\"entry \" + i + \": \" + int16view[i]);\n}\n// entry 0: 0\n// entry 1: 0\n// entry 2: 2\n// entry 3: 0\n// entry 4: 4\n// entry 5: 0\n// entry 6: 6\n// entry 7: 0\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n由于每个 16 位整数占据 2 个字节，所以整个arraybuffer对象现在分成 8 段。然后，由于 x86 体系的计算机都采用小端字节序（little endian），相对重要的字节排在后面的内存地址，相对不重要字节排在前面的内存地址，所以就得到了上面的结果。\n\n比如，一个占据四个字节的 16 进制数0x12345678，决定其大小的最重要的字节是“12”，最不重要的是“78”。小端字节序将最不重要的字节排在前面，储存顺序就是78563412；大端字节序则完全相反，将最重要的字节排在前面，储存顺序就是12345678。目前，所有个人电脑几乎都是小端字节序，所以 typedarray 数组内部也采用小端字节序读写数据，或者更准确的说，按照本机操作系统设定的字节序读写数据。\n\n这并不意味大端字节序不重要，事实上，很多网络设备和特定的操作系统采用的是大端字节序。这就带来一个严重的问题：如果一段数据是大端字节序，typedarray 数组将无法正确解析，因为它只能处理小端字节序！为了解决这个问题，javascript 引入dataview对象，可以设定字节序，下文会详细介绍。\n\n下面是另一个例子。\n\n// 假定某段buffer包含如下字节 [0x02, 0x01, 0x03, 0x07]\nconst buffer = new arraybuffer(4);\nconst v1 = new uint8array(buffer);\nv1[0] = 2;\nv1[1] = 1;\nv1[2] = 3;\nv1[3] = 7;\n\nconst uint16view = new uint16array(buffer);\n\n// 计算机采用小端字节序\n// 所以头两个字节等于258\nif (uint16view[0] === 258) {\n  console.log('ok'); // \"ok\"\n}\n\n// 赋值运算\nuint16view[0] = 255;    // 字节变为[0xff, 0x00, 0x03, 0x07]\nuint16view[0] = 0xff05; // 字节变为[0x05, 0xff, 0x03, 0x07]\nuint16view[1] = 0x0210; // 字节变为[0x05, 0xff, 0x10, 0x02]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n\n下面的函数可以用来判断，当前视图是小端字节序，还是大端字节序。\n\nconst big_endian = symbol('big_endian');\nconst little_endian = symbol('little_endian');\n\nfunction getplatformendianness() {\n  let arr32 = uint32array.of(0x12345678);\n  let arr8 = new uint8array(arr32.buffer);\n  switch ((arr8[0]*0x1000000) + (arr8[1]*0x10000) + (arr8[2]*0x100) + (arr8[3])) {\n    case 0x12345678:\n      return big_endian;\n    case 0x78563412:\n      return little_endian;\n    default:\n      throw new error('unknown endianness');\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n总之，与普通数组相比，typedarray 数组的最大优点就是可以直接操作内存，不需要数据类型转换，所以速度快得多。\n\n\n# bytes_per_element 属性\n\n每一种视图的构造函数，都有一个bytes_per_element属性，表示这种数据类型占据的字节数。\n\nint8array.bytes_per_element // 1\nuint8array.bytes_per_element // 1\nuint8clampedarray.bytes_per_element // 1\nint16array.bytes_per_element // 2\nuint16array.bytes_per_element // 2\nint32array.bytes_per_element // 4\nuint32array.bytes_per_element // 4\nfloat32array.bytes_per_element // 4\nfloat64array.bytes_per_element // 8\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n这个属性在typedarray实例上也能获取，即有typedarray.prototype.bytes_per_element。\n\n\n# arraybuffer 与字符串的互相转换\n\narraybuffer 和字符串的相互转换，使用原生 textencoder 和 textdecoder 方法。为了便于说明用法，下面的代码都按照 typescript 的用法，给出了类型签名。\n\n/**\n * convert arraybuffer/typedarray to string via textdecoder\n *\n * @see https://developer.mozilla.org/en-us/docs/web/api/textdecoder\n */\nfunction ab2str(\n  input: arraybuffer | uint8array | int8array | uint16array | int16array | uint32array | int32array,\n  outputencoding: string = 'utf8',\n): string {\n  const decoder = new textdecoder(outputencoding)\n  return decoder.decode(input)\n}\n\n/**\n * convert string to arraybuffer via textencoder\n *\n * @see https://developer.mozilla.org/zh-cn/docs/web/api/textencoder\n */\nfunction str2ab(input: string): arraybuffer {\n  const view = str2uint8array(input)\n  return view.buffer\n}\n\n/** convert string to uint8array */\nfunction str2uint8array(input: string): uint8array {\n  const encoder = new textencoder()\n  const view = encoder.encode(input)\n  return view\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n\n\n上面代码中，ab2str()的第二个参数outputencoding给出了输出编码的编码，一般保持默认值（utf-8），其他可选值参见官方文档或 node.js 文档。\n\n\n# 溢出\n\n不同的视图类型，所能容纳的数值范围是确定的。超出这个范围，就会出现溢出。比如，8 位视图只能容纳一个 8 位的二进制值，如果放入一个 9 位的值，就会溢出。\n\ntypedarray 数组的溢出处理规则，简单来说，就是抛弃溢出的位，然后按照视图类型进行解释。\n\nconst uint8 = new uint8array(1);\n\nuint8[0] = 256;\nuint8[0] // 0\n\nuint8[0] = -1;\nuint8[0] // 255\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n上面代码中，uint8是一个 8 位视图，而 256 的二进制形式是一个 9 位的值100000000，这时就会发生溢出。根据规则，只会保留后 8 位，即00000000。uint8视图的解释规则是无符号的 8 位整数，所以00000000就是0。\n\n负数在计算机内部采用“2 的补码”表示，也就是说，将对应的正数值进行否运算，然后加1。比如，-1对应的正值是1，进行否运算以后，得到11111110，再加上1就是补码形式11111111。uint8按照无符号的 8 位整数解释11111111，返回结果就是255。\n\n一个简单转换规则，可以这样表示。\n\n * 正向溢出（overflow）：当输入值大于当前数据类型的最大值，结果等于当前数据类型的最小值加上余值，再减去 1。\n * 负向溢出（underflow）：当输入值小于当前数据类型的最小值，结果等于当前数据类型的最大值减去余值的绝对值，再加上 1。\n\n上面的“余值”就是模运算的结果，即 javascript 里面的%运算符的结果。\n\n12 % 4 // 0\n12 % 5 // 2\n\n\n1\n2\n\n\n上面代码中，12 除以 4 是没有余值的，而除以 5 会得到余值 2。\n\n请看下面的例子。\n\nconst int8 = new int8array(1);\n\nint8[0] = 128;\nint8[0] // -128\n\nint8[0] = -129;\nint8[0] // 127\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n上面例子中，int8是一个带符号的 8 位整数视图，它的最大值是 127，最小值是-128。输入值为128时，相当于正向溢出1，根据“最小值加上余值（128 除以 127 的余值是 1），再减去 1”的规则，就会返回-128；输入值为-129时，相当于负向溢出1，根据“最大值减去余值的绝对值（-129 除以-128 的余值的绝对值是 1），再加上 1”的规则，就会返回127。\n\nuint8clampedarray视图的溢出规则，与上面的规则不同。它规定，凡是发生正向溢出，该值一律等于当前数据类型的最大值，即 255；如果发生负向溢出，该值一律等于当前数据类型的最小值，即 0。\n\nconst uint8c = new uint8clampedarray(1);\n\nuint8c[0] = 256;\nuint8c[0] // 255\n\nuint8c[0] = -1;\nuint8c[0] // 0\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n上面例子中，uint8c是一个uint8clampedarray视图，正向溢出时都返回 255，负向溢出都返回 0。\n\n\n# typedarray.prototype.buffer\n\ntypedarray实例的buffer属性，返回整段内存区域对应的arraybuffer对象。该属性为只读属性。\n\nconst a = new float32array(64);\nconst b = new uint8array(a.buffer);\n\n\n1\n2\n\n\n上面代码的a视图对象和b视图对象，对应同一个arraybuffer对象，即同一段内存。\n\n\n# typedarray.prototype.bytelength，typedarray.prototype.byteoffset\n\nbytelength属性返回 typedarray 数组占据的内存长度，单位为字节。byteoffset属性返回 typedarray 数组从底层arraybuffer对象的哪个字节开始。这两个属性都是只读属性。\n\nconst b = new arraybuffer(8);\n\nconst v1 = new int32array(b);\nconst v2 = new uint8array(b, 2);\nconst v3 = new int16array(b, 2, 2);\n\nv1.bytelength // 8\nv2.bytelength // 6\nv3.bytelength // 4\n\nv1.byteoffset // 0\nv2.byteoffset // 2\nv3.byteoffset // 2\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n\n# typedarray.prototype.length\n\nlength属性表示 typedarray 数组含有多少个成员。注意将 length 属性和 bytelength 属性区分，前者是成员长度，后者是字节长度。\n\nconst a = new int16array(8);\n\na.length // 8\na.bytelength // 16\n\n\n1\n2\n3\n4\n\n\n\n# typedarray.prototype.set()\n\ntypedarray 数组的set方法用于复制数组（普通数组或 typedarray 数组），也就是将一段内容完全复制到另一段内存。\n\nconst a = new uint8array(8);\nconst b = new uint8array(8);\n\nb.set(a);\n\n\n1\n2\n3\n4\n\n\n上面代码复制a数组的内容到b数组，它是整段内存的复制，比一个个拷贝成员的那种复制快得多。\n\nset方法还可以接受第二个参数，表示从b对象的哪一个成员开始复制a对象。\n\nconst a = new uint16array(8);\nconst b = new uint16array(10);\n\nb.set(a, 2)\n\n\n1\n2\n3\n4\n\n\n上面代码的b数组比a数组多两个成员，所以从b[2]开始复制。\n\n\n# typedarray.prototype.subarray()\n\nsubarray方法是对于 typedarray 数组的一部分，再建立一个新的视图。\n\nconst a = new uint16array(8);\nconst b = a.subarray(2,3);\n\na.bytelength // 16\nb.bytelength // 2\n\n\n1\n2\n3\n4\n5\n\n\nsubarray方法的第一个参数是起始的成员序号，第二个参数是结束的成员序号（不含该成员），如果省略则包含剩余的全部成员。所以，上面代码的a.subarray(2,3)，意味着 b 只包含a[2]一个成员，字节长度为 2。\n\n\n# typedarray.prototype.slice()\n\ntypearray 实例的slice方法，可以返回一个指定位置的新的typedarray实例。\n\nlet ui8 = uint8array.of(0, 1, 2);\nui8.slice(-1)\n// uint8array [ 2 ]\n\n\n1\n2\n3\n\n\n上面代码中，ui8是 8 位无符号整数数组视图的一个实例。它的slice方法可以从当前视图之中，返回一个新的视图实例。\n\nslice方法的参数，表示原数组的具体位置，开始生成新数组。负值表示逆向的位置，即-1 为倒数第一个位置，-2 表示倒数第二个位置，以此类推。\n\n\n# typedarray.of()\n\ntypedarray 数组的所有构造函数，都有一个静态方法of，用于将参数转为一个typedarray实例。\n\nfloat32array.of(0.151, -8, 3.7)\n// float32array [ 0.151, -8, 3.7 ]\n\n\n1\n2\n\n\n下面三种方法都会生成同样一个 typedarray 数组。\n\n// 方法一\nlet tarr = new uint8array([1,2,3]);\n\n// 方法二\nlet tarr = uint8array.of(1,2,3);\n\n// 方法三\nlet tarr = new uint8array(3);\ntarr[0] = 1;\ntarr[1] = 2;\ntarr[2] = 3;\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n\n# typedarray.from()\n\n静态方法from接受一个可遍历的数据结构（比如数组）作为参数，返回一个基于这个结构的typedarray实例。\n\nuint16array.from([0, 1, 2])\n// uint16array [ 0, 1, 2 ]\n\n\n1\n2\n\n\n这个方法还可以将一种typedarray实例，转为另一种。\n\nconst ui16 = uint16array.from(uint8array.of(0, 1, 2));\nui16 instanceof uint16array // true\n\n\n1\n2\n\n\nfrom方法还可以接受一个函数，作为第二个参数，用来对每个元素进行遍历，功能类似map方法。\n\nint8array.of(127, 126, 125).map(x => 2 * x)\n// int8array [ -2, -4, -6 ]\n\nint16array.from(int8array.of(127, 126, 125), x => 2 * x)\n// int16array [ 254, 252, 250 ]\n\n\n1\n2\n3\n4\n5\n\n\n上面的例子中，from方法没有发生溢出，这说明遍历不是针对原来的 8 位整数数组。也就是说，from会将第一个参数指定的 typedarray 数组，拷贝到另一段内存之中，处理之后再将结果转成指定的数组格式。\n\n\n# 复合视图\n\n由于视图的构造函数可以指定起始位置和长度，所以在同一段内存之中，可以依次存放不同类型的数据，这叫做“复合视图”。\n\nconst buffer = new arraybuffer(24);\n\nconst idview = new uint32array(buffer, 0, 1);\nconst usernameview = new uint8array(buffer, 4, 16);\nconst amountdueview = new float32array(buffer, 20, 1);\n\n\n1\n2\n3\n4\n5\n\n\n上面代码将一个 24 字节长度的arraybuffer对象，分成三个部分：\n\n * 字节 0 到字节 3：1 个 32 位无符号整数\n * 字节 4 到字节 19：16 个 8 位整数\n * 字节 20 到字节 23：1 个 32 位浮点数\n\n这种数据结构可以用如下的 c 语言描述：\n\nstruct somestruct {\n  unsigned long id;\n  char username[16];\n  float amountdue;\n};\n\n\n1\n2\n3\n4\n5\n\n\n\n# dataview 视图\n\n如果一段数据包括多种类型（比如服务器传来的 http 数据），这时除了建立arraybuffer对象的复合视图以外，还可以通过dataview视图进行操作。\n\ndataview视图提供更多操作选项，而且支持设定字节序。本来，在设计目的上，arraybuffer对象的各种typedarray视图，是用来向网卡、声卡之类的本机设备传送数据，所以使用本机的字节序就可以了；而dataview视图的设计目的，是用来处理网络设备传来的数据，所以大端字节序或小端字节序是可以自行设定的。\n\ndataview视图本身也是构造函数，接受一个arraybuffer对象作为参数，生成视图。\n\ndataview(arraybuffer buffer [, 字节起始位置 [, 长度]]);\n\n\n1\n\n\n下面是一个例子。\n\nconst buffer = new arraybuffer(24);\nconst dv = new dataview(buffer);\n\n\n1\n2\n\n\ndataview实例有以下属性，含义与typedarray实例的同名方法相同。\n\n * dataview.prototype.buffer：返回对应的 arraybuffer 对象\n * dataview.prototype.bytelength：返回占据的内存字节长度\n * dataview.prototype.byteoffset：返回当前视图从对应的 arraybuffer 对象的哪个字节开始\n\ndataview实例提供 8 个方法读取内存。\n\n * getint8：读取 1 个字节，返回一个 8 位整数。\n * getuint8：读取 1 个字节，返回一个无符号的 8 位整数。\n * getint16：读取 2 个字节，返回一个 16 位整数。\n * getuint16：读取 2 个字节，返回一个无符号的 16 位整数。\n * getint32：读取 4 个字节，返回一个 32 位整数。\n * getuint32：读取 4 个字节，返回一个无符号的 32 位整数。\n * getfloat32：读取 4 个字节，返回一个 32 位浮点数。\n * getfloat64：读取 8 个字节，返回一个 64 位浮点数。\n\n这一系列get方法的参数都是一个字节序号（不能是负数，否则会报错），表示从哪个字节开始读取。\n\nconst buffer = new arraybuffer(24);\nconst dv = new dataview(buffer);\n\n// 从第1个字节读取一个8位无符号整数\nconst v1 = dv.getuint8(0);\n\n// 从第2个字节读取一个16位无符号整数\nconst v2 = dv.getuint16(1);\n\n// 从第4个字节读取一个16位无符号整数\nconst v3 = dv.getuint16(3);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n上面代码读取了arraybuffer对象的前 5 个字节，其中有一个 8 位整数和两个十六位整数。\n\n如果一次读取两个或两个以上字节，就必须明确数据的存储方式，到底是小端字节序还是大端字节序。默认情况下，dataview的get方法使用大端字节序解读数据，如果需要使用小端字节序解读，必须在get方法的第二个参数指定true。\n\n// 小端字节序\nconst v1 = dv.getuint16(1, true);\n\n// 大端字节序\nconst v2 = dv.getuint16(3, false);\n\n// 大端字节序\nconst v3 = dv.getuint16(3);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\ndataview 视图提供 8 个方法写入内存。\n\n * setint8：写入 1 个字节的 8 位整数。\n * setuint8：写入 1 个字节的 8 位无符号整数。\n * setint16：写入 2 个字节的 16 位整数。\n * setuint16：写入 2 个字节的 16 位无符号整数。\n * setint32：写入 4 个字节的 32 位整数。\n * setuint32：写入 4 个字节的 32 位无符号整数。\n * setfloat32：写入 4 个字节的 32 位浮点数。\n * setfloat64：写入 8 个字节的 64 位浮点数。\n\n这一系列set方法，接受两个参数，第一个参数是字节序号，表示从哪个字节开始写入，第二个参数为写入的数据。对于那些写入两个或两个以上字节的方法，需要指定第三个参数，false或者undefined表示使用大端字节序写入，true表示使用小端字节序写入。\n\n// 在第1个字节，以大端字节序写入值为25的32位整数\ndv.setint32(0, 25, false);\n\n// 在第5个字节，以大端字节序写入值为25的32位整数\ndv.setint32(4, 25);\n\n// 在第9个字节，以小端字节序写入值为2.5的32位浮点数\ndv.setfloat32(8, 2.5, true);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n如果不确定正在使用的计算机的字节序，可以采用下面的判断方式。\n\nconst littleendian = (function() {\n  const buffer = new arraybuffer(2);\n  new dataview(buffer).setint16(0, 256, true);\n  return new int16array(buffer)[0] === 256;\n})();\n\n\n1\n2\n3\n4\n5\n\n\n如果返回true，就是小端字节序；如果返回false，就是大端字节序。\n\n\n# 二进制数组的应用\n\n大量的 web api 用到了arraybuffer对象和它的视图对象。\n\n\n# ajax\n\n传统上，服务器通过 ajax 操作只能返回文本数据，即responsetype属性默认为text。xmlhttprequest第二版xhr2允许服务器返回二进制数据，这时分成两种情况。如果明确知道返回的二进制数据类型，可以把返回类型（responsetype）设为arraybuffer；如果不知道，就设为blob。\n\nlet xhr = new xmlhttprequest();\nxhr.open('get', someurl);\nxhr.responsetype = 'arraybuffer';\n\nxhr.onload = function () {\n  let arraybuffer = xhr.response;\n  // ···\n};\n\nxhr.send();\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n如果知道传回来的是 32 位整数，可以像下面这样处理。\n\nxhr.onreadystatechange = function () {\n  if (req.readystate === 4 ) {\n    const arrayresponse = xhr.response;\n    const dataview = new dataview(arrayresponse);\n    const ints = new uint32array(dataview.bytelength / 4);\n\n    xhrdiv.style.backgroundcolor = \"#00ff00\";\n    xhrdiv.innertext = \"array is \" + ints.length + \"uints long\";\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n\n# canvas\n\n网页canvas元素输出的二进制像素数据，就是 typedarray 数组。\n\nconst canvas = document.getelementbyid('mycanvas');\nconst ctx = canvas.getcontext('2d');\n\nconst imagedata = ctx.getimagedata(0, 0, canvas.width, canvas.height);\nconst uint8clampedarray = imagedata.data;\n\n\n1\n2\n3\n4\n5\n\n\n需要注意的是，上面代码的uint8clampedarray虽然是一个 typedarray 数组，但是它的视图类型是一种针对canvas元素的专有类型uint8clampedarray。这个视图类型的特点，就是专门针对颜色，把每个字节解读为无符号的 8 位整数，即只能取值 0 ～ 255，而且发生运算的时候自动过滤高位溢出。这为图像处理带来了巨大的方便。\n\n举例来说，如果把像素的颜色值设为uint8array类型，那么乘以一个 gamma 值的时候，就必须这样计算：\n\nu8[i] = math.min(255, math.max(0, u8[i] * gamma));\n\n\n1\n\n\n因为uint8array类型对于大于 255 的运算结果（比如0xff+1），会自动变为0x00，所以图像处理必须要像上面这样算。这样做很麻烦，而且影响性能。如果将颜色值设为uint8clampedarray类型，计算就简化许多。\n\npixels[i] *= gamma;\n\n\n1\n\n\nuint8clampedarray类型确保将小于 0 的值设为 0，将大于 255 的值设为 255。注意，ie 10 不支持该类型。\n\n\n# websocket\n\nwebsocket可以通过arraybuffer，发送或接收二进制数据。\n\nlet socket = new websocket('ws://127.0.0.1:8081');\nsocket.binarytype = 'arraybuffer';\n\n// wait until socket is open\nsocket.addeventlistener('open', function (event) {\n  // send binary data\n  const typedarray = new uint8array(4);\n  socket.send(typedarray.buffer);\n});\n\n// receive binary data\nsocket.addeventlistener('message', function (event) {\n  const arraybuffer = event.data;\n  // ···\n});\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n\n# fetch api\n\nfetch api 取回的数据，就是arraybuffer对象。\n\nfetch(url)\n.then(function(response){\n  return response.arraybuffer()\n})\n.then(function(arraybuffer){\n  // ...\n});\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# file api\n\n如果知道一个文件的二进制数据类型，也可以将这个文件读取为arraybuffer对象。\n\nconst fileinput = document.getelementbyid('fileinput');\nconst file = fileinput.files[0];\nconst reader = new filereader();\nreader.readasarraybuffer(file);\nreader.onload = function () {\n  const arraybuffer = reader.result;\n  // ···\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n下面以处理 bmp 文件为例。假定file变量是一个指向 bmp 文件的文件对象，首先读取文件。\n\nconst reader = new filereader();\nreader.addeventlistener(\"load\", processimage, false);\nreader.readasarraybuffer(file);\n\n\n1\n2\n3\n\n\n然后，定义处理图像的回调函数：先在二进制数据之上建立一个dataview视图，再建立一个bitmap对象，用于存放处理后的数据，最后将图像展示在canvas元素之中。\n\nfunction processimage(e) {\n  const buffer = e.target.result;\n  const datav = new dataview(buffer);\n  const bitmap = {};\n  // 具体的处理步骤\n}\n\n\n1\n2\n3\n4\n5\n6\n\n\n具体处理图像数据时，先处理 bmp 的文件头。具体每个文件头的格式和定义，请参阅有关资料。\n\nbitmap.fileheader = {};\nbitmap.fileheader.bftype = datav.getuint16(0, true);\nbitmap.fileheader.bfsize = datav.getuint32(2, true);\nbitmap.fileheader.bfreserved1 = datav.getuint16(6, true);\nbitmap.fileheader.bfreserved2 = datav.getuint16(8, true);\nbitmap.fileheader.bfoffbits = datav.getuint32(10, true);\n\n\n1\n2\n3\n4\n5\n6\n\n\n接着处理图像元信息部分。\n\nbitmap.infoheader = {};\nbitmap.infoheader.bisize = datav.getuint32(14, true);\nbitmap.infoheader.biwidth = datav.getuint32(18, true);\nbitmap.infoheader.biheight = datav.getuint32(22, true);\nbitmap.infoheader.biplanes = datav.getuint16(26, true);\nbitmap.infoheader.bibitcount = datav.getuint16(28, true);\nbitmap.infoheader.bicompression = datav.getuint32(30, true);\nbitmap.infoheader.bisizeimage = datav.getuint32(34, true);\nbitmap.infoheader.bixpelspermeter = datav.getuint32(38, true);\nbitmap.infoheader.biypelspermeter = datav.getuint32(42, true);\nbitmap.infoheader.biclrused = datav.getuint32(46, true);\nbitmap.infoheader.biclrimportant = datav.getuint32(50, true);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n最后处理图像本身的像素信息。\n\nconst start = bitmap.fileheader.bfoffbits;\nbitmap.pixels = new uint8array(buffer, start);\n\n\n1\n2\n\n\n至此，图像文件的数据全部处理完成。下一步，可以根据需要，进行图像变形，或者转换格式，或者展示在canvas网页元素之中。\n\n\n# sharedarraybuffer\n\njavascript 是单线程的，web worker 引入了多线程：主线程用来与用户互动，worker 线程用来承担计算任务。每个线程的数据都是隔离的，通过postmessage()通信。下面是一个例子。\n\n// 主线程\nconst w = new worker('myworker.js');\n\n\n1\n2\n\n\n上面代码中，主线程新建了一个 worker 线程。该线程与主线程之间会有一个通信渠道，主线程通过w.postmessage向 worker 线程发消息，同时通过message事件监听 worker 线程的回应。\n\n// 主线程\nw.postmessage('hi');\nw.onmessage = function (ev) {\n  console.log(ev.data);\n}\n\n\n1\n2\n3\n4\n5\n\n\n上面代码中，主线程先发一个消息hi，然后在监听到 worker 线程的回应后，就将其打印出来。\n\nworker 线程也是通过监听message事件，来获取主线程发来的消息，并作出反应。\n\n// worker 线程\nonmessage = function (ev) {\n  console.log(ev.data);\n  postmessage('ho');\n}\n\n\n1\n2\n3\n4\n5\n\n\n线程之间的数据交换可以是各种格式，不仅仅是字符串，也可以是二进制数据。这种交换采用的是复制机制，即一个进程将需要分享的数据复制一份，通过postmessage方法交给另一个进程。如果数据量比较大，这种通信的效率显然比较低。很容易想到，这时可以留出一块内存区域，由主线程与 worker 线程共享，两方都可以读写，那么就会大大提高效率，协作起来也会比较简单（不像postmessage那么麻烦）。\n\nes2017 引入sharedarraybuffer，允许 worker 线程与主线程共享同一块内存。sharedarraybuffer的 api 与arraybuffer一模一样，唯一的区别是后者无法共享数据。\n\n// 主线程\n\n// 新建 1kb 共享内存\nconst sharedbuffer = new sharedarraybuffer(1024);\n\n// 主线程将共享内存的地址发送出去\nw.postmessage(sharedbuffer);\n\n// 在共享内存上建立视图，供写入数据\nconst sharedarray = new int32array(sharedbuffer);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n上面代码中，postmessage方法的参数是sharedarraybuffer对象。\n\nworker 线程从事件的data属性上面取到数据。\n\n// worker 线程\nonmessage = function (ev) {\n  // 主线程共享的数据，就是 1kb 的共享内存\n  const sharedbuffer = ev.data;\n\n  // 在共享内存上建立视图，方便读写\n  const sharedarray = new int32array(sharedbuffer);\n\n  // ...\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n共享内存也可以在 worker 线程创建，发给主线程。\n\nsharedarraybuffer与arraybuffer一样，本身是无法读写的，必须在上面建立视图，然后通过视图读写。\n\n// 分配 10 万个 32 位整数占据的内存空间\nconst sab = new sharedarraybuffer(int32array.bytes_per_element * 100000);\n\n// 建立 32 位整数视图\nconst ia = new int32array(sab);  // ia.length == 100000\n\n// 新建一个质数生成器\nconst primes = new primegenerator();\n\n// 将 10 万个质数，写入这段内存空间\nfor ( let i=0 ; i < ia.length ; i++ )\n  ia[i] = primes.next();\n\n// 向 worker 线程发送这段共享内存\nw.postmessage(ia);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\nworker 线程收到数据后的处理如下。\n\n// worker 线程\nlet ia;\nonmessage = function (ev) {\n  ia = ev.data;\n  console.log(ia.length); // 100000\n  console.log(ia[37]); // 输出 163，因为这是第38个质数\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# atomics 对象\n\n多线程共享内存，最大的问题就是如何防止两个线程同时修改某个地址，或者说，当一个线程修改共享内存以后，必须有一个机制让其他线程同步。sharedarraybuffer api 提供atomics对象，保证所有共享内存的操作都是“原子性”的，并且可以在所有线程内同步。\n\n什么叫“原子性操作”呢？现代编程语言中，一条普通的命令被编译器处理以后，会变成多条机器指令。如果是单线程运行，这是没有问题的；多线程环境并且共享内存时，就会出问题，因为这一组机器指令的运行期间，可能会插入其他线程的指令，从而导致运行结果出错。请看下面的例子。\n\n// 主线程\nia[42] = 314159;  // 原先的值 191\nia[37] = 123456;  // 原先的值 163\n\n// worker 线程\nconsole.log(ia[37]);\nconsole.log(ia[42]);\n// 可能的结果\n// 123456\n// 191\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n上面代码中，主线程的原始顺序是先对 42 号位置赋值，再对 37 号位置赋值。但是，编译器和 cpu 为了优化，可能会改变这两个操作的执行顺序（因为它们之间互不依赖），先对 37 号位置赋值，再对 42 号位置赋值。而执行到一半的时候，worker 线程可能就会来读取数据，导致打印出123456和191。\n\n下面是另一个例子。\n\n// 主线程\nconst sab = new sharedarraybuffer(int32array.bytes_per_element * 100000);\nconst ia = new int32array(sab);\n\nfor (let i = 0; i < ia.length; i++) {\n  ia[i] = primes.next(); // 将质数放入 ia\n}\n\n// worker 线程\nia[112]++; // 错误\natomics.add(ia, 112, 1); // 正确\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n上面代码中，worker 线程直接改写共享内存ia[112]++是不正确的。因为这行语句会被编译成多条机器指令，这些指令之间无法保证不会插入其他进程的指令。请设想如果两个线程同时ia[112]++，很可能它们得到的结果都是不正确的。\n\natomics对象就是为了解决这个问题而提出，它可以保证一个操作所对应的多条机器指令，一定是作为一个整体运行的，中间不会被打断。也就是说，它所涉及的操作都可以看作是原子性的单操作，这可以避免线程竞争，提高多线程共享内存时的操作安全。所以，ia[112]++要改写成atomics.add(ia, 112, 1)。\n\natomics对象提供多种方法。\n\n（1）atomics.store()，atomics.load()\n\nstore()方法用来向共享内存写入数据，load()方法用来从共享内存读出数据。比起直接的读写操作，它们的好处是保证了读写操作的原子性。\n\n此外，它们还用来解决一个问题：多个线程使用共享内存的某个位置作为开关（flag），一旦该位置的值变了，就执行特定操作。这时，必须保证该位置的赋值操作，一定是在它前面的所有可能会改写内存的操作结束后执行；而该位置的取值操作，一定是在它后面所有可能会读取该位置的操作开始之前执行。store方法和load方法就能做到这一点，编译器不会为了优化，而打乱机器指令的执行顺序。\n\natomics.load(array, index)\natomics.store(array, index, value)\n\n\n1\n2\n\n\nstore方法接受三个参数：sharedbuffer 的视图、位置索引和值，返回sharedarray[index]的值。load方法只接受两个参数：sharedbuffer 的视图和位置索引，也是返回sharedarray[index]的值。\n\n// 主线程 main.js\nia[42] = 314159;  // 原先的值 191\natomics.store(ia, 37, 123456);  // 原先的值是 163\n\n// worker 线程 worker.js\nwhile (atomics.load(ia, 37) == 163);\nconsole.log(ia[37]);  // 123456\nconsole.log(ia[42]);  // 314159\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n上面代码中，主线程的atomics.store向 42 号位置的赋值，一定是早于 37 位置的赋值。只要 37 号位置等于 163，worker 线程就不会终止循环，而对 37 号位置和 42 号位置的取值，一定是在atomics.load操作之后。\n\n下面是另一个例子。\n\n// 主线程\nconst worker = new worker('worker.js');\nconst length = 10;\nconst size = int32array.bytes_per_element * length;\n// 新建一段共享内存\nconst sharedbuffer = new sharedarraybuffer(size);\nconst sharedarray = new int32array(sharedbuffer);\nfor (let i = 0; i < 10; i++) {\n  // 向共享内存写入 10 个整数\n  atomics.store(sharedarray, i, 0);\n}\nworker.postmessage(sharedbuffer);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n上面代码中，主线程用atomics.store()方法写入数据。下面是 worker 线程用atomics.load()方法读取数据。\n\n// worker.js\nself.addeventlistener('message', (event) => {\n  const sharedarray = new int32array(event.data);\n  for (let i = 0; i < 10; i++) {\n    const arrayvalue = atomics.load(sharedarray, i);\n    console.log(`the item at array index ${i} is ${arrayvalue}`);\n  }\n}, false);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n（2）atomics.exchange()\n\nworker 线程如果要写入数据，可以使用上面的atomics.store()方法，也可以使用atomics.exchange()方法。它们的区别是，atomics.store()返回写入的值，而atomics.exchange()返回被替换的值。\n\n// worker 线程\nself.addeventlistener('message', (event) => {\n  const sharedarray = new int32array(event.data);\n  for (let i = 0; i < 10; i++) {\n    if (i % 2 === 0) {\n      const storedvalue = atomics.store(sharedarray, i, 1);\n      console.log(`the item at array index ${i} is now ${storedvalue}`);\n    } else {\n      const exchangedvalue = atomics.exchange(sharedarray, i, 2);\n      console.log(`the item at array index ${i} was ${exchangedvalue}, now 2`);\n    }\n  }\n}, false);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n上面代码将共享内存的偶数位置的值改成1，奇数位置的值改成2。\n\n（3）atomics.wait()，atomics.wake()\n\n使用while循环等待主线程的通知，不是很高效，如果用在主线程，就会造成卡顿，atomics对象提供了wait()和wake()两个方法用于等待通知。这两个方法相当于锁内存，即在一个线程进行操作时，让其他线程休眠（建立锁），等到操作结束，再唤醒那些休眠的线程（解除锁）。\n\n// worker 线程\nself.addeventlistener('message', (event) => {\n  const sharedarray = new int32array(event.data);\n  const arrayindex = 0;\n  const expectedstoredvalue = 50;\n  atomics.wait(sharedarray, arrayindex, expectedstoredvalue);\n  console.log(atomics.load(sharedarray, arrayindex));\n}, false);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n上面代码中，atomics.wait()方法等同于告诉 worker 线程，只要满足给定条件（sharedarray的0号位置等于50），就在这一行 worker 线程进入休眠。\n\n主线程一旦更改了指定位置的值，就可以唤醒 worker 线程。\n\n// 主线程\nconst newarrayvalue = 100;\natomics.store(sharedarray, 0, newarrayvalue);\nconst arrayindex = 0;\nconst queuepos = 1;\natomics.wake(sharedarray, arrayindex, queuepos);\n\n\n1\n2\n3\n4\n5\n6\n\n\n上面代码中，sharedarray的0号位置改为100，然后就执行atomics.wake()方法，唤醒在sharedarray的0号位置休眠队列里的一个线程。\n\natomics.wait()方法的使用格式如下。\n\natomics.wait(sharedarray, index, value, timeout)\n\n\n1\n\n\n它的四个参数含义如下。\n\n * sharedarray：共享内存的视图数组。\n * index：视图数据的位置（从0开始）。\n * value：该位置的预期值。一旦实际值等于预期值，就进入休眠。\n * timeout：整数，表示过了这个时间以后，就自动唤醒，单位毫秒。该参数可选，默认值是infinity，即无限期的休眠，只有通过atomics.wake()方法才能唤醒。\n\natomics.wait()的返回值是一个字符串，共有三种可能的值。如果sharedarray[index]不等于value，就返回字符串not-equal，否则就进入休眠。如果atomics.wake()方法唤醒，就返回字符串ok；如果因为超时唤醒，就返回字符串timed-out。\n\natomics.wake()方法的使用格式如下。\n\natomics.wake(sharedarray, index, count)\n\n\n1\n\n\n它的三个参数含义如下。\n\n * sharedarray：共享内存的视图数组。\n * index：视图数据的位置（从0开始）。\n * count：需要唤醒的 worker 线程的数量，默认为infinity。\n\natomics.wake()方法一旦唤醒休眠的 worker 线程，就会让它继续往下运行。\n\n请看一个例子。\n\n// 主线程\nconsole.log(ia[37]);  // 163\natomics.store(ia, 37, 123456);\natomics.wake(ia, 37, 1);\n\n// worker 线程\natomics.wait(ia, 37, 163);\nconsole.log(ia[37]);  // 123456\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n上面代码中，视图数组ia的第 37 号位置，原来的值是163。worker 线程使用atomics.wait()方法，指定只要ia[37]等于163，就进入休眠状态。主线程使用atomics.store()方法，将123456写入ia[37]，然后使用atomics.wake()方法唤醒 worker 线程。\n\n另外，基于wait和wake这两个方法的锁内存实现，可以看 lars t hansen 的 js-lock-and-condition 这个库。\n\n注意，浏览器的主线程不宜设置休眠，这会导致用户失去响应。而且，主线程实际上会拒绝进入休眠。\n\n（4）运算方法\n\n共享内存上面的某些运算是不能被打断的，即不能在运算过程中，让其他线程改写内存上面的值。atomics 对象提供了一些运算方法，防止数据被改写。\n\natomics.add(sharedarray, index, value)\n\n\n1\n\n\natomics.add用于将value加到sharedarray[index]，返回sharedarray[index]旧的值。\n\natomics.sub(sharedarray, index, value)\n\n\n1\n\n\natomics.sub用于将value从sharedarray[index]减去，返回sharedarray[index]旧的值。\n\natomics.and(sharedarray, index, value)\n\n\n1\n\n\natomics.and用于将value与sharedarray[index]进行位运算and，放入sharedarray[index]，并返回旧的值。\n\natomics.or(sharedarray, index, value)\n\n\n1\n\n\natomics.or用于将value与sharedarray[index]进行位运算or，放入sharedarray[index]，并返回旧的值。\n\natomics.xor(sharedarray, index, value)\n\n\n1\n\n\natomic.xor用于将vaule与sharedarray[index]进行位运算xor，放入sharedarray[index]，并返回旧的值。\n\n（5）其他方法\n\natomics对象还有以下方法。\n\n * atomics.compareexchange(sharedarray, index, oldval, newval)：如果sharedarray[index]等于oldval，就写入newval，返回oldval。\n * atomics.islockfree(size)：返回一个布尔值，表示atomics对象是否可以处理某个size的内存锁定。如果返回false，应用程序就需要自己来实现锁定。\n\natomics.compareexchange的一个用途是，从 sharedarraybuffer 读取一个值，然后对该值进行某个操作，操作结束以后，检查一下 sharedarraybuffer 里面原来那个值是否发生变化（即被其他线程改写过）。如果没有改写过，就将它写回原来的位置，否则读取新的值，再重头进行一次操作。",charsets:{cjk:!0}},{title:"装饰器",frontmatter:{title:"装饰器",date:"2020-02-09T16:00:30.000Z",permalink:"/pages/e97bc1e5626b082c",author:"阮一峰",categories:["《ES6 教程》笔记"],tags:["ES6"],readingShow:"top"},regularPath:"/06.%E4%B9%A6%E7%B1%8D/05.%E3%80%8AES6%20%E6%95%99%E7%A8%8B%E3%80%8B%E7%AC%94%E8%AE%B0/30.%E8%A3%85%E9%A5%B0%E5%99%A8.html",relativePath:"06.书籍/05.《ES6 教程》笔记/30.装饰器.md",key:"v-767353a2",path:"/pages/e97bc1e5626b082c/",headers:[{level:2,title:"类的装饰",slug:"类的装饰",normalizedTitle:"类的装饰",charIndex:436},{level:2,title:"方法的装饰",slug:"方法的装饰",normalizedTitle:"方法的装饰",charIndex:2627},{level:2,title:"为什么装饰器不能用于函数？",slug:"为什么装饰器不能用于函数",normalizedTitle:"为什么装饰器不能用于函数？",charIndex:5164},{level:2,title:"core-decorators.js",slug:"core-decorators-js",normalizedTitle:"core-decorators.js",charIndex:6159},{level:2,title:"使用装饰器实现自动发布事件",slug:"使用装饰器实现自动发布事件",normalizedTitle:"使用装饰器实现自动发布事件",charIndex:8524},{level:2,title:"Mixin",slug:"mixin",normalizedTitle:"mixin",charIndex:9811},{level:2,title:"Trait",slug:"trait",normalizedTitle:"trait",charIndex:12076}],excerpt:'<h1 id="装饰器"><a class="header-anchor" href="#装饰器">#</a> 装饰器</h1>\n<p>[说明] Decorator 提案经过了大幅修改，目前还没有定案，不知道语法会不会再变。下面的内容完全依据以前的提案，已经有点过时了。等待定案以后，需要完全重写。</p>\n<p>装饰器（Decorator）是一种与类（class）相关的语法，用来注释或修改类和类方法。许多面向对象的语言都有这项功能，目前有一个<a href="https://github.com/tc39/proposal-decorators" target="_blank" rel="noopener noreferrer">提案<OutboundLink/></a>将其引入了 ECMAScript。</p>\n',lastUpdated:"2022/9/22 下午4:28:09",lastUpdatedTimestamp:1663835289e3,headersStr:"类的装饰 方法的装饰 为什么装饰器不能用于函数？ core-decorators.js 使用装饰器实现自动发布事件 Mixin Trait",content:"# 装饰器\n\n[说明] Decorator 提案经过了大幅修改，目前还没有定案，不知道语法会不会再变。下面的内容完全依据以前的提案，已经有点过时了。等待定案以后，需要完全重写。\n\n装饰器（Decorator）是一种与类（class）相关的语法，用来注释或修改类和类方法。许多面向对象的语言都有这项功能，目前有一个提案将其引入了 ECMAScript。 装饰器是一种函数，写成@ + 函数名。它可以放在类和类方法的定义前面。\n\n@frozen class Foo {\n  @configurable(false)\n  @enumerable(true)\n  method() {}\n\n  @throttle(500)\n  expensiveMethod() {}\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n上面代码一共使用了四个装饰器，一个用在类本身，另外三个用在类方法。它们不仅增加了代码的可读性，清晰地表达了意图，而且提供一种方便的手段，增加或修改类的功能。\n\n\n# 类的装饰\n\n装饰器可以用来装饰整个类。\n\n@testable\nclass MyTestableClass {\n  // ...\n}\n\nfunction testable(target) {\n  target.isTestable = true;\n}\n\nMyTestableClass.isTestable // true\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n上面代码中，@testable就是一个装饰器。它修改了MyTestableClass这个类的行为，为它加上了静态属性isTestable。testable函数的参数target是MyTestableClass类本身。\n\n基本上，装饰器的行为就是下面这样。\n\n@decorator\nclass A {}\n\n// 等同于\n\nclass A {}\nA = decorator(A) || A;\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n也就是说，装饰器是一个对类进行处理的函数。装饰器函数的第一个参数，就是所要装饰的目标类。\n\nfunction testable(target) {\n  // ...\n}\n\n\n1\n2\n3\n\n\n上面代码中，testable函数的参数target，就是会被装饰的类。\n\n如果觉得一个参数不够用，可以在装饰器外面再封装一层函数。\n\nfunction testable(isTestable) {\n  return function(target) {\n    target.isTestable = isTestable;\n  }\n}\n\n@testable(true)\nclass MyTestableClass {}\nMyTestableClass.isTestable // true\n\n@testable(false)\nclass MyClass {}\nMyClass.isTestable // false\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n上面代码中，装饰器testable可以接受参数，这就等于可以修改装饰器的行为。\n\n注意，装饰器对类的行为的改变，是代码编译时发生的，而不是在运行时。这意味着，装饰器能在编译阶段运行代码。也就是说，装饰器本质就是编译时执行的函数。\n\n前面的例子是为类添加一个静态属性，如果想添加实例属性，可以通过目标类的prototype对象操作。\n\nfunction testable(target) {\n  target.prototype.isTestable = true;\n}\n\n@testable\nclass MyTestableClass {}\n\nlet obj = new MyTestableClass();\nobj.isTestable // true\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n上面代码中，装饰器函数testable是在目标类的prototype对象上添加属性，因此就可以在实例上调用。\n\n下面是另外一个例子。\n\n// mixins.js\nexport function mixins(...list) {\n  return function (target) {\n    Object.assign(target.prototype, ...list)\n  }\n}\n\n// main.js\nimport { mixins } from './mixins'\n\nconst Foo = {\n  foo() { console.log('foo') }\n};\n\n@mixins(Foo)\nclass MyClass {}\n\nlet obj = new MyClass();\nobj.foo() // 'foo'\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\n上面代码通过装饰器mixins，把Foo对象的方法添加到了MyClass的实例上面。可以用Object.assign()模拟这个功能。\n\nconst Foo = {\n  foo() { console.log('foo') }\n};\n\nclass MyClass {}\n\nObject.assign(MyClass.prototype, Foo);\n\nlet obj = new MyClass();\nobj.foo() // 'foo'\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n实际开发中，React 与 Redux 库结合使用时，常常需要写成下面这样。\n\nclass MyReactComponent extends React.Component {}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MyReactComponent);\n\n\n1\n2\n3\n\n\n有了装饰器，就可以改写上面的代码。\n\n@connect(mapStateToProps, mapDispatchToProps)\nexport default class MyReactComponent extends React.Component {}\n\n\n1\n2\n\n\n相对来说，后一种写法看上去更容易理解。\n\n\n# 方法的装饰\n\n装饰器不仅可以装饰类，还可以装饰类的属性。\n\nclass Person {\n  @readonly\n  name() { return `${this.first} ${this.last}` }\n}\n\n\n1\n2\n3\n4\n\n\n上面代码中，装饰器readonly用来装饰“类”的name方法。\n\n装饰器函数readonly一共可以接受三个参数。\n\nfunction readonly(target, name, descriptor){\n  // descriptor对象原来的值如下\n  // {\n  //   value: specifiedFunction,\n  //   enumerable: false,\n  //   configurable: true,\n  //   writable: true\n  // };\n  descriptor.writable = false;\n  return descriptor;\n}\n\nreadonly(Person.prototype, 'name', descriptor);\n// 类似于\nObject.defineProperty(Person.prototype, 'name', descriptor);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n装饰器第一个参数是类的原型对象，上例是Person.prototype，装饰器的本意是要“装饰”类的实例，但是这个时候实例还没生成，所以只能去装饰原型（这不同于类的装饰，那种情况时target参数指的是类本身）；第二个参数是所要装饰的属性名，第三个参数是该属性的描述对象。\n\n另外，上面代码说明，装饰器（readonly）会修改属性的描述对象（descriptor），然后被修改的描述对象再用来定义属性。\n\n下面是另一个例子，修改属性描述对象的enumerable属性，使得该属性不可遍历。\n\nclass Person {\n  @nonenumerable\n  get kidCount() { return this.children.length; }\n}\n\nfunction nonenumerable(target, name, descriptor) {\n  descriptor.enumerable = false;\n  return descriptor;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n下面的@log装饰器，可以起到输出日志的作用。\n\nclass Math {\n  @log\n  add(a, b) {\n    return a + b;\n  }\n}\n\nfunction log(target, name, descriptor) {\n  var oldValue = descriptor.value;\n\n  descriptor.value = function() {\n    console.log(`Calling ${name} with`, arguments);\n    return oldValue.apply(this, arguments);\n  };\n\n  return descriptor;\n}\n\nconst math = new Math();\n\n// passed parameters should get logged now\nmath.add(2, 4);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n\n\n上面代码中，@log装饰器的作用就是在执行原始的操作之前，执行一次console.log，从而达到输出日志的目的。\n\n装饰器有注释的作用。\n\n@testable\nclass Person {\n  @readonly\n  @nonenumerable\n  name() { return `${this.first} ${this.last}` }\n}\n\n\n1\n2\n3\n4\n5\n6\n\n\n从上面代码中，我们一眼就能看出，Person类是可测试的，而name方法是只读和不可枚举的。\n\n下面是使用 Decorator 写法的组件，看上去一目了然。\n\n@Component({\n  tag: 'my-component',\n  styleUrl: 'my-component.scss'\n})\nexport class MyComponent {\n  @Prop() first: string;\n  @Prop() last: string;\n  @State() isVisible: boolean = true;\n\n  render() {\n    return (\n      <p>Hello, my name is {this.first} {this.last}</p>\n    );\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n如果同一个方法有多个装饰器，会像剥洋葱一样，先从外到内进入，然后由内向外执行。\n\nfunction dec(id){\n  console.log('evaluated', id);\n  return (target, property, descriptor) => console.log('executed', id);\n}\n\nclass Example {\n    @dec(1)\n    @dec(2)\n    method(){}\n}\n// evaluated 1\n// evaluated 2\n// executed 2\n// executed 1\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n上面代码中，外层装饰器@dec(1)先进入，但是内层装饰器@dec(2)先执行。\n\n除了注释，装饰器还能用来类型检查。所以，对于类来说，这项功能相当有用。从长期来看，它将是 JavaScript 代码静态分析的重要工具。\n\n\n# 为什么装饰器不能用于函数？\n\n装饰器只能用于类和类的方法，不能用于函数，因为存在函数提升。\n\nvar counter = 0;\n\nvar add = function () {\n  counter++;\n};\n\n@add\nfunction foo() {\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n上面的代码，意图是执行后counter等于 1，但是实际上结果是counter等于 0。因为函数提升，使得实际执行的代码是下面这样。\n\n@add\nfunction foo() {\n}\n\nvar counter;\nvar add;\n\ncounter = 0;\n\nadd = function () {\n  counter++;\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n下面是另一个例子。\n\nvar readOnly = require(\"some-decorator\");\n\n@readOnly\nfunction foo() {\n}\n\n\n1\n2\n3\n4\n5\n\n\n上面代码也有问题，因为实际执行是下面这样。\n\nvar readOnly;\n\n@readOnly\nfunction foo() {\n}\n\nreadOnly = require(\"some-decorator\");\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n总之，由于存在函数提升，使得装饰器不能用于函数。类是不会提升的，所以就没有这方面的问题。\n\n另一方面，如果一定要装饰函数，可以采用高阶函数的形式直接执行。\n\nfunction doSomething(name) {\n  console.log('Hello, ' + name);\n}\n\nfunction loggingDecorator(wrapped) {\n  return function() {\n    console.log('Starting');\n    const result = wrapped.apply(this, arguments);\n    console.log('Finished');\n    return result;\n  }\n}\n\nconst wrapped = loggingDecorator(doSomething);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n\n# core-decorators.js\n\ncore-decorators.js是一个第三方模块，提供了几个常见的装饰器，通过它可以更好地理解装饰器。\n\n（1）@autobind\n\nautobind装饰器使得方法中的this对象，绑定原始对象。\n\nimport { autobind } from 'core-decorators';\n\nclass Person {\n  @autobind\n  getPerson() {\n    return this;\n  }\n}\n\nlet person = new Person();\nlet getPerson = person.getPerson;\n\ngetPerson() === person;\n// true\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n（2）@readonly\n\nreadonly装饰器使得属性或方法不可写。\n\nimport { readonly } from 'core-decorators';\n\nclass Meal {\n  @readonly\n  entree = 'steak';\n}\n\nvar dinner = new Meal();\ndinner.entree = 'salmon';\n// Cannot assign to read only property 'entree' of [object Object]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n（3）@override\n\noverride装饰器检查子类的方法，是否正确覆盖了父类的同名方法，如果不正确会报错。\n\nimport { override } from 'core-decorators';\n\nclass Parent {\n  speak(first, second) {}\n}\n\nclass Child extends Parent {\n  @override\n  speak() {}\n  // SyntaxError: Child#speak() does not properly override Parent#speak(first, second)\n}\n\n// or\n\nclass Child extends Parent {\n  @override\n  speaks() {}\n  // SyntaxError: No descriptor matching Child#speaks() was found on the prototype chain.\n  //\n  //   Did you mean \"speak\"?\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n\n\n（4）@deprecate (别名@deprecated)\n\ndeprecate或deprecated装饰器在控制台显示一条警告，表示该方法将废除。\n\nimport { deprecate } from 'core-decorators';\n\nclass Person {\n  @deprecate\n  facepalm() {}\n\n  @deprecate('We stopped facepalming')\n  facepalmHard() {}\n\n  @deprecate('We stopped facepalming', { url: 'http://knowyourmeme.com/memes/facepalm' })\n  facepalmHarder() {}\n}\n\nlet person = new Person();\n\nperson.facepalm();\n// DEPRECATION Person#facepalm: This function will be removed in future versions.\n\nperson.facepalmHard();\n// DEPRECATION Person#facepalmHard: We stopped facepalming\n\nperson.facepalmHarder();\n// DEPRECATION Person#facepalmHarder: We stopped facepalming\n//\n//     See http://knowyourmeme.com/memes/facepalm for more details.\n//\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n\n\n（5）@suppressWarnings\n\nsuppressWarnings装饰器抑制deprecated装饰器导致的console.warn()调用。但是，异步代码发出的调用除外。\n\nimport { suppressWarnings } from 'core-decorators';\n\nclass Person {\n  @deprecated\n  facepalm() {}\n\n  @suppressWarnings\n  facepalmWithoutWarning() {\n    this.facepalm();\n  }\n}\n\nlet person = new Person();\n\nperson.facepalmWithoutWarning();\n// no warning is logged\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n\n# 使用装饰器实现自动发布事件\n\n我们可以使用装饰器，使得对象的方法被调用时，自动发出一个事件。\n\nconst postal = require(\"postal/lib/postal.lodash\");\n\nexport default function publish(topic, channel) {\n  const channelName = channel || '/';\n  const msgChannel = postal.channel(channelName);\n  msgChannel.subscribe(topic, v => {\n    console.log('频道: ', channelName);\n    console.log('事件: ', topic);\n    console.log('数据: ', v);\n  });\n\n  return function(target, name, descriptor) {\n    const fn = descriptor.value;\n\n    descriptor.value = function() {\n      let value = fn.apply(this, arguments);\n      msgChannel.publish(topic, value);\n    };\n  };\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n\n上面代码定义了一个名为publish的装饰器，它通过改写descriptor.value，使得原方法被调用时，会自动发出一个事件。它使用的事件“发布/订阅”库是Postal.js。\n\n它的用法如下。\n\n// index.js\nimport publish from './publish';\n\nclass FooComponent {\n  @publish('foo.some.message', 'component')\n  someMethod() {\n    return { my: 'data' };\n  }\n  @publish('foo.some.other')\n  anotherMethod() {\n    // ...\n  }\n}\n\nlet foo = new FooComponent();\n\nfoo.someMethod();\nfoo.anotherMethod();\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\n以后，只要调用someMethod或者anotherMethod，就会自动发出一个事件。\n\n$ bash-node index.js\n频道:  component\n事件:  foo.some.message\n数据:  { my: 'data' }\n\n频道:  /\n事件:  foo.some.other\n数据:  undefined\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# Mixin\n\n在装饰器的基础上，可以实现Mixin模式。所谓Mixin模式，就是对象继承的一种替代方案，中文译为“混入”（mix in），意为在一个对象之中混入另外一个对象的方法。\n\n请看下面的例子。\n\nconst Foo = {\n  foo() { console.log('foo') }\n};\n\nclass MyClass {}\n\nObject.assign(MyClass.prototype, Foo);\n\nlet obj = new MyClass();\nobj.foo() // 'foo'\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n上面代码之中，对象Foo有一个foo方法，通过Object.assign方法，可以将foo方法“混入”MyClass类，导致MyClass的实例obj对象都具有foo方法。这就是“混入”模式的一个简单实现。\n\n下面，我们部署一个通用脚本mixins.js，将 Mixin 写成一个装饰器。\n\nexport function mixins(...list) {\n  return function (target) {\n    Object.assign(target.prototype, ...list);\n  };\n}\n\n\n1\n2\n3\n4\n5\n\n\n然后，就可以使用上面这个装饰器，为类“混入”各种方法。\n\nimport { mixins } from './mixins';\n\nconst Foo = {\n  foo() { console.log('foo') }\n};\n\n@mixins(Foo)\nclass MyClass {}\n\nlet obj = new MyClass();\nobj.foo() // \"foo\"\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n通过mixins这个装饰器，实现了在MyClass类上面“混入”Foo对象的foo方法。\n\n不过，上面的方法会改写MyClass类的prototype对象，如果不喜欢这一点，也可以通过类的继承实现 Mixin。\n\nclass MyClass extends MyBaseClass {\n  /* ... */\n}\n\n\n1\n2\n3\n\n\n上面代码中，MyClass继承了MyBaseClass。如果我们想在MyClass里面“混入”一个foo方法，一个办法是在MyClass和MyBaseClass之间插入一个混入类，这个类具有foo方法，并且继承了MyBaseClass的所有方法，然后MyClass再继承这个类。\n\nlet MyMixin = (superclass) => class extends superclass {\n  foo() {\n    console.log('foo from MyMixin');\n  }\n};\n\n\n1\n2\n3\n4\n5\n\n\n上面代码中，MyMixin是一个混入类生成器，接受superclass作为参数，然后返回一个继承superclass的子类，该子类包含一个foo方法。\n\n接着，目标类再去继承这个混入类，就达到了“混入”foo方法的目的。\n\nclass MyClass extends MyMixin(MyBaseClass) {\n  /* ... */\n}\n\nlet c = new MyClass();\nc.foo(); // \"foo from MyMixin\"\n\n\n1\n2\n3\n4\n5\n6\n\n\n如果需要“混入”多个方法，就生成多个混入类。\n\nclass MyClass extends Mixin1(Mixin2(MyBaseClass)) {\n  /* ... */\n}\n\n\n1\n2\n3\n\n\n这种写法的一个好处，是可以调用super，因此可以避免在“混入”过程中覆盖父类的同名方法。\n\nlet Mixin1 = (superclass) => class extends superclass {\n  foo() {\n    console.log('foo from Mixin1');\n    if (super.foo) super.foo();\n  }\n};\n\nlet Mixin2 = (superclass) => class extends superclass {\n  foo() {\n    console.log('foo from Mixin2');\n    if (super.foo) super.foo();\n  }\n};\n\nclass S {\n  foo() {\n    console.log('foo from S');\n  }\n}\n\nclass C extends Mixin1(Mixin2(S)) {\n  foo() {\n    console.log('foo from C');\n    super.foo();\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n\n\n上面代码中，每一次混入发生时，都调用了父类的super.foo方法，导致父类的同名方法没有被覆盖，行为被保留了下来。\n\nnew C().foo()\n// foo from C\n// foo from Mixin1\n// foo from Mixin2\n// foo from S\n\n\n1\n2\n3\n4\n5\n\n\n\n# Trait\n\nTrait 也是一种装饰器，效果与 Mixin 类似，但是提供更多功能，比如防止同名方法的冲突、排除混入某些方法、为混入的方法起别名等等。\n\n下面采用traits-decorator这个第三方模块作为例子。这个模块提供的traits装饰器，不仅可以接受对象，还可以接受 ES6 类作为参数。\n\nimport { traits } from 'traits-decorator';\n\nclass TFoo {\n  foo() { console.log('foo') }\n}\n\nconst TBar = {\n  bar() { console.log('bar') }\n};\n\n@traits(TFoo, TBar)\nclass MyClass { }\n\nlet obj = new MyClass();\nobj.foo() // foo\nobj.bar() // bar\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n上面代码中，通过traits装饰器，在MyClass类上面“混入”了TFoo类的foo方法和TBar对象的bar方法。\n\nTrait 不允许“混入”同名方法。\n\nimport { traits } from 'traits-decorator';\n\nclass TFoo {\n  foo() { console.log('foo') }\n}\n\nconst TBar = {\n  bar() { console.log('bar') },\n  foo() { console.log('foo') }\n};\n\n@traits(TFoo, TBar)\nclass MyClass { }\n// 报错\n// throw new Error('Method named: ' + methodName + ' is defined twice.');\n//        ^\n// Error: Method named: foo is defined twice.\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n上面代码中，TFoo和TBar都有foo方法，结果traits装饰器报错。\n\n一种解决方法是排除TBar的foo方法。\n\nimport { traits, excludes } from 'traits-decorator';\n\nclass TFoo {\n  foo() { console.log('foo') }\n}\n\nconst TBar = {\n  bar() { console.log('bar') },\n  foo() { console.log('foo') }\n};\n\n@traits(TFoo, TBar::excludes('foo'))\nclass MyClass { }\n\nlet obj = new MyClass();\nobj.foo() // foo\nobj.bar() // bar\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n上面代码使用绑定运算符（::）在TBar上排除foo方法，混入时就不会报错了。\n\n另一种方法是为TBar的foo方法起一个别名。\n\nimport { traits, alias } from 'traits-decorator';\n\nclass TFoo {\n  foo() { console.log('foo') }\n}\n\nconst TBar = {\n  bar() { console.log('bar') },\n  foo() { console.log('foo') }\n};\n\n@traits(TFoo, TBar::alias({foo: 'aliasFoo'}))\nclass MyClass { }\n\nlet obj = new MyClass();\nobj.foo() // foo\nobj.aliasFoo() // foo\nobj.bar() // bar\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\n上面代码为TBar的foo方法起了别名aliasFoo，于是MyClass也可以混入TBar的foo方法了。\n\nalias和excludes方法，可以结合起来使用。\n\n@traits(TExample::excludes('foo','bar')::alias({baz:'exampleBaz'}))\nclass MyClass {}\n\n\n1\n2\n\n\n上面代码排除了TExample的foo方法和bar方法，为baz方法起了别名exampleBaz。\n\nas方法则为上面的代码提供了另一种写法。\n\n@traits(TExample::as({excludes:['foo', 'bar'], alias: {baz: 'exampleBaz'}}))\nclass MyClass {}\n\n\n1\n2\n",normalizedContent:"# 装饰器\n\n[说明] decorator 提案经过了大幅修改，目前还没有定案，不知道语法会不会再变。下面的内容完全依据以前的提案，已经有点过时了。等待定案以后，需要完全重写。\n\n装饰器（decorator）是一种与类（class）相关的语法，用来注释或修改类和类方法。许多面向对象的语言都有这项功能，目前有一个提案将其引入了 ecmascript。 装饰器是一种函数，写成@ + 函数名。它可以放在类和类方法的定义前面。\n\n@frozen class foo {\n  @configurable(false)\n  @enumerable(true)\n  method() {}\n\n  @throttle(500)\n  expensivemethod() {}\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n上面代码一共使用了四个装饰器，一个用在类本身，另外三个用在类方法。它们不仅增加了代码的可读性，清晰地表达了意图，而且提供一种方便的手段，增加或修改类的功能。\n\n\n# 类的装饰\n\n装饰器可以用来装饰整个类。\n\n@testable\nclass mytestableclass {\n  // ...\n}\n\nfunction testable(target) {\n  target.istestable = true;\n}\n\nmytestableclass.istestable // true\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n上面代码中，@testable就是一个装饰器。它修改了mytestableclass这个类的行为，为它加上了静态属性istestable。testable函数的参数target是mytestableclass类本身。\n\n基本上，装饰器的行为就是下面这样。\n\n@decorator\nclass a {}\n\n// 等同于\n\nclass a {}\na = decorator(a) || a;\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n也就是说，装饰器是一个对类进行处理的函数。装饰器函数的第一个参数，就是所要装饰的目标类。\n\nfunction testable(target) {\n  // ...\n}\n\n\n1\n2\n3\n\n\n上面代码中，testable函数的参数target，就是会被装饰的类。\n\n如果觉得一个参数不够用，可以在装饰器外面再封装一层函数。\n\nfunction testable(istestable) {\n  return function(target) {\n    target.istestable = istestable;\n  }\n}\n\n@testable(true)\nclass mytestableclass {}\nmytestableclass.istestable // true\n\n@testable(false)\nclass myclass {}\nmyclass.istestable // false\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n上面代码中，装饰器testable可以接受参数，这就等于可以修改装饰器的行为。\n\n注意，装饰器对类的行为的改变，是代码编译时发生的，而不是在运行时。这意味着，装饰器能在编译阶段运行代码。也就是说，装饰器本质就是编译时执行的函数。\n\n前面的例子是为类添加一个静态属性，如果想添加实例属性，可以通过目标类的prototype对象操作。\n\nfunction testable(target) {\n  target.prototype.istestable = true;\n}\n\n@testable\nclass mytestableclass {}\n\nlet obj = new mytestableclass();\nobj.istestable // true\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n上面代码中，装饰器函数testable是在目标类的prototype对象上添加属性，因此就可以在实例上调用。\n\n下面是另外一个例子。\n\n// mixins.js\nexport function mixins(...list) {\n  return function (target) {\n    object.assign(target.prototype, ...list)\n  }\n}\n\n// main.js\nimport { mixins } from './mixins'\n\nconst foo = {\n  foo() { console.log('foo') }\n};\n\n@mixins(foo)\nclass myclass {}\n\nlet obj = new myclass();\nobj.foo() // 'foo'\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\n上面代码通过装饰器mixins，把foo对象的方法添加到了myclass的实例上面。可以用object.assign()模拟这个功能。\n\nconst foo = {\n  foo() { console.log('foo') }\n};\n\nclass myclass {}\n\nobject.assign(myclass.prototype, foo);\n\nlet obj = new myclass();\nobj.foo() // 'foo'\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n实际开发中，react 与 redux 库结合使用时，常常需要写成下面这样。\n\nclass myreactcomponent extends react.component {}\n\nexport default connect(mapstatetoprops, mapdispatchtoprops)(myreactcomponent);\n\n\n1\n2\n3\n\n\n有了装饰器，就可以改写上面的代码。\n\n@connect(mapstatetoprops, mapdispatchtoprops)\nexport default class myreactcomponent extends react.component {}\n\n\n1\n2\n\n\n相对来说，后一种写法看上去更容易理解。\n\n\n# 方法的装饰\n\n装饰器不仅可以装饰类，还可以装饰类的属性。\n\nclass person {\n  @readonly\n  name() { return `${this.first} ${this.last}` }\n}\n\n\n1\n2\n3\n4\n\n\n上面代码中，装饰器readonly用来装饰“类”的name方法。\n\n装饰器函数readonly一共可以接受三个参数。\n\nfunction readonly(target, name, descriptor){\n  // descriptor对象原来的值如下\n  // {\n  //   value: specifiedfunction,\n  //   enumerable: false,\n  //   configurable: true,\n  //   writable: true\n  // };\n  descriptor.writable = false;\n  return descriptor;\n}\n\nreadonly(person.prototype, 'name', descriptor);\n// 类似于\nobject.defineproperty(person.prototype, 'name', descriptor);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n装饰器第一个参数是类的原型对象，上例是person.prototype，装饰器的本意是要“装饰”类的实例，但是这个时候实例还没生成，所以只能去装饰原型（这不同于类的装饰，那种情况时target参数指的是类本身）；第二个参数是所要装饰的属性名，第三个参数是该属性的描述对象。\n\n另外，上面代码说明，装饰器（readonly）会修改属性的描述对象（descriptor），然后被修改的描述对象再用来定义属性。\n\n下面是另一个例子，修改属性描述对象的enumerable属性，使得该属性不可遍历。\n\nclass person {\n  @nonenumerable\n  get kidcount() { return this.children.length; }\n}\n\nfunction nonenumerable(target, name, descriptor) {\n  descriptor.enumerable = false;\n  return descriptor;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n下面的@log装饰器，可以起到输出日志的作用。\n\nclass math {\n  @log\n  add(a, b) {\n    return a + b;\n  }\n}\n\nfunction log(target, name, descriptor) {\n  var oldvalue = descriptor.value;\n\n  descriptor.value = function() {\n    console.log(`calling ${name} with`, arguments);\n    return oldvalue.apply(this, arguments);\n  };\n\n  return descriptor;\n}\n\nconst math = new math();\n\n// passed parameters should get logged now\nmath.add(2, 4);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n\n\n上面代码中，@log装饰器的作用就是在执行原始的操作之前，执行一次console.log，从而达到输出日志的目的。\n\n装饰器有注释的作用。\n\n@testable\nclass person {\n  @readonly\n  @nonenumerable\n  name() { return `${this.first} ${this.last}` }\n}\n\n\n1\n2\n3\n4\n5\n6\n\n\n从上面代码中，我们一眼就能看出，person类是可测试的，而name方法是只读和不可枚举的。\n\n下面是使用 decorator 写法的组件，看上去一目了然。\n\n@component({\n  tag: 'my-component',\n  styleurl: 'my-component.scss'\n})\nexport class mycomponent {\n  @prop() first: string;\n  @prop() last: string;\n  @state() isvisible: boolean = true;\n\n  render() {\n    return (\n      <p>hello, my name is {this.first} {this.last}</p>\n    );\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n如果同一个方法有多个装饰器，会像剥洋葱一样，先从外到内进入，然后由内向外执行。\n\nfunction dec(id){\n  console.log('evaluated', id);\n  return (target, property, descriptor) => console.log('executed', id);\n}\n\nclass example {\n    @dec(1)\n    @dec(2)\n    method(){}\n}\n// evaluated 1\n// evaluated 2\n// executed 2\n// executed 1\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n上面代码中，外层装饰器@dec(1)先进入，但是内层装饰器@dec(2)先执行。\n\n除了注释，装饰器还能用来类型检查。所以，对于类来说，这项功能相当有用。从长期来看，它将是 javascript 代码静态分析的重要工具。\n\n\n# 为什么装饰器不能用于函数？\n\n装饰器只能用于类和类的方法，不能用于函数，因为存在函数提升。\n\nvar counter = 0;\n\nvar add = function () {\n  counter++;\n};\n\n@add\nfunction foo() {\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n上面的代码，意图是执行后counter等于 1，但是实际上结果是counter等于 0。因为函数提升，使得实际执行的代码是下面这样。\n\n@add\nfunction foo() {\n}\n\nvar counter;\nvar add;\n\ncounter = 0;\n\nadd = function () {\n  counter++;\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n下面是另一个例子。\n\nvar readonly = require(\"some-decorator\");\n\n@readonly\nfunction foo() {\n}\n\n\n1\n2\n3\n4\n5\n\n\n上面代码也有问题，因为实际执行是下面这样。\n\nvar readonly;\n\n@readonly\nfunction foo() {\n}\n\nreadonly = require(\"some-decorator\");\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n总之，由于存在函数提升，使得装饰器不能用于函数。类是不会提升的，所以就没有这方面的问题。\n\n另一方面，如果一定要装饰函数，可以采用高阶函数的形式直接执行。\n\nfunction dosomething(name) {\n  console.log('hello, ' + name);\n}\n\nfunction loggingdecorator(wrapped) {\n  return function() {\n    console.log('starting');\n    const result = wrapped.apply(this, arguments);\n    console.log('finished');\n    return result;\n  }\n}\n\nconst wrapped = loggingdecorator(dosomething);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n\n# core-decorators.js\n\ncore-decorators.js是一个第三方模块，提供了几个常见的装饰器，通过它可以更好地理解装饰器。\n\n（1）@autobind\n\nautobind装饰器使得方法中的this对象，绑定原始对象。\n\nimport { autobind } from 'core-decorators';\n\nclass person {\n  @autobind\n  getperson() {\n    return this;\n  }\n}\n\nlet person = new person();\nlet getperson = person.getperson;\n\ngetperson() === person;\n// true\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n（2）@readonly\n\nreadonly装饰器使得属性或方法不可写。\n\nimport { readonly } from 'core-decorators';\n\nclass meal {\n  @readonly\n  entree = 'steak';\n}\n\nvar dinner = new meal();\ndinner.entree = 'salmon';\n// cannot assign to read only property 'entree' of [object object]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n（3）@override\n\noverride装饰器检查子类的方法，是否正确覆盖了父类的同名方法，如果不正确会报错。\n\nimport { override } from 'core-decorators';\n\nclass parent {\n  speak(first, second) {}\n}\n\nclass child extends parent {\n  @override\n  speak() {}\n  // syntaxerror: child#speak() does not properly override parent#speak(first, second)\n}\n\n// or\n\nclass child extends parent {\n  @override\n  speaks() {}\n  // syntaxerror: no descriptor matching child#speaks() was found on the prototype chain.\n  //\n  //   did you mean \"speak\"?\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n\n\n（4）@deprecate (别名@deprecated)\n\ndeprecate或deprecated装饰器在控制台显示一条警告，表示该方法将废除。\n\nimport { deprecate } from 'core-decorators';\n\nclass person {\n  @deprecate\n  facepalm() {}\n\n  @deprecate('we stopped facepalming')\n  facepalmhard() {}\n\n  @deprecate('we stopped facepalming', { url: 'http://knowyourmeme.com/memes/facepalm' })\n  facepalmharder() {}\n}\n\nlet person = new person();\n\nperson.facepalm();\n// deprecation person#facepalm: this function will be removed in future versions.\n\nperson.facepalmhard();\n// deprecation person#facepalmhard: we stopped facepalming\n\nperson.facepalmharder();\n// deprecation person#facepalmharder: we stopped facepalming\n//\n//     see http://knowyourmeme.com/memes/facepalm for more details.\n//\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n\n\n（5）@suppresswarnings\n\nsuppresswarnings装饰器抑制deprecated装饰器导致的console.warn()调用。但是，异步代码发出的调用除外。\n\nimport { suppresswarnings } from 'core-decorators';\n\nclass person {\n  @deprecated\n  facepalm() {}\n\n  @suppresswarnings\n  facepalmwithoutwarning() {\n    this.facepalm();\n  }\n}\n\nlet person = new person();\n\nperson.facepalmwithoutwarning();\n// no warning is logged\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n\n# 使用装饰器实现自动发布事件\n\n我们可以使用装饰器，使得对象的方法被调用时，自动发出一个事件。\n\nconst postal = require(\"postal/lib/postal.lodash\");\n\nexport default function publish(topic, channel) {\n  const channelname = channel || '/';\n  const msgchannel = postal.channel(channelname);\n  msgchannel.subscribe(topic, v => {\n    console.log('频道: ', channelname);\n    console.log('事件: ', topic);\n    console.log('数据: ', v);\n  });\n\n  return function(target, name, descriptor) {\n    const fn = descriptor.value;\n\n    descriptor.value = function() {\n      let value = fn.apply(this, arguments);\n      msgchannel.publish(topic, value);\n    };\n  };\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n\n上面代码定义了一个名为publish的装饰器，它通过改写descriptor.value，使得原方法被调用时，会自动发出一个事件。它使用的事件“发布/订阅”库是postal.js。\n\n它的用法如下。\n\n// index.js\nimport publish from './publish';\n\nclass foocomponent {\n  @publish('foo.some.message', 'component')\n  somemethod() {\n    return { my: 'data' };\n  }\n  @publish('foo.some.other')\n  anothermethod() {\n    // ...\n  }\n}\n\nlet foo = new foocomponent();\n\nfoo.somemethod();\nfoo.anothermethod();\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\n以后，只要调用somemethod或者anothermethod，就会自动发出一个事件。\n\n$ bash-node index.js\n频道:  component\n事件:  foo.some.message\n数据:  { my: 'data' }\n\n频道:  /\n事件:  foo.some.other\n数据:  undefined\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# mixin\n\n在装饰器的基础上，可以实现mixin模式。所谓mixin模式，就是对象继承的一种替代方案，中文译为“混入”（mix in），意为在一个对象之中混入另外一个对象的方法。\n\n请看下面的例子。\n\nconst foo = {\n  foo() { console.log('foo') }\n};\n\nclass myclass {}\n\nobject.assign(myclass.prototype, foo);\n\nlet obj = new myclass();\nobj.foo() // 'foo'\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n上面代码之中，对象foo有一个foo方法，通过object.assign方法，可以将foo方法“混入”myclass类，导致myclass的实例obj对象都具有foo方法。这就是“混入”模式的一个简单实现。\n\n下面，我们部署一个通用脚本mixins.js，将 mixin 写成一个装饰器。\n\nexport function mixins(...list) {\n  return function (target) {\n    object.assign(target.prototype, ...list);\n  };\n}\n\n\n1\n2\n3\n4\n5\n\n\n然后，就可以使用上面这个装饰器，为类“混入”各种方法。\n\nimport { mixins } from './mixins';\n\nconst foo = {\n  foo() { console.log('foo') }\n};\n\n@mixins(foo)\nclass myclass {}\n\nlet obj = new myclass();\nobj.foo() // \"foo\"\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n通过mixins这个装饰器，实现了在myclass类上面“混入”foo对象的foo方法。\n\n不过，上面的方法会改写myclass类的prototype对象，如果不喜欢这一点，也可以通过类的继承实现 mixin。\n\nclass myclass extends mybaseclass {\n  /* ... */\n}\n\n\n1\n2\n3\n\n\n上面代码中，myclass继承了mybaseclass。如果我们想在myclass里面“混入”一个foo方法，一个办法是在myclass和mybaseclass之间插入一个混入类，这个类具有foo方法，并且继承了mybaseclass的所有方法，然后myclass再继承这个类。\n\nlet mymixin = (superclass) => class extends superclass {\n  foo() {\n    console.log('foo from mymixin');\n  }\n};\n\n\n1\n2\n3\n4\n5\n\n\n上面代码中，mymixin是一个混入类生成器，接受superclass作为参数，然后返回一个继承superclass的子类，该子类包含一个foo方法。\n\n接着，目标类再去继承这个混入类，就达到了“混入”foo方法的目的。\n\nclass myclass extends mymixin(mybaseclass) {\n  /* ... */\n}\n\nlet c = new myclass();\nc.foo(); // \"foo from mymixin\"\n\n\n1\n2\n3\n4\n5\n6\n\n\n如果需要“混入”多个方法，就生成多个混入类。\n\nclass myclass extends mixin1(mixin2(mybaseclass)) {\n  /* ... */\n}\n\n\n1\n2\n3\n\n\n这种写法的一个好处，是可以调用super，因此可以避免在“混入”过程中覆盖父类的同名方法。\n\nlet mixin1 = (superclass) => class extends superclass {\n  foo() {\n    console.log('foo from mixin1');\n    if (super.foo) super.foo();\n  }\n};\n\nlet mixin2 = (superclass) => class extends superclass {\n  foo() {\n    console.log('foo from mixin2');\n    if (super.foo) super.foo();\n  }\n};\n\nclass s {\n  foo() {\n    console.log('foo from s');\n  }\n}\n\nclass c extends mixin1(mixin2(s)) {\n  foo() {\n    console.log('foo from c');\n    super.foo();\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n\n\n上面代码中，每一次混入发生时，都调用了父类的super.foo方法，导致父类的同名方法没有被覆盖，行为被保留了下来。\n\nnew c().foo()\n// foo from c\n// foo from mixin1\n// foo from mixin2\n// foo from s\n\n\n1\n2\n3\n4\n5\n\n\n\n# trait\n\ntrait 也是一种装饰器，效果与 mixin 类似，但是提供更多功能，比如防止同名方法的冲突、排除混入某些方法、为混入的方法起别名等等。\n\n下面采用traits-decorator这个第三方模块作为例子。这个模块提供的traits装饰器，不仅可以接受对象，还可以接受 es6 类作为参数。\n\nimport { traits } from 'traits-decorator';\n\nclass tfoo {\n  foo() { console.log('foo') }\n}\n\nconst tbar = {\n  bar() { console.log('bar') }\n};\n\n@traits(tfoo, tbar)\nclass myclass { }\n\nlet obj = new myclass();\nobj.foo() // foo\nobj.bar() // bar\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n上面代码中，通过traits装饰器，在myclass类上面“混入”了tfoo类的foo方法和tbar对象的bar方法。\n\ntrait 不允许“混入”同名方法。\n\nimport { traits } from 'traits-decorator';\n\nclass tfoo {\n  foo() { console.log('foo') }\n}\n\nconst tbar = {\n  bar() { console.log('bar') },\n  foo() { console.log('foo') }\n};\n\n@traits(tfoo, tbar)\nclass myclass { }\n// 报错\n// throw new error('method named: ' + methodname + ' is defined twice.');\n//        ^\n// error: method named: foo is defined twice.\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n上面代码中，tfoo和tbar都有foo方法，结果traits装饰器报错。\n\n一种解决方法是排除tbar的foo方法。\n\nimport { traits, excludes } from 'traits-decorator';\n\nclass tfoo {\n  foo() { console.log('foo') }\n}\n\nconst tbar = {\n  bar() { console.log('bar') },\n  foo() { console.log('foo') }\n};\n\n@traits(tfoo, tbar::excludes('foo'))\nclass myclass { }\n\nlet obj = new myclass();\nobj.foo() // foo\nobj.bar() // bar\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n上面代码使用绑定运算符（::）在tbar上排除foo方法，混入时就不会报错了。\n\n另一种方法是为tbar的foo方法起一个别名。\n\nimport { traits, alias } from 'traits-decorator';\n\nclass tfoo {\n  foo() { console.log('foo') }\n}\n\nconst tbar = {\n  bar() { console.log('bar') },\n  foo() { console.log('foo') }\n};\n\n@traits(tfoo, tbar::alias({foo: 'aliasfoo'}))\nclass myclass { }\n\nlet obj = new myclass();\nobj.foo() // foo\nobj.aliasfoo() // foo\nobj.bar() // bar\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\n上面代码为tbar的foo方法起了别名aliasfoo，于是myclass也可以混入tbar的foo方法了。\n\nalias和excludes方法，可以结合起来使用。\n\n@traits(texample::excludes('foo','bar')::alias({baz:'examplebaz'}))\nclass myclass {}\n\n\n1\n2\n\n\n上面代码排除了texample的foo方法和bar方法，为baz方法起了别名examplebaz。\n\nas方法则为上面的代码提供了另一种写法。\n\n@traits(texample::as({excludes:['foo', 'bar'], alias: {baz: 'examplebaz'}}))\nclass myclass {}\n\n\n1\n2\n",charsets:{cjk:!0}},{title:"函数式编程",frontmatter:{title:"函数式编程",date:"2020-02-09T16:00:30.000Z",permalink:"/pages/1cf50330655efc69",author:"阮一峰",categories:["《ES6 教程》笔记"],tags:["ES6"],readingShow:"top"},regularPath:"/06.%E4%B9%A6%E7%B1%8D/05.%E3%80%8AES6%20%E6%95%99%E7%A8%8B%E3%80%8B%E7%AC%94%E8%AE%B0/31.%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B.html",relativePath:"06.书籍/05.《ES6 教程》笔记/31.函数式编程.md",key:"v-f0a23c42",path:"/pages/1cf50330655efc69/",headers:[{level:2,title:"柯里化",slug:"柯里化",normalizedTitle:"柯里化",charIndex:206},{level:2,title:"函数合成",slug:"函数合成",normalizedTitle:"函数合成",charIndex:608},{level:2,title:"参数倒置",slug:"参数倒置",normalizedTitle:"参数倒置",charIndex:865},{level:2,title:"执行边界",slug:"执行边界",normalizedTitle:"执行边界",charIndex:1317},{level:2,title:"队列操作",slug:"队列操作",normalizedTitle:"队列操作",charIndex:1852},{level:2,title:"合并操作",slug:"合并操作",normalizedTitle:"合并操作",charIndex:2317},{level:2,title:"配对操作",slug:"配对操作",normalizedTitle:"配对操作",charIndex:2660},{level:2,title:"参考链接",slug:"参考链接",normalizedTitle:"参考链接",charIndex:3461}],excerpt:'<h1 id="函数式编程"><a class="header-anchor" href="#函数式编程">#</a> 函数式编程</h1>\n<p>JavaScript 语言从一诞生，就具有函数式编程的烙印。它将函数作为一种独立的数据类型，与其他数据类型处于完全平等的地位。在 JavaScript 语言中，你可以采用面向对象编程，也可以采用函数式编程。有人甚至说，JavaScript 是有史以来第一种被大规模采用的函数式编程语言。</p>\n',lastUpdated:"2022/9/22 下午4:28:09",lastUpdatedTimestamp:1663835289e3,headersStr:"柯里化 函数合成 参数倒置 执行边界 队列操作 合并操作 配对操作 参考链接",content:"# 函数式编程\n\nJavaScript 语言从一诞生，就具有函数式编程的烙印。它将函数作为一种独立的数据类型，与其他数据类型处于完全平等的地位。在 JavaScript 语言中，你可以采用面向对象编程，也可以采用函数式编程。有人甚至说，JavaScript 是有史以来第一种被大规模采用的函数式编程语言。 ES6 的种种新增功能，使得函数式编程变得更方便、更强大。本章介绍 ES6 如何进行函数式编程。\n\n\n# 柯里化\n\n柯里化（currying）指的是将一个多参数的函数拆分成一系列函数，每个拆分后的函数都只接受一个参数（unary）。\n\nfunction add (a, b) {\n  return a + b;\n}\n\nadd(1, 1) // 2\n\n\n1\n2\n3\n4\n5\n\n\n上面代码中，函数add接受两个参数a和b。\n\n柯里化就是将上面的函数拆分成两个函数，每个函数都只接受一个参数。\n\nfunction add (a) {\n  return function (b) {\n    return a + b;\n  }\n}\n// 或者采用箭头函数写法\nconst add = x => y => x + y;\n\nconst f = add(1);\nf(1) // 2\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n上面代码中，函数add只接受一个参数a，返回一个函数f。函数f也只接受一个参数b。\n\n\n# 函数合成\n\n函数合成（function composition）指的是，将多个函数合成一个函数。\n\nconst compose = f => g => x => f(g(x));\n\nconst f = compose (x => x * 4) (x => x + 3);\nf(2) // 20\n\n\n1\n2\n3\n4\n\n\n上面代码中，compose就是一个函数合成器，用于将两个函数合成一个函数。\n\n可以发现，柯里化与函数合成有着密切的联系。前者用于将一个函数拆成多个函数，后者用于将多个函数合并成一个函数。\n\n\n# 参数倒置\n\n参数倒置（flip）指的是改变函数前两个参数的顺序。\n\nvar divide = (a, b) => a / b;\nvar flip = f.flip(divide);\n\nflip(10, 5) // 0.5\nflip(1, 10) // 10\n\nvar three = (a, b, c) => [a, b, c];\nvar flip = f.flip(three);\nflip(1, 2, 3); // => [2, 1, 3]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n上面代码中，如果按照正常的参数顺序，10 除以 5 等于 2。但是，参数倒置以后得到的新函数，结果就是 5 除以 10，结果得到 0.5。如果原函数有 3 个参数，则只颠倒前两个参数的位置。\n\n参数倒置的代码非常简单。\n\nlet f = {};\nf.flip =\n  fn =>\n    (a, b, ...args) => fn(b, a, ...args.reverse());\n\n\n1\n2\n3\n4\n\n\n\n# 执行边界\n\n执行边界（until）指的是函数执行到满足条件为止。\n\nlet condition = x => x > 100;\nlet inc = x => x + 1;\nlet until = f.until(condition, inc);\n\nuntil(0) // 101\n\ncondition = x => x === 5;\nuntil = f.until(condition, inc);\n\nuntil(3) // 5\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n上面代码中，第一段的条件是执行到x大于 100 为止，所以x初值为 0 时，会一直执行到 101。第二段的条件是执行到等于 5 为止，所以x最后的值是 5。\n\n执行边界的实现如下。\n\nlet f = {};\nf.until = (condition, f) =>\n  (...args) => {\n    var r = f.apply(null, args);\n    return condition(r) ? r : f.until(condition, f)(r);\n  };\n\n\n1\n2\n3\n4\n5\n6\n\n\n上面代码的关键就是，如果满足条件就返回结果，否则不断递归执行。\n\n\n# 队列操作\n\n队列（list）操作包括以下几种。\n\n * head： 取出队列的第一个非空成员。\n * last： 取出有限队列的最后一个非空成员。\n * tail： 取出除了“队列头”以外的其他非空成员。\n * init： 取出除了“队列尾”以外的其他非空成员。\n\n下面是例子。\n\nf.head(5, 27, 3, 1) // 5\nf.last(5, 27, 3, 1) // 1\nf.tail(5, 27, 3, 1) // [27, 3, 1]\nf.init(5, 27, 3, 1) // [5, 27, 3]\n\n\n1\n2\n3\n4\n\n\n这些方法的实现如下。\n\nlet f = {};\nf.head = (...xs) => xs[0];\nf.last = (...xs) => xs.slice(-1);\nf.tail = (...xs) => Array.prototype.slice.call(xs, 1);\nf.init = (...xs) => xs.slice(0, -1);\n\n\n1\n2\n3\n4\n5\n\n\n\n# 合并操作\n\n合并操作分为concat和concatMap两种。前者就是将多个数组合成一个，后者则是先处理一下参数，然后再将处理结果合成一个数组。\n\nf.concat([5], [27], [3]) // [5, 27, 3]\nf.concatMap(x => 'hi ' + x, 1, [[2]], 3) // ['hi 1', 'hi 2', 'hi 3']\n\n\n1\n2\n\n\n这两种方法的实现代码如下。\n\nlet f = {};\nf.concat =\n  (...xs) => xs.reduce((a, b) => a.concat(b));\nf.concatMap =\n  (f, ...xs) => f.concat(xs.map(f));\n\n\n1\n2\n3\n4\n5\n\n\n\n# 配对操作\n\n配对操作分为zip和zipWith两种方法。zip操作将两个队列的成员，一一配对，合成一个新的队列。如果两个队列不等长，较长的那个队列多出来的成员，会被忽略。zipWith操作的第一个参数是一个函数，然后会将后面的队列成员一一配对，输入该函数，返回值就组成一个新的队列。\n\n下面是例子。\n\nlet a = [0, 1, 2];\nlet b = [3, 4, 5];\nlet c = [6, 7, 8];\n\nf.zip(a, b) // [[0, 3], [1, 4], [2, 5]]\nf.zipWith((a, b) => a + b, a, b, c) // [9, 12, 15]\n\n\n1\n2\n3\n4\n5\n6\n\n\n上面代码中，zipWith方法的第一个参数是一个求和函数，它将后面三个队列的成员，一一配对进行相加。\n\n这两个方法的实现如下。\n\nlet f = {};\n\nf.zip = (...xs) => {\n  let r = [];\n  let nple = [];\n  let length = Math.min.apply(null, xs.map(x => x.length));\n\n  for (var i = 0; i < length; i++) {\n    xs.forEach(\n      x => nple.push(x[i])\n    );\n\n    r.push(nple);\n    nple = [];\n  }\n\n  return r;\n};\n\nf.zipWith = (op, ...xs) =>\n  f.zip.apply(null, xs).map(\n    (x) => x.reduce(op)\n  );\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n\n\n\n# 参考链接\n\n * Mateo Gianolio, Haskell in ES6: Part 1",normalizedContent:"# 函数式编程\n\njavascript 语言从一诞生，就具有函数式编程的烙印。它将函数作为一种独立的数据类型，与其他数据类型处于完全平等的地位。在 javascript 语言中，你可以采用面向对象编程，也可以采用函数式编程。有人甚至说，javascript 是有史以来第一种被大规模采用的函数式编程语言。 es6 的种种新增功能，使得函数式编程变得更方便、更强大。本章介绍 es6 如何进行函数式编程。\n\n\n# 柯里化\n\n柯里化（currying）指的是将一个多参数的函数拆分成一系列函数，每个拆分后的函数都只接受一个参数（unary）。\n\nfunction add (a, b) {\n  return a + b;\n}\n\nadd(1, 1) // 2\n\n\n1\n2\n3\n4\n5\n\n\n上面代码中，函数add接受两个参数a和b。\n\n柯里化就是将上面的函数拆分成两个函数，每个函数都只接受一个参数。\n\nfunction add (a) {\n  return function (b) {\n    return a + b;\n  }\n}\n// 或者采用箭头函数写法\nconst add = x => y => x + y;\n\nconst f = add(1);\nf(1) // 2\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n上面代码中，函数add只接受一个参数a，返回一个函数f。函数f也只接受一个参数b。\n\n\n# 函数合成\n\n函数合成（function composition）指的是，将多个函数合成一个函数。\n\nconst compose = f => g => x => f(g(x));\n\nconst f = compose (x => x * 4) (x => x + 3);\nf(2) // 20\n\n\n1\n2\n3\n4\n\n\n上面代码中，compose就是一个函数合成器，用于将两个函数合成一个函数。\n\n可以发现，柯里化与函数合成有着密切的联系。前者用于将一个函数拆成多个函数，后者用于将多个函数合并成一个函数。\n\n\n# 参数倒置\n\n参数倒置（flip）指的是改变函数前两个参数的顺序。\n\nvar divide = (a, b) => a / b;\nvar flip = f.flip(divide);\n\nflip(10, 5) // 0.5\nflip(1, 10) // 10\n\nvar three = (a, b, c) => [a, b, c];\nvar flip = f.flip(three);\nflip(1, 2, 3); // => [2, 1, 3]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n上面代码中，如果按照正常的参数顺序，10 除以 5 等于 2。但是，参数倒置以后得到的新函数，结果就是 5 除以 10，结果得到 0.5。如果原函数有 3 个参数，则只颠倒前两个参数的位置。\n\n参数倒置的代码非常简单。\n\nlet f = {};\nf.flip =\n  fn =>\n    (a, b, ...args) => fn(b, a, ...args.reverse());\n\n\n1\n2\n3\n4\n\n\n\n# 执行边界\n\n执行边界（until）指的是函数执行到满足条件为止。\n\nlet condition = x => x > 100;\nlet inc = x => x + 1;\nlet until = f.until(condition, inc);\n\nuntil(0) // 101\n\ncondition = x => x === 5;\nuntil = f.until(condition, inc);\n\nuntil(3) // 5\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n上面代码中，第一段的条件是执行到x大于 100 为止，所以x初值为 0 时，会一直执行到 101。第二段的条件是执行到等于 5 为止，所以x最后的值是 5。\n\n执行边界的实现如下。\n\nlet f = {};\nf.until = (condition, f) =>\n  (...args) => {\n    var r = f.apply(null, args);\n    return condition(r) ? r : f.until(condition, f)(r);\n  };\n\n\n1\n2\n3\n4\n5\n6\n\n\n上面代码的关键就是，如果满足条件就返回结果，否则不断递归执行。\n\n\n# 队列操作\n\n队列（list）操作包括以下几种。\n\n * head： 取出队列的第一个非空成员。\n * last： 取出有限队列的最后一个非空成员。\n * tail： 取出除了“队列头”以外的其他非空成员。\n * init： 取出除了“队列尾”以外的其他非空成员。\n\n下面是例子。\n\nf.head(5, 27, 3, 1) // 5\nf.last(5, 27, 3, 1) // 1\nf.tail(5, 27, 3, 1) // [27, 3, 1]\nf.init(5, 27, 3, 1) // [5, 27, 3]\n\n\n1\n2\n3\n4\n\n\n这些方法的实现如下。\n\nlet f = {};\nf.head = (...xs) => xs[0];\nf.last = (...xs) => xs.slice(-1);\nf.tail = (...xs) => array.prototype.slice.call(xs, 1);\nf.init = (...xs) => xs.slice(0, -1);\n\n\n1\n2\n3\n4\n5\n\n\n\n# 合并操作\n\n合并操作分为concat和concatmap两种。前者就是将多个数组合成一个，后者则是先处理一下参数，然后再将处理结果合成一个数组。\n\nf.concat([5], [27], [3]) // [5, 27, 3]\nf.concatmap(x => 'hi ' + x, 1, [[2]], 3) // ['hi 1', 'hi 2', 'hi 3']\n\n\n1\n2\n\n\n这两种方法的实现代码如下。\n\nlet f = {};\nf.concat =\n  (...xs) => xs.reduce((a, b) => a.concat(b));\nf.concatmap =\n  (f, ...xs) => f.concat(xs.map(f));\n\n\n1\n2\n3\n4\n5\n\n\n\n# 配对操作\n\n配对操作分为zip和zipwith两种方法。zip操作将两个队列的成员，一一配对，合成一个新的队列。如果两个队列不等长，较长的那个队列多出来的成员，会被忽略。zipwith操作的第一个参数是一个函数，然后会将后面的队列成员一一配对，输入该函数，返回值就组成一个新的队列。\n\n下面是例子。\n\nlet a = [0, 1, 2];\nlet b = [3, 4, 5];\nlet c = [6, 7, 8];\n\nf.zip(a, b) // [[0, 3], [1, 4], [2, 5]]\nf.zipwith((a, b) => a + b, a, b, c) // [9, 12, 15]\n\n\n1\n2\n3\n4\n5\n6\n\n\n上面代码中，zipwith方法的第一个参数是一个求和函数，它将后面三个队列的成员，一一配对进行相加。\n\n这两个方法的实现如下。\n\nlet f = {};\n\nf.zip = (...xs) => {\n  let r = [];\n  let nple = [];\n  let length = math.min.apply(null, xs.map(x => x.length));\n\n  for (var i = 0; i < length; i++) {\n    xs.foreach(\n      x => nple.push(x[i])\n    );\n\n    r.push(nple);\n    nple = [];\n  }\n\n  return r;\n};\n\nf.zipwith = (op, ...xs) =>\n  f.zip.apply(null, xs).map(\n    (x) => x.reduce(op)\n  );\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n\n\n\n# 参考链接\n\n * mateo gianolio, haskell in es6: part 1",charsets:{cjk:!0}},{title:"Mixin",frontmatter:{title:"Mixin",date:"2020-02-09T16:00:30.000Z",permalink:"/pages/6a8e2dc558da1b39",author:"阮一峰",categories:["《ES6 教程》笔记"],tags:["ES6"],readingShow:"top"},regularPath:"/06.%E4%B9%A6%E7%B1%8D/05.%E3%80%8AES6%20%E6%95%99%E7%A8%8B%E3%80%8B%E7%AC%94%E8%AE%B0/32.Mixin.html",relativePath:"06.书籍/05.《ES6 教程》笔记/32.Mixin.md",key:"v-ae521f96",path:"/pages/6a8e2dc558da1b39/",headers:[{level:2,title:"含义",slug:"含义",normalizedTitle:"含义",charIndex:835},{level:2,title:"Trait",slug:"trait",normalizedTitle:"trait",charIndex:2127}],excerpt:'<h1 id="mixin"><a class="header-anchor" href="#mixin">#</a> Mixin</h1>\n<p>JavaScript 语言的设计是单一继承，即子类只能继承一个父类，不允许继承多个父类。这种设计保证了对象继承的层次结构是树状的，而不是复杂的<a href="https://en.wikipedia.org/wiki/Multiple_inheritance#The_diamond_problem" target="_blank" rel="noopener noreferrer">网状结构<OutboundLink/></a>。</p>\n',lastUpdated:"2022/9/22 下午4:28:09",lastUpdatedTimestamp:1663835289e3,headersStr:"含义 Trait",content:"# Mixin\n\nJavaScript 语言的设计是单一继承，即子类只能继承一个父类，不允许继承多个父类。这种设计保证了对象继承的层次结构是树状的，而不是复杂的网状结构。 但是，这大大降低了编程的灵活性。因为实际开发中，有时不可避免，子类需要继承多个父类。举例来说，“猫”可以继承“哺乳类动物”，也可以继承“宠物”。\n\n各种单一继承的编程语言，有不同的多重继承解决方案。比如，Java 语言也是子类只能继承一个父类，但是还允许继承多个界面（interface），这样就间接实现了多重继承。Interface 与父类一样，也是一个类，只不过它只定义接口（method signature），不定义实现，因此又被称为“抽象类”。凡是继承于 Interface 的方法，都必须自己定义实现，否则就会报错。这样就避免了多重继承的最大问题：多个父类的同名方法的碰撞（naming collision）。\n\nJavaScript 语言没有采用 Interface 的方案，而是通过代理（delegation）实现了从其他类引入方法。\n\nvar Enumerable_first = function () {\n  this.first = function () {\n    return this[0];\n  };\n};\n\nvar list = [\"foo\", \"bar\", \"baz\"];\nEnumerable_first.call(list); // explicit delegation\nlist.first() // \"foo\"\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n上面代码中，list是一个数组，本身并没有first方法。通过call方法，可以把Enumerable_first里面的方法，绑定到list，从而list就具有first方法。这就叫做“代理”（delegation），list对象代理了Enumerable_first的first方法。\n\n\n# 含义\n\nMixin 这个名字来自于冰淇淋，在基本口味的冰淇淋上面混入其他口味，这就叫做 Mix-in。\n\n它允许向一个类里面注入一些代码，使得一个类的功能能够“混入”另一个类。实质上是多重继承的一种解决方案，但是避免了多重继承的复杂性，而且有利于代码复用。\n\nMixin 就是一个正常的类，不仅定义了接口，还定义了接口的实现。\n\n子类通过在this对象上面绑定方法，达到多重继承的目的。\n\n很多库提供了 Mixin 功能。下面以 Lodash 为例。\n\nfunction vowels(string) {\n  return /[aeiou]/i.test(this.value);\n}\n\nvar obj = { value: 'hello' };\n_.mixin(obj, {vowels: vowels})\nobj.vowels() // true\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n上面代码通过 Lodash 库的_.mixin方法，让obj对象继承了vowels方法。\n\nUnderscore 的类似方法是_.extend。\n\nvar Person = function (fName, lName) {\n  this.firstName = fName;\n  this.lastName = lName;\n}\n\nvar sam = new Person('Sam', 'Lowry');\n\nvar NameMixin = {\n  fullName: function () {\n    return this.firstName + ' ' + this.lastName;\n  },\n  rename: function(first, last) {\n    this.firstName = first;\n    this.lastName = last;\n    return this;\n  }\n};\n_.extend(Person.prototype, NameMixin);\nsam.rename('Samwise', 'Gamgee');\nsam.fullName() // \"Samwise Gamgee\"\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n\n上面代码通过_.extend方法，在sam对象上面（准确说是它的原型对象Person.prototype上面），混入了NameMixin类。\n\nextend方法的实现非常简单。\n\nfunction extend(destination, source) {\n  for (var k in source) {\n    if (source.hasOwnProperty(k)) {\n      destination[k] = source[k];\n    }\n  }\n  return destination;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n上面代码将source对象的所有方法，添加到destination对象。\n\n\n# Trait\n\nTrait 是另外一种多重继承的解决方案。它与 Mixin 很相似，但是有一些细微的差别。\n\n * Mixin 可以包含状态（state），Trait 不包含，即 Trait 里面的方法都是互不相干，可以线性包含的。比如，Trait1包含方法A和B，Trait2继承了Trait1，同时还包含一个自己的方法C，实际上就等同于直接包含方法A、B、C。\n * 对于同名方法的碰撞，Mixin 包含了解决规则，Trait 则是报错。",normalizedContent:"# mixin\n\njavascript 语言的设计是单一继承，即子类只能继承一个父类，不允许继承多个父类。这种设计保证了对象继承的层次结构是树状的，而不是复杂的网状结构。 但是，这大大降低了编程的灵活性。因为实际开发中，有时不可避免，子类需要继承多个父类。举例来说，“猫”可以继承“哺乳类动物”，也可以继承“宠物”。\n\n各种单一继承的编程语言，有不同的多重继承解决方案。比如，java 语言也是子类只能继承一个父类，但是还允许继承多个界面（interface），这样就间接实现了多重继承。interface 与父类一样，也是一个类，只不过它只定义接口（method signature），不定义实现，因此又被称为“抽象类”。凡是继承于 interface 的方法，都必须自己定义实现，否则就会报错。这样就避免了多重继承的最大问题：多个父类的同名方法的碰撞（naming collision）。\n\njavascript 语言没有采用 interface 的方案，而是通过代理（delegation）实现了从其他类引入方法。\n\nvar enumerable_first = function () {\n  this.first = function () {\n    return this[0];\n  };\n};\n\nvar list = [\"foo\", \"bar\", \"baz\"];\nenumerable_first.call(list); // explicit delegation\nlist.first() // \"foo\"\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n上面代码中，list是一个数组，本身并没有first方法。通过call方法，可以把enumerable_first里面的方法，绑定到list，从而list就具有first方法。这就叫做“代理”（delegation），list对象代理了enumerable_first的first方法。\n\n\n# 含义\n\nmixin 这个名字来自于冰淇淋，在基本口味的冰淇淋上面混入其他口味，这就叫做 mix-in。\n\n它允许向一个类里面注入一些代码，使得一个类的功能能够“混入”另一个类。实质上是多重继承的一种解决方案，但是避免了多重继承的复杂性，而且有利于代码复用。\n\nmixin 就是一个正常的类，不仅定义了接口，还定义了接口的实现。\n\n子类通过在this对象上面绑定方法，达到多重继承的目的。\n\n很多库提供了 mixin 功能。下面以 lodash 为例。\n\nfunction vowels(string) {\n  return /[aeiou]/i.test(this.value);\n}\n\nvar obj = { value: 'hello' };\n_.mixin(obj, {vowels: vowels})\nobj.vowels() // true\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n上面代码通过 lodash 库的_.mixin方法，让obj对象继承了vowels方法。\n\nunderscore 的类似方法是_.extend。\n\nvar person = function (fname, lname) {\n  this.firstname = fname;\n  this.lastname = lname;\n}\n\nvar sam = new person('sam', 'lowry');\n\nvar namemixin = {\n  fullname: function () {\n    return this.firstname + ' ' + this.lastname;\n  },\n  rename: function(first, last) {\n    this.firstname = first;\n    this.lastname = last;\n    return this;\n  }\n};\n_.extend(person.prototype, namemixin);\nsam.rename('samwise', 'gamgee');\nsam.fullname() // \"samwise gamgee\"\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n\n上面代码通过_.extend方法，在sam对象上面（准确说是它的原型对象person.prototype上面），混入了namemixin类。\n\nextend方法的实现非常简单。\n\nfunction extend(destination, source) {\n  for (var k in source) {\n    if (source.hasownproperty(k)) {\n      destination[k] = source[k];\n    }\n  }\n  return destination;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n上面代码将source对象的所有方法，添加到destination对象。\n\n\n# trait\n\ntrait 是另外一种多重继承的解决方案。它与 mixin 很相似，但是有一些细微的差别。\n\n * mixin 可以包含状态（state），trait 不包含，即 trait 里面的方法都是互不相干，可以线性包含的。比如，trait1包含方法a和b，trait2继承了trait1，同时还包含一个自己的方法c，实际上就等同于直接包含方法a、b、c。\n * 对于同名方法的碰撞，mixin 包含了解决规则，trait 则是报错。",charsets:{cjk:!0}},{title:"读懂 ECMAScript 规格",frontmatter:{title:"读懂 ECMAScript 规格",date:"2020-02-09T16:00:29.000Z",permalink:"/pages/32c35f7651d6e58e",author:"阮一峰",categories:["《ES6 教程》笔记"],tags:["ES6"],readingShow:"top"},regularPath:"/06.%E4%B9%A6%E7%B1%8D/05.%E3%80%8AES6%20%E6%95%99%E7%A8%8B%E3%80%8B%E7%AC%94%E8%AE%B0/26.%E8%AF%BB%E6%87%82%20ECMAScript%20%E8%A7%84%E6%A0%BC.html",relativePath:"06.书籍/05.《ES6 教程》笔记/26.读懂 ECMAScript 规格.md",key:"v-7ef3ec0a",path:"/pages/32c35f7651d6e58e/",headers:[{level:2,title:"概述",slug:"概述",normalizedTitle:"概述",charIndex:23},{level:2,title:"术语",slug:"术语",normalizedTitle:"术语",charIndex:819},{level:3,title:"抽象操作",slug:"抽象操作",normalizedTitle:"抽象操作",charIndex:718},{level:3,title:"Record 和 field",slug:"record-和-field",normalizedTitle:"record 和 field",charIndex:1122},{level:3,title:"[[Notation]]",slug:"notation",normalizedTitle:"[[notation]]",charIndex:1264},{level:3,title:"Completion Record",slug:"completion-record",normalizedTitle:"completion record",charIndex:1668},{level:2,title:"抽象操作的标准流程",slug:"抽象操作的标准流程",normalizedTitle:"抽象操作的标准流程",charIndex:2e3},{level:2,title:"相等运算符",slug:"相等运算符",normalizedTitle:"相等运算符",charIndex:2930},{level:2,title:"数组的空位",slug:"数组的空位",normalizedTitle:"数组的空位",charIndex:4941},{level:2,title:"数组的 map 方法",slug:"数组的-map-方法",normalizedTitle:"数组的 map 方法",charIndex:6543}],excerpt:'<h1 id="读懂-ecmascript-规格"><a class="header-anchor" href="#读懂-ecmascript-规格">#</a> 读懂 ECMAScript 规格</h1>\n<h2 id="概述"><a class="header-anchor" href="#概述">#</a> 概述</h2>\n<p>规格文件是计算机语言的官方标准，详细描述语法规则和实现方法。</p>\n<p>一般来说，没有必要阅读规格，除非你要写编译器。因为规格写得非常抽象和精炼，又缺乏实例，不容易理解，而且对于解决实际的应用问题，帮助不大。但是，如果你遇到疑难的语法问题，实在找不到答案，这时可以去查看规格文件，了解语言标准是怎么说的。规格是解决问题的“最后一招”。</p>\n',lastUpdated:"2022/9/22 下午4:28:09",lastUpdatedTimestamp:1663835289e3,headersStr:"概述 术语 抽象操作 Record 和 field [[Notation]] Completion Record 抽象操作的标准流程 相等运算符 数组的空位 数组的 map 方法",content:'# 读懂 ECMAScript 规格\n\n\n# 概述\n\n规格文件是计算机语言的官方标准，详细描述语法规则和实现方法。\n\n一般来说，没有必要阅读规格，除非你要写编译器。因为规格写得非常抽象和精炼，又缺乏实例，不容易理解，而且对于解决实际的应用问题，帮助不大。但是，如果你遇到疑难的语法问题，实在找不到答案，这时可以去查看规格文件，了解语言标准是怎么说的。规格是解决问题的“最后一招”。 这对 JavaScript 语言很有必要。因为它的使用场景复杂，语法规则不统一，例外很多，各种运行环境的行为不一致，导致奇怪的语法问题层出不穷，任何语法书都不可能囊括所有情况。查看规格，不失为一种解决语法问题的最可靠、最权威的终极方法。\n\n本章介绍如何读懂 ECMAScript 6 的规格文件。\n\nECMAScript 6 的规格，可以在 ECMA 国际标准组织的官方网站（www.ecma-international.org/ecma-262/6.0/）免费下载和在线阅读。\n\n这个规格文件相当庞大，一共有 26 章，A4 打印的话，足足有 545 页。它的特点就是规定得非常细致，每一个语法行为、每一个函数的实现都做了详尽的清晰的描述。基本上，编译器作者只要把每一步翻译成代码就可以了。这很大程度上，保证了所有 ES6 实现都有一致的行为。\n\nECMAScript 6 规格的 26 章之中，第 1 章到第 3 章是对文件本身的介绍，与语言关系不大。第 4 章是对这门语言总体设计的描述，有兴趣的读者可以读一下。第 5 章到第 8 章是语言宏观层面的描述。第 5 章是规格的名词解释和写法的介绍，第 6 章介绍数据类型，第 7 章介绍语言内部用到的抽象操作，第 8 章介绍代码如何运行。第 9 章到第 26 章介绍具体的语法。\n\n对于一般用户来说，除了第 4 章，其他章节都涉及某一方面的细节，不用通读，只要在用到的时候，查阅相关章节即可。\n\n\n# 术语\n\nES6 规格使用了一些专门的术语，了解这些术语，可以帮助你读懂规格。本节介绍其中的几个。\n\n\n# 抽象操作\n\n所谓“抽象操作”（abstract operations）就是引擎的一些内部方法，外部不能调用。规格定义了一系列的抽象操作，规定了它们的行为，留给各种引擎自己去实现。\n\n举例来说，Boolean(value)的算法，第一步是这样的。\n\n>  1. Let b be ToBoolean(value).\n\n这里的ToBoolean就是一个抽象操作，是引擎内部求出布尔值的算法。\n\n许多函数的算法都会多次用到同样的步骤，所以 ES6 规格将它们抽出来，定义成“抽象操作”，方便描述。\n\n\n# Record 和 field\n\nES6 规格将键值对（key-value map）的数据结构称为 Record，其中的每一组键值对称为 field。这就是说，一个 Record 由多个 field 组成，而每个 field 都包含一个键名（key）和一个键值（value）。\n\n\n# [[Notation]]\n\nES6 规格大量使用[[Notation]]这种书写法，比如[[Value]]、[[Writable]]、[[Get]]、[[Set]]等等。它用来指代 field 的键名。\n\n举例来说，obj是一个 Record，它有一个Prototype属性。ES6 规格不会写obj.Prototype，而是写obj.[[Prototype]]。一般来说，使用[[Notation]]这种书写法的属性，都是对象的内部属性。\n\n所有的 JavaScript 函数都有一个内部属性[[Call]]，用来运行该函数。\n\nF.[[Call]](V, argumentsList)\n\n\n1\n\n\n上面代码中，F是一个函数对象，[[Call]]是它的内部方法，F.[[call]]()表示运行该函数，V表示[[Call]]运行时this的值，argumentsList则是调用时传入函数的参数。\n\n\n# Completion Record\n\n每一个语句都会返回一个 Completion Record，表示运行结果。每个 Completion Record 有一个[[Type]]属性，表示运行结果的类型。\n\n[[Type]]属性有五种可能的值。\n\n * normal\n * return\n * throw\n * break\n * continue\n\n如果[[Type]]的值是normal，就称为 normal completion，表示运行正常。其他的值，都称为 abrupt completion。其中，开发者只需要关注[[Type]]为throw的情况，即运行出错；break、continue、return这三个值都只出现在特定场景，可以不用考虑。\n\n\n# 抽象操作的标准流程\n\n抽象操作的运行流程，一般是下面这样。\n\n>  1. Let resultCompletionRecord be AbstractOp().\n>  2. If resultCompletionRecord is an abrupt completion, return resultCompletionRecord.\n>  3. Let result be resultCompletionRecord.[[Value]].\n>  4. return result.\n\n上面的第一步是调用抽象操作AbstractOp()，得到resultCompletionRecord，这是一个 Completion Record。第二步，如果这个 Record 属于 abrupt completion，就将resultCompletionRecord返回给用户。如果此处没有返回，就表示运行结果正常，所得的值存放在resultCompletionRecord.[[Value]]属性。第三步，将这个值记为result。第四步，将result返回给用户。\n\nES6 规格将这个标准流程，使用简写的方式表达。\n\n>  1. Let result be AbstractOp().\n>  2. ReturnIfAbrupt(result).\n>  3. return result.\n\n这个简写方式里面的ReturnIfAbrupt(result)，就代表了上面的第二步和第三步，即如果有报错，就返回错误，否则取出值。\n\n甚至还有进一步的简写格式。\n\n>  1. Let result be ? AbstractOp().\n>  2. return result.\n\n上面流程的?，就代表AbstractOp()可能会报错。一旦报错，就返回错误，否则取出值。\n\n除了?，ES 6 规格还使用另一个简写符号!。\n\n>  1. Let result be ! AbstractOp().\n>  2. return result.\n\n上面流程的!，代表AbstractOp()不会报错，返回的一定是 normal completion，总是可以取出值。\n\n\n# 相等运算符\n\n下面通过一些例子，介绍如何使用这份规格。\n\n相等运算符（==）是一个很让人头痛的运算符，它的语法行为多变，不符合直觉。这个小节就看看规格怎么规定它的行为。\n\n请看下面这个表达式，请问它的值是多少。\n\n0 == null\n\n\n1\n\n\n如果你不确定答案，或者想知道语言内部怎么处理，就可以去查看规格，7.2.12 小节是对相等运算符（==）的描述。\n\n规格对每一种语法行为的描述，都分成两部分：先是总体的行为描述，然后是实现的算法细节。相等运算符的总体描述，只有一句话。\n\n> “The comparison x == y, where x and y are values, produces true or false.”\n\n上面这句话的意思是，相等运算符用于比较两个值，返回true或false。\n\n下面是算法细节。\n\n>  1.  ReturnIfAbrupt(x).\n>  2.  ReturnIfAbrupt(y).\n>  3.  If Type(x) is the same as Type(y), then\n>      1. Return the result of performing Strict Equality Comparison x === y.\n>  4.  If x is null and y is undefined, return true.\n>  5.  If x is undefined and y is null, return true.\n>  6.  If Type(x) is Number and Type(y) is String, return the result of the comparison x == ToNumber(y).\n>  7.  If Type(x) is String and Type(y) is Number, return the result of the comparison ToNumber(x) == y.\n>  8.  If Type(x) is Boolean, return the result of the comparison ToNumber(x) == y.\n>  9.  If Type(y) is Boolean, return the result of the comparison x == ToNumber(y).\n>  10. If Type(x) is either String, Number, or Symbol and Type(y) is Object, then return the result of the comparison x == ToPrimitive(y).\n>  11. If Type(x) is Object and Type(y) is either String, Number, or Symbol, then return the result of the comparison ToPrimitive(x) == y.\n>  12. Return false.\n\n上面这段算法，一共有 12 步，翻译如下。\n\n>  1.  如果x不是正常值（比如抛出一个错误），中断执行。\n>  2.  如果y不是正常值，中断执行。\n>  3.  如果Type(x)与Type(y)相同，执行严格相等运算x === y。\n>  4.  如果x是null，y是undefined，返回true。\n>  5.  如果x是undefined，y是null，返回true。\n>  6.  如果Type(x)是数值，Type(y)是字符串，返回x == ToNumber(y)的结果。\n>  7.  如果Type(x)是字符串，Type(y)是数值，返回ToNumber(x) == y的结果。\n>  8.  如果Type(x)是布尔值，返回ToNumber(x) == y的结果。\n>  9.  如果Type(y)是布尔值，返回x == ToNumber(y)的结果。\n>  10. 如果Type(x)是字符串或数值或Symbol值，Type(y)是对象，返回x == ToPrimitive(y)的结果。\n>  11. 如果Type(x)是对象，Type(y)是字符串或数值或Symbol值，返回ToPrimitive(x) == y的结果。\n>  12. 返回false。\n\n由于0的类型是数值，null的类型是 Null（这是规格4.3.13 小节的规定，是内部 Type 运算的结果，跟typeof运算符无关）。因此上面的前 11 步都得不到结果，要到第 12 步才能得到false。\n\n0 == null // false\n\n\n1\n\n\n\n# 数组的空位\n\n下面再看另一个例子。\n\nconst a1 = [undefined, undefined, undefined];\nconst a2 = [, , ,];\n\na1.length // 3\na2.length // 3\n\na1[0] // undefined\na2[0] // undefined\n\na1[0] === a2[0] // true\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n上面代码中，数组a1的成员是三个undefined，数组a2的成员是三个空位。这两个数组很相似，长度都是 3，每个位置的成员读取出来都是undefined。\n\n但是，它们实际上存在重大差异。\n\n0 in a1 // true\n0 in a2 // false\n\na1.hasOwnProperty(0) // true\na2.hasOwnProperty(0) // false\n\nObject.keys(a1) // ["0", "1", "2"]\nObject.keys(a2) // []\n\na1.map(n => 1) // [1, 1, 1]\na2.map(n => 1) // [, , ,]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n上面代码一共列出了四种运算，数组a1和a2的结果都不一样。前三种运算（in运算符、数组的hasOwnProperty方法、Object.keys方法）都说明，数组a2取不到属性名。最后一种运算（数组的map方法）说明，数组a2没有发生遍历。\n\n为什么a1与a2成员的行为不一致？数组的成员是undefined或空位，到底有什么不同？\n\n规格的12.2.5 小节《数组的初始化》给出了答案。\n\n> “Array elements may be elided at the beginning, middle or end of the element list. Whenever a comma in the element list is not preceded by an AssignmentExpression (i.e., a comma at the beginning or after another comma), the missing array element contributes to the length of the Array and increases the index of subsequent elements. Elided array elements are not defined. If an element is elided at the end of an array, that element does not contribute to the length of the Array.”\n\n翻译如下。\n\n> "数组成员可以省略。只要逗号前面没有任何表达式，数组的length属性就会加 1，并且相应增加其后成员的位置索引。被省略的成员不会被定义。如果被省略的成员是数组最后一个成员，则不会导致数组length属性增加。”\n\n上面的规格说得很清楚，数组的空位会反映在length属性，也就是说空位有自己的位置，但是这个位置的值是未定义，即这个值是不存在的。如果一定要读取，结果就是undefined（因为undefined在 JavaScript 语言中表示不存在）。\n\n这就解释了为什么in运算符、数组的hasOwnProperty方法、Object.keys方法，都取不到空位的属性名。因为这个属性名根本就不存在，规格里面没说要为空位分配属性名(位置索引），只说要为下一个元素的位置索引加 1。\n\n至于为什么数组的map方法会跳过空位，请看下一节。\n\n\n# 数组的 map 方法\n\n规格的22.1.3.15 小节定义了数组的map方法。该小节先是总体描述map方法的行为，里面没有提到数组空位。\n\n后面的算法描述是这样的。\n\n>  1.  Let O be ToObject(this value).\n>  2.  ReturnIfAbrupt(O).\n>  3.  Let len be ToLength(Get(O, "length")).\n>  4.  ReturnIfAbrupt(len).\n>  5.  If IsCallable(callbackfn) is false, throw a TypeError exception.\n>  6.  If thisArg was supplied, let T be thisArg; else let T be undefined.\n>  7.  Let A be ArraySpeciesCreate(O, len).\n>  8.  ReturnIfAbrupt(A).\n>  9.  Let k be 0.\n>  10. Repeat, while k < len\n>      1. Let Pk be ToString(k).\n>      2. Let kPresent be HasProperty(O, Pk).\n>      3. ReturnIfAbrupt(kPresent).\n>      4. If kPresent is true, then\n>         1. Let kValue be Get(O, Pk).\n>         2. ReturnIfAbrupt(kValue).\n>         3. Let mappedValue be Call(callbackfn, T, «kValue, k, O»).\n>         4. ReturnIfAbrupt(mappedValue).\n>         5. Let status be CreateDataPropertyOrThrow (A, Pk, mappedValue).\n>         6. ReturnIfAbrupt(status).\n>      5. Increase k by 1.\n>  11. Return A.\n\n翻译如下。\n\n>  1.  得到当前数组的this对象\n>  2.  如果报错就返回\n>  3.  求出当前数组的length属性\n>  4.  如果报错就返回\n>  5.  如果 map 方法的参数callbackfn不可执行，就报错\n>  6.  如果 map 方法的参数之中，指定了this，就让T等于该参数，否则T为undefined\n>  7.  生成一个新的数组A，跟当前数组的length属性保持一致\n>  8.  如果报错就返回\n>  9.  设定k等于 0\n>  10. 只要k小于当前数组的length属性，就重复下面步骤\n>      1. 设定Pk等于ToString(k)，即将K转为字符串\n>      2. 设定kPresent等于HasProperty(O, Pk)，即求当前数组有没有指定属性\n>      3. 如果报错就返回\n>      4. 如果kPresent等于true，则进行下面步骤\n>         1. 设定kValue等于Get(O, Pk)，取出当前数组的指定属性\n>         2. 如果报错就返回\n>         3. 设定mappedValue等于Call(callbackfn, T, «kValue, k, O»)，即执行回调函数\n>         4. 如果报错就返回\n>         5. 设定status等于CreateDataPropertyOrThrow (A, Pk, mappedValue)，即将回调函数的值放入A数组的指定位置\n>         6. 如果报错就返回\n>      5. k增加 1\n>  11. 返回A\n\n仔细查看上面的算法，可以发现，当处理一个全是空位的数组时，前面步骤都没有问题。进入第 10 步中第 2 步时，kPresent会报错，因为空位对应的属性名，对于数组来说是不存在的，因此就会返回，不会进行后面的步骤。\n\nconst arr = [, , ,];\narr.map(n => {\n  console.log(n);\n  return 1;\n}) // [, , ,]\n\n\n1\n2\n3\n4\n5\n\n\n上面代码中，arr是一个全是空位的数组，map方法遍历成员时，发现是空位，就直接跳过，不会进入回调函数。因此，回调函数里面的console.log语句根本不会执行，整个map方法返回一个全是空位的新数组。\n\nV8 引擎对map方法的实现如下，可以看到跟规格的算法描述完全一致。\n\nfunction ArrayMap(f, receiver) {\n  CHECK_OBJECT_COERCIBLE(this, "Array.prototype.map");\n\n  // Pull out the length so that modifications to the length in the\n  // loop will not affect the looping and side effects are visible.\n  var array = TO_OBJECT(this);\n  var length = TO_LENGTH_OR_UINT32(array.length);\n  return InnerArrayMap(f, receiver, array, length);\n}\n\nfunction InnerArrayMap(f, receiver, array, length) {\n  if (!IS_CALLABLE(f)) throw MakeTypeError(kCalledNonCallable, f);\n\n  var accumulator = new InternalArray(length);\n  var is_array = IS_ARRAY(array);\n  var stepping = DEBUG_IS_STEPPING(f);\n  for (var i = 0; i < length; i++) {\n    if (HAS_INDEX(array, i, is_array)) {\n      var element = array[i];\n      // Prepare break slots for debugger step in.\n      if (stepping) %DebugPrepareStepInIfStepping(f);\n      accumulator[i] = %_Call(f, receiver, element, i, array);\n    }\n  }\n  var result = new GlobalArray();\n  %MoveArrayContents(accumulator, result);\n  return result;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n',normalizedContent:'# 读懂 ecmascript 规格\n\n\n# 概述\n\n规格文件是计算机语言的官方标准，详细描述语法规则和实现方法。\n\n一般来说，没有必要阅读规格，除非你要写编译器。因为规格写得非常抽象和精炼，又缺乏实例，不容易理解，而且对于解决实际的应用问题，帮助不大。但是，如果你遇到疑难的语法问题，实在找不到答案，这时可以去查看规格文件，了解语言标准是怎么说的。规格是解决问题的“最后一招”。 这对 javascript 语言很有必要。因为它的使用场景复杂，语法规则不统一，例外很多，各种运行环境的行为不一致，导致奇怪的语法问题层出不穷，任何语法书都不可能囊括所有情况。查看规格，不失为一种解决语法问题的最可靠、最权威的终极方法。\n\n本章介绍如何读懂 ecmascript 6 的规格文件。\n\necmascript 6 的规格，可以在 ecma 国际标准组织的官方网站（www.ecma-international.org/ecma-262/6.0/）免费下载和在线阅读。\n\n这个规格文件相当庞大，一共有 26 章，a4 打印的话，足足有 545 页。它的特点就是规定得非常细致，每一个语法行为、每一个函数的实现都做了详尽的清晰的描述。基本上，编译器作者只要把每一步翻译成代码就可以了。这很大程度上，保证了所有 es6 实现都有一致的行为。\n\necmascript 6 规格的 26 章之中，第 1 章到第 3 章是对文件本身的介绍，与语言关系不大。第 4 章是对这门语言总体设计的描述，有兴趣的读者可以读一下。第 5 章到第 8 章是语言宏观层面的描述。第 5 章是规格的名词解释和写法的介绍，第 6 章介绍数据类型，第 7 章介绍语言内部用到的抽象操作，第 8 章介绍代码如何运行。第 9 章到第 26 章介绍具体的语法。\n\n对于一般用户来说，除了第 4 章，其他章节都涉及某一方面的细节，不用通读，只要在用到的时候，查阅相关章节即可。\n\n\n# 术语\n\nes6 规格使用了一些专门的术语，了解这些术语，可以帮助你读懂规格。本节介绍其中的几个。\n\n\n# 抽象操作\n\n所谓“抽象操作”（abstract operations）就是引擎的一些内部方法，外部不能调用。规格定义了一系列的抽象操作，规定了它们的行为，留给各种引擎自己去实现。\n\n举例来说，boolean(value)的算法，第一步是这样的。\n\n>  1. let b be toboolean(value).\n\n这里的toboolean就是一个抽象操作，是引擎内部求出布尔值的算法。\n\n许多函数的算法都会多次用到同样的步骤，所以 es6 规格将它们抽出来，定义成“抽象操作”，方便描述。\n\n\n# record 和 field\n\nes6 规格将键值对（key-value map）的数据结构称为 record，其中的每一组键值对称为 field。这就是说，一个 record 由多个 field 组成，而每个 field 都包含一个键名（key）和一个键值（value）。\n\n\n# [[notation]]\n\nes6 规格大量使用[[notation]]这种书写法，比如[[value]]、[[writable]]、[[get]]、[[set]]等等。它用来指代 field 的键名。\n\n举例来说，obj是一个 record，它有一个prototype属性。es6 规格不会写obj.prototype，而是写obj.[[prototype]]。一般来说，使用[[notation]]这种书写法的属性，都是对象的内部属性。\n\n所有的 javascript 函数都有一个内部属性[[call]]，用来运行该函数。\n\nf.[[call]](v, argumentslist)\n\n\n1\n\n\n上面代码中，f是一个函数对象，[[call]]是它的内部方法，f.[[call]]()表示运行该函数，v表示[[call]]运行时this的值，argumentslist则是调用时传入函数的参数。\n\n\n# completion record\n\n每一个语句都会返回一个 completion record，表示运行结果。每个 completion record 有一个[[type]]属性，表示运行结果的类型。\n\n[[type]]属性有五种可能的值。\n\n * normal\n * return\n * throw\n * break\n * continue\n\n如果[[type]]的值是normal，就称为 normal completion，表示运行正常。其他的值，都称为 abrupt completion。其中，开发者只需要关注[[type]]为throw的情况，即运行出错；break、continue、return这三个值都只出现在特定场景，可以不用考虑。\n\n\n# 抽象操作的标准流程\n\n抽象操作的运行流程，一般是下面这样。\n\n>  1. let resultcompletionrecord be abstractop().\n>  2. if resultcompletionrecord is an abrupt completion, return resultcompletionrecord.\n>  3. let result be resultcompletionrecord.[[value]].\n>  4. return result.\n\n上面的第一步是调用抽象操作abstractop()，得到resultcompletionrecord，这是一个 completion record。第二步，如果这个 record 属于 abrupt completion，就将resultcompletionrecord返回给用户。如果此处没有返回，就表示运行结果正常，所得的值存放在resultcompletionrecord.[[value]]属性。第三步，将这个值记为result。第四步，将result返回给用户。\n\nes6 规格将这个标准流程，使用简写的方式表达。\n\n>  1. let result be abstractop().\n>  2. returnifabrupt(result).\n>  3. return result.\n\n这个简写方式里面的returnifabrupt(result)，就代表了上面的第二步和第三步，即如果有报错，就返回错误，否则取出值。\n\n甚至还有进一步的简写格式。\n\n>  1. let result be ? abstractop().\n>  2. return result.\n\n上面流程的?，就代表abstractop()可能会报错。一旦报错，就返回错误，否则取出值。\n\n除了?，es 6 规格还使用另一个简写符号!。\n\n>  1. let result be ! abstractop().\n>  2. return result.\n\n上面流程的!，代表abstractop()不会报错，返回的一定是 normal completion，总是可以取出值。\n\n\n# 相等运算符\n\n下面通过一些例子，介绍如何使用这份规格。\n\n相等运算符（==）是一个很让人头痛的运算符，它的语法行为多变，不符合直觉。这个小节就看看规格怎么规定它的行为。\n\n请看下面这个表达式，请问它的值是多少。\n\n0 == null\n\n\n1\n\n\n如果你不确定答案，或者想知道语言内部怎么处理，就可以去查看规格，7.2.12 小节是对相等运算符（==）的描述。\n\n规格对每一种语法行为的描述，都分成两部分：先是总体的行为描述，然后是实现的算法细节。相等运算符的总体描述，只有一句话。\n\n> “the comparison x == y, where x and y are values, produces true or false.”\n\n上面这句话的意思是，相等运算符用于比较两个值，返回true或false。\n\n下面是算法细节。\n\n>  1.  returnifabrupt(x).\n>  2.  returnifabrupt(y).\n>  3.  if type(x) is the same as type(y), then\n>      1. return the result of performing strict equality comparison x === y.\n>  4.  if x is null and y is undefined, return true.\n>  5.  if x is undefined and y is null, return true.\n>  6.  if type(x) is number and type(y) is string, return the result of the comparison x == tonumber(y).\n>  7.  if type(x) is string and type(y) is number, return the result of the comparison tonumber(x) == y.\n>  8.  if type(x) is boolean, return the result of the comparison tonumber(x) == y.\n>  9.  if type(y) is boolean, return the result of the comparison x == tonumber(y).\n>  10. if type(x) is either string, number, or symbol and type(y) is object, then return the result of the comparison x == toprimitive(y).\n>  11. if type(x) is object and type(y) is either string, number, or symbol, then return the result of the comparison toprimitive(x) == y.\n>  12. return false.\n\n上面这段算法，一共有 12 步，翻译如下。\n\n>  1.  如果x不是正常值（比如抛出一个错误），中断执行。\n>  2.  如果y不是正常值，中断执行。\n>  3.  如果type(x)与type(y)相同，执行严格相等运算x === y。\n>  4.  如果x是null，y是undefined，返回true。\n>  5.  如果x是undefined，y是null，返回true。\n>  6.  如果type(x)是数值，type(y)是字符串，返回x == tonumber(y)的结果。\n>  7.  如果type(x)是字符串，type(y)是数值，返回tonumber(x) == y的结果。\n>  8.  如果type(x)是布尔值，返回tonumber(x) == y的结果。\n>  9.  如果type(y)是布尔值，返回x == tonumber(y)的结果。\n>  10. 如果type(x)是字符串或数值或symbol值，type(y)是对象，返回x == toprimitive(y)的结果。\n>  11. 如果type(x)是对象，type(y)是字符串或数值或symbol值，返回toprimitive(x) == y的结果。\n>  12. 返回false。\n\n由于0的类型是数值，null的类型是 null（这是规格4.3.13 小节的规定，是内部 type 运算的结果，跟typeof运算符无关）。因此上面的前 11 步都得不到结果，要到第 12 步才能得到false。\n\n0 == null // false\n\n\n1\n\n\n\n# 数组的空位\n\n下面再看另一个例子。\n\nconst a1 = [undefined, undefined, undefined];\nconst a2 = [, , ,];\n\na1.length // 3\na2.length // 3\n\na1[0] // undefined\na2[0] // undefined\n\na1[0] === a2[0] // true\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n上面代码中，数组a1的成员是三个undefined，数组a2的成员是三个空位。这两个数组很相似，长度都是 3，每个位置的成员读取出来都是undefined。\n\n但是，它们实际上存在重大差异。\n\n0 in a1 // true\n0 in a2 // false\n\na1.hasownproperty(0) // true\na2.hasownproperty(0) // false\n\nobject.keys(a1) // ["0", "1", "2"]\nobject.keys(a2) // []\n\na1.map(n => 1) // [1, 1, 1]\na2.map(n => 1) // [, , ,]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n上面代码一共列出了四种运算，数组a1和a2的结果都不一样。前三种运算（in运算符、数组的hasownproperty方法、object.keys方法）都说明，数组a2取不到属性名。最后一种运算（数组的map方法）说明，数组a2没有发生遍历。\n\n为什么a1与a2成员的行为不一致？数组的成员是undefined或空位，到底有什么不同？\n\n规格的12.2.5 小节《数组的初始化》给出了答案。\n\n> “array elements may be elided at the beginning, middle or end of the element list. whenever a comma in the element list is not preceded by an assignmentexpression (i.e., a comma at the beginning or after another comma), the missing array element contributes to the length of the array and increases the index of subsequent elements. elided array elements are not defined. if an element is elided at the end of an array, that element does not contribute to the length of the array.”\n\n翻译如下。\n\n> "数组成员可以省略。只要逗号前面没有任何表达式，数组的length属性就会加 1，并且相应增加其后成员的位置索引。被省略的成员不会被定义。如果被省略的成员是数组最后一个成员，则不会导致数组length属性增加。”\n\n上面的规格说得很清楚，数组的空位会反映在length属性，也就是说空位有自己的位置，但是这个位置的值是未定义，即这个值是不存在的。如果一定要读取，结果就是undefined（因为undefined在 javascript 语言中表示不存在）。\n\n这就解释了为什么in运算符、数组的hasownproperty方法、object.keys方法，都取不到空位的属性名。因为这个属性名根本就不存在，规格里面没说要为空位分配属性名(位置索引），只说要为下一个元素的位置索引加 1。\n\n至于为什么数组的map方法会跳过空位，请看下一节。\n\n\n# 数组的 map 方法\n\n规格的22.1.3.15 小节定义了数组的map方法。该小节先是总体描述map方法的行为，里面没有提到数组空位。\n\n后面的算法描述是这样的。\n\n>  1.  let o be toobject(this value).\n>  2.  returnifabrupt(o).\n>  3.  let len be tolength(get(o, "length")).\n>  4.  returnifabrupt(len).\n>  5.  if iscallable(callbackfn) is false, throw a typeerror exception.\n>  6.  if thisarg was supplied, let t be thisarg; else let t be undefined.\n>  7.  let a be arrayspeciescreate(o, len).\n>  8.  returnifabrupt(a).\n>  9.  let k be 0.\n>  10. repeat, while k < len\n>      1. let pk be tostring(k).\n>      2. let kpresent be hasproperty(o, pk).\n>      3. returnifabrupt(kpresent).\n>      4. if kpresent is true, then\n>         1. let kvalue be get(o, pk).\n>         2. returnifabrupt(kvalue).\n>         3. let mappedvalue be call(callbackfn, t, «kvalue, k, o»).\n>         4. returnifabrupt(mappedvalue).\n>         5. let status be createdatapropertyorthrow (a, pk, mappedvalue).\n>         6. returnifabrupt(status).\n>      5. increase k by 1.\n>  11. return a.\n\n翻译如下。\n\n>  1.  得到当前数组的this对象\n>  2.  如果报错就返回\n>  3.  求出当前数组的length属性\n>  4.  如果报错就返回\n>  5.  如果 map 方法的参数callbackfn不可执行，就报错\n>  6.  如果 map 方法的参数之中，指定了this，就让t等于该参数，否则t为undefined\n>  7.  生成一个新的数组a，跟当前数组的length属性保持一致\n>  8.  如果报错就返回\n>  9.  设定k等于 0\n>  10. 只要k小于当前数组的length属性，就重复下面步骤\n>      1. 设定pk等于tostring(k)，即将k转为字符串\n>      2. 设定kpresent等于hasproperty(o, pk)，即求当前数组有没有指定属性\n>      3. 如果报错就返回\n>      4. 如果kpresent等于true，则进行下面步骤\n>         1. 设定kvalue等于get(o, pk)，取出当前数组的指定属性\n>         2. 如果报错就返回\n>         3. 设定mappedvalue等于call(callbackfn, t, «kvalue, k, o»)，即执行回调函数\n>         4. 如果报错就返回\n>         5. 设定status等于createdatapropertyorthrow (a, pk, mappedvalue)，即将回调函数的值放入a数组的指定位置\n>         6. 如果报错就返回\n>      5. k增加 1\n>  11. 返回a\n\n仔细查看上面的算法，可以发现，当处理一个全是空位的数组时，前面步骤都没有问题。进入第 10 步中第 2 步时，kpresent会报错，因为空位对应的属性名，对于数组来说是不存在的，因此就会返回，不会进行后面的步骤。\n\nconst arr = [, , ,];\narr.map(n => {\n  console.log(n);\n  return 1;\n}) // [, , ,]\n\n\n1\n2\n3\n4\n5\n\n\n上面代码中，arr是一个全是空位的数组，map方法遍历成员时，发现是空位，就直接跳过，不会进入回调函数。因此，回调函数里面的console.log语句根本不会执行，整个map方法返回一个全是空位的新数组。\n\nv8 引擎对map方法的实现如下，可以看到跟规格的算法描述完全一致。\n\nfunction arraymap(f, receiver) {\n  check_object_coercible(this, "array.prototype.map");\n\n  // pull out the length so that modifications to the length in the\n  // loop will not affect the looping and side effects are visible.\n  var array = to_object(this);\n  var length = to_length_or_uint32(array.length);\n  return innerarraymap(f, receiver, array, length);\n}\n\nfunction innerarraymap(f, receiver, array, length) {\n  if (!is_callable(f)) throw maketypeerror(kcallednoncallable, f);\n\n  var accumulator = new internalarray(length);\n  var is_array = is_array(array);\n  var stepping = debug_is_stepping(f);\n  for (var i = 0; i < length; i++) {\n    if (has_index(array, i, is_array)) {\n      var element = array[i];\n      // prepare break slots for debugger step in.\n      if (stepping) %debugpreparestepinifstepping(f);\n      accumulator[i] = %_call(f, receiver, element, i, array);\n    }\n  }\n  var result = new globalarray();\n  %movearraycontents(accumulator, result);\n  return result;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n',charsets:{cjk:!0}},{title:"常用Git命令清单",frontmatter:{title:"常用Git命令清单",date:"2020-11-18T17:43:57.000Z",permalink:"/pages/8292d8/",categories:["《Git》学习笔记"],tags:["Git"],readingShow:"top"},regularPath:"/06.%E4%B9%A6%E7%B1%8D/10.%E3%80%8AGit%E3%80%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E6%89%8B%E5%86%8C/00.%E5%B8%B8%E7%94%A8Git%E5%91%BD%E4%BB%A4%E6%B8%85%E5%8D%95.html",relativePath:"06.书籍/10.《Git》学习笔记/10.手册/00.常用Git命令清单.md",key:"v-1f0248bb",path:"/pages/8292d8/",headers:[{level:2,title:"一、新建代码库",slug:"一、新建代码库",normalizedTitle:"一、新建代码库",charIndex:187},{level:2,title:"二、配置",slug:"二、配置",normalizedTitle:"二、配置",charIndex:334},{level:2,title:"三、增加/删除文件",slug:"三、增加-删除文件",normalizedTitle:"三、增加/删除文件",charIndex:606},{level:2,title:"四、代码提交",slug:"四、代码提交",normalizedTitle:"四、代码提交",charIndex:1006},{level:2,title:"五、分支",slug:"五、分支",normalizedTitle:"五、分支",charIndex:1407},{level:2,title:"六、标签",slug:"六、标签",normalizedTitle:"六、标签",charIndex:2200},{level:2,title:"七、查看信息",slug:"七、查看信息",normalizedTitle:"七、查看信息",charIndex:2617},{level:2,title:"八、远程同步",slug:"八、远程同步",normalizedTitle:"八、远程同步",charIndex:3726},{level:2,title:"九、撤销",slug:"九、撤销",normalizedTitle:"九、撤销",charIndex:4148},{level:2,title:"十、常用操作组合",slug:"十、常用操作组合",normalizedTitle:"十、常用操作组合",charIndex:4800},{level:3,title:"1. 修改本地分支名和远程分支名",slug:"_1-修改本地分支名和远程分支名",normalizedTitle:"1. 修改本地分支名和远程分支名",charIndex:4813}],lastUpdated:"2022/9/22 下午4:28:09",lastUpdatedTimestamp:1663835289e3,headersStr:"一、新建代码库 二、配置 三、增加/删除文件 四、代码提交 五、分支 六、标签 七、查看信息 八、远程同步 九、撤销 十、常用操作组合 1. 修改本地分支名和远程分支名",content:'# 常用Git命令清单\n\n一般来说，日常使用只要记住下图6个命令，就可以了。但是熟练使用，恐怕要记住60～100个命令。\n\n\n\n下面是我整理的常用 Git 命令清单。几个专用名词的译名如下。\n\n>  * Workspace：工作区\n>  * Index / Stage：暂存区\n>  * Repository：仓库区（或本地仓库）\n>  * Remote：远程仓库\n\n\n# 一、新建代码库\n\n# 在当前目录新建一个Git代码库\n$ git init\n\n# 新建一个目录，将其初始化为Git代码库\n$ git init [project-name]\n\n# 下载一个项目和它的整个代码历史\n$ git clone [url]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# 二、配置\n\nGit的设置文件为 .gitconfig，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。\n\n# 显示当前的Git配置\n$ git config --list\n\n# 编辑Git配置文件\n$ git config -e [--global]\n\n# 设置提交代码时的用户信息\n$ git config [--global] user.name "[name]"\n$ git config [--global] user.email "[email address]"\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n\n# 三、增加/删除文件\n\n# 添加指定文件到暂存区\n$ git add [file1] [file2] ...\n\n# 添加指定目录到暂存区，包括子目录\n$ git add [dir]\n\n# 添加当前目录的所有文件到暂存区\n$ git add .\n\n# 添加每个变化前，都会要求确认\n# 对于同一个文件的多处变化，可以实现分次提交\n$ git add -p\n\n# 删除工作区文件，并且将这次删除放入暂存区\n$ git rm [file1] [file2] ...\n\n# 停止追踪指定文件，但该文件会保留在工作区\n$ git rm --cached [file]\n\n# 改名文件，并且将这个改名放入暂存区\n$ git mv [file-original] [file-renamed]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n\n\n\n# 四、代码提交\n\n# 提交暂存区到仓库区\n$ git commit -m [message]\n\n# 提交暂存区的指定文件到仓库区\n$ git commit [file1] [file2] ... -m [message]\n\n# 提交工作区自上次commit之后的变化，直接到仓库区\n$ git commit -a\n\n# 提交时显示所有diff信息\n$ git commit -v\n\n# 使用一次新的commit，替代上一次提交\n# 如果代码没有任何新变化，则用来改写上一次commit的提交信息\n$ git commit --amend -m [message]\n\n# 重做上一次commit，并包括指定文件的新变化\n$ git commit --amend [file1] [file2] ...\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\n\n# 五、分支\n\n# 列出所有本地分支\n$ git branch\n\n# 列出所有远程分支\n$ git branch -r\n\n# 列出所有本地分支和远程分支\n$ git branch -a\n\n# 新建一个分支，但依然停留在当前分支\n$ git branch [branch-name]\n\n# 新建一个分支，并切换到该分支\n$ git checkout -b [branch]\n\n# 新建一个分支，指向指定commit\n$ git branch [branch] [commit]\n\n# 新建一个分支，与指定的远程分支建立追踪关系\n$ git branch --track [branch] [remote-branch]\n\n# 切换到指定分支，并更新工作区\n$ git checkout [branch-name]\n\n# 切换到上一个分支\n$ git checkout -\n\n# 建立追踪关系，在现有分支与指定的远程分支之间\n$ git branch --set-upstream [branch] [remote-branch]\n\n# 合并指定分支到当前分支\n$ git merge [branch]\n\n# 选择一个commit，合并进当前分支\n$ git cherry-pick [commit]\n\n# 删除分支\n$ git branch -d [branch-name]\n\n# 删除远程分支\n$ git push origin --delete [branch-name]\n$ git branch -dr [remote/branch]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n\n\n\n# 六、标签\n\n# 列出所有tag\n$ git tag\n\n# 新建一个tag在当前commit\n$ git tag [tag]\n\n# 新建一个tag在指定commit\n$ git tag [tag] [commit]\n\n# 删除本地tag\n$ git tag -d [tag]\n\n# 删除远程tag\n$ git push origin :refs/tags/[tagName]\n\n# 查看tag信息\n$ git show [tag]\n\n# 提交指定tag\n$ git push [remote] [tag]\n\n# 提交所有tag\n$ git push [remote] --tags\n\n# 新建一个分支，指向某个tag\n$ git checkout -b [branch] [tag]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n\n\n\n# 七、查看信息\n\n# 显示有变更的文件\n$ git status\n\n# 显示当前分支的版本历史\n$ git log\n\n# 显示commit历史，以及每次commit发生变更的文件\n$ git log --stat\n\n# 搜索提交历史，根据关键词\n$ git log -S [keyword]\n\n# 显示某个commit之后的所有变动，每个commit占据一行\n$ git log [tag] HEAD --pretty=format:%s\n\n# 显示某个commit之后的所有变动，其"提交说明"必须符合搜索条件\n$ git log [tag] HEAD --grep feature\n\n# 显示某个文件的版本历史，包括文件改名\n$ git log --follow [file]\n$ git whatchanged [file]\n\n# 显示指定文件相关的每一次diff\n$ git log -p [file]\n\n# 显示过去5次提交\n$ git log -5 --pretty --oneline\n\n# 显示所有提交过的用户，按提交次数排序\n$ git shortlog -sn\n\n# 显示指定文件是什么人在什么时间修改过\n$ git blame [file]\n\n# 显示暂存区和工作区的差异\n$ git diff\n\n# 显示暂存区和上一个commit的差异\n$ git diff --cached [file]\n\n# 显示工作区与当前分支最新commit之间的差异\n$ git diff HEAD\n\n# 显示两次提交之间的差异\n$ git diff [first-branch]...[second-branch]\n\n# 显示今天你写了多少行代码\n$ git diff --shortstat "@{0 day ago}"\n\n# 显示某次提交的元数据和内容变化\n$ git show [commit]\n\n# 显示某次提交发生变化的文件\n$ git show --name-only [commit]\n\n# 显示某次提交时，某个文件的内容\n$ git show [commit]:[filename]\n\n# 显示当前分支的最近几次提交\n$ git reflog\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n\n\n\n# 八、远程同步\n\n# 下载远程仓库的所有变动\n$ git fetch [remote]\n\n# 显示所有远程仓库\n$ git remote -v\n\n# 显示某个远程仓库的信息\n$ git remote show [remote]\n\n# 增加一个新的远程仓库，并命名\n$ git remote add [shortname] [url]\n\n# 取回远程仓库的变化，并与本地分支合并\n$ git pull [remote] [branch]\n\n# 上传本地指定分支到远程仓库\n$ git push [remote] [branch]\n\n# 强行推送当前分支到远程仓库，即使有冲突\n$ git push [remote] --force\n\n# 推送所有分支到远程仓库\n$ git push [remote] --all\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n\n\n\n# 九、撤销\n\n# 恢复暂存区的指定文件到工作区\n$ git checkout [file]\n\n# 恢复某个commit的指定文件到暂存区和工作区\n$ git checkout [commit] [file]\n\n# 恢复暂存区的所有文件到工作区\n$ git checkout .\n\n# 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变\n$ git reset [file]\n\n# 重置暂存区与工作区，与上一次commit保持一致\n$ git reset --hard\n\n# 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变\n$ git reset [commit]\n\n# 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致\n$ git reset --hard [commit]\n\n# 重置当前HEAD为指定commit，但保持暂存区和工作区不变\n$ git reset --keep [commit]\n\n# 新建一个commit，用来撤销指定commit\n# 后者的所有变化都将被前者抵消，并且应用到当前分支\n$ git revert [commit]\n\n# 暂时将未提交的变化移除，稍后再移入\n$ git stash\n$ git stash pop\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n\n\n\n# 十、常用操作组合\n\n\n# 1. 修改本地分支名和远程分支名\n\ngit branch -m old_branch new_branch # 重命名本地分支\ngit push origin :old_branch # 删除远程旧分支（分支名前有冒号）\ngit push --set-upstream origin new_branch # 推送新的分支，并设置本地分支跟踪新的远程分支\n\n\n1\n2\n3\n\n\n相关文章：\n\n《如何撤销 Git 操作？》\n\n《git cherry-pick 教程》 复制某分支上的部分提交到另一个分支上（相对于可以选择指定提交的 rebase 操作）。\n\n> 命令清单来源：https://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html',normalizedContent:'# 常用git命令清单\n\n一般来说，日常使用只要记住下图6个命令，就可以了。但是熟练使用，恐怕要记住60～100个命令。\n\n\n\n下面是我整理的常用 git 命令清单。几个专用名词的译名如下。\n\n>  * workspace：工作区\n>  * index / stage：暂存区\n>  * repository：仓库区（或本地仓库）\n>  * remote：远程仓库\n\n\n# 一、新建代码库\n\n# 在当前目录新建一个git代码库\n$ git init\n\n# 新建一个目录，将其初始化为git代码库\n$ git init [project-name]\n\n# 下载一个项目和它的整个代码历史\n$ git clone [url]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# 二、配置\n\ngit的设置文件为 .gitconfig，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。\n\n# 显示当前的git配置\n$ git config --list\n\n# 编辑git配置文件\n$ git config -e [--global]\n\n# 设置提交代码时的用户信息\n$ git config [--global] user.name "[name]"\n$ git config [--global] user.email "[email address]"\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n\n# 三、增加/删除文件\n\n# 添加指定文件到暂存区\n$ git add [file1] [file2] ...\n\n# 添加指定目录到暂存区，包括子目录\n$ git add [dir]\n\n# 添加当前目录的所有文件到暂存区\n$ git add .\n\n# 添加每个变化前，都会要求确认\n# 对于同一个文件的多处变化，可以实现分次提交\n$ git add -p\n\n# 删除工作区文件，并且将这次删除放入暂存区\n$ git rm [file1] [file2] ...\n\n# 停止追踪指定文件，但该文件会保留在工作区\n$ git rm --cached [file]\n\n# 改名文件，并且将这个改名放入暂存区\n$ git mv [file-original] [file-renamed]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n\n\n\n# 四、代码提交\n\n# 提交暂存区到仓库区\n$ git commit -m [message]\n\n# 提交暂存区的指定文件到仓库区\n$ git commit [file1] [file2] ... -m [message]\n\n# 提交工作区自上次commit之后的变化，直接到仓库区\n$ git commit -a\n\n# 提交时显示所有diff信息\n$ git commit -v\n\n# 使用一次新的commit，替代上一次提交\n# 如果代码没有任何新变化，则用来改写上一次commit的提交信息\n$ git commit --amend -m [message]\n\n# 重做上一次commit，并包括指定文件的新变化\n$ git commit --amend [file1] [file2] ...\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\n\n# 五、分支\n\n# 列出所有本地分支\n$ git branch\n\n# 列出所有远程分支\n$ git branch -r\n\n# 列出所有本地分支和远程分支\n$ git branch -a\n\n# 新建一个分支，但依然停留在当前分支\n$ git branch [branch-name]\n\n# 新建一个分支，并切换到该分支\n$ git checkout -b [branch]\n\n# 新建一个分支，指向指定commit\n$ git branch [branch] [commit]\n\n# 新建一个分支，与指定的远程分支建立追踪关系\n$ git branch --track [branch] [remote-branch]\n\n# 切换到指定分支，并更新工作区\n$ git checkout [branch-name]\n\n# 切换到上一个分支\n$ git checkout -\n\n# 建立追踪关系，在现有分支与指定的远程分支之间\n$ git branch --set-upstream [branch] [remote-branch]\n\n# 合并指定分支到当前分支\n$ git merge [branch]\n\n# 选择一个commit，合并进当前分支\n$ git cherry-pick [commit]\n\n# 删除分支\n$ git branch -d [branch-name]\n\n# 删除远程分支\n$ git push origin --delete [branch-name]\n$ git branch -dr [remote/branch]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n\n\n\n# 六、标签\n\n# 列出所有tag\n$ git tag\n\n# 新建一个tag在当前commit\n$ git tag [tag]\n\n# 新建一个tag在指定commit\n$ git tag [tag] [commit]\n\n# 删除本地tag\n$ git tag -d [tag]\n\n# 删除远程tag\n$ git push origin :refs/tags/[tagname]\n\n# 查看tag信息\n$ git show [tag]\n\n# 提交指定tag\n$ git push [remote] [tag]\n\n# 提交所有tag\n$ git push [remote] --tags\n\n# 新建一个分支，指向某个tag\n$ git checkout -b [branch] [tag]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n\n\n\n# 七、查看信息\n\n# 显示有变更的文件\n$ git status\n\n# 显示当前分支的版本历史\n$ git log\n\n# 显示commit历史，以及每次commit发生变更的文件\n$ git log --stat\n\n# 搜索提交历史，根据关键词\n$ git log -s [keyword]\n\n# 显示某个commit之后的所有变动，每个commit占据一行\n$ git log [tag] head --pretty=format:%s\n\n# 显示某个commit之后的所有变动，其"提交说明"必须符合搜索条件\n$ git log [tag] head --grep feature\n\n# 显示某个文件的版本历史，包括文件改名\n$ git log --follow [file]\n$ git whatchanged [file]\n\n# 显示指定文件相关的每一次diff\n$ git log -p [file]\n\n# 显示过去5次提交\n$ git log -5 --pretty --oneline\n\n# 显示所有提交过的用户，按提交次数排序\n$ git shortlog -sn\n\n# 显示指定文件是什么人在什么时间修改过\n$ git blame [file]\n\n# 显示暂存区和工作区的差异\n$ git diff\n\n# 显示暂存区和上一个commit的差异\n$ git diff --cached [file]\n\n# 显示工作区与当前分支最新commit之间的差异\n$ git diff head\n\n# 显示两次提交之间的差异\n$ git diff [first-branch]...[second-branch]\n\n# 显示今天你写了多少行代码\n$ git diff --shortstat "@{0 day ago}"\n\n# 显示某次提交的元数据和内容变化\n$ git show [commit]\n\n# 显示某次提交发生变化的文件\n$ git show --name-only [commit]\n\n# 显示某次提交时，某个文件的内容\n$ git show [commit]:[filename]\n\n# 显示当前分支的最近几次提交\n$ git reflog\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n\n\n\n# 八、远程同步\n\n# 下载远程仓库的所有变动\n$ git fetch [remote]\n\n# 显示所有远程仓库\n$ git remote -v\n\n# 显示某个远程仓库的信息\n$ git remote show [remote]\n\n# 增加一个新的远程仓库，并命名\n$ git remote add [shortname] [url]\n\n# 取回远程仓库的变化，并与本地分支合并\n$ git pull [remote] [branch]\n\n# 上传本地指定分支到远程仓库\n$ git push [remote] [branch]\n\n# 强行推送当前分支到远程仓库，即使有冲突\n$ git push [remote] --force\n\n# 推送所有分支到远程仓库\n$ git push [remote] --all\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n\n\n\n# 九、撤销\n\n# 恢复暂存区的指定文件到工作区\n$ git checkout [file]\n\n# 恢复某个commit的指定文件到暂存区和工作区\n$ git checkout [commit] [file]\n\n# 恢复暂存区的所有文件到工作区\n$ git checkout .\n\n# 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变\n$ git reset [file]\n\n# 重置暂存区与工作区，与上一次commit保持一致\n$ git reset --hard\n\n# 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变\n$ git reset [commit]\n\n# 重置当前分支的head为指定commit，同时重置暂存区和工作区，与指定commit一致\n$ git reset --hard [commit]\n\n# 重置当前head为指定commit，但保持暂存区和工作区不变\n$ git reset --keep [commit]\n\n# 新建一个commit，用来撤销指定commit\n# 后者的所有变化都将被前者抵消，并且应用到当前分支\n$ git revert [commit]\n\n# 暂时将未提交的变化移除，稍后再移入\n$ git stash\n$ git stash pop\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n\n\n\n# 十、常用操作组合\n\n\n# 1. 修改本地分支名和远程分支名\n\ngit branch -m old_branch new_branch # 重命名本地分支\ngit push origin :old_branch # 删除远程旧分支（分支名前有冒号）\ngit push --set-upstream origin new_branch # 推送新的分支，并设置本地分支跟踪新的远程分支\n\n\n1\n2\n3\n\n\n相关文章：\n\n《如何撤销 git 操作？》\n\n《git cherry-pick 教程》 复制某分支上的部分提交到另一个分支上（相对于可以选择指定提交的 rebase 操作）。\n\n> 命令清单来源：https://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html',charsets:{cjk:!0}},{title:"SIMD",frontmatter:{title:"SIMD",date:"2020-02-09T16:00:30.000Z",permalink:"/pages/8e8f80f69b775a56",author:"阮一峰",categories:["《ES6 教程》笔记"],tags:["ES6"],readingShow:"top"},regularPath:"/06.%E4%B9%A6%E7%B1%8D/05.%E3%80%8AES6%20%E6%95%99%E7%A8%8B%E3%80%8B%E7%AC%94%E8%AE%B0/33.SIMD.html",relativePath:"06.书籍/05.《ES6 教程》笔记/33.SIMD.md",key:"v-191de033",path:"/pages/8e8f80f69b775a56/",headers:[{level:2,title:"概述",slug:"概述",normalizedTitle:"概述",charIndex:11},{level:2,title:"数据类型",slug:"数据类型",normalizedTitle:"数据类型",charIndex:1231},{level:2,title:"静态方法：数学运算",slug:"静态方法-数学运算",normalizedTitle:"静态方法：数学运算",charIndex:2023},{level:3,title:"SIMD.%type%.abs()，SIMD.%type%.neg()",slug:"simd-type-abs-simd-type-neg",normalizedTitle:"simd.%type%.abs()，simd.%type%.neg()",charIndex:2064},{level:3,title:"SIMD.%type%.add()，SIMD.%type%.addSaturate()",slug:"simd-type-add-simd-type-addsaturate",normalizedTitle:"simd.%type%.add()，simd.%type%.addsaturate()",charIndex:2504},{level:3,title:"SIMD.%type%.sub()，SIMD.%type%.subSaturate()",slug:"simd-type-sub-simd-type-subsaturate",normalizedTitle:"simd.%type%.sub()，simd.%type%.subsaturate()",charIndex:3410},{level:3,title:"SIMD.%type%.mul()，SIMD.%type%.div()，SIMD.%type%.sqrt()",slug:"simd-type-mul-simd-type-div-simd-type-sqrt",normalizedTitle:"simd.%type%.mul()，simd.%type%.div()，simd.%type%.sqrt()",charIndex:4166},{level:3,title:"SIMD.%FloatType%.reciprocalApproximation()，SIMD.%type%.reciprocalSqrtApproximation()",slug:"simd-floattype-reciprocalapproximation-simd-type-reciprocalsqrtapproximation",normalizedTitle:"simd.%floattype%.reciprocalapproximation()，simd.%type%.reciprocalsqrtapproximation()",charIndex:4756},{level:3,title:"SIMD.%IntegerType%.shiftLeftByScalar()",slug:"simd-integertype-shiftleftbyscalar",normalizedTitle:"simd.%integertype%.shiftleftbyscalar()",charIndex:5323},{level:3,title:"SIMD.%IntegerType%.shiftRightByScalar()",slug:"simd-integertype-shiftrightbyscalar",normalizedTitle:"simd.%integertype%.shiftrightbyscalar()",charIndex:5717},{level:2,title:"静态方法：通道处理",slug:"静态方法-通道处理",normalizedTitle:"静态方法：通道处理",charIndex:6275},{level:3,title:"SIMD.%type%.check()",slug:"simd-type-check",normalizedTitle:"simd.%type%.check()",charIndex:6289},{level:3,title:"SIMD.%type%.extractLane()，SIMD.%type%.replaceLane()",slug:"simd-type-extractlane-simd-type-replacelane",normalizedTitle:"simd.%type%.extractlane()，simd.%type%.replacelane()",charIndex:6577},{level:3,title:"SIMD.%type%.load()",slug:"simd-type-load",normalizedTitle:"simd.%type%.load()",charIndex:6948},{level:3,title:"SIMD.%type%.store()",slug:"simd-type-store",normalizedTitle:"simd.%type%.store()",charIndex:7721},{level:3,title:"SIMD.%type%.splat()",slug:"simd-type-splat",normalizedTitle:"simd.%type%.splat()",charIndex:8433},{level:3,title:"SIMD.%type%.swizzle()",slug:"simd-type-swizzle",normalizedTitle:"simd.%type%.swizzle()",charIndex:8654},{level:3,title:"SIMD.%type%.shuffle()",slug:"simd-type-shuffle",normalizedTitle:"simd.%type%.shuffle()",charIndex:9366},{level:2,title:"静态方法：比较运算",slug:"静态方法-比较运算",normalizedTitle:"静态方法：比较运算",charIndex:9657},{level:3,title:"SIMD.%type%.equal()，SIMD.%type%.notEqual()",slug:"simd-type-equal-simd-type-notequal",normalizedTitle:"simd.%type%.equal()，simd.%type%.notequal()",charIndex:9671},{level:3,title:"SIMD.%type%.greaterThan()，SIMD.%type%.greaterThanOrEqual()",slug:"simd-type-greaterthan-simd-type-greaterthanorequal",normalizedTitle:"simd.%type%.greaterthan()，simd.%type%.greaterthanorequal()",charIndex:10071},{level:3,title:"SIMD.%type%.lessThan()，SIMD.%type%.lessThanOrEqual()",slug:"simd-type-lessthan-simd-type-lessthanorequal",normalizedTitle:"simd.%type%.lessthan()，simd.%type%.lessthanorequal()",charIndex:10507},{level:3,title:"SIMD.%type%.select()",slug:"simd-type-select",normalizedTitle:"simd.%type%.select()",charIndex:10928},{level:3,title:"SIMD.%BooleanType%.allTrue()，SIMD.%BooleanType%.anyTrue()",slug:"simd-booleantype-alltrue-simd-booleantype-anytrue",normalizedTitle:"simd.%booleantype%.alltrue()，simd.%booleantype%.anytrue()",charIndex:11633},{level:3,title:"SIMD.%type%.min()，SIMD.%type%.minNum()",slug:"simd-type-min-simd-type-minnum",normalizedTitle:"simd.%type%.min()，simd.%type%.minnum()",charIndex:12502},{level:3,title:"SIMD.%type%.max()，SIMD.%type%.maxNum()",slug:"simd-type-max-simd-type-maxnum",normalizedTitle:"simd.%type%.max()，simd.%type%.maxnum()",charIndex:13214},{level:2,title:"静态方法：位运算",slug:"静态方法-位运算",normalizedTitle:"静态方法：位运算",charIndex:13814},{level:3,title:"SIMD.%type%.and()，SIMD.%type%.or()，SIMD.%type%.xor()，SIMD.%type%.not()",slug:"simd-type-and-simd-type-or-simd-type-xor-simd-type-not",normalizedTitle:"simd.%type%.and()，simd.%type%.or()，simd.%type%.xor()，simd.%type%.not()",charIndex:13827},{level:2,title:"静态方法：数据类型转换",slug:"静态方法-数据类型转换",normalizedTitle:"静态方法：数据类型转换",charIndex:14798},{level:2,title:"实例方法",slug:"实例方法",normalizedTitle:"实例方法",charIndex:15804},{level:3,title:"SIMD.%type%.prototype.toString()",slug:"simd-type-prototype-tostring",normalizedTitle:"simd.%type%.prototype.tostring()",charIndex:15813},{level:2,title:"实例：求平均值",slug:"实例-求平均值",normalizedTitle:"实例：求平均值",charIndex:15977}],excerpt:'<h1 id="simd"><a class="header-anchor" href="#simd">#</a> SIMD</h1>\n<h2 id="概述"><a class="header-anchor" href="#概述">#</a> 概述</h2>\n<p>SIMD（发音<code>/sim-dee/</code>）是“Single Instruction/Multiple Data”的缩写，意为“单指令，多数据”。它是 JavaScript 操作 CPU 对应指令的接口，你可以看做这是一种不同的运算执行模式。与它相对的是 SISD（“Single Instruction/Single Data”），即“单指令，单数据”。</p>\n',lastUpdated:"2022/9/22 下午4:28:09",lastUpdatedTimestamp:1663835289e3,headersStr:"概述 数据类型 静态方法：数学运算 SIMD.%type%.abs()，SIMD.%type%.neg() SIMD.%type%.add()，SIMD.%type%.addSaturate() SIMD.%type%.sub()，SIMD.%type%.subSaturate() SIMD.%type%.mul()，SIMD.%type%.div()，SIMD.%type%.sqrt() SIMD.%FloatType%.reciprocalApproximation()，SIMD.%type%.reciprocalSqrtApproximation() SIMD.%IntegerType%.shiftLeftByScalar() SIMD.%IntegerType%.shiftRightByScalar() 静态方法：通道处理 SIMD.%type%.check() SIMD.%type%.extractLane()，SIMD.%type%.replaceLane() SIMD.%type%.load() SIMD.%type%.store() SIMD.%type%.splat() SIMD.%type%.swizzle() SIMD.%type%.shuffle() 静态方法：比较运算 SIMD.%type%.equal()，SIMD.%type%.notEqual() SIMD.%type%.greaterThan()，SIMD.%type%.greaterThanOrEqual() SIMD.%type%.lessThan()，SIMD.%type%.lessThanOrEqual() SIMD.%type%.select() SIMD.%BooleanType%.allTrue()，SIMD.%BooleanType%.anyTrue() SIMD.%type%.min()，SIMD.%type%.minNum() SIMD.%type%.max()，SIMD.%type%.maxNum() 静态方法：位运算 SIMD.%type%.and()，SIMD.%type%.or()，SIMD.%type%.xor()，SIMD.%type%.not() 静态方法：数据类型转换 实例方法 SIMD.%type%.prototype.toString() 实例：求平均值",content:"# SIMD\n\n\n# 概述\n\nSIMD（发音/sim-dee/）是“Single Instruction/Multiple Data”的缩写，意为“单指令，多数据”。它是 JavaScript 操作 CPU 对应指令的接口，你可以看做这是一种不同的运算执行模式。与它相对的是 SISD（“Single Instruction/Single Data”），即“单指令，单数据”。 SIMD 的含义是使用一个指令，完成多个数据的运算；SISD 的含义是使用一个指令，完成单个数据的运算，这是 JavaScript 的默认运算模式。显而易见，SIMD 的执行效率要高于 SISD，所以被广泛用于 3D 图形运算、物理模拟等运算量超大的项目之中。\n\n为了理解 SIMD，请看下面的例子。\n\nvar a = [1, 2, 3, 4];\nvar b = [5, 6, 7, 8];\nvar c = [];\n\nc[0] = a[0] + b[0];\nc[1] = a[1] + b[1];\nc[2] = a[2] + b[2];\nc[3] = a[3] + b[3];\nc // Array[6, 8, 10, 12]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n上面代码中，数组a和b的对应成员相加，结果放入数组c。它的运算模式是依次处理每个数组成员，一共有四个数组成员，所以需要运算 4 次。\n\n如果采用 SIMD 模式，只要运算一次就够了。\n\nvar a = SIMD.Float32x4(1, 2, 3, 4);\nvar b = SIMD.Float32x4(5, 6, 7, 8);\nvar c = SIMD.Float32x4.add(a, b); // Float32x4[6, 8, 10, 12]\n\n\n1\n2\n3\n\n\n上面代码之中，数组a和b的四个成员的各自相加，只用一条指令就完成了。因此，速度比上一种写法提高了 4 倍。\n\n一次 SIMD 运算，可以处理多个数据，这些数据被称为“通道”（lane）。上面代码中，一次运算了四个数据，因此就是四个通道。\n\nSIMD 通常用于矢量运算。\n\nv + w = 〈v1, …, vn〉+ 〈w1, …, wn〉\n      = 〈v1+w1, …, vn+wn〉\n\n\n1\n2\n\n\n上面代码中，v和w是两个多元矢量。它们的加运算，在 SIMD 下是一个指令、而不是 n 个指令完成的，这就大大提高了效率。这对于 3D 动画、图像处理、信号处理、数值处理、加密等运算是非常重要的。比如，Canvas 的getImageData()会将图像文件读成一个二进制数组，SIMD 就很适合对于这种数组的处理。\n\n总的来说，SIMD 是数据并行处理（parallelism）的一种手段，可以加速一些运算密集型操作的速度。将来与 WebAssembly 结合以后，可以让 JavaScript 达到二进制代码的运行速度。\n\n\n# 数据类型\n\nSIMD 提供 12 种数据类型，总长度都是 128 个二进制位。\n\n * Float32x4：四个 32 位浮点数\n * Float64x2：两个 64 位浮点数\n * Int32x4：四个 32 位整数\n * Int16x8：八个 16 位整数\n * Int8x16：十六个 8 位整数\n * Uint32x4：四个无符号的 32 位整数\n * Uint16x8：八个无符号的 16 位整数\n * Uint8x16：十六个无符号的 8 位整数\n * Bool32x4：四个 32 位布尔值\n * Bool16x8：八个 16 位布尔值\n * Bool8x16：十六个 8 位布尔值\n * Bool64x2：两个 64 位布尔值\n\n每种数据类型被x符号分隔成两部分，后面的部分表示通道数，前面的部分表示每个通道的宽度和类型。比如，Float32x4就表示这个值有 4 个通道，每个通道是一个 32 位浮点数。\n\n每个通道之中，可以放置四种数据。\n\n * 浮点数（float，比如 1.0）\n * 带符号的整数（Int，比如-1）\n * 无符号的整数（Uint，比如 1）\n * 布尔值（Bool，包含true和false两种值）\n\n每种 SIMD 的数据类型都是一个函数方法，可以传入参数，生成对应的值。\n\nvar a = SIMD.Float32x4(1.0, 2.0, 3.0, 4.0);\n\n\n1\n\n\n上面代码中，变量a就是一个 128 位、包含四个 32 位浮点数（即四个通道）的值。\n\n注意，这些数据类型方法都不是构造函数，前面不能加new，否则会报错。\n\nvar v = new SIMD.Float32x4(0, 1, 2, 3);\n// TypeError: SIMD.Float32x4 is not a constructor\n\n\n1\n2\n\n\n\n# 静态方法：数学运算\n\n每种数据类型都有一系列运算符，支持基本的数学运算。\n\n\n# SIMD.%type%.abs()，SIMD.%type%.neg()\n\nabs方法接受一个 SIMD 值作为参数，将它的每个通道都转成绝对值，作为一个新的 SIMD 值返回。\n\nvar a = SIMD.Float32x4(-1, -2, 0, NaN);\nSIMD.Float32x4.abs(a)\n// Float32x4[1, 2, 0, NaN]\n\n\n1\n2\n3\n\n\nneg方法接受一个 SIMD 值作为参数，将它的每个通道都转成负值，作为一个新的 SIMD 值返回。\n\nvar a = SIMD.Float32x4(-1, -2, 3, 0);\nSIMD.Float32x4.neg(a)\n// Float32x4[1, 2, -3, -0]\n\nvar b = SIMD.Float64x2(NaN, Infinity);\nSIMD.Float64x2.neg(b)\n// Float64x2[NaN, -Infinity]\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# SIMD.%type%.add()，SIMD.%type%.addSaturate()\n\nadd方法接受两个 SIMD 值作为参数，将它们的每个通道相加，作为一个新的 SIMD 值返回。\n\nvar a = SIMD.Float32x4(1.0, 2.0, 3.0, 4.0);\nvar b = SIMD.Float32x4(5.0, 10.0, 15.0, 20.0);\nvar c = SIMD.Float32x4.add(a, b);\n\n\n1\n2\n3\n\n\n上面代码中，经过加法运算，新的 SIMD 值为(6.0, 12.0, 18.0. 24.0)。\n\naddSaturate方法跟add方法的作用相同，都是两个通道相加，但是溢出的处理不一致。对于add方法，如果两个值相加发生溢出，溢出的二进制位会被丢弃; addSaturate方法则是返回该数据类型的最大值。\n\nvar a = SIMD.Uint16x8(65533, 65534, 65535, 65535, 1, 1, 1, 1);\nvar b = SIMD.Uint16x8(1, 1, 1, 5000, 1, 1, 1, 1);\nSIMD.Uint16x8.addSaturate(a, b);\n// Uint16x8[65534, 65535, 65535, 65535, 2, 2, 2, 2]\n\nvar c = SIMD.Int16x8(32765, 32766, 32767, 32767, 1, 1, 1, 1);\nvar d = SIMD.Int16x8(1, 1, 1, 5000, 1, 1, 1, 1);\nSIMD.Int16x8.addSaturate(c, d);\n// Int16x8[32766, 32767, 32767, 32767, 2, 2, 2, 2]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n上面代码中，Uint16的最大值是 65535，Int16的最大值是 32767。一旦发生溢出，就返回这两个值。\n\n注意，Uint32x4和Int32x4这两种数据类型没有addSaturate方法。\n\n\n# SIMD.%type%.sub()，SIMD.%type%.subSaturate()\n\nsub方法接受两个 SIMD 值作为参数，将它们的每个通道相减，作为一个新的 SIMD 值返回。\n\nvar a = SIMD.Float32x4(-1, -2, 3, 4);\nvar b = SIMD.Float32x4(3, 3, 3, 3);\nSIMD.Float32x4.sub(a, b)\n// Float32x4[-4, -5, 0, 1]\n\n\n1\n2\n3\n4\n\n\nsubSaturate方法跟sub方法的作用相同，都是两个通道相减，但是溢出的处理不一致。对于sub方法，如果两个值相减发生溢出，溢出的二进制位会被丢弃; subSaturate方法则是返回该数据类型的最小值。\n\nvar a = SIMD.Uint16x8(5, 1, 1, 1, 1, 1, 1, 1);\nvar b = SIMD.Uint16x8(10, 1, 1, 1, 1, 1, 1, 1);\nSIMD.Uint16x8.subSaturate(a, b)\n// Uint16x8[0, 0, 0, 0, 0, 0, 0, 0]\n\nvar c = SIMD.Int16x8(-100, 0, 0, 0, 0, 0, 0, 0);\nvar d = SIMD.Int16x8(32767, 0, 0, 0, 0, 0, 0, 0);\nSIMD.Int16x8.subSaturate(c, d)\n// Int16x8[-32768, 0, 0, 0, 0, 0, 0, 0, 0]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n上面代码中，Uint16的最小值是0，Int16的最小值是-32678。一旦运算发生溢出，就返回最小值。\n\n\n# SIMD.%type%.mul()，SIMD.%type%.div()，SIMD.%type%.sqrt()\n\nmul方法接受两个 SIMD 值作为参数，将它们的每个通道相乘，作为一个新的 SIMD 值返回。\n\nvar a = SIMD.Float32x4(-1, -2, 3, 4);\nvar b = SIMD.Float32x4(3, 3, 3, 3);\nSIMD.Float32x4.mul(a, b)\n// Float32x4[-3, -6, 9, 12]\n\n\n1\n2\n3\n4\n\n\ndiv方法接受两个 SIMD 值作为参数，将它们的每个通道相除，作为一个新的 SIMD 值返回。\n\nvar a = SIMD.Float32x4(2, 2, 2, 2);\nvar b = SIMD.Float32x4(4, 4, 4, 4);\nSIMD.Float32x4.div(a, b)\n// Float32x4[0.5, 0.5, 0.5, 0.5]\n\n\n1\n2\n3\n4\n\n\nsqrt方法接受一个 SIMD 值作为参数，求出每个通道的平方根，作为一个新的 SIMD 值返回。\n\nvar b = SIMD.Float64x2(4, 8);\nSIMD.Float64x2.sqrt(b)\n// Float64x2[2, 2.8284271247461903]\n\n\n1\n2\n3\n\n\n\n# SIMD.%FloatType%.reciprocalApproximation()，SIMD.%type%.reciprocalSqrtApproximation()\n\nreciprocalApproximation方法接受一个 SIMD 值作为参数，求出每个通道的倒数（1 / x），作为一个新的 SIMD 值返回。\n\nvar a = SIMD.Float32x4(1, 2, 3, 4);\nSIMD.Float32x4.reciprocalApproximation(a);\n// Float32x4[1, 0.5, 0.3333333432674408, 0.25]\n\n\n1\n2\n3\n\n\nreciprocalSqrtApproximation方法接受一个 SIMD 值作为参数，求出每个通道的平方根的倒数（1 / (x^0.5)），作为一个新的 SIMD 值返回。\n\nvar a = SIMD.Float32x4(1, 2, 3, 4);\nSIMD.Float32x4.reciprocalSqrtApproximation(a)\n// Float32x4[1, 0.7071067690849304, 0.5773502588272095, 0.5]\n\n\n1\n2\n3\n\n\n注意，只有浮点数的数据类型才有这两个方法。\n\n\n# SIMD.%IntegerType%.shiftLeftByScalar()\n\nshiftLeftByScalar方法接受一个 SIMD 值作为参数，然后将每个通道的值左移指定的位数，作为一个新的 SIMD 值返回。\n\nvar a = SIMD.Int32x4(1, 2, 4, 8);\nSIMD.Int32x4.shiftLeftByScalar(a, 1);\n// Int32x4[2, 4, 8, 16]\n\n\n1\n2\n3\n\n\n如果左移后，新的值超出了当前数据类型的位数，溢出的部分会被丢弃。\n\nvar ix4 = SIMD.Int32x4(1, 2, 3, 4);\nvar jx4 = SIMD.Int32x4.shiftLeftByScalar(ix4, 32);\n// Int32x4[0, 0, 0, 0]\n\n\n1\n2\n3\n\n\n注意，只有整数的数据类型才有这个方法。\n\n\n# SIMD.%IntegerType%.shiftRightByScalar()\n\nshiftRightByScalar方法接受一个 SIMD 值作为参数，然后将每个通道的值右移指定的位数，返回一个新的 SIMD 值。\n\nvar a = SIMD.Int32x4(1, 2, 4, -8);\nSIMD.Int32x4.shiftRightByScalar(a, 1);\n// Int32x4[0, 1, 2, -4]\n\n\n1\n2\n3\n\n\n如果原来通道的值是带符号的值，则符号位保持不变，不受右移影响。如果是不带符号位的值，则右移后头部会补0。\n\nvar a = SIMD.Uint32x4(1, 2, 4, -8);\nSIMD.Uint32x4.shiftRightByScalar(a, 1);\n// Uint32x4[0, 1, 2, 2147483644]\n\n\n1\n2\n3\n\n\n上面代码中，-8右移一位变成了2147483644，是因为对于 32 位无符号整数来说，-8的二进制形式是11111111111111111111111111111000，右移一位就变成了01111111111111111111111111111100，相当于2147483644。\n\n注意，只有整数的数据类型才有这个方法。\n\n\n# 静态方法：通道处理\n\n\n# SIMD.%type%.check()\n\ncheck方法用于检查一个值是否为当前类型的 SIMD 值。如果是的，就返回这个值，否则就报错。\n\nvar a = SIMD.Float32x4(1, 2, 3, 9);\n\nSIMD.Float32x4.check(a);\n// Float32x4[1, 2, 3, 9]\n\nSIMD.Float32x4.check([1,2,3,4]) // 报错\nSIMD.Int32x4.check(a) // 报错\nSIMD.Int32x4.check('hello world') // 报错\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# SIMD.%type%.extractLane()，SIMD.%type%.replaceLane()\n\nextractLane方法用于返回给定通道的值。它接受两个参数，分别是 SIMD 值和通道编号。\n\nvar t = SIMD.Float32x4(1, 2, 3, 4);\nSIMD.Float32x4.extractLane(t, 2) // 3\n\n\n1\n2\n\n\nreplaceLane方法用于替换指定通道的值，并返回一个新的 SIMD 值。它接受三个参数，分别是原来的 SIMD 值、通道编号和新的通道值。\n\nvar t = SIMD.Float32x4(1, 2, 3, 4);\nSIMD.Float32x4.replaceLane(t, 2, 42)\n// Float32x4[1, 2, 42, 4]\n\n\n1\n2\n3\n\n\n\n# SIMD.%type%.load()\n\nload方法用于从二进制数组读入数据，生成一个新的 SIMD 值。\n\nvar a = new Int32Array([1,2,3,4,5,6,7,8]);\nSIMD.Int32x4.load(a, 0);\n// Int32x4[1, 2, 3, 4]\n\nvar b = new Int32Array([1,2,3,4,5,6,7,8]);\nSIMD.Int32x4.load(a, 2);\n// Int32x4[3, 4, 5, 6]\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\nload方法接受两个参数：一个二进制数组和开始读取的位置（从 0 开始）。如果位置不合法（比如-1或者超出二进制数组的大小），就会抛出一个错误。\n\n这个方法还有三个变种load1()、load2()、load3()，表示从指定位置开始，只加载一个通道、二个通道、三个通道的值。\n\n// 格式\nSIMD.Int32x4.load(tarray, index)\nSIMD.Int32x4.load1(tarray, index)\nSIMD.Int32x4.load2(tarray, index)\nSIMD.Int32x4.load3(tarray, index)\n\n// 实例\nvar a = new Int32Array([1,2,3,4,5,6,7,8]);\nSIMD.Int32x4.load1(a, 0);\n// Int32x4[1, 0, 0, 0]\nSIMD.Int32x4.load2(a, 0);\n// Int32x4[1, 2, 0, 0]\nSIMD.Int32x4.load3(a, 0);\n// Int32x4[1, 2, 3,0]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n\n# SIMD.%type%.store()\n\nstore方法用于将一个 SIMD 值，写入一个二进制数组。它接受三个参数，分别是二进制数组、开始写入的数组位置、SIMD 值。它返回写入值以后的二进制数组。\n\nvar t1 = new Int32Array(8);\nvar v1 = SIMD.Int32x4(1, 2, 3, 4);\nSIMD.Int32x4.store(t1, 0, v1)\n// Int32Array[1, 2, 3, 4, 0, 0, 0, 0]\n\nvar t2 = new Int32Array(8);\nvar v2 = SIMD.Int32x4(1, 2, 3, 4);\nSIMD.Int32x4.store(t2, 2, v2)\n// Int32Array[0, 0, 1, 2, 3, 4, 0, 0]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n上面代码中，t1是一个二进制数组，v1是一个 SIMD 值，只有四个通道。所以写入t1以后，只有前四个位置有值，后四个位置都是 0。而t2是从 2 号位置开始写入，所以前两个位置和后两个位置都是 0。\n\n这个方法还有三个变种store1()、store2()和store3()，表示只写入一个通道、二个通道和三个通道的值。\n\nvar tarray = new Int32Array(8);\nvar value = SIMD.Int32x4(1, 2, 3, 4);\nSIMD.Int32x4.store1(tarray, 0, value);\n// Int32Array[1, 0, 0, 0, 0, 0, 0, 0]\n\n\n1\n2\n3\n4\n\n\n\n# SIMD.%type%.splat()\n\nsplat方法返回一个新的 SIMD 值，该值的所有通道都会设成同一个预先给定的值。\n\nSIMD.Float32x4.splat(3);\n// Float32x4[3, 3, 3, 3]\nSIMD.Float64x2.splat(3);\n// Float64x2[3, 3]\n\n\n1\n2\n3\n4\n\n\n如果省略参数，所有整数型的 SIMD 值都会设定0，浮点型的 SIMD 值都会设成NaN。\n\n\n# SIMD.%type%.swizzle()\n\nswizzle方法返回一个新的 SIMD 值，重新排列原有的 SIMD 值的通道顺序。\n\nvar t = SIMD.Float32x4(1, 2, 3, 4);\nSIMD.Float32x4.swizzle(t, 1, 2, 0, 3);\n// Float32x4[2,3,1,4]\n\n\n1\n2\n3\n\n\n上面代码中，swizzle方法的第一个参数是原有的 SIMD 值，后面的参数对应将要返回的 SIMD 值的四个通道。它的意思是新的 SIMD 的四个通道，依次是原来 SIMD 值的 1 号通道、2 号通道、0 号通道、3 号通道。由于 SIMD 值最多可以有 16 个通道，所以swizzle方法除了第一个参数以外，最多还可以接受 16 个参数。\n\n下面是另一个例子。\n\nvar a = SIMD.Float32x4(1.0, 2.0, 3.0, 4.0);\n// Float32x4[1.0, 2.0, 3.0, 4.0]\n\nvar b = SIMD.Float32x4.swizzle(a, 0, 0, 1, 1);\n// Float32x4[1.0, 1.0, 2.0, 2.0]\n\nvar c = SIMD.Float32x4.swizzle(a, 3, 3, 3, 3);\n// Float32x4[4.0, 4.0, 4.0, 4.0]\n\nvar d = SIMD.Float32x4.swizzle(a, 3, 2, 1, 0);\n// Float32x4[4.0, 3.0, 2.0, 1.0]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n\n# SIMD.%type%.shuffle()\n\nshuffle方法从两个 SIMD 值之中取出指定通道，返回一个新的 SIMD 值。\n\nvar a = SIMD.Float32x4(1, 2, 3, 4);\nvar b = SIMD.Float32x4(5, 6, 7, 8);\n\nSIMD.Float32x4.shuffle(a, b, 1, 5, 7, 2);\n// Float32x4[2, 6, 8, 3]\n\n\n1\n2\n3\n4\n5\n\n\n上面代码中，a和b一共有 8 个通道，依次编号为 0 到 7。shuffle根据编号，取出相应的通道，返回一个新的 SIMD 值。\n\n\n# 静态方法：比较运算\n\n\n# SIMD.%type%.equal()，SIMD.%type%.notEqual()\n\nequal方法用来比较两个 SIMD 值a和b的每一个通道，根据两者是否精确相等（a === b），得到一个布尔值。最后，所有通道的比较结果，组成一个新的 SIMD 值，作为掩码返回。notEqual方法则是比较两个通道是否不相等（a !== b）。\n\nvar a = SIMD.Float32x4(1, 2, 3, 9);\nvar b = SIMD.Float32x4(1, 4, 7, 9);\n\nSIMD.Float32x4.equal(a,b)\n// Bool32x4[true, false, false, true]\n\nSIMD.Float32x4.notEqual(a,b);\n// Bool32x4[false, true, true, false]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# SIMD.%type%.greaterThan()，SIMD.%type%.greaterThanOrEqual()\n\ngreatThan方法用来比较两个 SIMD 值a和b的每一个通道，如果在该通道中，a较大就得到true，否则得到false。最后，所有通道的比较结果，组成一个新的 SIMD 值，作为掩码返回。greaterThanOrEqual则是比较a是否大于等于b。\n\nvar a = SIMD.Float32x4(1, 6, 3, 11);\nvar b = SIMD.Float32x4(1, 4, 7, 9);\n\nSIMD.Float32x4.greaterThan(a, b)\n// Bool32x4[false, true, false, true]\n\nSIMD.Float32x4.greaterThanOrEqual(a, b)\n// Bool32x4[true, true, false, true]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# SIMD.%type%.lessThan()，SIMD.%type%.lessThanOrEqual()\n\nlessThan方法用来比较两个 SIMD 值a和b的每一个通道，如果在该通道中，a较小就得到true，否则得到false。最后，所有通道的比较结果，会组成一个新的 SIMD 值，作为掩码返回。lessThanOrEqual方法则是比较a是否等于b。\n\nvar a = SIMD.Float32x4(1, 2, 3, 11);\nvar b = SIMD.Float32x4(1, 4, 7, 9);\n\nSIMD.Float32x4.lessThan(a, b)\n// Bool32x4[false, true, true, false]\n\nSIMD.Float32x4.lessThanOrEqual(a, b)\n// Bool32x4[true, true, true, false]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# SIMD.%type%.select()\n\nselect方法通过掩码生成一个新的 SIMD 值。它接受三个参数，分别是掩码和两个 SIMD 值。\n\nvar a = SIMD.Float32x4(1, 2, 3, 4);\nvar b = SIMD.Float32x4(5, 6, 7, 8);\n\nvar mask = SIMD.Bool32x4(true, false, false, true);\n\nSIMD.Float32x4.select(mask, a, b);\n// Float32x4[1, 6, 7, 4]\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n上面代码中，select方法接受掩码和两个 SIMD 值作为参数。当某个通道对应的掩码为true时，会选择第一个 SIMD 值的对应通道，否则选择第二个 SIMD 值的对应通道。\n\n这个方法通常与比较运算符结合使用。\n\nvar a = SIMD.Float32x4(0, 12, 3, 4);\nvar b = SIMD.Float32x4(0, 6, 7, 50);\n\nvar mask = SIMD.Float32x4.lessThan(a,b);\n// Bool32x4[false, false, true, true]\n\nvar result = SIMD.Float32x4.select(mask, a, b);\n// Float32x4[0, 6, 3, 4]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n上面代码中，先通过lessThan方法生成一个掩码，然后通过select方法生成一个由每个通道的较小值组成的新的 SIMD 值。\n\n\n# SIMD.%BooleanType%.allTrue()，SIMD.%BooleanType%.anyTrue()\n\nallTrue方法接受一个 SIMD 值作为参数，然后返回一个布尔值，表示该 SIMD 值的所有通道是否都为true。\n\nvar a = SIMD.Bool32x4(true, true, true, true);\nvar b = SIMD.Bool32x4(true, false, true, true);\n\nSIMD.Bool32x4.allTrue(a); // true\nSIMD.Bool32x4.allTrue(b); // false\n\n\n1\n2\n3\n4\n5\n\n\nanyTrue方法则是只要有一个通道为true，就返回true，否则返回false。\n\nvar a = SIMD.Bool32x4(false, false, false, false);\nvar b = SIMD.Bool32x4(false, false, true, false);\n\nSIMD.Bool32x4.anyTrue(a); // false\nSIMD.Bool32x4.anyTrue(b); // true\n\n\n1\n2\n3\n4\n5\n\n\n注意，只有四种布尔值数据类型（Bool32x4、Bool16x8、Bool8x16、Bool64x2）才有这两个方法。\n\n这两个方法通常与比较运算符结合使用。\n\nvar ax4    = SIMD.Float32x4(1.0, 2.0, 3.0, 4.0);\nvar bx4    = SIMD.Float32x4(0.0, 6.0, 7.0, 8.0);\nvar ix4    = SIMD.Float32x4.lessThan(ax4, bx4);\nvar b1     = SIMD.Int32x4.allTrue(ix4); // false\nvar b2     = SIMD.Int32x4.anyTrue(ix4); // true\n\n\n1\n2\n3\n4\n5\n\n\n\n# SIMD.%type%.min()，SIMD.%type%.minNum()\n\nmin方法接受两个 SIMD 值作为参数，将两者的对应通道的较小值，组成一个新的 SIMD 值返回。\n\nvar a = SIMD.Float32x4(-1, -2, 3, 5.2);\nvar b = SIMD.Float32x4(0, -4, 6, 5.5);\nSIMD.Float32x4.min(a, b);\n// Float32x4[-1, -4, 3, 5.2]\n\n\n1\n2\n3\n4\n\n\n如果有一个通道的值是NaN，则会优先返回NaN。\n\nvar c = SIMD.Float64x2(NaN, Infinity)\nvar d = SIMD.Float64x2(1337, 42);\nSIMD.Float64x2.min(c, d);\n// Float64x2[NaN, 42]\n\n\n1\n2\n3\n4\n\n\nminNum方法与min的作用一模一样，唯一的区别是如果有一个通道的值是NaN，则会优先返回另一个通道的值。\n\nvar ax4 = SIMD.Float32x4(1.0, 2.0, NaN, NaN);\nvar bx4 = SIMD.Float32x4(2.0, 1.0, 3.0, NaN);\nvar cx4 = SIMD.Float32x4.min(ax4, bx4);\n// Float32x4[1.0, 1.0, NaN, NaN]\nvar dx4 = SIMD.Float32x4.minNum(ax4, bx4);\n// Float32x4[1.0, 1.0, 3.0, NaN]\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# SIMD.%type%.max()，SIMD.%type%.maxNum()\n\nmax方法接受两个 SIMD 值作为参数，将两者的对应通道的较大值，组成一个新的 SIMD 值返回。\n\nvar a = SIMD.Float32x4(-1, -2, 3, 5.2);\nvar b = SIMD.Float32x4(0, -4, 6, 5.5);\nSIMD.Float32x4.max(a, b);\n// Float32x4[0, -2, 6, 5.5]\n\n\n1\n2\n3\n4\n\n\n如果有一个通道的值是NaN，则会优先返回NaN。\n\nvar c = SIMD.Float64x2(NaN, Infinity)\nvar d = SIMD.Float64x2(1337, 42);\nSIMD.Float64x2.max(c, d)\n// Float64x2[NaN, Infinity]\n\n\n1\n2\n3\n4\n\n\nmaxNum方法与max的作用一模一样，唯一的区别是如果有一个通道的值是NaN，则会优先返回另一个通道的值。\n\nvar c = SIMD.Float64x2(NaN, Infinity)\nvar d = SIMD.Float64x2(1337, 42);\nSIMD.Float64x2.maxNum(c, d)\n// Float64x2[1337, Infinity]\n\n\n1\n2\n3\n4\n\n\n\n# 静态方法：位运算\n\n\n# SIMD.%type%.and()，SIMD.%type%.or()，SIMD.%type%.xor()，SIMD.%type%.not()\n\nand方法接受两个 SIMD 值作为参数，返回两者对应的通道进行二进制AND运算（&）后得到的新的 SIMD 值。\n\nvar a = SIMD.Int32x4(1, 2, 4, 8);\nvar b = SIMD.Int32x4(5, 5, 5, 5);\nSIMD.Int32x4.and(a, b)\n// Int32x4[1, 0, 4, 0]\n\n\n1\n2\n3\n4\n\n\n上面代码中，以通道0为例，1的二进制形式是0001，5的二进制形式是01001，所以进行AND运算以后，得到0001。\n\nor方法接受两个 SIMD 值作为参数，返回两者对应的通道进行二进制OR运算（|）后得到的新的 SIMD 值。\n\nvar a = SIMD.Int32x4(1, 2, 4, 8);\nvar b = SIMD.Int32x4(5, 5, 5, 5);\nSIMD.Int32x4.or(a, b)\n// Int32x4[5, 7, 5, 13]\n\n\n1\n2\n3\n4\n\n\nxor方法接受两个 SIMD 值作为参数，返回两者对应的通道进行二进制“异或”运算（^）后得到的新的 SIMD 值。\n\nvar a = SIMD.Int32x4(1, 2, 4, 8);\nvar b = SIMD.Int32x4(5, 5, 5, 5);\nSIMD.Int32x4.xor(a, b)\n// Int32x4[4, 7, 1, 13]\n\n\n1\n2\n3\n4\n\n\nnot方法接受一个 SIMD 值作为参数，返回每个通道进行二进制“否”运算（~）后得到的新的 SIMD 值。\n\nvar a = SIMD.Int32x4(1, 2, 4, 8);\nSIMD.Int32x4.not(a)\n// Int32x4[-2, -3, -5, -9]\n\n\n1\n2\n3\n\n\n上面代码中，1的否运算之所以得到-2，是因为在计算机内部，负数采用”2 的补码“这种形式进行表示。也就是说，整数n的负数形式-n，是对每一个二进制位取反以后，再加上 1。因此，直接取反就相当于负数形式再减去 1，比如1的负数形式是-1，再减去 1，就得到了-2。\n\n\n# 静态方法：数据类型转换\n\nSIMD 提供以下方法，用来将一种数据类型转为另一种数据类型。\n\n * SIMD.%type%.fromFloat32x4()\n * SIMD.%type%.fromFloat32x4Bits()\n * SIMD.%type%.fromFloat64x2Bits()\n * SIMD.%type%.fromInt32x4()\n * SIMD.%type%.fromInt32x4Bits()\n * SIMD.%type%.fromInt16x8Bits()\n * SIMD.%type%.fromInt8x16Bits()\n * SIMD.%type%.fromUint32x4()\n * SIMD.%type%.fromUint32x4Bits()\n * SIMD.%type%.fromUint16x8Bits()\n * SIMD.%type%.fromUint8x16Bits()\n\n带有Bits后缀的方法，会原封不动地将二进制位拷贝到新的数据类型；不带后缀的方法，则会进行数据类型转换。\n\nvar t = SIMD.Float32x4(1.0, 2.0, 3.0, 4.0);\nSIMD.Int32x4.fromFloat32x4(t);\n// Int32x4[1, 2, 3, 4]\n\nSIMD.Int32x4.fromFloat32x4Bits(t);\n// Int32x4[1065353216, 1073741824, 1077936128, 1082130432]\n\n\n1\n2\n3\n4\n5\n6\n\n\n上面代码中，fromFloat32x4是将浮点数转为整数，然后存入新的数据类型；fromFloat32x4Bits则是将二进制位原封不动地拷贝进入新的数据类型，然后进行解读。\n\nBits后缀的方法，还可以用于通道数目不对等的拷贝。\n\nvar t = SIMD.Float32x4(1.0, 2.0, 3.0, 4.0);\nSIMD.Int16x8.fromFloat32x4Bits(t);\n// Int16x8[0, 16256, 0, 16384, 0, 16448, 0, 16512]\n\n\n1\n2\n3\n\n\n上面代码中，原始 SIMD 值t是 4 通道的，而目标值是 8 通道的。\n\n如果数据转换时，原通道的数据大小，超过了目标通道的最大宽度，就会报错。\n\n\n# 实例方法\n\n\n# SIMD.%type%.prototype.toString()\n\ntoString方法返回一个 SIMD 值的字符串形式。\n\nvar a = SIMD.Float32x4(11, 22, 33, 44);\na.toString() // \"SIMD.Float32x4(11, 22, 33, 44)\"\n\n\n1\n2\n\n\n\n# 实例：求平均值\n\n正常模式下，计算n个值的平均值，需要运算n次。\n\nfunction average(list) {\n  var n = list.length;\n  var sum = 0.0;\n  for (var i = 0; i < n; i++) {\n    sum += list[i];\n  }\n  return sum / n;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n使用 SIMD，可以将计算次数减少到n次的四分之一。\n\nfunction average(list) {\n  var n = list.length;\n  var sum = SIMD.Float32x4.splat(0.0);\n  for (var i = 0; i < n; i += 4) {\n    sum = SIMD.Float32x4.add(\n      sum,\n      SIMD.Float32x4.load(list, i)\n    );\n  }\n  var total = SIMD.Float32x4.extractLane(sum, 0) +\n              SIMD.Float32x4.extractLane(sum, 1) +\n              SIMD.Float32x4.extractLane(sum, 2) +\n              SIMD.Float32x4.extractLane(sum, 3);\n  return total / n;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n上面代码先是每隔四位，将所有的值读入一个 SIMD，然后立刻累加。然后，得到累加值四个通道的总和，再除以n就可以了。",normalizedContent:"# simd\n\n\n# 概述\n\nsimd（发音/sim-dee/）是“single instruction/multiple data”的缩写，意为“单指令，多数据”。它是 javascript 操作 cpu 对应指令的接口，你可以看做这是一种不同的运算执行模式。与它相对的是 sisd（“single instruction/single data”），即“单指令，单数据”。 simd 的含义是使用一个指令，完成多个数据的运算；sisd 的含义是使用一个指令，完成单个数据的运算，这是 javascript 的默认运算模式。显而易见，simd 的执行效率要高于 sisd，所以被广泛用于 3d 图形运算、物理模拟等运算量超大的项目之中。\n\n为了理解 simd，请看下面的例子。\n\nvar a = [1, 2, 3, 4];\nvar b = [5, 6, 7, 8];\nvar c = [];\n\nc[0] = a[0] + b[0];\nc[1] = a[1] + b[1];\nc[2] = a[2] + b[2];\nc[3] = a[3] + b[3];\nc // array[6, 8, 10, 12]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n上面代码中，数组a和b的对应成员相加，结果放入数组c。它的运算模式是依次处理每个数组成员，一共有四个数组成员，所以需要运算 4 次。\n\n如果采用 simd 模式，只要运算一次就够了。\n\nvar a = simd.float32x4(1, 2, 3, 4);\nvar b = simd.float32x4(5, 6, 7, 8);\nvar c = simd.float32x4.add(a, b); // float32x4[6, 8, 10, 12]\n\n\n1\n2\n3\n\n\n上面代码之中，数组a和b的四个成员的各自相加，只用一条指令就完成了。因此，速度比上一种写法提高了 4 倍。\n\n一次 simd 运算，可以处理多个数据，这些数据被称为“通道”（lane）。上面代码中，一次运算了四个数据，因此就是四个通道。\n\nsimd 通常用于矢量运算。\n\nv + w = 〈v1, …, vn〉+ 〈w1, …, wn〉\n      = 〈v1+w1, …, vn+wn〉\n\n\n1\n2\n\n\n上面代码中，v和w是两个多元矢量。它们的加运算，在 simd 下是一个指令、而不是 n 个指令完成的，这就大大提高了效率。这对于 3d 动画、图像处理、信号处理、数值处理、加密等运算是非常重要的。比如，canvas 的getimagedata()会将图像文件读成一个二进制数组，simd 就很适合对于这种数组的处理。\n\n总的来说，simd 是数据并行处理（parallelism）的一种手段，可以加速一些运算密集型操作的速度。将来与 webassembly 结合以后，可以让 javascript 达到二进制代码的运行速度。\n\n\n# 数据类型\n\nsimd 提供 12 种数据类型，总长度都是 128 个二进制位。\n\n * float32x4：四个 32 位浮点数\n * float64x2：两个 64 位浮点数\n * int32x4：四个 32 位整数\n * int16x8：八个 16 位整数\n * int8x16：十六个 8 位整数\n * uint32x4：四个无符号的 32 位整数\n * uint16x8：八个无符号的 16 位整数\n * uint8x16：十六个无符号的 8 位整数\n * bool32x4：四个 32 位布尔值\n * bool16x8：八个 16 位布尔值\n * bool8x16：十六个 8 位布尔值\n * bool64x2：两个 64 位布尔值\n\n每种数据类型被x符号分隔成两部分，后面的部分表示通道数，前面的部分表示每个通道的宽度和类型。比如，float32x4就表示这个值有 4 个通道，每个通道是一个 32 位浮点数。\n\n每个通道之中，可以放置四种数据。\n\n * 浮点数（float，比如 1.0）\n * 带符号的整数（int，比如-1）\n * 无符号的整数（uint，比如 1）\n * 布尔值（bool，包含true和false两种值）\n\n每种 simd 的数据类型都是一个函数方法，可以传入参数，生成对应的值。\n\nvar a = simd.float32x4(1.0, 2.0, 3.0, 4.0);\n\n\n1\n\n\n上面代码中，变量a就是一个 128 位、包含四个 32 位浮点数（即四个通道）的值。\n\n注意，这些数据类型方法都不是构造函数，前面不能加new，否则会报错。\n\nvar v = new simd.float32x4(0, 1, 2, 3);\n// typeerror: simd.float32x4 is not a constructor\n\n\n1\n2\n\n\n\n# 静态方法：数学运算\n\n每种数据类型都有一系列运算符，支持基本的数学运算。\n\n\n# simd.%type%.abs()，simd.%type%.neg()\n\nabs方法接受一个 simd 值作为参数，将它的每个通道都转成绝对值，作为一个新的 simd 值返回。\n\nvar a = simd.float32x4(-1, -2, 0, nan);\nsimd.float32x4.abs(a)\n// float32x4[1, 2, 0, nan]\n\n\n1\n2\n3\n\n\nneg方法接受一个 simd 值作为参数，将它的每个通道都转成负值，作为一个新的 simd 值返回。\n\nvar a = simd.float32x4(-1, -2, 3, 0);\nsimd.float32x4.neg(a)\n// float32x4[1, 2, -3, -0]\n\nvar b = simd.float64x2(nan, infinity);\nsimd.float64x2.neg(b)\n// float64x2[nan, -infinity]\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# simd.%type%.add()，simd.%type%.addsaturate()\n\nadd方法接受两个 simd 值作为参数，将它们的每个通道相加，作为一个新的 simd 值返回。\n\nvar a = simd.float32x4(1.0, 2.0, 3.0, 4.0);\nvar b = simd.float32x4(5.0, 10.0, 15.0, 20.0);\nvar c = simd.float32x4.add(a, b);\n\n\n1\n2\n3\n\n\n上面代码中，经过加法运算，新的 simd 值为(6.0, 12.0, 18.0. 24.0)。\n\naddsaturate方法跟add方法的作用相同，都是两个通道相加，但是溢出的处理不一致。对于add方法，如果两个值相加发生溢出，溢出的二进制位会被丢弃; addsaturate方法则是返回该数据类型的最大值。\n\nvar a = simd.uint16x8(65533, 65534, 65535, 65535, 1, 1, 1, 1);\nvar b = simd.uint16x8(1, 1, 1, 5000, 1, 1, 1, 1);\nsimd.uint16x8.addsaturate(a, b);\n// uint16x8[65534, 65535, 65535, 65535, 2, 2, 2, 2]\n\nvar c = simd.int16x8(32765, 32766, 32767, 32767, 1, 1, 1, 1);\nvar d = simd.int16x8(1, 1, 1, 5000, 1, 1, 1, 1);\nsimd.int16x8.addsaturate(c, d);\n// int16x8[32766, 32767, 32767, 32767, 2, 2, 2, 2]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n上面代码中，uint16的最大值是 65535，int16的最大值是 32767。一旦发生溢出，就返回这两个值。\n\n注意，uint32x4和int32x4这两种数据类型没有addsaturate方法。\n\n\n# simd.%type%.sub()，simd.%type%.subsaturate()\n\nsub方法接受两个 simd 值作为参数，将它们的每个通道相减，作为一个新的 simd 值返回。\n\nvar a = simd.float32x4(-1, -2, 3, 4);\nvar b = simd.float32x4(3, 3, 3, 3);\nsimd.float32x4.sub(a, b)\n// float32x4[-4, -5, 0, 1]\n\n\n1\n2\n3\n4\n\n\nsubsaturate方法跟sub方法的作用相同，都是两个通道相减，但是溢出的处理不一致。对于sub方法，如果两个值相减发生溢出，溢出的二进制位会被丢弃; subsaturate方法则是返回该数据类型的最小值。\n\nvar a = simd.uint16x8(5, 1, 1, 1, 1, 1, 1, 1);\nvar b = simd.uint16x8(10, 1, 1, 1, 1, 1, 1, 1);\nsimd.uint16x8.subsaturate(a, b)\n// uint16x8[0, 0, 0, 0, 0, 0, 0, 0]\n\nvar c = simd.int16x8(-100, 0, 0, 0, 0, 0, 0, 0);\nvar d = simd.int16x8(32767, 0, 0, 0, 0, 0, 0, 0);\nsimd.int16x8.subsaturate(c, d)\n// int16x8[-32768, 0, 0, 0, 0, 0, 0, 0, 0]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n上面代码中，uint16的最小值是0，int16的最小值是-32678。一旦运算发生溢出，就返回最小值。\n\n\n# simd.%type%.mul()，simd.%type%.div()，simd.%type%.sqrt()\n\nmul方法接受两个 simd 值作为参数，将它们的每个通道相乘，作为一个新的 simd 值返回。\n\nvar a = simd.float32x4(-1, -2, 3, 4);\nvar b = simd.float32x4(3, 3, 3, 3);\nsimd.float32x4.mul(a, b)\n// float32x4[-3, -6, 9, 12]\n\n\n1\n2\n3\n4\n\n\ndiv方法接受两个 simd 值作为参数，将它们的每个通道相除，作为一个新的 simd 值返回。\n\nvar a = simd.float32x4(2, 2, 2, 2);\nvar b = simd.float32x4(4, 4, 4, 4);\nsimd.float32x4.div(a, b)\n// float32x4[0.5, 0.5, 0.5, 0.5]\n\n\n1\n2\n3\n4\n\n\nsqrt方法接受一个 simd 值作为参数，求出每个通道的平方根，作为一个新的 simd 值返回。\n\nvar b = simd.float64x2(4, 8);\nsimd.float64x2.sqrt(b)\n// float64x2[2, 2.8284271247461903]\n\n\n1\n2\n3\n\n\n\n# simd.%floattype%.reciprocalapproximation()，simd.%type%.reciprocalsqrtapproximation()\n\nreciprocalapproximation方法接受一个 simd 值作为参数，求出每个通道的倒数（1 / x），作为一个新的 simd 值返回。\n\nvar a = simd.float32x4(1, 2, 3, 4);\nsimd.float32x4.reciprocalapproximation(a);\n// float32x4[1, 0.5, 0.3333333432674408, 0.25]\n\n\n1\n2\n3\n\n\nreciprocalsqrtapproximation方法接受一个 simd 值作为参数，求出每个通道的平方根的倒数（1 / (x^0.5)），作为一个新的 simd 值返回。\n\nvar a = simd.float32x4(1, 2, 3, 4);\nsimd.float32x4.reciprocalsqrtapproximation(a)\n// float32x4[1, 0.7071067690849304, 0.5773502588272095, 0.5]\n\n\n1\n2\n3\n\n\n注意，只有浮点数的数据类型才有这两个方法。\n\n\n# simd.%integertype%.shiftleftbyscalar()\n\nshiftleftbyscalar方法接受一个 simd 值作为参数，然后将每个通道的值左移指定的位数，作为一个新的 simd 值返回。\n\nvar a = simd.int32x4(1, 2, 4, 8);\nsimd.int32x4.shiftleftbyscalar(a, 1);\n// int32x4[2, 4, 8, 16]\n\n\n1\n2\n3\n\n\n如果左移后，新的值超出了当前数据类型的位数，溢出的部分会被丢弃。\n\nvar ix4 = simd.int32x4(1, 2, 3, 4);\nvar jx4 = simd.int32x4.shiftleftbyscalar(ix4, 32);\n// int32x4[0, 0, 0, 0]\n\n\n1\n2\n3\n\n\n注意，只有整数的数据类型才有这个方法。\n\n\n# simd.%integertype%.shiftrightbyscalar()\n\nshiftrightbyscalar方法接受一个 simd 值作为参数，然后将每个通道的值右移指定的位数，返回一个新的 simd 值。\n\nvar a = simd.int32x4(1, 2, 4, -8);\nsimd.int32x4.shiftrightbyscalar(a, 1);\n// int32x4[0, 1, 2, -4]\n\n\n1\n2\n3\n\n\n如果原来通道的值是带符号的值，则符号位保持不变，不受右移影响。如果是不带符号位的值，则右移后头部会补0。\n\nvar a = simd.uint32x4(1, 2, 4, -8);\nsimd.uint32x4.shiftrightbyscalar(a, 1);\n// uint32x4[0, 1, 2, 2147483644]\n\n\n1\n2\n3\n\n\n上面代码中，-8右移一位变成了2147483644，是因为对于 32 位无符号整数来说，-8的二进制形式是11111111111111111111111111111000，右移一位就变成了01111111111111111111111111111100，相当于2147483644。\n\n注意，只有整数的数据类型才有这个方法。\n\n\n# 静态方法：通道处理\n\n\n# simd.%type%.check()\n\ncheck方法用于检查一个值是否为当前类型的 simd 值。如果是的，就返回这个值，否则就报错。\n\nvar a = simd.float32x4(1, 2, 3, 9);\n\nsimd.float32x4.check(a);\n// float32x4[1, 2, 3, 9]\n\nsimd.float32x4.check([1,2,3,4]) // 报错\nsimd.int32x4.check(a) // 报错\nsimd.int32x4.check('hello world') // 报错\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# simd.%type%.extractlane()，simd.%type%.replacelane()\n\nextractlane方法用于返回给定通道的值。它接受两个参数，分别是 simd 值和通道编号。\n\nvar t = simd.float32x4(1, 2, 3, 4);\nsimd.float32x4.extractlane(t, 2) // 3\n\n\n1\n2\n\n\nreplacelane方法用于替换指定通道的值，并返回一个新的 simd 值。它接受三个参数，分别是原来的 simd 值、通道编号和新的通道值。\n\nvar t = simd.float32x4(1, 2, 3, 4);\nsimd.float32x4.replacelane(t, 2, 42)\n// float32x4[1, 2, 42, 4]\n\n\n1\n2\n3\n\n\n\n# simd.%type%.load()\n\nload方法用于从二进制数组读入数据，生成一个新的 simd 值。\n\nvar a = new int32array([1,2,3,4,5,6,7,8]);\nsimd.int32x4.load(a, 0);\n// int32x4[1, 2, 3, 4]\n\nvar b = new int32array([1,2,3,4,5,6,7,8]);\nsimd.int32x4.load(a, 2);\n// int32x4[3, 4, 5, 6]\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\nload方法接受两个参数：一个二进制数组和开始读取的位置（从 0 开始）。如果位置不合法（比如-1或者超出二进制数组的大小），就会抛出一个错误。\n\n这个方法还有三个变种load1()、load2()、load3()，表示从指定位置开始，只加载一个通道、二个通道、三个通道的值。\n\n// 格式\nsimd.int32x4.load(tarray, index)\nsimd.int32x4.load1(tarray, index)\nsimd.int32x4.load2(tarray, index)\nsimd.int32x4.load3(tarray, index)\n\n// 实例\nvar a = new int32array([1,2,3,4,5,6,7,8]);\nsimd.int32x4.load1(a, 0);\n// int32x4[1, 0, 0, 0]\nsimd.int32x4.load2(a, 0);\n// int32x4[1, 2, 0, 0]\nsimd.int32x4.load3(a, 0);\n// int32x4[1, 2, 3,0]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n\n# simd.%type%.store()\n\nstore方法用于将一个 simd 值，写入一个二进制数组。它接受三个参数，分别是二进制数组、开始写入的数组位置、simd 值。它返回写入值以后的二进制数组。\n\nvar t1 = new int32array(8);\nvar v1 = simd.int32x4(1, 2, 3, 4);\nsimd.int32x4.store(t1, 0, v1)\n// int32array[1, 2, 3, 4, 0, 0, 0, 0]\n\nvar t2 = new int32array(8);\nvar v2 = simd.int32x4(1, 2, 3, 4);\nsimd.int32x4.store(t2, 2, v2)\n// int32array[0, 0, 1, 2, 3, 4, 0, 0]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n上面代码中，t1是一个二进制数组，v1是一个 simd 值，只有四个通道。所以写入t1以后，只有前四个位置有值，后四个位置都是 0。而t2是从 2 号位置开始写入，所以前两个位置和后两个位置都是 0。\n\n这个方法还有三个变种store1()、store2()和store3()，表示只写入一个通道、二个通道和三个通道的值。\n\nvar tarray = new int32array(8);\nvar value = simd.int32x4(1, 2, 3, 4);\nsimd.int32x4.store1(tarray, 0, value);\n// int32array[1, 0, 0, 0, 0, 0, 0, 0]\n\n\n1\n2\n3\n4\n\n\n\n# simd.%type%.splat()\n\nsplat方法返回一个新的 simd 值，该值的所有通道都会设成同一个预先给定的值。\n\nsimd.float32x4.splat(3);\n// float32x4[3, 3, 3, 3]\nsimd.float64x2.splat(3);\n// float64x2[3, 3]\n\n\n1\n2\n3\n4\n\n\n如果省略参数，所有整数型的 simd 值都会设定0，浮点型的 simd 值都会设成nan。\n\n\n# simd.%type%.swizzle()\n\nswizzle方法返回一个新的 simd 值，重新排列原有的 simd 值的通道顺序。\n\nvar t = simd.float32x4(1, 2, 3, 4);\nsimd.float32x4.swizzle(t, 1, 2, 0, 3);\n// float32x4[2,3,1,4]\n\n\n1\n2\n3\n\n\n上面代码中，swizzle方法的第一个参数是原有的 simd 值，后面的参数对应将要返回的 simd 值的四个通道。它的意思是新的 simd 的四个通道，依次是原来 simd 值的 1 号通道、2 号通道、0 号通道、3 号通道。由于 simd 值最多可以有 16 个通道，所以swizzle方法除了第一个参数以外，最多还可以接受 16 个参数。\n\n下面是另一个例子。\n\nvar a = simd.float32x4(1.0, 2.0, 3.0, 4.0);\n// float32x4[1.0, 2.0, 3.0, 4.0]\n\nvar b = simd.float32x4.swizzle(a, 0, 0, 1, 1);\n// float32x4[1.0, 1.0, 2.0, 2.0]\n\nvar c = simd.float32x4.swizzle(a, 3, 3, 3, 3);\n// float32x4[4.0, 4.0, 4.0, 4.0]\n\nvar d = simd.float32x4.swizzle(a, 3, 2, 1, 0);\n// float32x4[4.0, 3.0, 2.0, 1.0]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n\n# simd.%type%.shuffle()\n\nshuffle方法从两个 simd 值之中取出指定通道，返回一个新的 simd 值。\n\nvar a = simd.float32x4(1, 2, 3, 4);\nvar b = simd.float32x4(5, 6, 7, 8);\n\nsimd.float32x4.shuffle(a, b, 1, 5, 7, 2);\n// float32x4[2, 6, 8, 3]\n\n\n1\n2\n3\n4\n5\n\n\n上面代码中，a和b一共有 8 个通道，依次编号为 0 到 7。shuffle根据编号，取出相应的通道，返回一个新的 simd 值。\n\n\n# 静态方法：比较运算\n\n\n# simd.%type%.equal()，simd.%type%.notequal()\n\nequal方法用来比较两个 simd 值a和b的每一个通道，根据两者是否精确相等（a === b），得到一个布尔值。最后，所有通道的比较结果，组成一个新的 simd 值，作为掩码返回。notequal方法则是比较两个通道是否不相等（a !== b）。\n\nvar a = simd.float32x4(1, 2, 3, 9);\nvar b = simd.float32x4(1, 4, 7, 9);\n\nsimd.float32x4.equal(a,b)\n// bool32x4[true, false, false, true]\n\nsimd.float32x4.notequal(a,b);\n// bool32x4[false, true, true, false]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# simd.%type%.greaterthan()，simd.%type%.greaterthanorequal()\n\ngreatthan方法用来比较两个 simd 值a和b的每一个通道，如果在该通道中，a较大就得到true，否则得到false。最后，所有通道的比较结果，组成一个新的 simd 值，作为掩码返回。greaterthanorequal则是比较a是否大于等于b。\n\nvar a = simd.float32x4(1, 6, 3, 11);\nvar b = simd.float32x4(1, 4, 7, 9);\n\nsimd.float32x4.greaterthan(a, b)\n// bool32x4[false, true, false, true]\n\nsimd.float32x4.greaterthanorequal(a, b)\n// bool32x4[true, true, false, true]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# simd.%type%.lessthan()，simd.%type%.lessthanorequal()\n\nlessthan方法用来比较两个 simd 值a和b的每一个通道，如果在该通道中，a较小就得到true，否则得到false。最后，所有通道的比较结果，会组成一个新的 simd 值，作为掩码返回。lessthanorequal方法则是比较a是否等于b。\n\nvar a = simd.float32x4(1, 2, 3, 11);\nvar b = simd.float32x4(1, 4, 7, 9);\n\nsimd.float32x4.lessthan(a, b)\n// bool32x4[false, true, true, false]\n\nsimd.float32x4.lessthanorequal(a, b)\n// bool32x4[true, true, true, false]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# simd.%type%.select()\n\nselect方法通过掩码生成一个新的 simd 值。它接受三个参数，分别是掩码和两个 simd 值。\n\nvar a = simd.float32x4(1, 2, 3, 4);\nvar b = simd.float32x4(5, 6, 7, 8);\n\nvar mask = simd.bool32x4(true, false, false, true);\n\nsimd.float32x4.select(mask, a, b);\n// float32x4[1, 6, 7, 4]\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n上面代码中，select方法接受掩码和两个 simd 值作为参数。当某个通道对应的掩码为true时，会选择第一个 simd 值的对应通道，否则选择第二个 simd 值的对应通道。\n\n这个方法通常与比较运算符结合使用。\n\nvar a = simd.float32x4(0, 12, 3, 4);\nvar b = simd.float32x4(0, 6, 7, 50);\n\nvar mask = simd.float32x4.lessthan(a,b);\n// bool32x4[false, false, true, true]\n\nvar result = simd.float32x4.select(mask, a, b);\n// float32x4[0, 6, 3, 4]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n上面代码中，先通过lessthan方法生成一个掩码，然后通过select方法生成一个由每个通道的较小值组成的新的 simd 值。\n\n\n# simd.%booleantype%.alltrue()，simd.%booleantype%.anytrue()\n\nalltrue方法接受一个 simd 值作为参数，然后返回一个布尔值，表示该 simd 值的所有通道是否都为true。\n\nvar a = simd.bool32x4(true, true, true, true);\nvar b = simd.bool32x4(true, false, true, true);\n\nsimd.bool32x4.alltrue(a); // true\nsimd.bool32x4.alltrue(b); // false\n\n\n1\n2\n3\n4\n5\n\n\nanytrue方法则是只要有一个通道为true，就返回true，否则返回false。\n\nvar a = simd.bool32x4(false, false, false, false);\nvar b = simd.bool32x4(false, false, true, false);\n\nsimd.bool32x4.anytrue(a); // false\nsimd.bool32x4.anytrue(b); // true\n\n\n1\n2\n3\n4\n5\n\n\n注意，只有四种布尔值数据类型（bool32x4、bool16x8、bool8x16、bool64x2）才有这两个方法。\n\n这两个方法通常与比较运算符结合使用。\n\nvar ax4    = simd.float32x4(1.0, 2.0, 3.0, 4.0);\nvar bx4    = simd.float32x4(0.0, 6.0, 7.0, 8.0);\nvar ix4    = simd.float32x4.lessthan(ax4, bx4);\nvar b1     = simd.int32x4.alltrue(ix4); // false\nvar b2     = simd.int32x4.anytrue(ix4); // true\n\n\n1\n2\n3\n4\n5\n\n\n\n# simd.%type%.min()，simd.%type%.minnum()\n\nmin方法接受两个 simd 值作为参数，将两者的对应通道的较小值，组成一个新的 simd 值返回。\n\nvar a = simd.float32x4(-1, -2, 3, 5.2);\nvar b = simd.float32x4(0, -4, 6, 5.5);\nsimd.float32x4.min(a, b);\n// float32x4[-1, -4, 3, 5.2]\n\n\n1\n2\n3\n4\n\n\n如果有一个通道的值是nan，则会优先返回nan。\n\nvar c = simd.float64x2(nan, infinity)\nvar d = simd.float64x2(1337, 42);\nsimd.float64x2.min(c, d);\n// float64x2[nan, 42]\n\n\n1\n2\n3\n4\n\n\nminnum方法与min的作用一模一样，唯一的区别是如果有一个通道的值是nan，则会优先返回另一个通道的值。\n\nvar ax4 = simd.float32x4(1.0, 2.0, nan, nan);\nvar bx4 = simd.float32x4(2.0, 1.0, 3.0, nan);\nvar cx4 = simd.float32x4.min(ax4, bx4);\n// float32x4[1.0, 1.0, nan, nan]\nvar dx4 = simd.float32x4.minnum(ax4, bx4);\n// float32x4[1.0, 1.0, 3.0, nan]\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# simd.%type%.max()，simd.%type%.maxnum()\n\nmax方法接受两个 simd 值作为参数，将两者的对应通道的较大值，组成一个新的 simd 值返回。\n\nvar a = simd.float32x4(-1, -2, 3, 5.2);\nvar b = simd.float32x4(0, -4, 6, 5.5);\nsimd.float32x4.max(a, b);\n// float32x4[0, -2, 6, 5.5]\n\n\n1\n2\n3\n4\n\n\n如果有一个通道的值是nan，则会优先返回nan。\n\nvar c = simd.float64x2(nan, infinity)\nvar d = simd.float64x2(1337, 42);\nsimd.float64x2.max(c, d)\n// float64x2[nan, infinity]\n\n\n1\n2\n3\n4\n\n\nmaxnum方法与max的作用一模一样，唯一的区别是如果有一个通道的值是nan，则会优先返回另一个通道的值。\n\nvar c = simd.float64x2(nan, infinity)\nvar d = simd.float64x2(1337, 42);\nsimd.float64x2.maxnum(c, d)\n// float64x2[1337, infinity]\n\n\n1\n2\n3\n4\n\n\n\n# 静态方法：位运算\n\n\n# simd.%type%.and()，simd.%type%.or()，simd.%type%.xor()，simd.%type%.not()\n\nand方法接受两个 simd 值作为参数，返回两者对应的通道进行二进制and运算（&）后得到的新的 simd 值。\n\nvar a = simd.int32x4(1, 2, 4, 8);\nvar b = simd.int32x4(5, 5, 5, 5);\nsimd.int32x4.and(a, b)\n// int32x4[1, 0, 4, 0]\n\n\n1\n2\n3\n4\n\n\n上面代码中，以通道0为例，1的二进制形式是0001，5的二进制形式是01001，所以进行and运算以后，得到0001。\n\nor方法接受两个 simd 值作为参数，返回两者对应的通道进行二进制or运算（|）后得到的新的 simd 值。\n\nvar a = simd.int32x4(1, 2, 4, 8);\nvar b = simd.int32x4(5, 5, 5, 5);\nsimd.int32x4.or(a, b)\n// int32x4[5, 7, 5, 13]\n\n\n1\n2\n3\n4\n\n\nxor方法接受两个 simd 值作为参数，返回两者对应的通道进行二进制“异或”运算（^）后得到的新的 simd 值。\n\nvar a = simd.int32x4(1, 2, 4, 8);\nvar b = simd.int32x4(5, 5, 5, 5);\nsimd.int32x4.xor(a, b)\n// int32x4[4, 7, 1, 13]\n\n\n1\n2\n3\n4\n\n\nnot方法接受一个 simd 值作为参数，返回每个通道进行二进制“否”运算（~）后得到的新的 simd 值。\n\nvar a = simd.int32x4(1, 2, 4, 8);\nsimd.int32x4.not(a)\n// int32x4[-2, -3, -5, -9]\n\n\n1\n2\n3\n\n\n上面代码中，1的否运算之所以得到-2，是因为在计算机内部，负数采用”2 的补码“这种形式进行表示。也就是说，整数n的负数形式-n，是对每一个二进制位取反以后，再加上 1。因此，直接取反就相当于负数形式再减去 1，比如1的负数形式是-1，再减去 1，就得到了-2。\n\n\n# 静态方法：数据类型转换\n\nsimd 提供以下方法，用来将一种数据类型转为另一种数据类型。\n\n * simd.%type%.fromfloat32x4()\n * simd.%type%.fromfloat32x4bits()\n * simd.%type%.fromfloat64x2bits()\n * simd.%type%.fromint32x4()\n * simd.%type%.fromint32x4bits()\n * simd.%type%.fromint16x8bits()\n * simd.%type%.fromint8x16bits()\n * simd.%type%.fromuint32x4()\n * simd.%type%.fromuint32x4bits()\n * simd.%type%.fromuint16x8bits()\n * simd.%type%.fromuint8x16bits()\n\n带有bits后缀的方法，会原封不动地将二进制位拷贝到新的数据类型；不带后缀的方法，则会进行数据类型转换。\n\nvar t = simd.float32x4(1.0, 2.0, 3.0, 4.0);\nsimd.int32x4.fromfloat32x4(t);\n// int32x4[1, 2, 3, 4]\n\nsimd.int32x4.fromfloat32x4bits(t);\n// int32x4[1065353216, 1073741824, 1077936128, 1082130432]\n\n\n1\n2\n3\n4\n5\n6\n\n\n上面代码中，fromfloat32x4是将浮点数转为整数，然后存入新的数据类型；fromfloat32x4bits则是将二进制位原封不动地拷贝进入新的数据类型，然后进行解读。\n\nbits后缀的方法，还可以用于通道数目不对等的拷贝。\n\nvar t = simd.float32x4(1.0, 2.0, 3.0, 4.0);\nsimd.int16x8.fromfloat32x4bits(t);\n// int16x8[0, 16256, 0, 16384, 0, 16448, 0, 16512]\n\n\n1\n2\n3\n\n\n上面代码中，原始 simd 值t是 4 通道的，而目标值是 8 通道的。\n\n如果数据转换时，原通道的数据大小，超过了目标通道的最大宽度，就会报错。\n\n\n# 实例方法\n\n\n# simd.%type%.prototype.tostring()\n\ntostring方法返回一个 simd 值的字符串形式。\n\nvar a = simd.float32x4(11, 22, 33, 44);\na.tostring() // \"simd.float32x4(11, 22, 33, 44)\"\n\n\n1\n2\n\n\n\n# 实例：求平均值\n\n正常模式下，计算n个值的平均值，需要运算n次。\n\nfunction average(list) {\n  var n = list.length;\n  var sum = 0.0;\n  for (var i = 0; i < n; i++) {\n    sum += list[i];\n  }\n  return sum / n;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n使用 simd，可以将计算次数减少到n次的四分之一。\n\nfunction average(list) {\n  var n = list.length;\n  var sum = simd.float32x4.splat(0.0);\n  for (var i = 0; i < n; i += 4) {\n    sum = simd.float32x4.add(\n      sum,\n      simd.float32x4.load(list, i)\n    );\n  }\n  var total = simd.float32x4.extractlane(sum, 0) +\n              simd.float32x4.extractlane(sum, 1) +\n              simd.float32x4.extractlane(sum, 2) +\n              simd.float32x4.extractlane(sum, 3);\n  return total / n;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n上面代码先是每隔四位，将所有的值读入一个 simd，然后立刻累加。然后，得到累加值四个通道的总和，再除以n就可以了。",charsets:{cjk:!0}},{title:"Git命令思维导图",frontmatter:{title:"Git命令思维导图",date:"2020-11-18T17:46:22.000Z",permalink:"/pages/4cbc21/",categories:["《Git》学习笔记"],tags:["Git"],readingShow:"top"},regularPath:"/06.%E4%B9%A6%E7%B1%8D/10.%E3%80%8AGit%E3%80%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E6%89%8B%E5%86%8C/06.Git%E5%91%BD%E4%BB%A4%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE.html",relativePath:"06.书籍/10.《Git》学习笔记/10.手册/06.Git命令思维导图.md",key:"v-1b1fcea0",path:"/pages/4cbc21/",lastUpdated:"2022/9/22 下午4:28:09",lastUpdatedTimestamp:1663835289e3,headersStr:null,content:"",normalizedContent:"",charsets:{}},{title:"Git变基合并",frontmatter:{title:"Git变基合并",date:"2020-11-18T17:43:57.000Z",permalink:"/pages/c10281/",categories:["《Git》学习笔记"],tags:["Git"],readingShow:"top"},regularPath:"/06.%E4%B9%A6%E7%B1%8D/10.%E3%80%8AGit%E3%80%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E6%89%8B%E5%86%8C/03.Git%E5%8F%98%E5%9F%BA%E5%90%88%E5%B9%B6.html",relativePath:"06.书籍/10.《Git》学习笔记/10.手册/03.Git变基合并.md",key:"v-d18328fe",path:"/pages/c10281/",headers:[{level:2,title:"说明",slug:"说明",normalizedTitle:"说明",charIndex:17},{level:3,title:"变基要遵守的准则",slug:"变基要遵守的准则",normalizedTitle:"变基要遵守的准则",charIndex:754},{level:3,title:"变基的实质",slug:"变基的实质",normalizedTitle:"变基的实质",charIndex:823},{level:2,title:"后悔药",slug:"后悔药",normalizedTitle:"后悔药",charIndex:535},{level:2,title:"开发期间的rebase操作",slug:"开发期间的rebase操作",normalizedTitle:"开发期间的rebase操作",charIndex:1895},{level:3,title:"背景",slug:"背景",normalizedTitle:"背景",charIndex:1913},{level:3,title:"操作步骤",slug:"操作步骤",normalizedTitle:"操作步骤",charIndex:2169},{level:2,title:"git cherry-pick",slug:"git-cherry-pick",normalizedTitle:"git cherry-pick",charIndex:2538},{level:3,title:"基本应用",slug:"基本应用",normalizedTitle:"基本应用",charIndex:2611},{level:3,title:"转移多个提交",slug:"转移多个提交",normalizedTitle:"转移多个提交",charIndex:2795}],lastUpdated:"2022/9/22 下午4:28:09",lastUpdatedTimestamp:1663835289e3,headersStr:"说明 变基要遵守的准则 变基的实质 后悔药 开发期间的rebase操作 背景 操作步骤 git cherry-pick 基本应用 转移多个提交",content:"# rebase分支合并\n\n\n# 说明\n\n以下 v2 是某个需求的开发分支， dev是总的开发分支，v2 是基于 dev分支签出的。\n\n当完成 v2的开发后，需要把代码合并到 dev，我们可以使用 rebase进行合并：\n\n# 首先将 v2 push到远程仓库\ngit add .\ngit commit -m 'xxx'\ngit push origin v2\n\n# 切换到 dev 拉取最新代码\ngit checkout dev\ngit pull origin dev\n\n# 切换到 v2\ngit checkout v2\ngit rebase dev # 将 v2 的所有[commit] 变基到(应用到) dev\n\n# 切换到 dev\ngit checkout dev\ngit merge v2  # 将 dev分支 快进合并 （此时 (HEAD -> dev, v2) [commit] 两个分支指向同一个提交）\n\n# 查看 原v2的[commit]记录 是否在dev分支的最前面（变基成功会把v2的提交记录应用到dev分支的最前面）\ngit log\n\n\t# 如果到这一步发现有问题，尝试使用 git --abort中止变基，如果还是有问题的可以在dev分支上使用《后悔药》操作， 再到v2分支上使用《后悔药》操作，即可使两个分支都回退到 rebase变基 之前的状态\n\n# 试运行项目是否有问题\nyarn start\n\ngit status # 查看状态是否有问题\ngit push origin dev # 推送到远程仓库的 dev\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n\n\n\n# 变基要遵守的准则\n\n几个人同时在一个分支上进行开发和提交时，开发中途请不要私自执行变基，只有在大家都完成工作之后才可以执行变基。\n\n\n# 变基的实质\n\n变基操作的实质是丢弃一些现有的提交，然后相应地新建一些内容一样但实际上不同的提交。 因此，变基操作过后的分支将不要再使用。\n\n\n# 后悔药\n\n# 查看HEAD指针变动记录\ngit reflog\n# 记录示例(当前分支是v2):\n07c398f (HEAD -> v2, master) HEAD@{0}: checkout: moving from master to v2\n07c398f (HEAD -> v2, master) HEAD@{1}: rebase (finish): returning to refs/heads/master\n07c398f (HEAD -> v2, master) HEAD@{2}: rebase (start): checkout v2\n15a97d8 HEAD@{3}: reset: moving to 15a97d8\n07c398f (HEAD -> v2, master) HEAD@{4}: merge v2: Fast-forward\n15a97d8 HEAD@{5}: checkout: moving from v2 to master\n07c398f (HEAD -> v2, master) HEAD@{6}: rebase (finish): returning to refs/heads/v2\n07c398f (HEAD -> v2, master) HEAD@{7}: rebase (pick): C\n15a97d8 HEAD@{8}: rebase (start): checkout master # 首次rebase\nd278ecd HEAD@{9}: checkout: moving from master to v2 # rebase前的状态\n15a97d8 HEAD@{10}: commit: D\n\n# 可见，示例中最初的 rebase 操作是 HEAD@{8}，想回退到变基前的状态需让指针指向 HEAD@{9}\ngit reset --hard d278ecd  # 重置当前分支的HEAD为指定[commit]，同时重置暂存区和工作区，与指定[commit]一致\n\n# 此时打印 log 查看是否回到之前的状态\ngit log\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n\n注意：此操作只能回退当前的分支，如其他分支也要回退，需要切换到该分支并执行上面操作。\n\n\n# 开发期间的rebase操作\n\n\n# 背景\n\n有两个分支：\n\ndev\n*v2\n\n\n1\n2\n\n\nv2 是基于 dev切出来的。\n\n提交记录如下：\n\n\t\tdev\na - b - c\n\t\tv2\n\n\n1\n2\n3\n\n\n开发期间，两个分支同时有新的commit ：\n\n\t\t\t\tdev\na - b - c - d - e\n\t\t\\ - f - g\n\t\t\t\tv2\n\n\n1\n2\n3\n4\n\n\n当前你正在 v2进行开发，dev也同时进行开发，并有重大的改变，你需要把 dev的提交同步到 v2。\n\n需求： 把 dev中新的提交同步到 v2，且不能影响 dev分支。\n\n\n# 操作步骤\n\n 1. 基于最新的 dev 切一个新的分支 dev-copy\n    \n    > dev-copy 和 dev 两者的 commit ID 一致。\n\n 2. 在 dev-copy中执行rebase，将 dev-copy 的提交变基到 v2\n    \n    git rebase v2 # 将 dev-copy 的提交[commit] 变基到(应用到) v2\n    \n    \n    1\n    \n\n 3. 删除原 v2分支，将 dev-copy分支名改为 v2\n    \n    # 当前在 dev-copy 分支\n    git branch -d v2 # 删除分支\n    git branch -m dev-copy v2 # 重命名\n    \n    \n    1\n    2\n    3\n    \n\n\n# git cherry-pick\n\n来源：《git cherry-pick 教程》\n\n用于将单个或几个 [commit]复制到另一个分支。\n\n\n# 基本应用\n\ngit cherry-pick <commitHash> # 将commitHash应用于当前分支\n\n\n1\n\n\n上面命令就会将指定的提交 commitHash，应用于当前分支。这会在当前分支产生一个新的提交，当然它们的哈希值会不一样。\n\ngit cherry-pick命令的参数，不一定是提交的哈希值，分支名也是可以的，表示转移该分支的最新提交。\n\n\n# 转移多个提交\n\nCherry pick 支持一次转移多个提交。\n\ngit cherry-pick <HashA> <HashB> # A和B提交\n\n\n1\n\n\n上面的命令将 A 和 B 两个提交应用到当前分支。这会在当前分支生成两个对应的新提交。\n\n如果想要转移一系列的连续提交，可以使用下面的简便语法。\n\ngit cherry-pick A..B # A到B提交，不包含A\n\n\n1\n\n\n上面的命令可以转移从 A 到 B 的所有提交。它们必须按照正确的顺序放置：提交 A 必须早于提交 B，否则命令将失败，但不会报错。\n\n注意，使用上面的命令，提交 A 将不会包含在 Cherry pick 中。如果要包含提交 A，可以使用下面的语法。\n\ngit cherry-pick A^..B # A到B提交，包含A\n\n\n1\n",normalizedContent:"# rebase分支合并\n\n\n# 说明\n\n以下 v2 是某个需求的开发分支， dev是总的开发分支，v2 是基于 dev分支签出的。\n\n当完成 v2的开发后，需要把代码合并到 dev，我们可以使用 rebase进行合并：\n\n# 首先将 v2 push到远程仓库\ngit add .\ngit commit -m 'xxx'\ngit push origin v2\n\n# 切换到 dev 拉取最新代码\ngit checkout dev\ngit pull origin dev\n\n# 切换到 v2\ngit checkout v2\ngit rebase dev # 将 v2 的所有[commit] 变基到(应用到) dev\n\n# 切换到 dev\ngit checkout dev\ngit merge v2  # 将 dev分支 快进合并 （此时 (head -> dev, v2) [commit] 两个分支指向同一个提交）\n\n# 查看 原v2的[commit]记录 是否在dev分支的最前面（变基成功会把v2的提交记录应用到dev分支的最前面）\ngit log\n\n\t# 如果到这一步发现有问题，尝试使用 git --abort中止变基，如果还是有问题的可以在dev分支上使用《后悔药》操作， 再到v2分支上使用《后悔药》操作，即可使两个分支都回退到 rebase变基 之前的状态\n\n# 试运行项目是否有问题\nyarn start\n\ngit status # 查看状态是否有问题\ngit push origin dev # 推送到远程仓库的 dev\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n\n\n\n# 变基要遵守的准则\n\n几个人同时在一个分支上进行开发和提交时，开发中途请不要私自执行变基，只有在大家都完成工作之后才可以执行变基。\n\n\n# 变基的实质\n\n变基操作的实质是丢弃一些现有的提交，然后相应地新建一些内容一样但实际上不同的提交。 因此，变基操作过后的分支将不要再使用。\n\n\n# 后悔药\n\n# 查看head指针变动记录\ngit reflog\n# 记录示例(当前分支是v2):\n07c398f (head -> v2, master) head@{0}: checkout: moving from master to v2\n07c398f (head -> v2, master) head@{1}: rebase (finish): returning to refs/heads/master\n07c398f (head -> v2, master) head@{2}: rebase (start): checkout v2\n15a97d8 head@{3}: reset: moving to 15a97d8\n07c398f (head -> v2, master) head@{4}: merge v2: fast-forward\n15a97d8 head@{5}: checkout: moving from v2 to master\n07c398f (head -> v2, master) head@{6}: rebase (finish): returning to refs/heads/v2\n07c398f (head -> v2, master) head@{7}: rebase (pick): c\n15a97d8 head@{8}: rebase (start): checkout master # 首次rebase\nd278ecd head@{9}: checkout: moving from master to v2 # rebase前的状态\n15a97d8 head@{10}: commit: d\n\n# 可见，示例中最初的 rebase 操作是 head@{8}，想回退到变基前的状态需让指针指向 head@{9}\ngit reset --hard d278ecd  # 重置当前分支的head为指定[commit]，同时重置暂存区和工作区，与指定[commit]一致\n\n# 此时打印 log 查看是否回到之前的状态\ngit log\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n\n注意：此操作只能回退当前的分支，如其他分支也要回退，需要切换到该分支并执行上面操作。\n\n\n# 开发期间的rebase操作\n\n\n# 背景\n\n有两个分支：\n\ndev\n*v2\n\n\n1\n2\n\n\nv2 是基于 dev切出来的。\n\n提交记录如下：\n\n\t\tdev\na - b - c\n\t\tv2\n\n\n1\n2\n3\n\n\n开发期间，两个分支同时有新的commit ：\n\n\t\t\t\tdev\na - b - c - d - e\n\t\t\\ - f - g\n\t\t\t\tv2\n\n\n1\n2\n3\n4\n\n\n当前你正在 v2进行开发，dev也同时进行开发，并有重大的改变，你需要把 dev的提交同步到 v2。\n\n需求： 把 dev中新的提交同步到 v2，且不能影响 dev分支。\n\n\n# 操作步骤\n\n 1. 基于最新的 dev 切一个新的分支 dev-copy\n    \n    > dev-copy 和 dev 两者的 commit id 一致。\n\n 2. 在 dev-copy中执行rebase，将 dev-copy 的提交变基到 v2\n    \n    git rebase v2 # 将 dev-copy 的提交[commit] 变基到(应用到) v2\n    \n    \n    1\n    \n\n 3. 删除原 v2分支，将 dev-copy分支名改为 v2\n    \n    # 当前在 dev-copy 分支\n    git branch -d v2 # 删除分支\n    git branch -m dev-copy v2 # 重命名\n    \n    \n    1\n    2\n    3\n    \n\n\n# git cherry-pick\n\n来源：《git cherry-pick 教程》\n\n用于将单个或几个 [commit]复制到另一个分支。\n\n\n# 基本应用\n\ngit cherry-pick <commithash> # 将commithash应用于当前分支\n\n\n1\n\n\n上面命令就会将指定的提交 commithash，应用于当前分支。这会在当前分支产生一个新的提交，当然它们的哈希值会不一样。\n\ngit cherry-pick命令的参数，不一定是提交的哈希值，分支名也是可以的，表示转移该分支的最新提交。\n\n\n# 转移多个提交\n\ncherry pick 支持一次转移多个提交。\n\ngit cherry-pick <hasha> <hashb> # a和b提交\n\n\n1\n\n\n上面的命令将 a 和 b 两个提交应用到当前分支。这会在当前分支生成两个对应的新提交。\n\n如果想要转移一系列的连续提交，可以使用下面的简便语法。\n\ngit cherry-pick a..b # a到b提交，不包含a\n\n\n1\n\n\n上面的命令可以转移从 a 到 b 的所有提交。它们必须按照正确的顺序放置：提交 a 必须早于提交 b，否则命令将失败，但不会报错。\n\n注意，使用上面的命令，提交 a 将不会包含在 cherry pick 中。如果要包含提交 a，可以使用下面的语法。\n\ngit cherry-pick a^..b # a到b提交，包含a\n\n\n1\n",charsets:{cjk:!0}},{title:"Git基础与命令",frontmatter:{title:"Git基础与命令",date:"2020-11-18T17:43:57.000Z",permalink:"/pages/635088/",categories:["《Git》学习笔记"],tags:["Git"],readingShow:"top"},regularPath:"/06.%E4%B9%A6%E7%B1%8D/10.%E3%80%8AGit%E3%80%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/20.%E6%96%87%E6%A1%A3%E7%AC%94%E8%AE%B0/10.Git%E5%9F%BA%E7%A1%80%E4%B8%8E%E5%91%BD%E4%BB%A4.html",relativePath:"06.书籍/10.《Git》学习笔记/20.文档笔记/10.Git基础与命令.md",key:"v-76196cb6",path:"/pages/635088/",headers:[{level:2,title:"Git基础",slug:"git基础",normalizedTitle:"git基础",charIndex:2},{level:3,title:"全局配置",slug:"全局配置",normalizedTitle:"全局配置",charIndex:93},{level:3,title:"检查配置信息",slug:"检查配置信息",normalizedTitle:"检查配置信息",charIndex:202},{level:3,title:"获取帮助",slug:"获取帮助",normalizedTitle:"获取帮助",charIndex:237},{level:3,title:"初始化仓库",slug:"初始化仓库",normalizedTitle:"初始化仓库",charIndex:398},{level:3,title:"克隆远程仓库",slug:"克隆远程仓库",normalizedTitle:"克隆远程仓库",charIndex:474},{level:3,title:"检查文件状态",slug:"检查文件状态",normalizedTitle:"检查文件状态",charIndex:623},{level:3,title:"加入暂存区 (跟踪文件)",slug:"加入暂存区-跟踪文件",normalizedTitle:"加入暂存区 (跟踪文件)",charIndex:948},{level:3,title:"忽略文件",slug:"忽略文件",normalizedTitle:"忽略文件",charIndex:1117},{level:3,title:"查看修改的具体内容",slug:"查看修改的具体内容",normalizedTitle:"查看修改的具体内容",charIndex:2103},{level:3,title:"提交更新",slug:"提交更新",normalizedTitle:"提交更新",charIndex:2262},{level:3,title:"跳过使用暂存区域",slug:"跳过使用暂存区域",normalizedTitle:"跳过使用暂存区域",charIndex:2407},{level:2,title:"Git 基础 - 查看提交历史",slug:"git-基础-查看提交历史",normalizedTitle:"git 基础 - 查看提交历史",charIndex:2509},{level:2,title:"Git 基础 - 撤消操作",slug:"git-基础-撤消操作",normalizedTitle:"git 基础 - 撤消操作",charIndex:4027},{level:2,title:"Git 基础 - 远程仓库的使用",slug:"git-基础-远程仓库的使用",normalizedTitle:"git 基础 - 远程仓库的使用",charIndex:4233},{level:3,title:"查看远程仓库",slug:"查看远程仓库",normalizedTitle:"查看远程仓库",charIndex:4254},{level:3,title:"添加远程仓库",slug:"添加远程仓库",normalizedTitle:"添加远程仓库",charIndex:4328},{level:3,title:"从远程仓库中抓取与拉取",slug:"从远程仓库中抓取与拉取",normalizedTitle:"从远程仓库中抓取与拉取",charIndex:4375},{level:3,title:"推送到远程仓库",slug:"推送到远程仓库",normalizedTitle:"推送到远程仓库",charIndex:1104},{level:3,title:"查看某个远程仓库",slug:"查看某个远程仓库",normalizedTitle:"查看某个远程仓库",charIndex:4830},{level:3,title:"远程仓库的重命名与移除",slug:"远程仓库的重命名与移除",normalizedTitle:"远程仓库的重命名与移除",charIndex:4956},{level:2,title:"Git 基础 - 打标签",slug:"git-基础-打标签",normalizedTitle:"git 基础 - 打标签",charIndex:5054},{level:3,title:"列出标签",slug:"列出标签",normalizedTitle:"列出标签",charIndex:5071},{level:3,title:"创建标签",slug:"创建标签",normalizedTitle:"创建标签",charIndex:5169},{level:3,title:"附注标签",slug:"附注标签",normalizedTitle:"附注标签",charIndex:5204},{level:3,title:"轻量标签",slug:"轻量标签",normalizedTitle:"轻量标签",charIndex:5186},{level:3,title:"后期打标签",slug:"后期打标签",normalizedTitle:"后期打标签",charIndex:5898},{level:3,title:"共享标签",slug:"共享标签",normalizedTitle:"共享标签",charIndex:6299},{level:3,title:"删除标签",slug:"删除标签",normalizedTitle:"删除标签",charIndex:6532},{level:3,title:"检出标签",slug:"检出标签",normalizedTitle:"检出标签",charIndex:7019},{level:2,title:"Git 命令别名",slug:"git-命令别名",normalizedTitle:"git 命令别名",charIndex:8140}],lastUpdated:"2022/9/22 下午4:28:09",lastUpdatedTimestamp:1663835289e3,headersStr:"Git基础 全局配置 检查配置信息 获取帮助 初始化仓库 克隆远程仓库 检查文件状态 加入暂存区 (跟踪文件) 忽略文件 查看修改的具体内容 提交更新 跳过使用暂存区域 Git 基础 - 查看提交历史 Git 基础 - 撤消操作 Git 基础 - 远程仓库的使用 查看远程仓库 添加远程仓库 从远程仓库中抓取与拉取 推送到远程仓库 查看某个远程仓库 远程仓库的重命名与移除 Git 基础 - 打标签 列出标签 创建标签 附注标签 轻量标签 后期打标签 共享标签 删除标签 检出标签 Git 命令别名",content:"# Git基础与命令\n\n官方文档（中文）：https://git-scm.com/book/zh/v2\n\n> 本文档是根据官方文档来编写的，以官方文档为准。\n\n\n# Git基础\n\n\n# 全局配置\n\ngit config --global user.name 'your name'\ngit config --global user.email 'xxx@xx.com'\n\n\n1\n2\n\n\n自报家门\n\n\n# 检查配置信息\n\ngit config --list\n\n\n1\n\n\n\n# 获取帮助\n\n# 获取全局帮助手册\ngit help\n\n# 获取特定命令的详细版帮助手册 (两个命令是等价的)\ngit help <某个命令>\ngit <某个命令> --help # 两个横杠\n\n# 获取特定命令的简明版帮助手册\ngit <某个命令> -h  # 一个横杠\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n\n# 初始化仓库\n\n# 本地目录初始化仓库\ngit init\n\n\n1\n2\n\n\n如果你是从远程仓库clone的项目，则该项目是已经初始化好的git仓库\n\n\n# 克隆远程仓库\n\n# 克隆\ngit clone <url>\n\n# 克隆同时修改目录名\ngit clone <url> <name>\n\n\n1\n2\n3\n4\n5\n\n\n初次克隆某个仓库的时候，工作目录中的所有文件都属于已跟踪文件，并处于未修改状态，因为 Git 刚刚检出了它们， 而你尚未编辑过它们\n\n\n# 检查文件状态\n\n# 查看详细状态说明\ngit status\n\n# 查看简明状态说明\ngit status -s  # -s 或 --short\n M README # 已修改，但未暂存 （M的位置靠右，红色）\nMM Rakefile # 已修改，暂存后又作了修改（有暂存和未暂存）\nA  lib/git.rb # 新添加到暂存区，未提交\nM  lib/simplegit.rb # 已修改，已暂存 （M的位置靠左，绿色）\n?? LICENSE.txt # 新添加，未跟踪\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n * git目录中的文件状态包含：是否跟踪、是否修改、是否已存入暂存区\n * 参数的一个横杠表示缩写，两个横杠表示全称。\n\n\n# 加入暂存区 (跟踪文件)\n\n# 文件加入暂存区（跟踪指定文件)\ngit add <files>\n\n\n1\n2\n\n\ngit add 命令使用文件或目录的路径作为参数；如果参数是目录的路径，该命令将递归地跟踪该目录下的所有文件。\n\nadd 命令是将文件加入到暂存区，commit 命令的提交到本地仓库，push 命令是推送到远程仓库。\n\n\n# 忽略文件\n\n添加一个名为 .gitignore 的文件，列出要忽略的文件的模式\n\n*.[oa]  # 忽略以 .o 或 .a 结尾的文件（一般这类文件是编译过程出现）\n*~      # 忽略以 ~ 结尾的文件（一般是文本编辑软件保存的副本）\n\n\n1\n2\n\n\n文件 .gitignore 的格式规范如下：\n\n * 所有空行或者以 # 开头的行都会被 Git 忽略（注释符号）。\n\n * 可以使用标准的 glob 模式匹配，它会递归地应用在整个工作区中。\n   \n   > glob 模式是指 shell 所使用的简化了的正则表达式\n\n * 匹配模式可以以（/）开头防止递归。\n\n * 匹配模式可以以（/）结尾指定目录。\n\n * 要忽略指定模式以外的文件或目录，可以在模式前加上叹号（!）取反。\n\n----------------------------------------\n\n * 星号（*）匹配零个或多个任意字符\n * [abc] 匹配任何一个列在方括号中的字符 （这个例子要么匹配一个 a，要么匹配一个 b，要么匹配一个 c）\n * 问号（?）只匹配一个任意字符\n * [0-9] 表示匹配所有 0 到 9 的数字。在方括号中使用短划线分隔两个字符， 表示所有在这两个字符范围内的都可以匹配\n * 使用两个星号（**）表示匹配任意中间目录，比如 a/**/z 可以匹配 a/z 、 a/b/z 或 a/b/c/z 等。\n\n# 忽略所有的 .a 文件\n*.a\n\n# 但跟踪所有的 lib.a，即便你在前面忽略了 .a 文件\n!lib.a\n\n# 只忽略当前目录下的 TODO 文件，而不忽略 subdir/TODO\n/TODO\n\n# 忽略任何目录下名为 build 的文件夹\nbuild/\n\n# 忽略 doc/notes.txt，但不忽略 doc/server/arch.txt\ndoc/*.txt\n\n# 忽略 doc/ 目录及其所有子目录下的 .pdf 文件\ndoc/**/*.pdf\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\nGitHub 有一个十分详细的针对数十种项目及语言的 .gitignore 文件列表， 你可以在 https://github.com/github/gitignore 找到它。\n\n\n# 查看修改的具体内容\n\ngit diff # 比较修改之后还没有暂存起来的变化内容。\n\ngit diff --staged # 查看已暂存的将要添加到下次提交里的内容\n\n\n1\n2\n3\n\n\ngit status 只能查看文件变动的状态，并不能查看具体修改了哪些内容。使用 git diff可以看到具体变动的内容。\n\n\n# 提交更新\n\ngit commit # 未带参数的会打开默认文本编辑器让你输入提交说明\n\ngit commit -m '提交说明' # 带-m参数直接输入提交说明\n\n\n1\n2\n3\n\n\n使用 git commit提交更新，在此之前，务必确认所有变动已经被 git add添加到暂存区。\n\n\n# 跳过使用暂存区域\n\ngit commit -a -m '提交说明'\n\n\n1\n\n\n添加 -a选项可以跳过 git add 步骤，把已经跟踪过的文件一并提交。\n\n注意：这个操作无法提交未跟踪的文件。\n\n\n# Git 基础 - 查看提交历史\n\ngit log\n\n\n1\n\n\n不传入任何参数的默认情况下，git log 会按时间先后顺序列出所有的提交，最近的更新排在最上面。\n\n此命令打印的数据中有一项是一长串的 SHA-1 校验码。\n\n带入 -p或 --patch查看提交的具体差异：\n\ngit log -p -2 # -p显示差异  -2显示最近的提交次数\n\n\n1\n\n\n--stat 显示每次提交的差异统计\n\ngit log --stat\n\n\n1\n\n\n--pretty 这个选项可以使用不同于默认格式的方式展示提交历史\n\n这个选项有一些内建的子选项供你使用。 比如 oneline 会将每个提交放在一行显示，在浏览大量的提交时非常有用。 另外还有 short，full 和 fuller 选项，它们展示信息的格式基本一致，但是详尽程度不一：\n\n$ git log --pretty=oneline\nca82a6dff817ec66f44342007202690a93763949 changed the version number\n085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7 removed unnecessary test\na11bef06a3f659402fe7563abf99ad00de2209e6 first commit\n\n\n1\n2\n3\n4\n\n\n最有意思的是 format ，可以定制记录的显示格式。 这样的输出对后期提取分析格外有用——因为你知道输出的格式不会随着 Git 的更新而发生改变：\n\n$ git log --pretty=format:\"%h - %an, %ar : %s\"\nca82a6d - Scott Chacon, 6 years ago : changed the version number\n085bb3b - Scott Chacon, 6 years ago : removed unnecessary test\na11bef0 - Scott Chacon, 6 years ago : first commit\n\n\n1\n2\n3\n4\n\n\ngit log --pretty=format 常用的选项 列出了 format 接受的常用格式占位符的写法及其代表的意义。\n\n当 oneline 或 format 与另一个 log 选项 --graph 结合使用时尤其有用。 这个选项添加了一些 ASCII 字符串来形象地展示你的分支、合并历史：\n\n$ git log --pretty=format:\"%h %s\" --graph\n* 2d3acf9 ignore errors from SIGCHLD on trap\n*  5e3ee11 Merge branch 'master' of git://github.com/dustin/grit\n|\\\n| * 420eac9 Added a method for getting the current branch.\n* | 30e367c timeout code and tests\n* | 5a09431 add timeout protection to grit\n* | e1193f8 support for heads with slashes in them\n|/\n* d6016bc require time for xmlschema\n*  11d191e Merge branch 'defunkt' into local\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n\n# Git 基础 - 撤消操作\n\n你提交后发现忘记了暂存某些需要的修改，可以像下面这样操作：\n\n$ git commit -m 'initial commit'\n$ git add forgotten_file\n$ git commit --amend # 重新提交，且只有一次提交记录\n\n\n1\n2\n3\n\n\n最终你只会有一个提交——第二次提交将代替第一次提交的结果。\n\n更多撤销操作请了解 reset命令。\n\n\n# Git 基础 - 远程仓库的使用\n\n\n# 查看远程仓库\n\ngit remote # 仅显示远程仓库的名称\ngit remote -v # 显示远程仓库的名称 + 地址\n\n\n1\n2\n\n\n\n# 添加远程仓库\n\n git remote add <远程仓库名> <url>\n\n\n1\n\n\n\n# 从远程仓库中抓取与拉取\n\n就如刚才所见，从远程仓库中获得数据，可以执行：\n\ngit fetch <remote>\n\n\n1\n\n\n这个命令会访问远程仓库，从中拉取所有你还没有的数据。 执行完成后，你将会拥有那个远程仓库中所有分支的引用，可以随时合并或查看。\n\n注意： git fetch 命令只会将数据下载到你的本地仓库——它并不会自动合并或修改你当前的工作。 当准备好时你必须手动将其合并入你的工作。\n\ngit pull\n\n\n1\n\n\n用 git pull 命令来自动抓取后合并该远程分支到当前分支。 这或许是个更加简单舒服的工作流程。默认情况下，git clone 命令会自动设置本地 master 分支跟踪克隆的远程仓库的 master 分支（或其它名字的默认分支）。 运行 git pull 通常会从最初克隆的服务器上抓取数据并自动尝试合并到当前所在的分支。\n\n\n# 推送到远程仓库\n\ngit push <remote> <branch> # git push origin master\n\n\n1\n\n\n\n# 查看某个远程仓库\n\n git remote show <remote> # git remote show origin\n\n\n1\n\n\n查看远程仓库的详细信息。这个命令列出了当你在特定的分支上执行 git push 会自动地推送到哪一个远程分支\n\n\n# 远程仓库的重命名与移除\n\ngit remote rename <原名> <新名> # 重命名\ngit remote remove paul <remote># 移除远程仓库\n\n\n1\n2\n\n\n\n# Git 基础 - 打标签\n\n\n# 列出标签\n\ngit tag # 完整标签列表\ngit tag -l \"v2.0*\" # 只显示包含 v2.0 的标签。 注意加星号(*)\n\n\n1\n2\n\n\n-l 或 --list 都可以。\n\n\n# 创建标签\n\nGit 支持两种标签：轻量标签（lightweight）与附注标签（annotated）。\n\n轻量标签很像一个不会改变的分支——它只是某个特定提交的引用。\n\n而附注标签是存储在 Git 数据库中的一个完整对象， 它们是可以被校验的，其中包含打标签者的名字、电子邮件地址、日期时间， 此外还有一个标签信息，并且可以使用 GNU Privacy Guard （GPG）签名并验证。 通常会建议创建附注标签，这样你可以拥有以上所有信息。但是如果你只是想用一个临时的标签， 或者因为某些原因不想要保存这些信息，那么也可以用轻量标签。\n\n\n# 附注标签\n\ngit tag -a v1.4 -m \"my version 1.4\" # -a表示add， -m 表示附件信息\n\n\n1\n\n\n通过使用 git show 命令可以看到标签信息和与之对应的提交信息：\n\ngit show v1.4\n\n\n1\n\n\n\n# 轻量标签\n\n轻量标签本质上是将提交校验和存储到一个文件中——没有保存任何其他信息。 创建轻量标签，不需要使用 -a、-s 或 -m 选项，只需要提供标签名字：\n\ngit tag v1.4-lw # 不需要添加选项\n\n\n1\n\n\n这时，如果在标签上运行 git show，你不会看到额外的标签信息。 命令只会显示出提交信息：\n\n$ git show v1.4-lw\ncommit ca82a6dff817ec66f44342007202690a93763949\nAuthor: Scott Chacon <schacon@gee-mail.com>\nDate:   Mon Mar 17 21:52:11 2008 -0700\n\n\n1\n2\n3\n4\n\n\n\n# 后期打标签\n\n你也可以对过去的提交打标签。 假设提交历史是这样的：\n\n$ git log --pretty=oneline\n166ae0c4d3f420721acbb115cc33848dfcc2121a started write support\n9fceb02d0ae598e95dc970b74767f19372d61af8 updated rakefile\n8a5cbc430f1a9c3d00faaeffd07798508422908a updated readme\n\n\n1\n2\n3\n4\n\n\n现在，假设在 v1.2 时你忘记给项目打标签，也就是在 “updated rakefile” 提交。 你可以在之后补上标签。 要在那个提交上打标签，你需要在命令的末尾指定提交的校验和（或部分校验和）：\n\n$ git tag -a v1.2 9fceb02 # 打的标签属于附注标签\n\n\n1\n\n\n\n# 共享标签\n\ngit push 命令并不会传送标签到远程仓库服务器上。 在创建完标签后你必须显式地推送标签到共享服务器上。 这个过程就像共享远程分支一样——你可以运行 git push origin <tagname>。\n\ngit push origin v1.5 # 显式地推送标签到远程仓库\ngit push origin --tags # 一次性推送所有不在远程仓库上的标签\n\n\n1\n2\n\n\n现在，当其他人从仓库中克隆或拉取，他们也能得到你的那些标签。\n\n\n# 删除标签\n\n要删除掉你本地仓库上的标签，可以使用命令 git tag -d <tagname>。 例如，可以使用以下命令删除一个轻量标签：\n\n$ git tag -d v1.4-lw\nDeleted tag 'v1.4-lw' (was e7d5add)\n\n\n1\n2\n\n\n注意上述命令并不会从任何远程仓库中移除这个标签，你必须用 git push <remote> :refs/tags/<tagname> 来更新你的远程仓库：\n\n第一种变体是 git push <remote> :refs/tags/<tagname> ：\n\n$ git push origin :refs/tags/v1.4-lw\nTo /git@github.com:schacon/simplegit.git\n - [deleted]         v1.4-lw\n\n\n1\n2\n3\n\n\n上面这种操作的含义是，将冒号前面的空值推送到远程标签名，从而高效地删除它。\n\n第二种更直观的删除远程标签的方式是：\n\n$ git push origin --delete <tagname>\n\n\n1\n\n\n\n# 检出标签\n\n如果你想查看某个标签所指向的文件版本，可以使用 git checkout 命令， 虽然这会使你的仓库处于“分离头指针（detached HEAD）”的状态——这个状态有些不好的副作用：\n\n$ git checkout 2.0.0\nNote: checking out '2.0.0'.\n\nYou are in 'detached HEAD' state. You can look around, make experimental\nchanges and commit them, and you can discard any commits you make in this\nstate without impacting any branches by performing another checkout.\n\nIf you want to create a new branch to retain commits you create, you may\ndo so (now or later) by using -b with the checkout command again. Example:\n\n  git checkout -b <new-branch>\n\nHEAD is now at 99ada87... Merge pull request #89 from schacon/appendix-final\n\n$ git checkout 2.0-beta-0.1\nPrevious HEAD position was 99ada87... Merge pull request #89 from schacon/appendix-final\nHEAD is now at df3f601... add atlas.json and cover image\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n在“分离头指针”状态下，如果你做了某些更改然后提交它们，标签不会发生变化， 但你的新提交将不属于任何分支，并且将无法访问，除非通过确切的提交哈希才能访问。 因此，如果你需要进行更改，比如你要修复旧版本中的错误，那么通常需要创建一个新分支：\n\n$ git checkout -b version2 v2.0.0\nSwitched to a new branch 'version2'\n\n\n1\n2\n\n\n如果在这之后又进行了一次提交，version2 分支就会因为这个改动向前移动， 此时它就会和 v2.0.0 标签稍微有些不同，这时就要当心了。\n\n\n# Git 命令别名\n\nGit 并不会在你输入部分命令时自动推断出你想要的命令。 如果不想每次都输入完整的 Git 命令，可以通过 git config 文件来轻松地为每一个命令设置一个别名。 这里有一些例子你可以试试：\n\n$ git config --global alias.co checkout\n$ git config --global alias.br branch\n$ git config --global alias.ci commit\n$ git config --global alias.st status\n\n\n1\n2\n3\n4\n\n\n这意味着，当要输入 git commit 时，只需要输入 git ci。\n\n在创建你认为应该存在的命令时这个技术会很有用。 例如，为了解决取消暂存文件的易用性问题，可以向 Git 中添加你自己的取消暂存别名：\n\n$ git config --global alias.unstage 'reset HEAD --'\n\n\n1\n\n\n这会使下面的两个命令等价：\n\n$ git unstage fileA\n$ git reset HEAD -- fileA\n\n\n1\n2\n\n\n这样看起来更清楚一些。 通常也会添加一个 last 命令，像这样：\n\n$ git config --global alias.last 'log -1 HEAD'\n\n\n1\n\n\n这样，可以轻松地看到最后一次提交：\n\n$ git last\ncommit 66938dae3329c7aebe598c2246a8e6af90d04646\nAuthor: Josh Goebel <dreamer3@example.com>\nDate:   Tue Aug 26 19:48:51 2008 +0800\n\n    test for current head\n\n    Signed-off-by: Scott Chacon <schacon@example.com>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n可以看出，Git 只是简单地将别名替换为对应的命令。 然而，你可能想要执行外部命令，而不是一个 Git 子命令。 如果是那样的话，可以在命令前面加入 ! 符号。 如果你自己要写一些与 Git 仓库协作的工具的话，那会很有用。 我们现在演示将 git visual 定义为 gitk 的别名：\n\n$ git config --global alias.visual '!gitk'\n\n\n1\n",normalizedContent:"# git基础与命令\n\n官方文档（中文）：https://git-scm.com/book/zh/v2\n\n> 本文档是根据官方文档来编写的，以官方文档为准。\n\n\n# git基础\n\n\n# 全局配置\n\ngit config --global user.name 'your name'\ngit config --global user.email 'xxx@xx.com'\n\n\n1\n2\n\n\n自报家门\n\n\n# 检查配置信息\n\ngit config --list\n\n\n1\n\n\n\n# 获取帮助\n\n# 获取全局帮助手册\ngit help\n\n# 获取特定命令的详细版帮助手册 (两个命令是等价的)\ngit help <某个命令>\ngit <某个命令> --help # 两个横杠\n\n# 获取特定命令的简明版帮助手册\ngit <某个命令> -h  # 一个横杠\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n\n# 初始化仓库\n\n# 本地目录初始化仓库\ngit init\n\n\n1\n2\n\n\n如果你是从远程仓库clone的项目，则该项目是已经初始化好的git仓库\n\n\n# 克隆远程仓库\n\n# 克隆\ngit clone <url>\n\n# 克隆同时修改目录名\ngit clone <url> <name>\n\n\n1\n2\n3\n4\n5\n\n\n初次克隆某个仓库的时候，工作目录中的所有文件都属于已跟踪文件，并处于未修改状态，因为 git 刚刚检出了它们， 而你尚未编辑过它们\n\n\n# 检查文件状态\n\n# 查看详细状态说明\ngit status\n\n# 查看简明状态说明\ngit status -s  # -s 或 --short\n m readme # 已修改，但未暂存 （m的位置靠右，红色）\nmm rakefile # 已修改，暂存后又作了修改（有暂存和未暂存）\na  lib/git.rb # 新添加到暂存区，未提交\nm  lib/simplegit.rb # 已修改，已暂存 （m的位置靠左，绿色）\n?? license.txt # 新添加，未跟踪\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n * git目录中的文件状态包含：是否跟踪、是否修改、是否已存入暂存区\n * 参数的一个横杠表示缩写，两个横杠表示全称。\n\n\n# 加入暂存区 (跟踪文件)\n\n# 文件加入暂存区（跟踪指定文件)\ngit add <files>\n\n\n1\n2\n\n\ngit add 命令使用文件或目录的路径作为参数；如果参数是目录的路径，该命令将递归地跟踪该目录下的所有文件。\n\nadd 命令是将文件加入到暂存区，commit 命令的提交到本地仓库，push 命令是推送到远程仓库。\n\n\n# 忽略文件\n\n添加一个名为 .gitignore 的文件，列出要忽略的文件的模式\n\n*.[oa]  # 忽略以 .o 或 .a 结尾的文件（一般这类文件是编译过程出现）\n*~      # 忽略以 ~ 结尾的文件（一般是文本编辑软件保存的副本）\n\n\n1\n2\n\n\n文件 .gitignore 的格式规范如下：\n\n * 所有空行或者以 # 开头的行都会被 git 忽略（注释符号）。\n\n * 可以使用标准的 glob 模式匹配，它会递归地应用在整个工作区中。\n   \n   > glob 模式是指 shell 所使用的简化了的正则表达式\n\n * 匹配模式可以以（/）开头防止递归。\n\n * 匹配模式可以以（/）结尾指定目录。\n\n * 要忽略指定模式以外的文件或目录，可以在模式前加上叹号（!）取反。\n\n----------------------------------------\n\n * 星号（*）匹配零个或多个任意字符\n * [abc] 匹配任何一个列在方括号中的字符 （这个例子要么匹配一个 a，要么匹配一个 b，要么匹配一个 c）\n * 问号（?）只匹配一个任意字符\n * [0-9] 表示匹配所有 0 到 9 的数字。在方括号中使用短划线分隔两个字符， 表示所有在这两个字符范围内的都可以匹配\n * 使用两个星号（**）表示匹配任意中间目录，比如 a/**/z 可以匹配 a/z 、 a/b/z 或 a/b/c/z 等。\n\n# 忽略所有的 .a 文件\n*.a\n\n# 但跟踪所有的 lib.a，即便你在前面忽略了 .a 文件\n!lib.a\n\n# 只忽略当前目录下的 todo 文件，而不忽略 subdir/todo\n/todo\n\n# 忽略任何目录下名为 build 的文件夹\nbuild/\n\n# 忽略 doc/notes.txt，但不忽略 doc/server/arch.txt\ndoc/*.txt\n\n# 忽略 doc/ 目录及其所有子目录下的 .pdf 文件\ndoc/**/*.pdf\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\ngithub 有一个十分详细的针对数十种项目及语言的 .gitignore 文件列表， 你可以在 https://github.com/github/gitignore 找到它。\n\n\n# 查看修改的具体内容\n\ngit diff # 比较修改之后还没有暂存起来的变化内容。\n\ngit diff --staged # 查看已暂存的将要添加到下次提交里的内容\n\n\n1\n2\n3\n\n\ngit status 只能查看文件变动的状态，并不能查看具体修改了哪些内容。使用 git diff可以看到具体变动的内容。\n\n\n# 提交更新\n\ngit commit # 未带参数的会打开默认文本编辑器让你输入提交说明\n\ngit commit -m '提交说明' # 带-m参数直接输入提交说明\n\n\n1\n2\n3\n\n\n使用 git commit提交更新，在此之前，务必确认所有变动已经被 git add添加到暂存区。\n\n\n# 跳过使用暂存区域\n\ngit commit -a -m '提交说明'\n\n\n1\n\n\n添加 -a选项可以跳过 git add 步骤，把已经跟踪过的文件一并提交。\n\n注意：这个操作无法提交未跟踪的文件。\n\n\n# git 基础 - 查看提交历史\n\ngit log\n\n\n1\n\n\n不传入任何参数的默认情况下，git log 会按时间先后顺序列出所有的提交，最近的更新排在最上面。\n\n此命令打印的数据中有一项是一长串的 sha-1 校验码。\n\n带入 -p或 --patch查看提交的具体差异：\n\ngit log -p -2 # -p显示差异  -2显示最近的提交次数\n\n\n1\n\n\n--stat 显示每次提交的差异统计\n\ngit log --stat\n\n\n1\n\n\n--pretty 这个选项可以使用不同于默认格式的方式展示提交历史\n\n这个选项有一些内建的子选项供你使用。 比如 oneline 会将每个提交放在一行显示，在浏览大量的提交时非常有用。 另外还有 short，full 和 fuller 选项，它们展示信息的格式基本一致，但是详尽程度不一：\n\n$ git log --pretty=oneline\nca82a6dff817ec66f44342007202690a93763949 changed the version number\n085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7 removed unnecessary test\na11bef06a3f659402fe7563abf99ad00de2209e6 first commit\n\n\n1\n2\n3\n4\n\n\n最有意思的是 format ，可以定制记录的显示格式。 这样的输出对后期提取分析格外有用——因为你知道输出的格式不会随着 git 的更新而发生改变：\n\n$ git log --pretty=format:\"%h - %an, %ar : %s\"\nca82a6d - scott chacon, 6 years ago : changed the version number\n085bb3b - scott chacon, 6 years ago : removed unnecessary test\na11bef0 - scott chacon, 6 years ago : first commit\n\n\n1\n2\n3\n4\n\n\ngit log --pretty=format 常用的选项 列出了 format 接受的常用格式占位符的写法及其代表的意义。\n\n当 oneline 或 format 与另一个 log 选项 --graph 结合使用时尤其有用。 这个选项添加了一些 ascii 字符串来形象地展示你的分支、合并历史：\n\n$ git log --pretty=format:\"%h %s\" --graph\n* 2d3acf9 ignore errors from sigchld on trap\n*  5e3ee11 merge branch 'master' of git://github.com/dustin/grit\n|\\\n| * 420eac9 added a method for getting the current branch.\n* | 30e367c timeout code and tests\n* | 5a09431 add timeout protection to grit\n* | e1193f8 support for heads with slashes in them\n|/\n* d6016bc require time for xmlschema\n*  11d191e merge branch 'defunkt' into local\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n\n# git 基础 - 撤消操作\n\n你提交后发现忘记了暂存某些需要的修改，可以像下面这样操作：\n\n$ git commit -m 'initial commit'\n$ git add forgotten_file\n$ git commit --amend # 重新提交，且只有一次提交记录\n\n\n1\n2\n3\n\n\n最终你只会有一个提交——第二次提交将代替第一次提交的结果。\n\n更多撤销操作请了解 reset命令。\n\n\n# git 基础 - 远程仓库的使用\n\n\n# 查看远程仓库\n\ngit remote # 仅显示远程仓库的名称\ngit remote -v # 显示远程仓库的名称 + 地址\n\n\n1\n2\n\n\n\n# 添加远程仓库\n\n git remote add <远程仓库名> <url>\n\n\n1\n\n\n\n# 从远程仓库中抓取与拉取\n\n就如刚才所见，从远程仓库中获得数据，可以执行：\n\ngit fetch <remote>\n\n\n1\n\n\n这个命令会访问远程仓库，从中拉取所有你还没有的数据。 执行完成后，你将会拥有那个远程仓库中所有分支的引用，可以随时合并或查看。\n\n注意： git fetch 命令只会将数据下载到你的本地仓库——它并不会自动合并或修改你当前的工作。 当准备好时你必须手动将其合并入你的工作。\n\ngit pull\n\n\n1\n\n\n用 git pull 命令来自动抓取后合并该远程分支到当前分支。 这或许是个更加简单舒服的工作流程。默认情况下，git clone 命令会自动设置本地 master 分支跟踪克隆的远程仓库的 master 分支（或其它名字的默认分支）。 运行 git pull 通常会从最初克隆的服务器上抓取数据并自动尝试合并到当前所在的分支。\n\n\n# 推送到远程仓库\n\ngit push <remote> <branch> # git push origin master\n\n\n1\n\n\n\n# 查看某个远程仓库\n\n git remote show <remote> # git remote show origin\n\n\n1\n\n\n查看远程仓库的详细信息。这个命令列出了当你在特定的分支上执行 git push 会自动地推送到哪一个远程分支\n\n\n# 远程仓库的重命名与移除\n\ngit remote rename <原名> <新名> # 重命名\ngit remote remove paul <remote># 移除远程仓库\n\n\n1\n2\n\n\n\n# git 基础 - 打标签\n\n\n# 列出标签\n\ngit tag # 完整标签列表\ngit tag -l \"v2.0*\" # 只显示包含 v2.0 的标签。 注意加星号(*)\n\n\n1\n2\n\n\n-l 或 --list 都可以。\n\n\n# 创建标签\n\ngit 支持两种标签：轻量标签（lightweight）与附注标签（annotated）。\n\n轻量标签很像一个不会改变的分支——它只是某个特定提交的引用。\n\n而附注标签是存储在 git 数据库中的一个完整对象， 它们是可以被校验的，其中包含打标签者的名字、电子邮件地址、日期时间， 此外还有一个标签信息，并且可以使用 gnu privacy guard （gpg）签名并验证。 通常会建议创建附注标签，这样你可以拥有以上所有信息。但是如果你只是想用一个临时的标签， 或者因为某些原因不想要保存这些信息，那么也可以用轻量标签。\n\n\n# 附注标签\n\ngit tag -a v1.4 -m \"my version 1.4\" # -a表示add， -m 表示附件信息\n\n\n1\n\n\n通过使用 git show 命令可以看到标签信息和与之对应的提交信息：\n\ngit show v1.4\n\n\n1\n\n\n\n# 轻量标签\n\n轻量标签本质上是将提交校验和存储到一个文件中——没有保存任何其他信息。 创建轻量标签，不需要使用 -a、-s 或 -m 选项，只需要提供标签名字：\n\ngit tag v1.4-lw # 不需要添加选项\n\n\n1\n\n\n这时，如果在标签上运行 git show，你不会看到额外的标签信息。 命令只会显示出提交信息：\n\n$ git show v1.4-lw\ncommit ca82a6dff817ec66f44342007202690a93763949\nauthor: scott chacon <schacon@gee-mail.com>\ndate:   mon mar 17 21:52:11 2008 -0700\n\n\n1\n2\n3\n4\n\n\n\n# 后期打标签\n\n你也可以对过去的提交打标签。 假设提交历史是这样的：\n\n$ git log --pretty=oneline\n166ae0c4d3f420721acbb115cc33848dfcc2121a started write support\n9fceb02d0ae598e95dc970b74767f19372d61af8 updated rakefile\n8a5cbc430f1a9c3d00faaeffd07798508422908a updated readme\n\n\n1\n2\n3\n4\n\n\n现在，假设在 v1.2 时你忘记给项目打标签，也就是在 “updated rakefile” 提交。 你可以在之后补上标签。 要在那个提交上打标签，你需要在命令的末尾指定提交的校验和（或部分校验和）：\n\n$ git tag -a v1.2 9fceb02 # 打的标签属于附注标签\n\n\n1\n\n\n\n# 共享标签\n\ngit push 命令并不会传送标签到远程仓库服务器上。 在创建完标签后你必须显式地推送标签到共享服务器上。 这个过程就像共享远程分支一样——你可以运行 git push origin <tagname>。\n\ngit push origin v1.5 # 显式地推送标签到远程仓库\ngit push origin --tags # 一次性推送所有不在远程仓库上的标签\n\n\n1\n2\n\n\n现在，当其他人从仓库中克隆或拉取，他们也能得到你的那些标签。\n\n\n# 删除标签\n\n要删除掉你本地仓库上的标签，可以使用命令 git tag -d <tagname>。 例如，可以使用以下命令删除一个轻量标签：\n\n$ git tag -d v1.4-lw\ndeleted tag 'v1.4-lw' (was e7d5add)\n\n\n1\n2\n\n\n注意上述命令并不会从任何远程仓库中移除这个标签，你必须用 git push <remote> :refs/tags/<tagname> 来更新你的远程仓库：\n\n第一种变体是 git push <remote> :refs/tags/<tagname> ：\n\n$ git push origin :refs/tags/v1.4-lw\nto /git@github.com:schacon/simplegit.git\n - [deleted]         v1.4-lw\n\n\n1\n2\n3\n\n\n上面这种操作的含义是，将冒号前面的空值推送到远程标签名，从而高效地删除它。\n\n第二种更直观的删除远程标签的方式是：\n\n$ git push origin --delete <tagname>\n\n\n1\n\n\n\n# 检出标签\n\n如果你想查看某个标签所指向的文件版本，可以使用 git checkout 命令， 虽然这会使你的仓库处于“分离头指针（detached head）”的状态——这个状态有些不好的副作用：\n\n$ git checkout 2.0.0\nnote: checking out '2.0.0'.\n\nyou are in 'detached head' state. you can look around, make experimental\nchanges and commit them, and you can discard any commits you make in this\nstate without impacting any branches by performing another checkout.\n\nif you want to create a new branch to retain commits you create, you may\ndo so (now or later) by using -b with the checkout command again. example:\n\n  git checkout -b <new-branch>\n\nhead is now at 99ada87... merge pull request #89 from schacon/appendix-final\n\n$ git checkout 2.0-beta-0.1\nprevious head position was 99ada87... merge pull request #89 from schacon/appendix-final\nhead is now at df3f601... add atlas.json and cover image\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n在“分离头指针”状态下，如果你做了某些更改然后提交它们，标签不会发生变化， 但你的新提交将不属于任何分支，并且将无法访问，除非通过确切的提交哈希才能访问。 因此，如果你需要进行更改，比如你要修复旧版本中的错误，那么通常需要创建一个新分支：\n\n$ git checkout -b version2 v2.0.0\nswitched to a new branch 'version2'\n\n\n1\n2\n\n\n如果在这之后又进行了一次提交，version2 分支就会因为这个改动向前移动， 此时它就会和 v2.0.0 标签稍微有些不同，这时就要当心了。\n\n\n# git 命令别名\n\ngit 并不会在你输入部分命令时自动推断出你想要的命令。 如果不想每次都输入完整的 git 命令，可以通过 git config 文件来轻松地为每一个命令设置一个别名。 这里有一些例子你可以试试：\n\n$ git config --global alias.co checkout\n$ git config --global alias.br branch\n$ git config --global alias.ci commit\n$ git config --global alias.st status\n\n\n1\n2\n3\n4\n\n\n这意味着，当要输入 git commit 时，只需要输入 git ci。\n\n在创建你认为应该存在的命令时这个技术会很有用。 例如，为了解决取消暂存文件的易用性问题，可以向 git 中添加你自己的取消暂存别名：\n\n$ git config --global alias.unstage 'reset head --'\n\n\n1\n\n\n这会使下面的两个命令等价：\n\n$ git unstage filea\n$ git reset head -- filea\n\n\n1\n2\n\n\n这样看起来更清楚一些。 通常也会添加一个 last 命令，像这样：\n\n$ git config --global alias.last 'log -1 head'\n\n\n1\n\n\n这样，可以轻松地看到最后一次提交：\n\n$ git last\ncommit 66938dae3329c7aebe598c2246a8e6af90d04646\nauthor: josh goebel <dreamer3@example.com>\ndate:   tue aug 26 19:48:51 2008 +0800\n\n    test for current head\n\n    signed-off-by: scott chacon <schacon@example.com>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n可以看出，git 只是简单地将别名替换为对应的命令。 然而，你可能想要执行外部命令，而不是一个 git 子命令。 如果是那样的话，可以在命令前面加入 ! 符号。 如果你自己要写一些与 git 仓库协作的工具的话，那会很有用。 我们现在演示将 git visual 定义为 gitk 的别名：\n\n$ git config --global alias.visual '!gitk'\n\n\n1\n",charsets:{cjk:!0}},{title:"异步遍历器",frontmatter:{title:"异步遍历器",date:"2020-02-09T16:00:29.000Z",permalink:"/pages/16121351be68691b",author:"阮一峰",categories:["《ES6 教程》笔记"],tags:["ES6"],readingShow:"top"},regularPath:"/06.%E4%B9%A6%E7%B1%8D/05.%E3%80%8AES6%20%E6%95%99%E7%A8%8B%E3%80%8B%E7%AC%94%E8%AE%B0/27.%E5%BC%82%E6%AD%A5%E9%81%8D%E5%8E%86%E5%99%A8.html",relativePath:"06.书籍/05.《ES6 教程》笔记/27.异步遍历器.md",key:"v-038e5574",path:"/pages/16121351be68691b/",headers:[{level:2,title:"同步遍历器的问题",slug:"同步遍历器的问题",normalizedTitle:"同步遍历器的问题",charIndex:12},{level:2,title:"异步遍历的接口",slug:"异步遍历的接口",normalizedTitle:"异步遍历的接口",charIndex:1708},{level:2,title:"for await...of",slug:"for-await-of",normalizedTitle:"for await...of",charIndex:3920},{level:2,title:"异步 Generator 函数",slug:"异步-generator-函数",normalizedTitle:"异步 generator 函数",charIndex:5704},{level:2,title:"yield* 语句",slug:"yield-语句",normalizedTitle:"yield* 语句",charIndex:10679}],excerpt:'<h1 id="异步遍历器"><a class="header-anchor" href="#异步遍历器">#</a> 异步遍历器</h1>\n<h2 id="同步遍历器的问题"><a class="header-anchor" href="#同步遍历器的问题">#</a> 同步遍历器的问题</h2>\n<p>《遍历器》一章说过，Iterator 接口是一种数据遍历的协议，只要调用遍历器对象的<code>next</code>方法，就会得到一个对象，表示当前遍历指针所在的那个位置的信息。<code>next</code>方法返回的对象的结构是<code>{value, done}</code>，其中<code>value</code>表示当前的数据的值，<code>done</code>是一个布尔值，表示遍历是否结束。</p>\n',lastUpdated:"2022/9/22 下午4:28:09",lastUpdatedTimestamp:1663835289e3,headersStr:"同步遍历器的问题 异步遍历的接口 for await...of 异步 Generator 函数 yield* 语句",content:"# 异步遍历器\n\n\n# 同步遍历器的问题\n\n《遍历器》一章说过，Iterator 接口是一种数据遍历的协议，只要调用遍历器对象的next方法，就会得到一个对象，表示当前遍历指针所在的那个位置的信息。next方法返回的对象的结构是{value, done}，其中value表示当前的数据的值，done是一个布尔值，表示遍历是否结束。\n\nfunction idMaker() {\n  let index = 0;\n\n  return {\n    next: function() {\n      return { value: index++, done: false };\n    }\n  };\n}\n\nconst it = idMaker();\n\nit.next().value // 0\nit.next().value // 1\nit.next().value // 2\n// ...\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n上面代码中，变量it是一个遍历器（iterator）。每次调用it.next()方法，就返回一个对象，表示当前遍历位置的信息。\n\n这里隐含着一个规定，it.next()方法必须是同步的，只要调用就必须立刻返回值。也就是说，一旦执行it.next()方法，就必须同步地得到value和done这两个属性。如果遍历指针正好指向同步操作，当然没有问题，但对于异步操作，就不太合适了。\n\nfunction idMaker() {\n  let index = 0;\n\n  return {\n    next: function() {\n      return new Promise(function (resolve, reject) {\n        setTimeout(() => {\n          resolve({ value: index++, done: false });\n        }, 1000);\n      });\n    }\n  };\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n上面代码中，next()方法返回的是一个 Promise 对象，这样就不行，不符合 Iterator 协议，只要代码里面包含异步操作都不行。也就是说，Iterator 协议里面next()方法只能包含同步操作。\n\n目前的解决方法是，将异步操作包装成 Thunk 函数或者 Promise 对象，即next()方法返回值的value属性是一个 Thunk 函数或者 Promise 对象，等待以后返回真正的值，而done属性则还是同步产生的。\n\nfunction idMaker() {\n  let index = 0;\n\n  return {\n    next: function() {\n      return {\n        value: new Promise(resolve => setTimeout(() => resolve(index++), 1000)),\n        done: false\n      };\n    }\n  };\n}\n\nconst it = idMaker();\n\nit.next().value.then(o => console.log(o)) // 1\nit.next().value.then(o => console.log(o)) // 2\nit.next().value.then(o => console.log(o)) // 3\n// ...\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\n上面代码中，value属性的返回值是一个 Promise 对象，用来放置异步操作。但是这样写很麻烦，不太符合直觉，语义也比较绕。\n\nES2018 引入了“异步遍历器”（Async Iterator），为异步操作提供原生的遍历器接口，即value和done这两个属性都是异步产生。\n\n\n# 异步遍历的接口\n\n异步遍历器的最大的语法特点，就是调用遍历器的next方法，返回的是一个 Promise 对象。\n\nasyncIterator\n  .next()\n  .then(\n    ({ value, done }) => /* ... */\n  );\n\n\n1\n2\n3\n4\n5\n\n\n上面代码中，asyncIterator是一个异步遍历器，调用next方法以后，返回一个 Promise 对象。因此，可以使用then方法指定，这个 Promise 对象的状态变为resolve以后的回调函数。回调函数的参数，则是一个具有value和done两个属性的对象，这个跟同步遍历器是一样的。\n\n我们知道，一个对象的同步遍历器的接口，部署在Symbol.iterator属性上面。同样地，对象的异步遍历器接口，部署在Symbol.asyncIterator属性上面。不管是什么样的对象，只要它的Symbol.asyncIterator属性有值，就表示应该对它进行异步遍历。\n\n下面是一个异步遍历器的例子。\n\nconst asyncIterable = createAsyncIterable(['a', 'b']);\nconst asyncIterator = asyncIterable[Symbol.asyncIterator]();\n\nasyncIterator\n.next()\n.then(iterResult1 => {\n  console.log(iterResult1); // { value: 'a', done: false }\n  return asyncIterator.next();\n})\n.then(iterResult2 => {\n  console.log(iterResult2); // { value: 'b', done: false }\n  return asyncIterator.next();\n})\n.then(iterResult3 => {\n  console.log(iterResult3); // { value: undefined, done: true }\n});\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n上面代码中，异步遍历器其实返回了两次值。第一次调用的时候，返回一个 Promise 对象；等到 Promise 对象resolve了，再返回一个表示当前数据成员信息的对象。这就是说，异步遍历器与同步遍历器最终行为是一致的，只是会先返回 Promise 对象，作为中介。\n\n由于异步遍历器的next方法，返回的是一个 Promise 对象。因此，可以把它放在await命令后面。\n\nasync function f() {\n  const asyncIterable = createAsyncIterable(['a', 'b']);\n  const asyncIterator = asyncIterable[Symbol.asyncIterator]();\n  console.log(await asyncIterator.next());\n  // { value: 'a', done: false }\n  console.log(await asyncIterator.next());\n  // { value: 'b', done: false }\n  console.log(await asyncIterator.next());\n  // { value: undefined, done: true }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n上面代码中，next方法用await处理以后，就不必使用then方法了。整个流程已经很接近同步处理了。\n\n注意，异步遍历器的next方法是可以连续调用的，不必等到上一步产生的 Promise 对象resolve以后再调用。这种情况下，next方法会累积起来，自动按照每一步的顺序运行下去。下面是一个例子，把所有的next方法放在Promise.all方法里面。\n\nconst asyncIterable = createAsyncIterable(['a', 'b']);\nconst asyncIterator = asyncIterable[Symbol.asyncIterator]();\nconst [{value: v1}, {value: v2}] = await Promise.all([\n  asyncIterator.next(), asyncIterator.next()\n]);\n\nconsole.log(v1, v2); // a b\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n另一种用法是一次性调用所有的next方法，然后await最后一步操作。\n\nasync function runner() {\n  const writer = openFile('someFile.txt');\n  writer.next('hello');\n  writer.next('world');\n  await writer.return();\n}\n\nrunner();\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# for await...of\n\n前面介绍过，for...of循环用于遍历同步的 Iterator 接口。新引入的for await...of循环，则是用于遍历异步的 Iterator 接口。\n\nasync function f() {\n  for await (const x of createAsyncIterable(['a', 'b'])) {\n    console.log(x);\n  }\n}\n// a\n// b\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n上面代码中，createAsyncIterable()返回一个拥有异步遍历器接口的对象，for...of循环自动调用这个对象的异步遍历器的next方法，会得到一个 Promise 对象。await用来处理这个 Promise 对象，一旦resolve，就把得到的值（x）传入for...of的循环体。\n\nfor await...of循环的一个用途，是部署了 asyncIterable 操作的异步接口，可以直接放入这个循环。\n\nlet body = '';\n\nasync function f() {\n  for await(const data of req) body += data;\n  const parsed = JSON.parse(body);\n  console.log('got', parsed);\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n上面代码中，req是一个 asyncIterable 对象，用来异步读取数据。可以看到，使用for await...of循环以后，代码会非常简洁。\n\n如果next方法返回的 Promise 对象被reject，for await...of就会报错，要用try...catch捕捉。\n\nasync function () {\n  try {\n    for await (const x of createRejectingIterable()) {\n      console.log(x);\n    }\n  } catch (e) {\n    console.error(e);\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n注意，for await...of循环也可以用于同步遍历器。\n\n(async function () {\n  for await (const x of ['a', 'b']) {\n    console.log(x);\n  }\n})();\n// a\n// b\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\nNode v10 支持异步遍历器，Stream 就部署了这个接口。下面是读取文件的传统写法与异步遍历器写法的差异。\n\n// 传统写法\nfunction main(inputFilePath) {\n  const readStream = fs.createReadStream(\n    inputFilePath,\n    { encoding: 'utf8', highWaterMark: 1024 }\n  );\n  readStream.on('data', (chunk) => {\n    console.log('>>> '+chunk);\n  });\n  readStream.on('end', () => {\n    console.log('### DONE ###');\n  });\n}\n\n// 异步遍历器写法\nasync function main(inputFilePath) {\n  const readStream = fs.createReadStream(\n    inputFilePath,\n    { encoding: 'utf8', highWaterMark: 1024 }\n  );\n\n  for await (const chunk of readStream) {\n    console.log('>>> '+chunk);\n  }\n  console.log('### DONE ###');\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n\n\n\n# 异步 Generator 函数\n\n就像 Generator 函数返回一个同步遍历器对象一样，异步 Generator 函数的作用，是返回一个异步遍历器对象。\n\n在语法上，异步 Generator 函数就是async函数与 Generator 函数的结合。\n\nasync function* gen() {\n  yield 'hello';\n}\nconst genObj = gen();\ngenObj.next().then(x => console.log(x));\n// { value: 'hello', done: false }\n\n\n1\n2\n3\n4\n5\n6\n\n\n上面代码中，gen是一个异步 Generator 函数，执行后返回一个异步 Iterator 对象。对该对象调用next方法，返回一个 Promise 对象。\n\n异步遍历器的设计目的之一，就是 Generator 函数处理同步操作和异步操作时，能够使用同一套接口。\n\n// 同步 Generator 函数\nfunction* map(iterable, func) {\n  const iter = iterable[Symbol.iterator]();\n  while (true) {\n    const {value, done} = iter.next();\n    if (done) break;\n    yield func(value);\n  }\n}\n\n// 异步 Generator 函数\nasync function* map(iterable, func) {\n  const iter = iterable[Symbol.asyncIterator]();\n  while (true) {\n    const {value, done} = await iter.next();\n    if (done) break;\n    yield func(value);\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\n上面代码中，map是一个 Generator 函数，第一个参数是可遍历对象iterable，第二个参数是一个回调函数func。map的作用是将iterable每一步返回的值，使用func进行处理。上面有两个版本的map，前一个处理同步遍历器，后一个处理异步遍历器，可以看到两个版本的写法基本上是一致的。\n\n下面是另一个异步 Generator 函数的例子。\n\nasync function* readLines(path) {\n  let file = await fileOpen(path);\n\n  try {\n    while (!file.EOF) {\n      yield await file.readLine();\n    }\n  } finally {\n    await file.close();\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n上面代码中，异步操作前面使用await关键字标明，即await后面的操作，应该返回 Promise 对象。凡是使用yield关键字的地方，就是next方法停下来的地方，它后面的表达式的值（即await file.readLine()的值），会作为next()返回对象的value属性，这一点是与同步 Generator 函数一致的。\n\n异步 Generator 函数内部，能够同时使用await和yield命令。可以这样理解，await命令用于将外部操作产生的值输入函数内部，yield命令用于将函数内部的值输出。\n\n上面代码定义的异步 Generator 函数的用法如下。\n\n(async function () {\n  for await (const line of readLines(filePath)) {\n    console.log(line);\n  }\n})()\n\n\n1\n2\n3\n4\n5\n\n\n异步 Generator 函数可以与for await...of循环结合起来使用。\n\nasync function* prefixLines(asyncIterable) {\n  for await (const line of asyncIterable) {\n    yield '> ' + line;\n  }\n}\n\n\n1\n2\n3\n4\n5\n\n\n异步 Generator 函数的返回值是一个异步 Iterator，即每次调用它的next方法，会返回一个 Promise 对象，也就是说，跟在yield命令后面的，应该是一个 Promise 对象。如果像上面那个例子那样，yield命令后面是一个字符串，会被自动包装成一个 Promise 对象。\n\nfunction fetchRandom() {\n  const url = 'https://www.random.org/decimal-fractions/'\n    + '?num=1&dec=10&col=1&format=plain&rnd=new';\n  return fetch(url);\n}\n\nasync function* asyncGenerator() {\n  console.log('Start');\n  const result = await fetchRandom(); // (A)\n  yield 'Result: ' + await result.text(); // (B)\n  console.log('Done');\n}\n\nconst ag = asyncGenerator();\nag.next().then(({value, done}) => {\n  console.log(value);\n})\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n上面代码中，ag是asyncGenerator函数返回的异步遍历器对象。调用ag.next()以后，上面代码的执行顺序如下。\n\n 1. ag.next()立刻返回一个 Promise 对象。\n 2. asyncGenerator函数开始执行，打印出Start。\n 3. await命令返回一个 Promise 对象，asyncGenerator函数停在这里。\n 4. A 处变成 fulfilled 状态，产生的值放入result变量，asyncGenerator函数继续往下执行。\n 5. 函数在 B 处的yield暂停执行，一旦yield命令取到值，ag.next()返回的那个 Promise 对象变成 fulfilled 状态。\n 6. ag.next()后面的then方法指定的回调函数开始执行。该回调函数的参数是一个对象{value, done}，其中value的值是yield命令后面的那个表达式的值，done的值是false。\n\nA 和 B 两行的作用类似于下面的代码。\n\nreturn new Promise((resolve, reject) => {\n  fetchRandom()\n  .then(result => result.text())\n  .then(result => {\n     resolve({\n       value: 'Result: ' + result,\n       done: false,\n     });\n  });\n});\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n如果异步 Generator 函数抛出错误，会导致 Promise 对象的状态变为reject，然后抛出的错误被catch方法捕获。\n\nasync function* asyncGenerator() {\n  throw new Error('Problem!');\n}\n\nasyncGenerator()\n.next()\n.catch(err => console.log(err)); // Error: Problem!\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n注意，普通的 async 函数返回的是一个 Promise 对象，而异步 Generator 函数返回的是一个异步 Iterator 对象。可以这样理解，async 函数和异步 Generator 函数，是封装异步操作的两种方法，都用来达到同一种目的。区别在于，前者自带执行器，后者通过for await...of执行，或者自己编写执行器。下面就是一个异步 Generator 函数的执行器。\n\nasync function takeAsync(asyncIterable, count = Infinity) {\n  const result = [];\n  const iterator = asyncIterable[Symbol.asyncIterator]();\n  while (result.length < count) {\n    const {value, done} = await iterator.next();\n    if (done) break;\n    result.push(value);\n  }\n  return result;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n上面代码中，异步 Generator 函数产生的异步遍历器，会通过while循环自动执行，每当await iterator.next()完成，就会进入下一轮循环。一旦done属性变为true，就会跳出循环，异步遍历器执行结束。\n\n下面是这个自动执行器的一个使用实例。\n\nasync function f() {\n  async function* gen() {\n    yield 'a';\n    yield 'b';\n    yield 'c';\n  }\n\n  return await takeAsync(gen());\n}\n\nf().then(function (result) {\n  console.log(result); // ['a', 'b', 'c']\n})\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n异步 Generator 函数出现以后，JavaScript 就有了四种函数形式：普通函数、async 函数、Generator 函数和异步 Generator 函数。请注意区分每种函数的不同之处。基本上，如果是一系列按照顺序执行的异步操作（比如读取文件，然后写入新内容，再存入硬盘），可以使用 async 函数；如果是一系列产生相同数据结构的异步操作（比如一行一行读取文件），可以使用异步 Generator 函数。\n\n异步 Generator 函数也可以通过next方法的参数，接收外部传入的数据。\n\nconst writer = openFile('someFile.txt');\nwriter.next('hello'); // 立即执行\nwriter.next('world'); // 立即执行\nawait writer.return(); // 等待写入结束\n\n\n1\n2\n3\n4\n\n\n上面代码中，openFile是一个异步 Generator 函数。next方法的参数，向该函数内部的操作传入数据。每次next方法都是同步执行的，最后的await命令用于等待整个写入操作结束。\n\n最后，同步的数据结构，也可以使用异步 Generator 函数。\n\nasync function* createAsyncIterable(syncIterable) {\n  for (const elem of syncIterable) {\n    yield elem;\n  }\n}\n\n\n1\n2\n3\n4\n5\n\n\n上面代码中，由于没有异步操作，所以也就没有使用await关键字。\n\n\n# yield* 语句\n\nyield*语句也可以跟一个异步遍历器。\n\nasync function* gen1() {\n  yield 'a';\n  yield 'b';\n  return 2;\n}\n\nasync function* gen2() {\n  // result 最终会等于 2\n  const result = yield* gen1();\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n上面代码中，gen2函数里面的result变量，最后的值是2。\n\n与同步 Generator 函数一样，for await...of循环会展开yield*。\n\n(async function () {\n  for await (const x of gen2()) {\n    console.log(x);\n  }\n})();\n// a\n// b\n\n\n1\n2\n3\n4\n5\n6\n7\n",normalizedContent:"# 异步遍历器\n\n\n# 同步遍历器的问题\n\n《遍历器》一章说过，iterator 接口是一种数据遍历的协议，只要调用遍历器对象的next方法，就会得到一个对象，表示当前遍历指针所在的那个位置的信息。next方法返回的对象的结构是{value, done}，其中value表示当前的数据的值，done是一个布尔值，表示遍历是否结束。\n\nfunction idmaker() {\n  let index = 0;\n\n  return {\n    next: function() {\n      return { value: index++, done: false };\n    }\n  };\n}\n\nconst it = idmaker();\n\nit.next().value // 0\nit.next().value // 1\nit.next().value // 2\n// ...\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n上面代码中，变量it是一个遍历器（iterator）。每次调用it.next()方法，就返回一个对象，表示当前遍历位置的信息。\n\n这里隐含着一个规定，it.next()方法必须是同步的，只要调用就必须立刻返回值。也就是说，一旦执行it.next()方法，就必须同步地得到value和done这两个属性。如果遍历指针正好指向同步操作，当然没有问题，但对于异步操作，就不太合适了。\n\nfunction idmaker() {\n  let index = 0;\n\n  return {\n    next: function() {\n      return new promise(function (resolve, reject) {\n        settimeout(() => {\n          resolve({ value: index++, done: false });\n        }, 1000);\n      });\n    }\n  };\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n上面代码中，next()方法返回的是一个 promise 对象，这样就不行，不符合 iterator 协议，只要代码里面包含异步操作都不行。也就是说，iterator 协议里面next()方法只能包含同步操作。\n\n目前的解决方法是，将异步操作包装成 thunk 函数或者 promise 对象，即next()方法返回值的value属性是一个 thunk 函数或者 promise 对象，等待以后返回真正的值，而done属性则还是同步产生的。\n\nfunction idmaker() {\n  let index = 0;\n\n  return {\n    next: function() {\n      return {\n        value: new promise(resolve => settimeout(() => resolve(index++), 1000)),\n        done: false\n      };\n    }\n  };\n}\n\nconst it = idmaker();\n\nit.next().value.then(o => console.log(o)) // 1\nit.next().value.then(o => console.log(o)) // 2\nit.next().value.then(o => console.log(o)) // 3\n// ...\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\n上面代码中，value属性的返回值是一个 promise 对象，用来放置异步操作。但是这样写很麻烦，不太符合直觉，语义也比较绕。\n\nes2018 引入了“异步遍历器”（async iterator），为异步操作提供原生的遍历器接口，即value和done这两个属性都是异步产生。\n\n\n# 异步遍历的接口\n\n异步遍历器的最大的语法特点，就是调用遍历器的next方法，返回的是一个 promise 对象。\n\nasynciterator\n  .next()\n  .then(\n    ({ value, done }) => /* ... */\n  );\n\n\n1\n2\n3\n4\n5\n\n\n上面代码中，asynciterator是一个异步遍历器，调用next方法以后，返回一个 promise 对象。因此，可以使用then方法指定，这个 promise 对象的状态变为resolve以后的回调函数。回调函数的参数，则是一个具有value和done两个属性的对象，这个跟同步遍历器是一样的。\n\n我们知道，一个对象的同步遍历器的接口，部署在symbol.iterator属性上面。同样地，对象的异步遍历器接口，部署在symbol.asynciterator属性上面。不管是什么样的对象，只要它的symbol.asynciterator属性有值，就表示应该对它进行异步遍历。\n\n下面是一个异步遍历器的例子。\n\nconst asynciterable = createasynciterable(['a', 'b']);\nconst asynciterator = asynciterable[symbol.asynciterator]();\n\nasynciterator\n.next()\n.then(iterresult1 => {\n  console.log(iterresult1); // { value: 'a', done: false }\n  return asynciterator.next();\n})\n.then(iterresult2 => {\n  console.log(iterresult2); // { value: 'b', done: false }\n  return asynciterator.next();\n})\n.then(iterresult3 => {\n  console.log(iterresult3); // { value: undefined, done: true }\n});\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n上面代码中，异步遍历器其实返回了两次值。第一次调用的时候，返回一个 promise 对象；等到 promise 对象resolve了，再返回一个表示当前数据成员信息的对象。这就是说，异步遍历器与同步遍历器最终行为是一致的，只是会先返回 promise 对象，作为中介。\n\n由于异步遍历器的next方法，返回的是一个 promise 对象。因此，可以把它放在await命令后面。\n\nasync function f() {\n  const asynciterable = createasynciterable(['a', 'b']);\n  const asynciterator = asynciterable[symbol.asynciterator]();\n  console.log(await asynciterator.next());\n  // { value: 'a', done: false }\n  console.log(await asynciterator.next());\n  // { value: 'b', done: false }\n  console.log(await asynciterator.next());\n  // { value: undefined, done: true }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n上面代码中，next方法用await处理以后，就不必使用then方法了。整个流程已经很接近同步处理了。\n\n注意，异步遍历器的next方法是可以连续调用的，不必等到上一步产生的 promise 对象resolve以后再调用。这种情况下，next方法会累积起来，自动按照每一步的顺序运行下去。下面是一个例子，把所有的next方法放在promise.all方法里面。\n\nconst asynciterable = createasynciterable(['a', 'b']);\nconst asynciterator = asynciterable[symbol.asynciterator]();\nconst [{value: v1}, {value: v2}] = await promise.all([\n  asynciterator.next(), asynciterator.next()\n]);\n\nconsole.log(v1, v2); // a b\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n另一种用法是一次性调用所有的next方法，然后await最后一步操作。\n\nasync function runner() {\n  const writer = openfile('somefile.txt');\n  writer.next('hello');\n  writer.next('world');\n  await writer.return();\n}\n\nrunner();\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# for await...of\n\n前面介绍过，for...of循环用于遍历同步的 iterator 接口。新引入的for await...of循环，则是用于遍历异步的 iterator 接口。\n\nasync function f() {\n  for await (const x of createasynciterable(['a', 'b'])) {\n    console.log(x);\n  }\n}\n// a\n// b\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n上面代码中，createasynciterable()返回一个拥有异步遍历器接口的对象，for...of循环自动调用这个对象的异步遍历器的next方法，会得到一个 promise 对象。await用来处理这个 promise 对象，一旦resolve，就把得到的值（x）传入for...of的循环体。\n\nfor await...of循环的一个用途，是部署了 asynciterable 操作的异步接口，可以直接放入这个循环。\n\nlet body = '';\n\nasync function f() {\n  for await(const data of req) body += data;\n  const parsed = json.parse(body);\n  console.log('got', parsed);\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n上面代码中，req是一个 asynciterable 对象，用来异步读取数据。可以看到，使用for await...of循环以后，代码会非常简洁。\n\n如果next方法返回的 promise 对象被reject，for await...of就会报错，要用try...catch捕捉。\n\nasync function () {\n  try {\n    for await (const x of createrejectingiterable()) {\n      console.log(x);\n    }\n  } catch (e) {\n    console.error(e);\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n注意，for await...of循环也可以用于同步遍历器。\n\n(async function () {\n  for await (const x of ['a', 'b']) {\n    console.log(x);\n  }\n})();\n// a\n// b\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\nnode v10 支持异步遍历器，stream 就部署了这个接口。下面是读取文件的传统写法与异步遍历器写法的差异。\n\n// 传统写法\nfunction main(inputfilepath) {\n  const readstream = fs.createreadstream(\n    inputfilepath,\n    { encoding: 'utf8', highwatermark: 1024 }\n  );\n  readstream.on('data', (chunk) => {\n    console.log('>>> '+chunk);\n  });\n  readstream.on('end', () => {\n    console.log('### done ###');\n  });\n}\n\n// 异步遍历器写法\nasync function main(inputfilepath) {\n  const readstream = fs.createreadstream(\n    inputfilepath,\n    { encoding: 'utf8', highwatermark: 1024 }\n  );\n\n  for await (const chunk of readstream) {\n    console.log('>>> '+chunk);\n  }\n  console.log('### done ###');\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n\n\n\n# 异步 generator 函数\n\n就像 generator 函数返回一个同步遍历器对象一样，异步 generator 函数的作用，是返回一个异步遍历器对象。\n\n在语法上，异步 generator 函数就是async函数与 generator 函数的结合。\n\nasync function* gen() {\n  yield 'hello';\n}\nconst genobj = gen();\ngenobj.next().then(x => console.log(x));\n// { value: 'hello', done: false }\n\n\n1\n2\n3\n4\n5\n6\n\n\n上面代码中，gen是一个异步 generator 函数，执行后返回一个异步 iterator 对象。对该对象调用next方法，返回一个 promise 对象。\n\n异步遍历器的设计目的之一，就是 generator 函数处理同步操作和异步操作时，能够使用同一套接口。\n\n// 同步 generator 函数\nfunction* map(iterable, func) {\n  const iter = iterable[symbol.iterator]();\n  while (true) {\n    const {value, done} = iter.next();\n    if (done) break;\n    yield func(value);\n  }\n}\n\n// 异步 generator 函数\nasync function* map(iterable, func) {\n  const iter = iterable[symbol.asynciterator]();\n  while (true) {\n    const {value, done} = await iter.next();\n    if (done) break;\n    yield func(value);\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\n上面代码中，map是一个 generator 函数，第一个参数是可遍历对象iterable，第二个参数是一个回调函数func。map的作用是将iterable每一步返回的值，使用func进行处理。上面有两个版本的map，前一个处理同步遍历器，后一个处理异步遍历器，可以看到两个版本的写法基本上是一致的。\n\n下面是另一个异步 generator 函数的例子。\n\nasync function* readlines(path) {\n  let file = await fileopen(path);\n\n  try {\n    while (!file.eof) {\n      yield await file.readline();\n    }\n  } finally {\n    await file.close();\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n上面代码中，异步操作前面使用await关键字标明，即await后面的操作，应该返回 promise 对象。凡是使用yield关键字的地方，就是next方法停下来的地方，它后面的表达式的值（即await file.readline()的值），会作为next()返回对象的value属性，这一点是与同步 generator 函数一致的。\n\n异步 generator 函数内部，能够同时使用await和yield命令。可以这样理解，await命令用于将外部操作产生的值输入函数内部，yield命令用于将函数内部的值输出。\n\n上面代码定义的异步 generator 函数的用法如下。\n\n(async function () {\n  for await (const line of readlines(filepath)) {\n    console.log(line);\n  }\n})()\n\n\n1\n2\n3\n4\n5\n\n\n异步 generator 函数可以与for await...of循环结合起来使用。\n\nasync function* prefixlines(asynciterable) {\n  for await (const line of asynciterable) {\n    yield '> ' + line;\n  }\n}\n\n\n1\n2\n3\n4\n5\n\n\n异步 generator 函数的返回值是一个异步 iterator，即每次调用它的next方法，会返回一个 promise 对象，也就是说，跟在yield命令后面的，应该是一个 promise 对象。如果像上面那个例子那样，yield命令后面是一个字符串，会被自动包装成一个 promise 对象。\n\nfunction fetchrandom() {\n  const url = 'https://www.random.org/decimal-fractions/'\n    + '?num=1&dec=10&col=1&format=plain&rnd=new';\n  return fetch(url);\n}\n\nasync function* asyncgenerator() {\n  console.log('start');\n  const result = await fetchrandom(); // (a)\n  yield 'result: ' + await result.text(); // (b)\n  console.log('done');\n}\n\nconst ag = asyncgenerator();\nag.next().then(({value, done}) => {\n  console.log(value);\n})\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n上面代码中，ag是asyncgenerator函数返回的异步遍历器对象。调用ag.next()以后，上面代码的执行顺序如下。\n\n 1. ag.next()立刻返回一个 promise 对象。\n 2. asyncgenerator函数开始执行，打印出start。\n 3. await命令返回一个 promise 对象，asyncgenerator函数停在这里。\n 4. a 处变成 fulfilled 状态，产生的值放入result变量，asyncgenerator函数继续往下执行。\n 5. 函数在 b 处的yield暂停执行，一旦yield命令取到值，ag.next()返回的那个 promise 对象变成 fulfilled 状态。\n 6. ag.next()后面的then方法指定的回调函数开始执行。该回调函数的参数是一个对象{value, done}，其中value的值是yield命令后面的那个表达式的值，done的值是false。\n\na 和 b 两行的作用类似于下面的代码。\n\nreturn new promise((resolve, reject) => {\n  fetchrandom()\n  .then(result => result.text())\n  .then(result => {\n     resolve({\n       value: 'result: ' + result,\n       done: false,\n     });\n  });\n});\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n如果异步 generator 函数抛出错误，会导致 promise 对象的状态变为reject，然后抛出的错误被catch方法捕获。\n\nasync function* asyncgenerator() {\n  throw new error('problem!');\n}\n\nasyncgenerator()\n.next()\n.catch(err => console.log(err)); // error: problem!\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n注意，普通的 async 函数返回的是一个 promise 对象，而异步 generator 函数返回的是一个异步 iterator 对象。可以这样理解，async 函数和异步 generator 函数，是封装异步操作的两种方法，都用来达到同一种目的。区别在于，前者自带执行器，后者通过for await...of执行，或者自己编写执行器。下面就是一个异步 generator 函数的执行器。\n\nasync function takeasync(asynciterable, count = infinity) {\n  const result = [];\n  const iterator = asynciterable[symbol.asynciterator]();\n  while (result.length < count) {\n    const {value, done} = await iterator.next();\n    if (done) break;\n    result.push(value);\n  }\n  return result;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n上面代码中，异步 generator 函数产生的异步遍历器，会通过while循环自动执行，每当await iterator.next()完成，就会进入下一轮循环。一旦done属性变为true，就会跳出循环，异步遍历器执行结束。\n\n下面是这个自动执行器的一个使用实例。\n\nasync function f() {\n  async function* gen() {\n    yield 'a';\n    yield 'b';\n    yield 'c';\n  }\n\n  return await takeasync(gen());\n}\n\nf().then(function (result) {\n  console.log(result); // ['a', 'b', 'c']\n})\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n异步 generator 函数出现以后，javascript 就有了四种函数形式：普通函数、async 函数、generator 函数和异步 generator 函数。请注意区分每种函数的不同之处。基本上，如果是一系列按照顺序执行的异步操作（比如读取文件，然后写入新内容，再存入硬盘），可以使用 async 函数；如果是一系列产生相同数据结构的异步操作（比如一行一行读取文件），可以使用异步 generator 函数。\n\n异步 generator 函数也可以通过next方法的参数，接收外部传入的数据。\n\nconst writer = openfile('somefile.txt');\nwriter.next('hello'); // 立即执行\nwriter.next('world'); // 立即执行\nawait writer.return(); // 等待写入结束\n\n\n1\n2\n3\n4\n\n\n上面代码中，openfile是一个异步 generator 函数。next方法的参数，向该函数内部的操作传入数据。每次next方法都是同步执行的，最后的await命令用于等待整个写入操作结束。\n\n最后，同步的数据结构，也可以使用异步 generator 函数。\n\nasync function* createasynciterable(synciterable) {\n  for (const elem of synciterable) {\n    yield elem;\n  }\n}\n\n\n1\n2\n3\n4\n5\n\n\n上面代码中，由于没有异步操作，所以也就没有使用await关键字。\n\n\n# yield* 语句\n\nyield*语句也可以跟一个异步遍历器。\n\nasync function* gen1() {\n  yield 'a';\n  yield 'b';\n  return 2;\n}\n\nasync function* gen2() {\n  // result 最终会等于 2\n  const result = yield* gen1();\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n上面代码中，gen2函数里面的result变量，最后的值是2。\n\n与同步 generator 函数一样，for await...of循环会展开yield*。\n\n(async function () {\n  for await (const x of gen2()) {\n    console.log(x);\n  }\n})();\n// a\n// b\n\n\n1\n2\n3\n4\n5\n6\n7\n",charsets:{cjk:!0}},{title:"参考链接",frontmatter:{title:"参考链接",date:"2020-02-09T16:00:30.000Z",permalink:"/pages/ea6f3b870f6dab69",author:"阮一峰",categories:["《ES6 教程》笔记"],tags:["ES6"],readingShow:"top"},regularPath:"/06.%E4%B9%A6%E7%B1%8D/05.%E3%80%8AES6%20%E6%95%99%E7%A8%8B%E3%80%8B%E7%AC%94%E8%AE%B0/34.%E5%8F%82%E8%80%83%E9%93%BE%E6%8E%A5.html",relativePath:"06.书籍/05.《ES6 教程》笔记/34.参考链接.md",key:"v-7632ec06",path:"/pages/ea6f3b870f6dab69/",headers:[{level:2,title:"官方文件",slug:"官方文件",normalizedTitle:"官方文件",charIndex:11},{level:2,title:"综合介绍",slug:"综合介绍",normalizedTitle:"综合介绍",charIndex:570},{level:2,title:"let 和 const",slug:"let-和-const",normalizedTitle:"let 和 const",charIndex:1739},{level:2,title:"解构赋值",slug:"解构赋值",normalizedTitle:"解构赋值",charIndex:2258},{level:2,title:"字符串",slug:"字符串",normalizedTitle:"字符串",charIndex:2398},{level:2,title:"正则",slug:"正则",normalizedTitle:"正则",charIndex:2769},{level:2,title:"数值",slug:"数值",normalizedTitle:"数值",charIndex:3150},{level:2,title:"数组",slug:"数组",normalizedTitle:"数组",charIndex:3345},{level:2,title:"函数",slug:"函数",normalizedTitle:"函数",charIndex:2097},{level:2,title:"对象",slug:"对象",normalizedTitle:"对象",charIndex:2149},{level:2,title:"Symbol",slug:"symbol",normalizedTitle:"symbol",charIndex:4956},{level:2,title:"Set 和 Map",slug:"set-和-map",normalizedTitle:"set 和 map",charIndex:5402},{level:2,title:"Proxy 和 Reflect",slug:"proxy-和-reflect",normalizedTitle:"proxy 和 reflect",charIndex:5747},{level:2,title:"Promise 对象",slug:"promise-对象",normalizedTitle:"promise 对象",charIndex:6553},{level:2,title:"Iterator",slug:"iterator",normalizedTitle:"iterator",charIndex:7246},{level:2,title:"Generator",slug:"generator",normalizedTitle:"generator",charIndex:7525},{level:2,title:"异步操作和 Async 函数",slug:"异步操作和-async-函数",normalizedTitle:"异步操作和 async 函数",charIndex:8819},{level:2,title:"Class",slug:"class",normalizedTitle:"class",charIndex:9667},{level:2,title:"Decorator",slug:"decorator",normalizedTitle:"decorator",charIndex:10254},{level:2,title:"Module",slug:"module",normalizedTitle:"module",charIndex:10701},{level:2,title:"二进制数组",slug:"二进制数组",normalizedTitle:"二进制数组",charIndex:11437},{level:2,title:"SIMD",slug:"simd",normalizedTitle:"simd",charIndex:11977},{level:2,title:"工具",slug:"工具",normalizedTitle:"工具",charIndex:12105}],lastUpdated:"2022/9/22 下午4:28:09",lastUpdatedTimestamp:1663835289e3,headersStr:"官方文件 综合介绍 let 和 const 解构赋值 字符串 正则 数值 数组 函数 对象 Symbol Set 和 Map Proxy 和 Reflect Promise 对象 Iterator Generator 异步操作和 Async 函数 Class Decorator Module 二进制数组 SIMD 工具",content:"# 参考链接\n\n\n# 官方文件\n\n * ECMAScript® 2015 Language Specification: ECMAScript 2015 规格\n * ECMAScript® 2016 Language Specification: ECMAScript 2016 规格\n * ECMAScript® 2017 Language Specification：ECMAScript 2017 规格（草案）\n * ECMAScript Current Proposals: ECMAScript 当前的所有提案\n * ECMAScript Active Proposals: 已经进入正式流程的提案\n * ECMAScript proposals：从阶段 0 到阶段 4 的所有提案列表\n * TC39 meeting agendas: TC39 委员会历年的会议记录\n * ECMAScript Daily: TC39 委员会的动态\n * The TC39 Process: 提案进入正式规格的流程\n * TC39: A Process Sketch, Stages 0 and 1: Stage 0 和 Stage 1 的含义\n * TC39 Process Sketch, Stage 2: Stage 2 的含义\n\n\n# 综合介绍\n\n * Axel Rauschmayer, Exploring ES6: Upgrade to the next version of JavaScript: ES6 的专著，本书的许多代码实例来自该书\n * Sayanee Basu, Use ECMAScript 6 Today\n * Ariya Hidayat, Toward Modern Web Apps with ECMAScript 6\n * Dale Schouten, 10 Ecmascript-6 tricks you can perform right now\n * Colin Toh, Lightweight ES6 Features That Pack A Punch: ES6 的一些“轻量级”的特性介绍\n * Domenic Denicola, ES6: The Awesome Parts\n * Nicholas C. Zakas, Understanding ECMAScript 6\n * Justin Drake, ECMAScript 6 in Node.JS\n * Ryan Dao, Summary of ECMAScript 6 major features\n * Luke Hoban, ES6 features: ES6 新语法点的罗列\n * Traceur-compiler, Language Features: Traceur 文档列出的一些 ES6 例子\n * Axel Rauschmayer, ECMAScript 6: what’s next for JavaScript?: 关于 ES6 新增语法的综合介绍，有很多例子\n * Axel Rauschmayer, Getting started with ECMAScript 6: ES6 语法点的综合介绍\n * Toby Ho, ES6 in io.js\n * Guillermo Rauch, ECMAScript 6\n * Benjamin De Cock, Frontend Guidelines: ES6 最佳实践\n * Jani Hartikainen, ES6: What are the benefits of the new features in practice?\n * kangax, JavaScript quiz. ES6 edition: ES6 小测试\n * Jeremy Fairbank, HTML5DevConf ES7 and Beyond!: ES7 新增语法点介绍\n * Timothy Gu, How to Read the ECMAScript Specification: 如何读懂 ES6 规格\n\n\n# let 和 const\n\n * Kyle Simpson, For and against let: 讨论 let 命令的作用域\n * kangax, Why typeof is no longer “safe”: 讨论在块级作用域内，let 命令的变量声明和赋值的行为\n * Axel Rauschmayer, Variables and scoping in ECMAScript 6: 讨论块级作用域与 let 和 const 的行为\n * Nicolas Bevacqua, ES6 Let, Const and the “Temporal Dead Zone” (TDZ) in Depth\n * acorn, Function statements in strict mode: 块级作用域对严格模式的函数声明的影响\n * Axel Rauschmayer, ES proposal: global: 顶层对象global\n * Mathias Bynens, A horrifying globalThis polyfill in universal JavaScript：如何写 globalThis 的垫片库\n\n\n# 解构赋值\n\n * Nick Fitzgerald, Destructuring Assignment in ECMAScript 6: 详细介绍解构赋值的用法\n * Nicholas C. Zakas, ECMAScript 6 destructuring gotcha\n\n\n# 字符串\n\n * Nicholas C. Zakas, A critical review of ECMAScript 6 quasi-literals\n * Mozilla Developer Network, Template strings\n * Addy Osmani, Getting Literal With ES6 Template Strings: 模板字符串的介绍\n * Blake Winton, ES6 Templates: 模板字符串的介绍\n * Peter Jaszkowiak, How to write a template compiler in JavaScript: 使用模板字符串，编写一个模板编译函数\n * Axel Rauschmayer, ES.stage3: string padding\n\n\n# 正则\n\n * Mathias Bynens, Unicode-aware regular expressions in ES6: 详细介绍正则表达式的 u 修饰符\n * Axel Rauschmayer, New regular expression features in ECMAScript 6：ES6 正则特性的详细介绍\n * Yang Guo, RegExp lookbehind assertions：介绍后行断言\n * Axel Rauschmayer, ES proposal: RegExp named capture groups: 具名组匹配的介绍\n * Mathias Bynens, ECMAScript regular expressions are getting better!: 介绍 ES2018 添加的多项正则语法\n\n\n# 数值\n\n * Nicolas Bevacqua, ES6 Number Improvements in Depth\n * Axel Rauschmayer, ES proposal: arbitrary precision integers\n * Mathias Bynens, BigInt: arbitrary-precision integers in JavaScript\n\n\n# 数组\n\n * Axel Rauschmayer, ECMAScript 6’s new array methods: 对 ES6 新增的数组方法的全面介绍\n * TC39, Array.prototype.includes: 数组的 includes 方法的规格\n * Axel Rauschmayer, ECMAScript 6: holes in Arrays: 数组的空位问题\n\n\n# 函数\n\n * Nicholas C. Zakas, Understanding ECMAScript 6 arrow functions\n * Jack Franklin, Real Life ES6 - Arrow Functions\n * Axel Rauschmayer, Handling required parameters in ECMAScript 6\n * Dmitry Soshnikov, ES6 Notes: Default values of parameters: 介绍参数的默认值\n * Ragan Wald, Destructuring and Recursion in ES6: rest 参数和扩展运算符的详细介绍\n * Axel Rauschmayer, The names of functions in ES6: 函数的 name 属性的详细介绍\n * Kyle Simpson, Arrow This: 箭头函数并没有自己的 this\n * Derick Bailey, Do ES6 Arrow Functions Really Solve “this” In JavaScript?：使用箭头函数处理 this 指向，必须非常小心\n * Mark McDonnell, Understanding recursion in functional JavaScript programming: 如何自己实现尾递归优化\n * Nicholas C. Zakas, The ECMAScript 2016 change you probably don't know: 使用参数默认值时，不能在函数内部显式开启严格模式\n * Axel Rauschmayer, ES proposal: optional catch binding\n * Cynthia Lee, When you should use ES6 arrow functions — and when you shouldn’t: 讨论箭头函数的适用场合\n * Eric Elliott, What is this?: 箭头函数内部的 this 的解释。\n\n\n# 对象\n\n * Addy Osmani, Data-binding Revolutions with Object.observe(): 介绍 Object.observe()的概念\n * Sella Rafaeli, Native JavaScript Data-Binding: 如何使用 Object.observe 方法，实现数据对象与 DOM 对象的双向绑定\n * Axel Rauschmayer, __proto__ in ECMAScript 6\n * Axel Rauschmayer, Enumerability in ECMAScript 6\n * Axel Rauschmayer, ES proposal: Object.getOwnPropertyDescriptors()\n * TC39, Object.getOwnPropertyDescriptors Proposal\n * David Titarenco, How Spread Syntax Breaks JavaScript: 扩展运算符的一些不合理的地方\n\n\n# Symbol\n\n * Axel Rauschmayer, Symbols in ECMAScript 6: Symbol 简介\n * MDN, Symbol: Symbol 类型的详细介绍\n * Jason Orendorff, ES6 In Depth: Symbols\n * Keith Cirkel, Metaprogramming in ES6: Symbols and why they're awesome: Symbol 的深入介绍\n * Axel Rauschmayer, Customizing ES6 via well-known symbols\n * Derick Bailey, Creating A True Singleton In Node.js, With ES6 Symbols\n * Das Surma, How to read web specs Part IIa – Or: ECMAScript Symbols: 介绍 Symbol 的规格\n\n\n# Set 和 Map\n\n * Mozilla Developer Network, WeakSet：介绍 WeakSet 数据结构\n * Dwayne Charrington, What Are Weakmaps In ES6?: WeakMap 数据结构介绍\n * Axel Rauschmayer, ECMAScript 6: maps and sets: Set 和 Map 结构的详细介绍\n * Jason Orendorff, ES6 In Depth: Collections：Set 和 Map 结构的设计思想\n * Axel Rauschmayer, Converting ES6 Maps to and from JSON: 如何将 Map 与其他数据结构互相转换\n\n\n# Proxy 和 Reflect\n\n * Nicholas C. Zakas, Creating defensive objects with ES6 proxies\n * Axel Rauschmayer, Meta programming with ECMAScript 6 proxies: Proxy 详解\n * Daniel Zautner, Meta-programming JavaScript Using Proxies: 使用 Proxy 实现元编程\n * Tom Van Cutsem, Harmony-reflect: Reflect 对象的设计目的\n * Tom Van Cutsem, Proxy Traps: Proxy 拦截操作一览\n * Tom Van Cutsem, Reflect API\n * Tom Van Cutsem, Proxy Handler API\n * Nicolas Bevacqua, ES6 Proxies in Depth\n * Nicolas Bevacqua, ES6 Proxy Traps in Depth\n * Nicolas Bevacqua, More ES6 Proxy Traps in Depth\n * Axel Rauschmayer, Pitfall: not all objects can be wrapped transparently by proxies\n * Bertalan Miklos, Writing a JavaScript Framework - Data Binding with ES6 Proxies: 使用 Proxy 实现观察者模式\n * Keith Cirkel, Metaprogramming in ES6: Part 2 - Reflect: Reflect API 的详细介绍\n\n\n# Promise 对象\n\n * Jake Archibald, JavaScript Promises: There and back again\n * Jake Archibald, Tasks, microtasks, queues and schedules\n * Tilde, rsvp.js\n * Sandeep Panda, An Overview of JavaScript Promises: ES6 Promise 入门介绍\n * Dave Atchley, ES6 Promises: Promise 的语法介绍\n * Axel Rauschmayer, ECMAScript 6 promises (2/2): the API: 对 ES6 Promise 规格和用法的详细介绍\n * Jack Franklin, Embracing Promises in JavaScript: catch 方法的例子\n * Ronald Chen, How to escape Promise Hell: 如何使用Promise.all方法的一些很好的例子\n * Jordan Harband, proposal-promise-try: Promise.try() 方法的提案\n * Sven Slootweg, What is Promise.try, and why does it matter?: Promise.try() 方法的优点\n * Yehuda Katz, TC39: Promises, Promises: Promise.try() 的用处\n\n\n# Iterator\n\n * Mozilla Developer Network, Iterators and generators\n * Mozilla Developer Network, The Iterator protocol\n * Jason Orendorff, ES6 In Depth: Iterators and the for-of loop: 遍历器与 for...of 循环的介绍\n * Axel Rauschmayer, Iterators and generators in ECMAScript 6: 探讨 Iterator 和 Generator 的设计目的\n * Axel Rauschmayer, Iterables and iterators in ECMAScript 6: Iterator 的详细介绍\n * Kyle Simpson, Iterating ES6 Numbers: 在数值对象上部署遍历器\n\n\n# Generator\n\n * Matt Baker, Replacing callbacks with ES6 Generators\n * Steven Sanderson, Experiments with Koa and JavaScript Generators\n * jmar777, What's the Big Deal with Generators?\n * Marc Harter, Generators in Node.js: Common Misconceptions and Three Good Use Cases: 讨论 Generator 函数的作用\n * StackOverflow, ES6 yield : what happens to the arguments of the first call next()?: 第一次使用 next 方法时不能带有参数\n * Kyle Simpson, ES6 Generators: Complete Series: 由浅入深探讨 Generator 的系列文章，共四篇\n * Gajus Kuizinas, The Definitive Guide to the JavaScript Generators: 对 Generator 的综合介绍\n * Jan Krems, Generators Are Like Arrays: 讨论 Generator 可以被当作数据结构看待\n * Harold Cooper, Coroutine Event Loops in JavaScript: Generator 用于实现状态机\n * Ruslan Ismagilov, learn-generators: 编程练习，共 6 道题\n * Steven Sanderson, Experiments with Koa and JavaScript Generators: Generator 入门介绍，以 Koa 框架为例\n * Mahdi Dibaiee, ES7 Array and Generator comprehensions：ES7 的 Generator 推导\n * Nicolas Bevacqua, ES6 Generators in Depth\n * Axel Rauschmayer, ES6 generators in depth: Generator 规格的详尽讲解\n * Derick Bailey, Using ES6 Generators To Short-Circuit Hierarchical Data Iteration：使用 for...of 循环完成预定的操作步骤\n\n\n# 异步操作和 Async 函数\n\n * Luke Hoban, Async Functions for ECMAScript: Async 函数的设计思想，与 Promise、Gernerator 函数的关系\n * Jafar Husain, Asynchronous Generators for ES7: Async 函数的深入讨论\n * Nolan Lawson, Taming the asynchronous beast with ES7: async 函数通俗的实例讲解\n * Jafar Husain, Async Generators: 对 async 与 Generator 混合使用的一些讨论\n * Daniel Brain, Understand promises before you start using async/await: 讨论 async/await 与 Promise 的关系\n * Jake Archibald, Async functions - making promises friendly\n * Axel Rauschmayer, ES proposal: asynchronous iteration: 异步遍历器的详细介绍\n * Dima Grossman, How to write async await without try-catch blocks in JavaScript: 除了 try/catch 以外的 async 函数内部捕捉错误的方法\n * Mostafa Gaafa, 6 Reasons Why JavaScript’s Async/Await Blows Promises Away: Async 函数的6个好处\n * Mathias Bynens, Asynchronous stack traces: why await beats Promise#then(): async 函数可以保留错误堆栈\n\n\n# Class\n\n * Sebastian Porto, ES6 classes and JavaScript prototypes: ES6 Class 的写法与 ES5 Prototype 的写法对比\n * Jack Franklin, An introduction to ES6 classes: ES6 class 的入门介绍\n * Axel Rauschmayer, ECMAScript 6: new OOP features besides classes\n * Axel Rauschmayer, Classes in ECMAScript 6 (final semantics): Class 语法的详细介绍和设计思想分析\n * Eric Faust, ES6 In Depth: Subclassing: Class 语法的深入介绍\n * Nicolás Bevacqua, Binding Methods to Class Instance Objects: 如何绑定类的实例中的 this\n * Jamie Kyle, JavaScript's new #private class fields：私有属性的介绍。\n * Mathias Bynens, Public and private class fields：实例属性的新写法的介绍。\n\n\n# Decorator\n\n * Maximiliano Fierro, Declarative vs Imperative: Decorators 和 Mixin 介绍\n * Justin Fagnani, \"Real\" Mixins with JavaScript Classes: 使用类的继承实现 Mixin\n * Addy Osmani, Exploring ES2016 Decorators: Decorator 的深入介绍\n * Sebastian McKenzie, Allow decorators for functions as well: 为什么修饰器不能用于函数\n * Maximiliano Fierro, Traits with ES7 Decorators: Trait 的用法介绍\n * Jonathan Creamer: Using ES2016 Decorators to Publish on an Event Bus: 使用修饰器实现自动发布事件\n\n\n# Module\n\n * Jack Franklin, JavaScript Modules the ES6 Way: ES6 模块入门\n * Axel Rauschmayer, ECMAScript 6 modules: the final syntax: ES6 模块的介绍，以及与 CommonJS 规格的详细比较\n * Dave Herman, Static module resolution: ES6 模块的静态化设计思想\n * Jason Orendorff, ES6 In Depth: Modules: ES6 模块设计思想的介绍\n * Ben Newman, The Importance of import and export: ES6 模块的设计思想\n * ESDiscuss, Why is \"export default var a = 1;\" invalid syntax?\n * Bradley Meck, ES6 Module Interoperability: 介绍 Node 如何处理 ES6 语法加载 CommonJS 模块\n * Axel Rauschmayer, Making transpiled ES modules more spec-compliant: ES6 模块编译成 CommonJS 模块的详细介绍\n * Axel Rauschmayer, ES proposal: import() – dynamically importing ES modules: import() 的用法\n * Node EPS, ES Module Interoperability: Node 对 ES6 模块的处理规格\n\n\n# 二进制数组\n\n * Ilmari Heikkinen, Typed Arrays: Binary Data in the Browser\n * Khronos, Typed Array Specification\n * Ian Elliot, Reading A BMP File In JavaScript\n * Renato Mangini, How to convert ArrayBuffer to and from String\n * Axel Rauschmayer, Typed Arrays in ECMAScript 6\n * Axel Rauschmayer, ES proposal: Shared memory and atomics\n * Lin Clark, Avoiding race conditions in SharedArrayBuffers with Atomics: Atomics 对象使用场景的解释\n * Lars T Hansen, Shared memory - a brief tutorial\n * James Milner, The Return of SharedArrayBuffers and Atomics\n\n\n# SIMD\n\n * TC39, SIMD.js Stage 2\n * MDN, SIMD\n * TC39, ECMAScript SIMD\n * Axel Rauschmayer, JavaScript gains support for SIMD\n\n\n# 工具\n\n * Babel, Babel Handbook: Babel 的用法介绍\n * Google, traceur-compiler: Traceur 编译器\n * Casper Beyer, ECMAScript 6 Features and Tools\n * Stoyan Stefanov, Writing ES6 today with jstransform\n * ES6 Module Loader, ES6 Module Loader Polyfill: 在浏览器和 node.js 加载 ES6 模块的一个库，文档里对 ES6 模块有详细解释\n * Paul Miller, es6-shim: 一个针对老式浏览器，模拟 ES6 部分功能的垫片库（shim）\n * army8735, JavaScript Downcast: 国产的 ES6 到 ES5 的转码器\n * esnext, ES6 Module Transpiler：基于 node.js 的将 ES6 模块转为 ES5 代码的命令行工具\n * Sebastian McKenzie, BabelJS: ES6 转译器\n * SystemJS, SystemJS: 在浏览器中加载 AMD、CJS、ES6 模块的一个垫片库\n * Modernizr, HTML5 Cross Browser Polyfills: ES6 垫片库清单\n * Facebook, regenerator: 将 Generator 函数转为 ES5 的转码器",normalizedContent:"# 参考链接\n\n\n# 官方文件\n\n * ecmascript® 2015 language specification: ecmascript 2015 规格\n * ecmascript® 2016 language specification: ecmascript 2016 规格\n * ecmascript® 2017 language specification：ecmascript 2017 规格（草案）\n * ecmascript current proposals: ecmascript 当前的所有提案\n * ecmascript active proposals: 已经进入正式流程的提案\n * ecmascript proposals：从阶段 0 到阶段 4 的所有提案列表\n * tc39 meeting agendas: tc39 委员会历年的会议记录\n * ecmascript daily: tc39 委员会的动态\n * the tc39 process: 提案进入正式规格的流程\n * tc39: a process sketch, stages 0 and 1: stage 0 和 stage 1 的含义\n * tc39 process sketch, stage 2: stage 2 的含义\n\n\n# 综合介绍\n\n * axel rauschmayer, exploring es6: upgrade to the next version of javascript: es6 的专著，本书的许多代码实例来自该书\n * sayanee basu, use ecmascript 6 today\n * ariya hidayat, toward modern web apps with ecmascript 6\n * dale schouten, 10 ecmascript-6 tricks you can perform right now\n * colin toh, lightweight es6 features that pack a punch: es6 的一些“轻量级”的特性介绍\n * domenic denicola, es6: the awesome parts\n * nicholas c. zakas, understanding ecmascript 6\n * justin drake, ecmascript 6 in node.js\n * ryan dao, summary of ecmascript 6 major features\n * luke hoban, es6 features: es6 新语法点的罗列\n * traceur-compiler, language features: traceur 文档列出的一些 es6 例子\n * axel rauschmayer, ecmascript 6: what’s next for javascript?: 关于 es6 新增语法的综合介绍，有很多例子\n * axel rauschmayer, getting started with ecmascript 6: es6 语法点的综合介绍\n * toby ho, es6 in io.js\n * guillermo rauch, ecmascript 6\n * benjamin de cock, frontend guidelines: es6 最佳实践\n * jani hartikainen, es6: what are the benefits of the new features in practice?\n * kangax, javascript quiz. es6 edition: es6 小测试\n * jeremy fairbank, html5devconf es7 and beyond!: es7 新增语法点介绍\n * timothy gu, how to read the ecmascript specification: 如何读懂 es6 规格\n\n\n# let 和 const\n\n * kyle simpson, for and against let: 讨论 let 命令的作用域\n * kangax, why typeof is no longer “safe”: 讨论在块级作用域内，let 命令的变量声明和赋值的行为\n * axel rauschmayer, variables and scoping in ecmascript 6: 讨论块级作用域与 let 和 const 的行为\n * nicolas bevacqua, es6 let, const and the “temporal dead zone” (tdz) in depth\n * acorn, function statements in strict mode: 块级作用域对严格模式的函数声明的影响\n * axel rauschmayer, es proposal: global: 顶层对象global\n * mathias bynens, a horrifying globalthis polyfill in universal javascript：如何写 globalthis 的垫片库\n\n\n# 解构赋值\n\n * nick fitzgerald, destructuring assignment in ecmascript 6: 详细介绍解构赋值的用法\n * nicholas c. zakas, ecmascript 6 destructuring gotcha\n\n\n# 字符串\n\n * nicholas c. zakas, a critical review of ecmascript 6 quasi-literals\n * mozilla developer network, template strings\n * addy osmani, getting literal with es6 template strings: 模板字符串的介绍\n * blake winton, es6 templates: 模板字符串的介绍\n * peter jaszkowiak, how to write a template compiler in javascript: 使用模板字符串，编写一个模板编译函数\n * axel rauschmayer, es.stage3: string padding\n\n\n# 正则\n\n * mathias bynens, unicode-aware regular expressions in es6: 详细介绍正则表达式的 u 修饰符\n * axel rauschmayer, new regular expression features in ecmascript 6：es6 正则特性的详细介绍\n * yang guo, regexp lookbehind assertions：介绍后行断言\n * axel rauschmayer, es proposal: regexp named capture groups: 具名组匹配的介绍\n * mathias bynens, ecmascript regular expressions are getting better!: 介绍 es2018 添加的多项正则语法\n\n\n# 数值\n\n * nicolas bevacqua, es6 number improvements in depth\n * axel rauschmayer, es proposal: arbitrary precision integers\n * mathias bynens, bigint: arbitrary-precision integers in javascript\n\n\n# 数组\n\n * axel rauschmayer, ecmascript 6’s new array methods: 对 es6 新增的数组方法的全面介绍\n * tc39, array.prototype.includes: 数组的 includes 方法的规格\n * axel rauschmayer, ecmascript 6: holes in arrays: 数组的空位问题\n\n\n# 函数\n\n * nicholas c. zakas, understanding ecmascript 6 arrow functions\n * jack franklin, real life es6 - arrow functions\n * axel rauschmayer, handling required parameters in ecmascript 6\n * dmitry soshnikov, es6 notes: default values of parameters: 介绍参数的默认值\n * ragan wald, destructuring and recursion in es6: rest 参数和扩展运算符的详细介绍\n * axel rauschmayer, the names of functions in es6: 函数的 name 属性的详细介绍\n * kyle simpson, arrow this: 箭头函数并没有自己的 this\n * derick bailey, do es6 arrow functions really solve “this” in javascript?：使用箭头函数处理 this 指向，必须非常小心\n * mark mcdonnell, understanding recursion in functional javascript programming: 如何自己实现尾递归优化\n * nicholas c. zakas, the ecmascript 2016 change you probably don't know: 使用参数默认值时，不能在函数内部显式开启严格模式\n * axel rauschmayer, es proposal: optional catch binding\n * cynthia lee, when you should use es6 arrow functions — and when you shouldn’t: 讨论箭头函数的适用场合\n * eric elliott, what is this?: 箭头函数内部的 this 的解释。\n\n\n# 对象\n\n * addy osmani, data-binding revolutions with object.observe(): 介绍 object.observe()的概念\n * sella rafaeli, native javascript data-binding: 如何使用 object.observe 方法，实现数据对象与 dom 对象的双向绑定\n * axel rauschmayer, __proto__ in ecmascript 6\n * axel rauschmayer, enumerability in ecmascript 6\n * axel rauschmayer, es proposal: object.getownpropertydescriptors()\n * tc39, object.getownpropertydescriptors proposal\n * david titarenco, how spread syntax breaks javascript: 扩展运算符的一些不合理的地方\n\n\n# symbol\n\n * axel rauschmayer, symbols in ecmascript 6: symbol 简介\n * mdn, symbol: symbol 类型的详细介绍\n * jason orendorff, es6 in depth: symbols\n * keith cirkel, metaprogramming in es6: symbols and why they're awesome: symbol 的深入介绍\n * axel rauschmayer, customizing es6 via well-known symbols\n * derick bailey, creating a true singleton in node.js, with es6 symbols\n * das surma, how to read web specs part iia – or: ecmascript symbols: 介绍 symbol 的规格\n\n\n# set 和 map\n\n * mozilla developer network, weakset：介绍 weakset 数据结构\n * dwayne charrington, what are weakmaps in es6?: weakmap 数据结构介绍\n * axel rauschmayer, ecmascript 6: maps and sets: set 和 map 结构的详细介绍\n * jason orendorff, es6 in depth: collections：set 和 map 结构的设计思想\n * axel rauschmayer, converting es6 maps to and from json: 如何将 map 与其他数据结构互相转换\n\n\n# proxy 和 reflect\n\n * nicholas c. zakas, creating defensive objects with es6 proxies\n * axel rauschmayer, meta programming with ecmascript 6 proxies: proxy 详解\n * daniel zautner, meta-programming javascript using proxies: 使用 proxy 实现元编程\n * tom van cutsem, harmony-reflect: reflect 对象的设计目的\n * tom van cutsem, proxy traps: proxy 拦截操作一览\n * tom van cutsem, reflect api\n * tom van cutsem, proxy handler api\n * nicolas bevacqua, es6 proxies in depth\n * nicolas bevacqua, es6 proxy traps in depth\n * nicolas bevacqua, more es6 proxy traps in depth\n * axel rauschmayer, pitfall: not all objects can be wrapped transparently by proxies\n * bertalan miklos, writing a javascript framework - data binding with es6 proxies: 使用 proxy 实现观察者模式\n * keith cirkel, metaprogramming in es6: part 2 - reflect: reflect api 的详细介绍\n\n\n# promise 对象\n\n * jake archibald, javascript promises: there and back again\n * jake archibald, tasks, microtasks, queues and schedules\n * tilde, rsvp.js\n * sandeep panda, an overview of javascript promises: es6 promise 入门介绍\n * dave atchley, es6 promises: promise 的语法介绍\n * axel rauschmayer, ecmascript 6 promises (2/2): the api: 对 es6 promise 规格和用法的详细介绍\n * jack franklin, embracing promises in javascript: catch 方法的例子\n * ronald chen, how to escape promise hell: 如何使用promise.all方法的一些很好的例子\n * jordan harband, proposal-promise-try: promise.try() 方法的提案\n * sven slootweg, what is promise.try, and why does it matter?: promise.try() 方法的优点\n * yehuda katz, tc39: promises, promises: promise.try() 的用处\n\n\n# iterator\n\n * mozilla developer network, iterators and generators\n * mozilla developer network, the iterator protocol\n * jason orendorff, es6 in depth: iterators and the for-of loop: 遍历器与 for...of 循环的介绍\n * axel rauschmayer, iterators and generators in ecmascript 6: 探讨 iterator 和 generator 的设计目的\n * axel rauschmayer, iterables and iterators in ecmascript 6: iterator 的详细介绍\n * kyle simpson, iterating es6 numbers: 在数值对象上部署遍历器\n\n\n# generator\n\n * matt baker, replacing callbacks with es6 generators\n * steven sanderson, experiments with koa and javascript generators\n * jmar777, what's the big deal with generators?\n * marc harter, generators in node.js: common misconceptions and three good use cases: 讨论 generator 函数的作用\n * stackoverflow, es6 yield : what happens to the arguments of the first call next()?: 第一次使用 next 方法时不能带有参数\n * kyle simpson, es6 generators: complete series: 由浅入深探讨 generator 的系列文章，共四篇\n * gajus kuizinas, the definitive guide to the javascript generators: 对 generator 的综合介绍\n * jan krems, generators are like arrays: 讨论 generator 可以被当作数据结构看待\n * harold cooper, coroutine event loops in javascript: generator 用于实现状态机\n * ruslan ismagilov, learn-generators: 编程练习，共 6 道题\n * steven sanderson, experiments with koa and javascript generators: generator 入门介绍，以 koa 框架为例\n * mahdi dibaiee, es7 array and generator comprehensions：es7 的 generator 推导\n * nicolas bevacqua, es6 generators in depth\n * axel rauschmayer, es6 generators in depth: generator 规格的详尽讲解\n * derick bailey, using es6 generators to short-circuit hierarchical data iteration：使用 for...of 循环完成预定的操作步骤\n\n\n# 异步操作和 async 函数\n\n * luke hoban, async functions for ecmascript: async 函数的设计思想，与 promise、gernerator 函数的关系\n * jafar husain, asynchronous generators for es7: async 函数的深入讨论\n * nolan lawson, taming the asynchronous beast with es7: async 函数通俗的实例讲解\n * jafar husain, async generators: 对 async 与 generator 混合使用的一些讨论\n * daniel brain, understand promises before you start using async/await: 讨论 async/await 与 promise 的关系\n * jake archibald, async functions - making promises friendly\n * axel rauschmayer, es proposal: asynchronous iteration: 异步遍历器的详细介绍\n * dima grossman, how to write async await without try-catch blocks in javascript: 除了 try/catch 以外的 async 函数内部捕捉错误的方法\n * mostafa gaafa, 6 reasons why javascript’s async/await blows promises away: async 函数的6个好处\n * mathias bynens, asynchronous stack traces: why await beats promise#then(): async 函数可以保留错误堆栈\n\n\n# class\n\n * sebastian porto, es6 classes and javascript prototypes: es6 class 的写法与 es5 prototype 的写法对比\n * jack franklin, an introduction to es6 classes: es6 class 的入门介绍\n * axel rauschmayer, ecmascript 6: new oop features besides classes\n * axel rauschmayer, classes in ecmascript 6 (final semantics): class 语法的详细介绍和设计思想分析\n * eric faust, es6 in depth: subclassing: class 语法的深入介绍\n * nicolas bevacqua, binding methods to class instance objects: 如何绑定类的实例中的 this\n * jamie kyle, javascript's new #private class fields：私有属性的介绍。\n * mathias bynens, public and private class fields：实例属性的新写法的介绍。\n\n\n# decorator\n\n * maximiliano fierro, declarative vs imperative: decorators 和 mixin 介绍\n * justin fagnani, \"real\" mixins with javascript classes: 使用类的继承实现 mixin\n * addy osmani, exploring es2016 decorators: decorator 的深入介绍\n * sebastian mckenzie, allow decorators for functions as well: 为什么修饰器不能用于函数\n * maximiliano fierro, traits with es7 decorators: trait 的用法介绍\n * jonathan creamer: using es2016 decorators to publish on an event bus: 使用修饰器实现自动发布事件\n\n\n# module\n\n * jack franklin, javascript modules the es6 way: es6 模块入门\n * axel rauschmayer, ecmascript 6 modules: the final syntax: es6 模块的介绍，以及与 commonjs 规格的详细比较\n * dave herman, static module resolution: es6 模块的静态化设计思想\n * jason orendorff, es6 in depth: modules: es6 模块设计思想的介绍\n * ben newman, the importance of import and export: es6 模块的设计思想\n * esdiscuss, why is \"export default var a = 1;\" invalid syntax?\n * bradley meck, es6 module interoperability: 介绍 node 如何处理 es6 语法加载 commonjs 模块\n * axel rauschmayer, making transpiled es modules more spec-compliant: es6 模块编译成 commonjs 模块的详细介绍\n * axel rauschmayer, es proposal: import() – dynamically importing es modules: import() 的用法\n * node eps, es module interoperability: node 对 es6 模块的处理规格\n\n\n# 二进制数组\n\n * ilmari heikkinen, typed arrays: binary data in the browser\n * khronos, typed array specification\n * ian elliot, reading a bmp file in javascript\n * renato mangini, how to convert arraybuffer to and from string\n * axel rauschmayer, typed arrays in ecmascript 6\n * axel rauschmayer, es proposal: shared memory and atomics\n * lin clark, avoiding race conditions in sharedarraybuffers with atomics: atomics 对象使用场景的解释\n * lars t hansen, shared memory - a brief tutorial\n * james milner, the return of sharedarraybuffers and atomics\n\n\n# simd\n\n * tc39, simd.js stage 2\n * mdn, simd\n * tc39, ecmascript simd\n * axel rauschmayer, javascript gains support for simd\n\n\n# 工具\n\n * babel, babel handbook: babel 的用法介绍\n * google, traceur-compiler: traceur 编译器\n * casper beyer, ecmascript 6 features and tools\n * stoyan stefanov, writing es6 today with jstransform\n * es6 module loader, es6 module loader polyfill: 在浏览器和 node.js 加载 es6 模块的一个库，文档里对 es6 模块有详细解释\n * paul miller, es6-shim: 一个针对老式浏览器，模拟 es6 部分功能的垫片库（shim）\n * army8735, javascript downcast: 国产的 es6 到 es5 的转码器\n * esnext, es6 module transpiler：基于 node.js 的将 es6 模块转为 es5 代码的命令行工具\n * sebastian mckenzie, babeljs: es6 转译器\n * systemjs, systemjs: 在浏览器中加载 amd、cjs、es6 模块的一个垫片库\n * modernizr, html5 cross browser polyfills: es6 垫片库清单\n * facebook, regenerator: 将 generator 函数转为 es5 的转码器",charsets:{cjk:!0}},{title:"Git工具-重写历史",frontmatter:{title:"Git工具-重写历史",date:"2020-11-18T17:43:57.000Z",permalink:"/pages/1832fe/",categories:["《Git》学习笔记"],tags:["Git"],readingShow:"top"},regularPath:"/06.%E4%B9%A6%E7%B1%8D/10.%E3%80%8AGit%E3%80%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/20.%E6%96%87%E6%A1%A3%E7%AC%94%E8%AE%B0/100.Git%E5%B7%A5%E5%85%B7-%E9%87%8D%E5%86%99%E5%8E%86%E5%8F%B2.html",relativePath:"06.书籍/10.《Git》学习笔记/20.文档笔记/100.Git工具-重写历史.md",key:"v-131e313b",path:"/pages/1832fe/",headers:[{level:2,title:"修改最后一次提交",slug:"修改最后一次提交",normalizedTitle:"修改最后一次提交",charIndex:452},{level:3,title:"修改提交信息",slug:"修改提交信息",normalizedTitle:"修改提交信息",charIndex:518},{level:3,title:"修改实际内容",slug:"修改实际内容",normalizedTitle:"修改实际内容",charIndex:699},{level:2,title:"修改多个提交信息",slug:"修改多个提交信息",normalizedTitle:"修改多个提交信息",charIndex:1112},{level:2,title:"重新排序提交",slug:"重新排序提交",normalizedTitle:"重新排序提交",charIndex:4033},{level:2,title:"压缩提交",slug:"压缩提交",normalizedTitle:"压缩提交",charIndex:4459},{level:2,title:"拆分提交",slug:"拆分提交",normalizedTitle:"拆分提交",charIndex:6217},{level:2,title:"核武器级选项：filter-branch",slug:"核武器级选项-filter-branch",normalizedTitle:"核武器级选项：filter-branch",charIndex:7243},{level:3,title:"从每一个提交中移除一个文件",slug:"从每一个提交中移除一个文件",normalizedTitle:"从每一个提交中移除一个文件",charIndex:7317},{level:3,title:"使一个子目录做为新的根目录",slug:"使一个子目录做为新的根目录",normalizedTitle:"使一个子目录做为新的根目录",charIndex:8357},{level:3,title:"全局修改邮箱地址",slug:"全局修改邮箱地址",normalizedTitle:"全局修改邮箱地址",charIndex:8683}],lastUpdated:"2022/9/22 下午4:28:09",lastUpdatedTimestamp:1663835289e3,headersStr:"修改最后一次提交 修改提交信息 修改实际内容 修改多个提交信息 重新排序提交 压缩提交 拆分提交 核武器级选项：filter-branch 从每一个提交中移除一个文件 使一个子目录做为新的根目录 全局修改邮箱地址",content:"# Git 工具 - 重写历史\n\n许多时候，在使用 Git 时，你可能想要修订提交历史。 Git 很棒的一点是它允许你在最后时刻做决定。 你可以在将暂存区内容提交前决定哪些文件进入提交，可以通过 git stash 来决定不与某些内容工作， 也可以重写已经发生的提交就像它们以另一种方式发生的一样。 这可能涉及改变提交的顺序，改变提交中的信息或修改文件，将提交压缩或是拆分， 或完全地移除提交——在将你的工作成果与他人共享之前。\n\n在本节中，你可以学到如何完成这些工作，这样在与他人分享你的工作成果时你的提交历史将如你所愿地展示出来。\n\nNOTE   在满意之前不要推送你的工作GIT 的基本原则之一是，由于克隆中有很多工作是本地的，因此你可以在本地 随便重写历史记录。\n       然而一旦推送了你的工作，那就完全是另一回事了，除非你有充分的理由进行更改，否则应该将推送的工作视为最终结果。\n       简而言之，在对它感到满意并准备与他人分享之前，应当避免推送你的工作。\n       \n\n\n# 修改最后一次提交\n\n修改你最近一次提交可能是所有修改历史提交的操作中最常见的一个。 对于你的最近一次提交，你往往想做两件事情：简单地修改提交信息， 或者通过添加、移除或修改文件来更改提交实际的内容。\n\n\n# 修改提交信息\n\n如果，你只是想修改最近一次提交的提交信息，那么很简单：\n\n$ git commit --amend\n\n\n1\n\n\n上面这条命令会将最后一次的提交信息载入到编辑器中供你修改。 当保存并关闭编辑器后，编辑器会将更新后的提交信息写入新提交中，它会成为新的最后一次提交。\n\n\n# 修改实际内容\n\n另一方面，如果你想要修改最后一次提交的实际内容，那么流程很相似：首先作出你想要补上的修改， 暂存它们，然后用 git commit --amend 以新的改进后的提交来 替换 掉旧有的最后一次提交，\n\n使用这个技巧的时候需要小心，因为修正会改变提交的 SHA-1 校验和。 它类似于一个小的变基——如果已经推送了最后一次提交就不要修正它。\n\nTIP   修补后的提交可能需要修补提交信息当你在修补一次提交时，可以同时修改提交信息和提交内容。\n      如果你修补了提交的内容，那么几乎肯定要更新提交消息以反映修改后的内容。另一方面，如果你的修补是琐碎的（如修改了一个笔误或添加了一个忘记暂存的文件），\n      那么之前的提交信息不必修改，你只需作出更改，暂存它们，然后通过以下命令避免不必要的编辑器环节即可：$ GIT\n      COMMIT --AMEND --NO-EDIT\n      \n\n\n# 修改多个提交信息\n\n为了修改在提交历史中较远的提交，必须使用更复杂的工具。 Git 没有一个改变历史工具，但是可以使用变基工具来变基一系列提交，基于它们原来的 HEAD 而不是将其移动到另一个新的上面。 通过交互式变基工具，可以在任何想要修改的提交后停止，然后修改信息、添加文件或做任何想做的事情。 可以通过给 git rebase 增加 -i 选项来交互式地运行变基。 必须指定想要重写多久远的历史，这可以通过告诉命令将要变基到的提交来做到。\n\n例如，如果想要修改最近三次提交信息，或者那组提交中的任意一个提交信息， 将想要修改的最近一次提交的父提交作为参数传递给 git rebase -i 命令，即 HEAD~2^ 或 HEAD~3。 记住 ~3 可能比较容易，因为你正尝试修改最后三次提交；但是注意实际上指定了以前的四次提交，即想要修改提交的父提交：\n\n$ git rebase -i HEAD~3\n\n\n1\n\n\n再次记住这是一个变基命令——在 HEAD~3..HEAD 范围内的每一个修改了提交信息的提交及其 所有后裔 都会被重写。 不要涉及任何已经推送到中央服务器的提交——这样做会产生一次变更的两个版本，因而使他人困惑。\n\n运行这个命令会在文本编辑器上给你一个提交的列表，看起来像下面这样：\n\npick f7f3f6d changed my name a bit\npick 310154e updated README formatting and added blame\npick a5f4a0d added cat-file\n\n# Rebase 710f0f8..a5f4a0d onto 710f0f8\n#\n# Commands:\n# p, pick <commit> = use commit\n# r, reword <commit> = use commit, but edit the commit message\n# e, edit <commit> = use commit, but stop for amending\n# s, squash <commit> = use commit, but meld into previous commit\n# f, fixup <commit> = like \"squash\", but discard this commit's log message\n# x, exec <command> = run command (the rest of the line) using shell\n# b, break = stop here (continue rebase later with 'git rebase --continue')\n# d, drop <commit> = remove commit\n# l, label <label> = label current HEAD with a name\n# t, reset <label> = reset HEAD to a label\n# m, merge [-C <commit> | -c <commit>] <label> [# <oneline>]\n# .       create a merge commit using the original merge commit's\n# .       message (or the oneline, if no original merge commit was\n# .       specified). Use -c <commit> to reword the commit message.\n#\n# These lines can be re-ordered; they are executed from top to bottom.\n#\n# If you remove a line here THAT COMMIT WILL BE LOST.\n#\n# However, if you remove everything, the rebase will be aborted.\n#\n# Note that empty commits are commented out\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n\n\n需要重点注意的是相对于正常使用的 log 命令，这些提交显示的顺序是相反的。 运行一次 log 命令，会看到类似这样的东西：\n\n$ git log --pretty=format:\"%h %s\" HEAD~3..HEAD\na5f4a0d added cat-file\n310154e updated README formatting and added blame\nf7f3f6d changed my name a bit\n\n\n1\n2\n3\n4\n\n\n注意其中的反序显示。 交互式变基给你一个它将会运行的脚本。 它将会从你在命令行中指定的提交（HEAD~3）开始，从上到下的依次重演每一个提交引入的修改。 它将最旧的而不是最新的列在上面，因为那会是第一个将要重演的。\n\n你需要修改脚本来让它停留在你想修改的变更上。 要达到这个目的，你只要将你想修改的每一次提交前面的 ‘pick’ 改为 ‘edit’。 例如，只想修改第三次提交信息，可以像下面这样修改文件：\n\nedit f7f3f6d changed my name a bit\npick 310154e updated README formatting and added blame\npick a5f4a0d added cat-file\n\n\n1\n2\n3\n\n\n当保存并退出编辑器时，Git 将你带回到列表中的最后一次提交，把你送回命令行并提示以下信息：\n\n$ git rebase -i HEAD~3\nStopped at f7f3f6d... changed my name a bit\nYou can amend the commit now, with\n\n       git commit --amend\n\nOnce you're satisfied with your changes, run\n\n       git rebase --continue\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n这些指令准确地告诉你该做什么。 输入\n\n$ git commit --amend\n\n\n1\n\n\n修改提交信息，然后退出编辑器。 然后，运行\n\n$ git rebase --continue\n\n\n1\n\n\n这个命令将会自动地应用另外两个提交，然后就完成了。 如果需要将不止一处的 pick 改为 edit，需要在每一个修改为 edit 的提交上重复这些步骤。 每一次，Git 将会停止，让你修正提交，然后继续直到完成。\n\n\n# 重新排序提交\n\n也可以使用交互式变基来重新排序或完全移除提交。 如果想要移除 “added cat-file” 提交然后修改另外两个提交引入的顺序，可以将变基脚本从这样：\n\npick f7f3f6d changed my name a bit\npick 310154e updated README formatting and added blame\npick a5f4a0d added cat-file\n\n\n1\n2\n3\n\n\n改为这样：\n\npick 310154e updated README formatting and added blame\npick f7f3f6d changed my name a bit\n\n\n1\n2\n\n\n当保存并退出编辑器时，Git 将你的分支带回这些提交的父提交，应用 310154e 然后应用 f7f3f6d，最后停止。 事实修改了那些提交的顺序并完全地移除了 “added cat-file” 提交。\n\n\n# 压缩提交\n\n通过交互式变基工具，也可以将一连串提交压缩成一个单独的提交。 在变基信息中脚本给出了有用的指令：\n\n#\n# Commands:\n# p, pick <commit> = use commit\n# r, reword <commit> = use commit, but edit the commit message\n# e, edit <commit> = use commit, but stop for amending\n# s, squash <commit> = use commit, but meld into previous commit\n# f, fixup <commit> = like \"squash\", but discard this commit's log message\n# x, exec <command> = run command (the rest of the line) using shell\n# b, break = stop here (continue rebase later with 'git rebase --continue')\n# d, drop <commit> = remove commit\n# l, label <label> = label current HEAD with a name\n# t, reset <label> = reset HEAD to a label\n# m, merge [-C <commit> | -c <commit>] <label> [# <oneline>]\n# .       create a merge commit using the original merge commit's\n# .       message (or the oneline, if no original merge commit was\n# .       specified). Use -c <commit> to reword the commit message.\n#\n# These lines can be re-ordered; they are executed from top to bottom.\n#\n# If you remove a line here THAT COMMIT WILL BE LOST.\n#\n# However, if you remove everything, the rebase will be aborted.\n#\n# Note that empty commits are commented out\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n\n\n如果，指定 “squash” 而不是 “pick” 或 “edit”，Git 将应用两者的修改并合并提交信息在一起。 所以，如果想要这三次提交变为一个提交，可以这样修改脚本：\n\npick f7f3f6d changed my name a bit\nsquash 310154e updated README formatting and added blame\nsquash a5f4a0d added cat-file\n\n\n1\n2\n3\n\n\n当保存并退出编辑器时，Git 应用所有的三次修改然后将你放到编辑器中来合并三次提交信息：\n\n# This is a combination of 3 commits.\n# The first commit's message is:\nchanged my name a bit\n\n# This is the 2nd commit message:\n\nupdated README formatting and added blame\n\n# This is the 3rd commit message:\n\nadded cat-file\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n当你保存之后，你就拥有了一个包含前三次提交的全部变更的提交。\n\n\n# 拆分提交\n\n拆分一个提交会撤消这个提交，然后多次地部分地暂存与提交直到完成你所需次数的提交。 例如，假设想要拆分三次提交的中间那次提交。 想要将它拆分为两次提交：第一个 “updated README formatting”，第二个 “added blame” 来代替原来的 “updated README formatting and added blame”。 可以通过修改 rebase -i 的脚本来做到这点，将要拆分的提交的指令修改为 “edit”：\n\npick f7f3f6d changed my name a bit\nedit 310154e updated README formatting and added blame\npick a5f4a0d added cat-file\n\n\n1\n2\n3\n\n\n然后，当脚本带你进入到命令行时，重置那个提交，拿到被重置的修改，从中创建几次提交。 当保存并退出编辑器时，Git 带你到列表中第一个提交的父提交，应用第一个提交（f7f3f6d）， 应用第二个提交（310154e），然后让你进入命令行。 那里，可以通过 git reset HEAD^ 做一次针对那个提交的混合重置，实际上将会撤消那次提交并将修改的文件取消暂存。 现在可以暂存并提交文件直到有几个提交，然后当完成时运行 git rebase --continue：\n\n$ git reset HEAD^\n$ git add README\n$ git commit -m 'updated README formatting'\n$ git add lib/simplegit.rb\n$ git commit -m 'added blame'\n$ git rebase --continue\n\n\n1\n2\n3\n4\n5\n6\n\n\nGit 在脚本中应用最后一次提交（a5f4a0d），历史记录看起来像这样：\n\n$ git log -4 --pretty=format:\"%h %s\"\n1c002dd added cat-file\n9b29157 added blame\n35cfb2b updated README formatting\nf3cc40e changed my name a bit\n\n\n1\n2\n3\n4\n5\n\n\n再次强调，这些改动了所有在列表中的提交的 SHA-1 校验和，所以要确保列表中的提交还没有推送到共享仓库中。\n\n\n# 核武器级选项：filter-branch\n\n有另一个历史改写的选项，如果想要通过脚本的方式改写大量提交的话可以使用它——例如，全局修改你的邮箱地址或从每一个提交中移除一个文件。 这个命令是 filter-branch，它可以改写历史中大量的提交，除非你的项目还没有公开并且其他人没有基于要改写的工作的提交做的工作，否则你不应当使用它。 然而，它可以很有用。 你将会学习到几个常用的用途，这样就得到了它适合使用地方的想法。\n\nCAUTION   GIT FILTER-BRANCH 有很多陷阱，不再推荐使用它来重写历史。 请考虑使用\n          GIT-FILTER-REPO，它是一个 PYTHON 脚本，相比大多数使用 FILTER-BRANCH\n          的应用来说，它做得要更好。它的文档和源码可访问\n          HTTPS://GITHUB.COM/NEWREN/GIT-FILTER-REPO 获取。\n          \n\n\n# 从每一个提交中移除一个文件\n\n这经常发生。 有人粗心地通过 git add . 提交了一个巨大的二进制文件，你想要从所有地方删除。 可能偶然地提交了一个包括一个密码的文件，然而你想要开源项目。 filter-branch 是一个可能会用来擦洗整个提交历史的工具。 为了从整个提交历史中移除一个叫做 passwords.txt 的文件，可以使用 --tree-filter 选项给 filter-branch：\n\n$ git filter-branch --tree-filter 'rm -f passwords.txt' HEAD\nRewrite 6b9b3cf04e7c5686a9cb838c3f36a8cb6a0fc2bd (21/21)\nRef 'refs/heads/master' was rewritten\n\n\n1\n2\n3\n\n\n--tree-filter 选项在检出项目的每一个提交后运行指定的命令然后重新提交结果。 在本例中，你从每一个快照中移除了一个叫作 passwords.txt 的文件，无论它是否存在。 如果想要移除所有偶然提交的编辑器备份文件，可以运行类似 git filter-branch --tree-filter 'rm -f *~' HEAD 的命令。\n\n最后将可以看到 Git 重写树与提交然后移动分支指针。 通常一个好的想法是在一个测试分支中做这件事，然后当你决定最终结果是真正想要的，可以硬重置 master 分支。 为了让 filter-branch 在所有分支上运行，可以给命令传递 --all 选项。\n\n\n# 使一个子目录做为新的根目录\n\n假设已经从另一个源代码控制系统中导入，并且有几个没意义的子目录（trunk、tags 等等）。 如果想要让 trunk 子目录作为每一个提交的新的项目根目录，filter-branch 也可以帮助你那么做：\n\n$ git filter-branch --subdirectory-filter trunk HEAD\nRewrite 856f0bf61e41a27326cdae8f09fe708d679f596f (12/12)\nRef 'refs/heads/master' was rewritten\n\n\n1\n2\n3\n\n\n现在新项目根目录是 trunk 子目录了。 Git 会自动移除所有不影响子目录的提交。\n\n\n# 全局修改邮箱地址\n\n另一个常见的情形是在你开始工作时忘记运行 git config 来设置你的名字与邮箱地址， 或者你想要开源一个项目并且修改所有你的工作邮箱地址为你的个人邮箱地址。 任何情形下，你也可以通过 filter-branch 来一次性修改多个提交中的邮箱地址。 需要小心的是只修改你自己的邮箱地址，所以你使用 --commit-filter：\n\n$ git filter-branch --commit-filter '\n        if [ \"$GIT_AUTHOR_EMAIL\" = \"schacon@localhost\" ];\n        then\n                GIT_AUTHOR_NAME=\"Scott Chacon\";\n                GIT_AUTHOR_EMAIL=\"schacon@example.com\";\n                git commit-tree \"$@\";\n        else\n                git commit-tree \"$@\";\n        fi' HEAD\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n这会遍历并重写每一个提交来包含你的新邮箱地址。 因为提交包含了它们父提交的 SHA-1 校验和，这个命令会修改你的历史中的每一个提交的 SHA-1 校验和， 而不仅仅只是那些匹配邮箱地址的提交。",normalizedContent:"# git 工具 - 重写历史\n\n许多时候，在使用 git 时，你可能想要修订提交历史。 git 很棒的一点是它允许你在最后时刻做决定。 你可以在将暂存区内容提交前决定哪些文件进入提交，可以通过 git stash 来决定不与某些内容工作， 也可以重写已经发生的提交就像它们以另一种方式发生的一样。 这可能涉及改变提交的顺序，改变提交中的信息或修改文件，将提交压缩或是拆分， 或完全地移除提交——在将你的工作成果与他人共享之前。\n\n在本节中，你可以学到如何完成这些工作，这样在与他人分享你的工作成果时你的提交历史将如你所愿地展示出来。\n\nnote   在满意之前不要推送你的工作git 的基本原则之一是，由于克隆中有很多工作是本地的，因此你可以在本地 随便重写历史记录。\n       然而一旦推送了你的工作，那就完全是另一回事了，除非你有充分的理由进行更改，否则应该将推送的工作视为最终结果。\n       简而言之，在对它感到满意并准备与他人分享之前，应当避免推送你的工作。\n       \n\n\n# 修改最后一次提交\n\n修改你最近一次提交可能是所有修改历史提交的操作中最常见的一个。 对于你的最近一次提交，你往往想做两件事情：简单地修改提交信息， 或者通过添加、移除或修改文件来更改提交实际的内容。\n\n\n# 修改提交信息\n\n如果，你只是想修改最近一次提交的提交信息，那么很简单：\n\n$ git commit --amend\n\n\n1\n\n\n上面这条命令会将最后一次的提交信息载入到编辑器中供你修改。 当保存并关闭编辑器后，编辑器会将更新后的提交信息写入新提交中，它会成为新的最后一次提交。\n\n\n# 修改实际内容\n\n另一方面，如果你想要修改最后一次提交的实际内容，那么流程很相似：首先作出你想要补上的修改， 暂存它们，然后用 git commit --amend 以新的改进后的提交来 替换 掉旧有的最后一次提交，\n\n使用这个技巧的时候需要小心，因为修正会改变提交的 sha-1 校验和。 它类似于一个小的变基——如果已经推送了最后一次提交就不要修正它。\n\ntip   修补后的提交可能需要修补提交信息当你在修补一次提交时，可以同时修改提交信息和提交内容。\n      如果你修补了提交的内容，那么几乎肯定要更新提交消息以反映修改后的内容。另一方面，如果你的修补是琐碎的（如修改了一个笔误或添加了一个忘记暂存的文件），\n      那么之前的提交信息不必修改，你只需作出更改，暂存它们，然后通过以下命令避免不必要的编辑器环节即可：$ git\n      commit --amend --no-edit\n      \n\n\n# 修改多个提交信息\n\n为了修改在提交历史中较远的提交，必须使用更复杂的工具。 git 没有一个改变历史工具，但是可以使用变基工具来变基一系列提交，基于它们原来的 head 而不是将其移动到另一个新的上面。 通过交互式变基工具，可以在任何想要修改的提交后停止，然后修改信息、添加文件或做任何想做的事情。 可以通过给 git rebase 增加 -i 选项来交互式地运行变基。 必须指定想要重写多久远的历史，这可以通过告诉命令将要变基到的提交来做到。\n\n例如，如果想要修改最近三次提交信息，或者那组提交中的任意一个提交信息， 将想要修改的最近一次提交的父提交作为参数传递给 git rebase -i 命令，即 head~2^ 或 head~3。 记住 ~3 可能比较容易，因为你正尝试修改最后三次提交；但是注意实际上指定了以前的四次提交，即想要修改提交的父提交：\n\n$ git rebase -i head~3\n\n\n1\n\n\n再次记住这是一个变基命令——在 head~3..head 范围内的每一个修改了提交信息的提交及其 所有后裔 都会被重写。 不要涉及任何已经推送到中央服务器的提交——这样做会产生一次变更的两个版本，因而使他人困惑。\n\n运行这个命令会在文本编辑器上给你一个提交的列表，看起来像下面这样：\n\npick f7f3f6d changed my name a bit\npick 310154e updated readme formatting and added blame\npick a5f4a0d added cat-file\n\n# rebase 710f0f8..a5f4a0d onto 710f0f8\n#\n# commands:\n# p, pick <commit> = use commit\n# r, reword <commit> = use commit, but edit the commit message\n# e, edit <commit> = use commit, but stop for amending\n# s, squash <commit> = use commit, but meld into previous commit\n# f, fixup <commit> = like \"squash\", but discard this commit's log message\n# x, exec <command> = run command (the rest of the line) using shell\n# b, break = stop here (continue rebase later with 'git rebase --continue')\n# d, drop <commit> = remove commit\n# l, label <label> = label current head with a name\n# t, reset <label> = reset head to a label\n# m, merge [-c <commit> | -c <commit>] <label> [# <oneline>]\n# .       create a merge commit using the original merge commit's\n# .       message (or the oneline, if no original merge commit was\n# .       specified). use -c <commit> to reword the commit message.\n#\n# these lines can be re-ordered; they are executed from top to bottom.\n#\n# if you remove a line here that commit will be lost.\n#\n# however, if you remove everything, the rebase will be aborted.\n#\n# note that empty commits are commented out\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n\n\n需要重点注意的是相对于正常使用的 log 命令，这些提交显示的顺序是相反的。 运行一次 log 命令，会看到类似这样的东西：\n\n$ git log --pretty=format:\"%h %s\" head~3..head\na5f4a0d added cat-file\n310154e updated readme formatting and added blame\nf7f3f6d changed my name a bit\n\n\n1\n2\n3\n4\n\n\n注意其中的反序显示。 交互式变基给你一个它将会运行的脚本。 它将会从你在命令行中指定的提交（head~3）开始，从上到下的依次重演每一个提交引入的修改。 它将最旧的而不是最新的列在上面，因为那会是第一个将要重演的。\n\n你需要修改脚本来让它停留在你想修改的变更上。 要达到这个目的，你只要将你想修改的每一次提交前面的 ‘pick’ 改为 ‘edit’。 例如，只想修改第三次提交信息，可以像下面这样修改文件：\n\nedit f7f3f6d changed my name a bit\npick 310154e updated readme formatting and added blame\npick a5f4a0d added cat-file\n\n\n1\n2\n3\n\n\n当保存并退出编辑器时，git 将你带回到列表中的最后一次提交，把你送回命令行并提示以下信息：\n\n$ git rebase -i head~3\nstopped at f7f3f6d... changed my name a bit\nyou can amend the commit now, with\n\n       git commit --amend\n\nonce you're satisfied with your changes, run\n\n       git rebase --continue\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n这些指令准确地告诉你该做什么。 输入\n\n$ git commit --amend\n\n\n1\n\n\n修改提交信息，然后退出编辑器。 然后，运行\n\n$ git rebase --continue\n\n\n1\n\n\n这个命令将会自动地应用另外两个提交，然后就完成了。 如果需要将不止一处的 pick 改为 edit，需要在每一个修改为 edit 的提交上重复这些步骤。 每一次，git 将会停止，让你修正提交，然后继续直到完成。\n\n\n# 重新排序提交\n\n也可以使用交互式变基来重新排序或完全移除提交。 如果想要移除 “added cat-file” 提交然后修改另外两个提交引入的顺序，可以将变基脚本从这样：\n\npick f7f3f6d changed my name a bit\npick 310154e updated readme formatting and added blame\npick a5f4a0d added cat-file\n\n\n1\n2\n3\n\n\n改为这样：\n\npick 310154e updated readme formatting and added blame\npick f7f3f6d changed my name a bit\n\n\n1\n2\n\n\n当保存并退出编辑器时，git 将你的分支带回这些提交的父提交，应用 310154e 然后应用 f7f3f6d，最后停止。 事实修改了那些提交的顺序并完全地移除了 “added cat-file” 提交。\n\n\n# 压缩提交\n\n通过交互式变基工具，也可以将一连串提交压缩成一个单独的提交。 在变基信息中脚本给出了有用的指令：\n\n#\n# commands:\n# p, pick <commit> = use commit\n# r, reword <commit> = use commit, but edit the commit message\n# e, edit <commit> = use commit, but stop for amending\n# s, squash <commit> = use commit, but meld into previous commit\n# f, fixup <commit> = like \"squash\", but discard this commit's log message\n# x, exec <command> = run command (the rest of the line) using shell\n# b, break = stop here (continue rebase later with 'git rebase --continue')\n# d, drop <commit> = remove commit\n# l, label <label> = label current head with a name\n# t, reset <label> = reset head to a label\n# m, merge [-c <commit> | -c <commit>] <label> [# <oneline>]\n# .       create a merge commit using the original merge commit's\n# .       message (or the oneline, if no original merge commit was\n# .       specified). use -c <commit> to reword the commit message.\n#\n# these lines can be re-ordered; they are executed from top to bottom.\n#\n# if you remove a line here that commit will be lost.\n#\n# however, if you remove everything, the rebase will be aborted.\n#\n# note that empty commits are commented out\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n\n\n如果，指定 “squash” 而不是 “pick” 或 “edit”，git 将应用两者的修改并合并提交信息在一起。 所以，如果想要这三次提交变为一个提交，可以这样修改脚本：\n\npick f7f3f6d changed my name a bit\nsquash 310154e updated readme formatting and added blame\nsquash a5f4a0d added cat-file\n\n\n1\n2\n3\n\n\n当保存并退出编辑器时，git 应用所有的三次修改然后将你放到编辑器中来合并三次提交信息：\n\n# this is a combination of 3 commits.\n# the first commit's message is:\nchanged my name a bit\n\n# this is the 2nd commit message:\n\nupdated readme formatting and added blame\n\n# this is the 3rd commit message:\n\nadded cat-file\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n当你保存之后，你就拥有了一个包含前三次提交的全部变更的提交。\n\n\n# 拆分提交\n\n拆分一个提交会撤消这个提交，然后多次地部分地暂存与提交直到完成你所需次数的提交。 例如，假设想要拆分三次提交的中间那次提交。 想要将它拆分为两次提交：第一个 “updated readme formatting”，第二个 “added blame” 来代替原来的 “updated readme formatting and added blame”。 可以通过修改 rebase -i 的脚本来做到这点，将要拆分的提交的指令修改为 “edit”：\n\npick f7f3f6d changed my name a bit\nedit 310154e updated readme formatting and added blame\npick a5f4a0d added cat-file\n\n\n1\n2\n3\n\n\n然后，当脚本带你进入到命令行时，重置那个提交，拿到被重置的修改，从中创建几次提交。 当保存并退出编辑器时，git 带你到列表中第一个提交的父提交，应用第一个提交（f7f3f6d）， 应用第二个提交（310154e），然后让你进入命令行。 那里，可以通过 git reset head^ 做一次针对那个提交的混合重置，实际上将会撤消那次提交并将修改的文件取消暂存。 现在可以暂存并提交文件直到有几个提交，然后当完成时运行 git rebase --continue：\n\n$ git reset head^\n$ git add readme\n$ git commit -m 'updated readme formatting'\n$ git add lib/simplegit.rb\n$ git commit -m 'added blame'\n$ git rebase --continue\n\n\n1\n2\n3\n4\n5\n6\n\n\ngit 在脚本中应用最后一次提交（a5f4a0d），历史记录看起来像这样：\n\n$ git log -4 --pretty=format:\"%h %s\"\n1c002dd added cat-file\n9b29157 added blame\n35cfb2b updated readme formatting\nf3cc40e changed my name a bit\n\n\n1\n2\n3\n4\n5\n\n\n再次强调，这些改动了所有在列表中的提交的 sha-1 校验和，所以要确保列表中的提交还没有推送到共享仓库中。\n\n\n# 核武器级选项：filter-branch\n\n有另一个历史改写的选项，如果想要通过脚本的方式改写大量提交的话可以使用它——例如，全局修改你的邮箱地址或从每一个提交中移除一个文件。 这个命令是 filter-branch，它可以改写历史中大量的提交，除非你的项目还没有公开并且其他人没有基于要改写的工作的提交做的工作，否则你不应当使用它。 然而，它可以很有用。 你将会学习到几个常用的用途，这样就得到了它适合使用地方的想法。\n\ncaution   git filter-branch 有很多陷阱，不再推荐使用它来重写历史。 请考虑使用\n          git-filter-repo，它是一个 python 脚本，相比大多数使用 filter-branch\n          的应用来说，它做得要更好。它的文档和源码可访问\n          https://github.com/newren/git-filter-repo 获取。\n          \n\n\n# 从每一个提交中移除一个文件\n\n这经常发生。 有人粗心地通过 git add . 提交了一个巨大的二进制文件，你想要从所有地方删除。 可能偶然地提交了一个包括一个密码的文件，然而你想要开源项目。 filter-branch 是一个可能会用来擦洗整个提交历史的工具。 为了从整个提交历史中移除一个叫做 passwords.txt 的文件，可以使用 --tree-filter 选项给 filter-branch：\n\n$ git filter-branch --tree-filter 'rm -f passwords.txt' head\nrewrite 6b9b3cf04e7c5686a9cb838c3f36a8cb6a0fc2bd (21/21)\nref 'refs/heads/master' was rewritten\n\n\n1\n2\n3\n\n\n--tree-filter 选项在检出项目的每一个提交后运行指定的命令然后重新提交结果。 在本例中，你从每一个快照中移除了一个叫作 passwords.txt 的文件，无论它是否存在。 如果想要移除所有偶然提交的编辑器备份文件，可以运行类似 git filter-branch --tree-filter 'rm -f *~' head 的命令。\n\n最后将可以看到 git 重写树与提交然后移动分支指针。 通常一个好的想法是在一个测试分支中做这件事，然后当你决定最终结果是真正想要的，可以硬重置 master 分支。 为了让 filter-branch 在所有分支上运行，可以给命令传递 --all 选项。\n\n\n# 使一个子目录做为新的根目录\n\n假设已经从另一个源代码控制系统中导入，并且有几个没意义的子目录（trunk、tags 等等）。 如果想要让 trunk 子目录作为每一个提交的新的项目根目录，filter-branch 也可以帮助你那么做：\n\n$ git filter-branch --subdirectory-filter trunk head\nrewrite 856f0bf61e41a27326cdae8f09fe708d679f596f (12/12)\nref 'refs/heads/master' was rewritten\n\n\n1\n2\n3\n\n\n现在新项目根目录是 trunk 子目录了。 git 会自动移除所有不影响子目录的提交。\n\n\n# 全局修改邮箱地址\n\n另一个常见的情形是在你开始工作时忘记运行 git config 来设置你的名字与邮箱地址， 或者你想要开源一个项目并且修改所有你的工作邮箱地址为你的个人邮箱地址。 任何情形下，你也可以通过 filter-branch 来一次性修改多个提交中的邮箱地址。 需要小心的是只修改你自己的邮箱地址，所以你使用 --commit-filter：\n\n$ git filter-branch --commit-filter '\n        if [ \"$git_author_email\" = \"schacon@localhost\" ];\n        then\n                git_author_name=\"scott chacon\";\n                git_author_email=\"schacon@example.com\";\n                git commit-tree \"$@\";\n        else\n                git commit-tree \"$@\";\n        fi' head\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n这会遍历并重写每一个提交来包含你的新邮箱地址。 因为提交包含了它们父提交的 sha-1 校验和，这个命令会修改你的历史中的每一个提交的 sha-1 校验和， 而不仅仅只是那些匹配邮箱地址的提交。",charsets:{cjk:!0}},{title:"Git分支管理-查看分支",frontmatter:{title:"Git分支管理-查看分支",date:"2020-11-18T17:43:57.000Z",permalink:"/pages/a399b3/",categories:["《Git》学习笔记"],tags:["Git"],readingShow:"top"},regularPath:"/06.%E4%B9%A6%E7%B1%8D/10.%E3%80%8AGit%E3%80%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/20.%E6%96%87%E6%A1%A3%E7%AC%94%E8%AE%B0/40.Git%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86-%E6%9F%A5%E7%9C%8B%E5%88%86%E6%94%AF.html",relativePath:"06.书籍/10.《Git》学习笔记/20.文档笔记/40.Git分支管理-查看分支.md",key:"v-8c861180",path:"/pages/a399b3/",headers:[{level:3,title:"查看分支",slug:"查看分支",normalizedTitle:"查看分支",charIndex:10},{level:3,title:"查看每个分支的最后提交",slug:"查看每个分支的最后提交",normalizedTitle:"查看每个分支的最后提交",charIndex:152},{level:3,title:"查看已(未)合并的分支",slug:"查看已-未-合并的分支",normalizedTitle:"查看已(未)合并的分支",charIndex:297},{level:4,title:"查看指定分支的已(未)合并的分支",slug:"查看指定分支的已-未-合并的分支",normalizedTitle:"查看指定分支的已(未)合并的分支",charIndex:765}],lastUpdated:"2022/9/22 下午4:28:09",lastUpdatedTimestamp:1663835289e3,headersStr:"查看分支 查看每个分支的最后提交 查看已(未)合并的分支 查看指定分支的已(未)合并的分支",content:"# Git分支管理-查看分支\n\n\n# 查看分支\n\n$ git branch\n  iss53\n* master  # 带星号*表示当前所在分支\n  testing\n\n\n1\n2\n3\n4\n\n\ngit branch 命令不只是可以创建与删除分支。 如果不加任何参数运行它，会得到当前所有分支的一个列表。\n\n\n# 查看每个分支的最后提交\n\n$ git branch -v\n  iss53   93b412c fix javascript issue\n* master  7a98805 Merge branch 'iss53'\n  testing 782fd34 test\n\n\n1\n2\n3\n4\n\n\n\n# 查看已(未)合并的分支\n\n--merged 与 --no-merged 这两个选项可以查看哪些分支已经合并或未合并到 当前 分支。\n\n$ git branch --merged # 查看已合并分支列表\n  iss53\n* master\n\n\n1\n2\n3\n\n\n上面列表中分支名字前没有 * 号的分支通常可以使用 git branch -d 删除掉；\n\n$ git branch --no-merged # 查看未合并的分支列表\n  testing\n\n\n1\n2\n\n\n上面显示未合并的分支，尝试使用 git branch -d 命令删除它时会失败：\n\n$ git branch -d testing\nerror: The branch 'testing' is not fully merged.\nIf you are sure you want to delete it, run 'git branch -D testing'.\n\n\n1\n2\n3\n\n\n强制删除未合并的分支:\n\n$ git branch -D testing\n\n\n1\n\n\n# 查看指定分支的已(未)合并的分支\n\n上面描述的选项 --merged 和 --no-merged 会在没有给定提交或分支名作为参数时， 分别列出已合并或未合并到 当前 分支的分支。\n\n你总是可以提供一个附加的参数来查看其它分支的合并状态而不必检出它们。 例如，尚未合并到 testing 分支的有哪些？\n\n$ git branch --no-merged testing\n  topicA\n  featureB\n\n\n1\n2\n3\n",normalizedContent:"# git分支管理-查看分支\n\n\n# 查看分支\n\n$ git branch\n  iss53\n* master  # 带星号*表示当前所在分支\n  testing\n\n\n1\n2\n3\n4\n\n\ngit branch 命令不只是可以创建与删除分支。 如果不加任何参数运行它，会得到当前所有分支的一个列表。\n\n\n# 查看每个分支的最后提交\n\n$ git branch -v\n  iss53   93b412c fix javascript issue\n* master  7a98805 merge branch 'iss53'\n  testing 782fd34 test\n\n\n1\n2\n3\n4\n\n\n\n# 查看已(未)合并的分支\n\n--merged 与 --no-merged 这两个选项可以查看哪些分支已经合并或未合并到 当前 分支。\n\n$ git branch --merged # 查看已合并分支列表\n  iss53\n* master\n\n\n1\n2\n3\n\n\n上面列表中分支名字前没有 * 号的分支通常可以使用 git branch -d 删除掉；\n\n$ git branch --no-merged # 查看未合并的分支列表\n  testing\n\n\n1\n2\n\n\n上面显示未合并的分支，尝试使用 git branch -d 命令删除它时会失败：\n\n$ git branch -d testing\nerror: the branch 'testing' is not fully merged.\nif you are sure you want to delete it, run 'git branch -d testing'.\n\n\n1\n2\n3\n\n\n强制删除未合并的分支:\n\n$ git branch -d testing\n\n\n1\n\n\n# 查看指定分支的已(未)合并的分支\n\n上面描述的选项 --merged 和 --no-merged 会在没有给定提交或分支名作为参数时， 分别列出已合并或未合并到 当前 分支的分支。\n\n你总是可以提供一个附加的参数来查看其它分支的合并状态而不必检出它们。 例如，尚未合并到 testing 分支的有哪些？\n\n$ git branch --no-merged testing\n  topica\n  featureb\n\n\n1\n2\n3\n",charsets:{cjk:!0}},{title:"Git分支-分支原理",frontmatter:{title:"Git分支-分支原理",date:"2020-11-18T17:43:57.000Z",permalink:"/pages/4bef1a/",categories:["《Git》学习笔记"],tags:["Git"],readingShow:"top"},regularPath:"/06.%E4%B9%A6%E7%B1%8D/10.%E3%80%8AGit%E3%80%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/20.%E6%96%87%E6%A1%A3%E7%AC%94%E8%AE%B0/20.Git%E5%88%86%E6%94%AF-%E5%88%86%E6%94%AF%E5%8E%9F%E7%90%86.html",relativePath:"06.书籍/10.《Git》学习笔记/20.文档笔记/20.Git分支-分支原理.md",key:"v-7b53c9d4",path:"/pages/4bef1a/",headers:[{level:3,title:"首次提交",slug:"首次提交",normalizedTitle:"首次提交",charIndex:130},{level:4,title:"小结：",slug:"小结",normalizedTitle:"小结：",charIndex:684},{level:3,title:"再次提交",slug:"再次提交",normalizedTitle:"再次提交",charIndex:822},{level:3,title:"Git 的分支",slug:"git-的分支",normalizedTitle:"git 的分支",charIndex:895},{level:3,title:"创建分支",slug:"创建分支",normalizedTitle:"创建分支",charIndex:1087},{level:3,title:"当前分支的指针",slug:"当前分支的指针",normalizedTitle:"当前分支的指针",charIndex:1251},{level:3,title:"查看当前所在分支",slug:"查看当前所在分支",normalizedTitle:"查看当前所在分支",charIndex:1431},{level:3,title:"分支切换",slug:"分支切换",normalizedTitle:"分支切换",charIndex:1770},{level:3,title:"创建分支同时切换",slug:"创建分支同时切换",normalizedTitle:"创建分支同时切换",charIndex:3222}],lastUpdated:"2022/9/22 下午4:28:09",lastUpdatedTimestamp:1663835289e3,headersStr:"首次提交 小结： 再次提交 Git 的分支 创建分支 当前分支的指针 查看当前所在分支 分支切换 创建分支同时切换",content:"# Git分支-分支原理\n\nGit 处理分支的方式可谓是难以置信的轻量，创建新分支这一操作几乎能在瞬间完成，并且在不同分支之间的切换操作也是一样便捷。 与许多其它版本控制系统不同，Git 鼓励在工作流程中频繁地使用分支与合并，哪怕一天之内进行许多次。\n\n\n# 首次提交\n\n在进行提交操作时，Git 会保存一个提交对象（commit object）。\n\n假设现在有一个工作目录，里面包含了三个将要被暂存和提交的文件。 暂存操作会为每一个文件计算校验和（使用 SHA-1 哈希算法），然后会把当前版本的文件快照保存到 Git 仓库中 （Git 使用 blob 对象来保存它们），最终将校验和加入到暂存区域等待提交：\n\n$ git add README test.rb LICENSE\n$ git commit -m 'The initial commit of my project'\n\n\n1\n2\n\n\n当使用 git commit 进行提交操作时，Git 会先计算每一个子目录（本例中只有项目根目录）的校验和， 然后在 Git 仓库中这些校验和保存为树对象。随后，Git 便会创建一个提交对象， 它除了包含上面提到的那些信息外，还包含指向这个树对象（项目根目录）的指针。 如此一来，Git 就可以在需要的时候重现此次保存的快照。\n\n现在，Git 仓库中有五个对象：三个 blob 对象（保存着文件快照）、一个 树对象 （记录着目录结构和 blob 对象索引）以及一个 提交对象（包含着指向前述树对象的指针和所有提交信息）。\n\n\n\n图1. 首次提交对象及其树结构 ▲\n\n# 小结：\n\n 1. git add 加入暂存操作，会为每个文件创建计算校验和，以及每个文件对应的文件快照（blob对象）。\n 2. git commit 提交操作，计算子目录或跟目录的校验和 保存为树对象。随后，创建一个提交对象，包含着指向树对象的指针和所有提交信息。\n\n\n# 再次提交\n\n做些修改后再次提交，那么这次产生的提交对象会包含一个指向上次提交对象（父对象）的指针。\n\n\n\n图2. 提交对象及其父对象 ▲\n\n\n# Git 的分支\n\nGit 的分支，其实本质上仅仅是指向提交对象的可变指针。 Git 的默认分支名字是 master。 在多次提交操作之后，你其实已经有一个指向最后那个提交对象的 master 分支。 master 分支指针会在每次提交时自动向前移动。\n\n> Git 的 master 分支并不是一个特殊分支。 它就跟其它分支完全没有区别。\n\n\n\n图3. 分支及其提交历史 ▲\n\n\n# 创建分支\n\nGit 是怎么创建新分支的呢？ 很简单，它只是为你创建了一个可以移动的新的指针。 比如，创建一个 testing 分支， 你需要使用 git branch 命令：\n\n$ git branch testing\n\n\n1\n\n\n这会在当前所在的提交对象上创建一个指针。\n\n\n\n图4. 两个指向相同提交历史的分支 ▲\n\n\n# 当前分支的指针\n\nGit 是怎么知道当前在哪一个分支上呢？ 很简单，它有一个名为 HEAD 的特殊指针，指向当前所在的本地分支（译注：将 HEAD 想象为当前分支的别名）。 在本例中，你仍然在 master 分支上。 因为 git branch 命令仅仅 创建 一个新分支，并不会自动切换到新分支中去。\n\n\n\n图5. HEAD 指向当前所在的分支 ▲\n\n\n# 查看当前所在分支\n\n你可以简单地使用 git log 命令查看各个分支当前所指的对象。 提供这一功能的参数是 --decorate。\n\n$ git log --oneline --decorate\nf30ab (HEAD -> master, testing) add feature # f30ab提交对象 (HEAD当前所在分支 -> master分支，testing 分支)\n34ac2 Fixed bug # 34ac2 提交对象\n98ca9 The initial commit of my project # 98ca9 提交对象\n\n\n1\n2\n3\n4\n\n\n正如你所见，当前 master 和 testing 分支均指向校验和以 f30ab 开头的提交对象。\n\n\n# 分支切换\n\n$ git checkout testing  # git checkout <分支名>\n\n\n1\n\n\n这样 HEAD 就指向 testing 分支了。\n\n\n\n图6. HEAD 指向当前所在的分支 ▲\n\n那么，这样的实现方式会给我们带来什么好处呢？ 现在不妨再提交一次：\n\n$ vim test.rb\n$ git commit -a -m 'made a change'\n\n\n1\n2\n\n\n\n\n图7. HEAD 分支随着提交操作自动向前移动 ▲\n\n如图所示，你的 testing 分支向前移动了，但是 master 分支却没有，它仍然指向运行 git checkout 时所指的对象。 这就有意思了，现在我们切换回 master 分支看看：\n\n$ git checkout master\n\n\n1\n\n\n\n\n图8. 检出时 HEAD 随之移动 ▲\n\n这条命令做了两件事。 一是使 HEAD 指回 master 分支，二是将工作目录恢复成 master 分支所指向的快照内容。 也就是说，你现在做修改的话，项目将始于一个较旧的版本。 本质上来讲，这就是忽略 testing 分支所做的修改，以便于向另一个方向进行开发。\n\n我们不妨再稍微做些修改并提交：\n\n$ vim test.rb\n$ git commit -a -m 'made other changes'\n\n\n1\n2\n\n\n现在，这个项目的提交历史已经产生了分叉（参见 项目分叉历史）。 因为刚才你创建了一个新分支，并切换过去进行了一些工作，随后又切换回 master 分支进行了另外一些工作。 上述两次改动针对的是不同分支：你可以在不同分支间不断地来回切换和工作，并在时机成熟时将它们合并起来。 而所有这些工作，你需要的命令只有 branch、checkout 和 commit。\n\n\n\n图9. 项目分叉历史 ▲\n\n你可以简单地使用 git log 命令查看分叉历史。 运行 git log --oneline --decorate --graph --all ，它会输出你的提交历史、各个分支的指向以及项目的分支分叉情况。\n\n$ git log --oneline --decorate --graph --all\n* c2b9e (HEAD, master) made other changes\n| * 87ab2 (testing) made a change\n|/\n* f30ab add feature\n* 34ac2 fixed bug\n* 98ca9 initial commit of my project\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n由于 Git 的分支实质上仅是包含所指对象校验和（长度为 40 的 SHA-1 值字符串）的文件，所以它的创建和销毁都异常高效。 创建一个新分支就相当于往一个文件中写入 41 个字节（40 个字符和 1 个换行符），如此的简单能不快吗？\n\n这与过去大多数版本控制系统形成了鲜明的对比，它们在创建分支时，将所有的项目文件都复制一遍，并保存到一个特定的目录。 完成这样繁琐的过程通常需要好几秒钟，有时甚至需要好几分钟。所需时间的长短，完全取决于项目的规模。 而在 Git 中，任何规模的项目都能在瞬间创建新分支。 同时，由于每次提交都会记录父对象，所以寻找恰当的合并基础（译注：即共同祖先）也是同样的简单和高效。 这些高效的特性使得 Git 鼓励开发人员频繁地创建和使用分支。\n\n\n# 创建分支同时切换\n\n通常我们会在创建一个新分支后立即切换过去，可以使用如下命令：\n\ngit checkout -b <newbranchname>\n\n\n1\n",normalizedContent:"# git分支-分支原理\n\ngit 处理分支的方式可谓是难以置信的轻量，创建新分支这一操作几乎能在瞬间完成，并且在不同分支之间的切换操作也是一样便捷。 与许多其它版本控制系统不同，git 鼓励在工作流程中频繁地使用分支与合并，哪怕一天之内进行许多次。\n\n\n# 首次提交\n\n在进行提交操作时，git 会保存一个提交对象（commit object）。\n\n假设现在有一个工作目录，里面包含了三个将要被暂存和提交的文件。 暂存操作会为每一个文件计算校验和（使用 sha-1 哈希算法），然后会把当前版本的文件快照保存到 git 仓库中 （git 使用 blob 对象来保存它们），最终将校验和加入到暂存区域等待提交：\n\n$ git add readme test.rb license\n$ git commit -m 'the initial commit of my project'\n\n\n1\n2\n\n\n当使用 git commit 进行提交操作时，git 会先计算每一个子目录（本例中只有项目根目录）的校验和， 然后在 git 仓库中这些校验和保存为树对象。随后，git 便会创建一个提交对象， 它除了包含上面提到的那些信息外，还包含指向这个树对象（项目根目录）的指针。 如此一来，git 就可以在需要的时候重现此次保存的快照。\n\n现在，git 仓库中有五个对象：三个 blob 对象（保存着文件快照）、一个 树对象 （记录着目录结构和 blob 对象索引）以及一个 提交对象（包含着指向前述树对象的指针和所有提交信息）。\n\n\n\n图1. 首次提交对象及其树结构 ▲\n\n# 小结：\n\n 1. git add 加入暂存操作，会为每个文件创建计算校验和，以及每个文件对应的文件快照（blob对象）。\n 2. git commit 提交操作，计算子目录或跟目录的校验和 保存为树对象。随后，创建一个提交对象，包含着指向树对象的指针和所有提交信息。\n\n\n# 再次提交\n\n做些修改后再次提交，那么这次产生的提交对象会包含一个指向上次提交对象（父对象）的指针。\n\n\n\n图2. 提交对象及其父对象 ▲\n\n\n# git 的分支\n\ngit 的分支，其实本质上仅仅是指向提交对象的可变指针。 git 的默认分支名字是 master。 在多次提交操作之后，你其实已经有一个指向最后那个提交对象的 master 分支。 master 分支指针会在每次提交时自动向前移动。\n\n> git 的 master 分支并不是一个特殊分支。 它就跟其它分支完全没有区别。\n\n\n\n图3. 分支及其提交历史 ▲\n\n\n# 创建分支\n\ngit 是怎么创建新分支的呢？ 很简单，它只是为你创建了一个可以移动的新的指针。 比如，创建一个 testing 分支， 你需要使用 git branch 命令：\n\n$ git branch testing\n\n\n1\n\n\n这会在当前所在的提交对象上创建一个指针。\n\n\n\n图4. 两个指向相同提交历史的分支 ▲\n\n\n# 当前分支的指针\n\ngit 是怎么知道当前在哪一个分支上呢？ 很简单，它有一个名为 head 的特殊指针，指向当前所在的本地分支（译注：将 head 想象为当前分支的别名）。 在本例中，你仍然在 master 分支上。 因为 git branch 命令仅仅 创建 一个新分支，并不会自动切换到新分支中去。\n\n\n\n图5. head 指向当前所在的分支 ▲\n\n\n# 查看当前所在分支\n\n你可以简单地使用 git log 命令查看各个分支当前所指的对象。 提供这一功能的参数是 --decorate。\n\n$ git log --oneline --decorate\nf30ab (head -> master, testing) add feature # f30ab提交对象 (head当前所在分支 -> master分支，testing 分支)\n34ac2 fixed bug # 34ac2 提交对象\n98ca9 the initial commit of my project # 98ca9 提交对象\n\n\n1\n2\n3\n4\n\n\n正如你所见，当前 master 和 testing 分支均指向校验和以 f30ab 开头的提交对象。\n\n\n# 分支切换\n\n$ git checkout testing  # git checkout <分支名>\n\n\n1\n\n\n这样 head 就指向 testing 分支了。\n\n\n\n图6. head 指向当前所在的分支 ▲\n\n那么，这样的实现方式会给我们带来什么好处呢？ 现在不妨再提交一次：\n\n$ vim test.rb\n$ git commit -a -m 'made a change'\n\n\n1\n2\n\n\n\n\n图7. head 分支随着提交操作自动向前移动 ▲\n\n如图所示，你的 testing 分支向前移动了，但是 master 分支却没有，它仍然指向运行 git checkout 时所指的对象。 这就有意思了，现在我们切换回 master 分支看看：\n\n$ git checkout master\n\n\n1\n\n\n\n\n图8. 检出时 head 随之移动 ▲\n\n这条命令做了两件事。 一是使 head 指回 master 分支，二是将工作目录恢复成 master 分支所指向的快照内容。 也就是说，你现在做修改的话，项目将始于一个较旧的版本。 本质上来讲，这就是忽略 testing 分支所做的修改，以便于向另一个方向进行开发。\n\n我们不妨再稍微做些修改并提交：\n\n$ vim test.rb\n$ git commit -a -m 'made other changes'\n\n\n1\n2\n\n\n现在，这个项目的提交历史已经产生了分叉（参见 项目分叉历史）。 因为刚才你创建了一个新分支，并切换过去进行了一些工作，随后又切换回 master 分支进行了另外一些工作。 上述两次改动针对的是不同分支：你可以在不同分支间不断地来回切换和工作，并在时机成熟时将它们合并起来。 而所有这些工作，你需要的命令只有 branch、checkout 和 commit。\n\n\n\n图9. 项目分叉历史 ▲\n\n你可以简单地使用 git log 命令查看分叉历史。 运行 git log --oneline --decorate --graph --all ，它会输出你的提交历史、各个分支的指向以及项目的分支分叉情况。\n\n$ git log --oneline --decorate --graph --all\n* c2b9e (head, master) made other changes\n| * 87ab2 (testing) made a change\n|/\n* f30ab add feature\n* 34ac2 fixed bug\n* 98ca9 initial commit of my project\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n由于 git 的分支实质上仅是包含所指对象校验和（长度为 40 的 sha-1 值字符串）的文件，所以它的创建和销毁都异常高效。 创建一个新分支就相当于往一个文件中写入 41 个字节（40 个字符和 1 个换行符），如此的简单能不快吗？\n\n这与过去大多数版本控制系统形成了鲜明的对比，它们在创建分支时，将所有的项目文件都复制一遍，并保存到一个特定的目录。 完成这样繁琐的过程通常需要好几秒钟，有时甚至需要好几分钟。所需时间的长短，完全取决于项目的规模。 而在 git 中，任何规模的项目都能在瞬间创建新分支。 同时，由于每次提交都会记录父对象，所以寻找恰当的合并基础（译注：即共同祖先）也是同样的简单和高效。 这些高效的特性使得 git 鼓励开发人员频繁地创建和使用分支。\n\n\n# 创建分支同时切换\n\n通常我们会在创建一个新分支后立即切换过去，可以使用如下命令：\n\ngit checkout -b <newbranchname>\n\n\n1\n",charsets:{cjk:!0}},{title:"Git工具-重置揭密",frontmatter:{title:"Git工具-重置揭密",date:"2020-11-18T17:43:57.000Z",permalink:"/pages/d9e9c6/",categories:["《Git》学习笔记"],tags:["Git"],readingShow:"top"},regularPath:"/06.%E4%B9%A6%E7%B1%8D/10.%E3%80%8AGit%E3%80%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/20.%E6%96%87%E6%A1%A3%E7%AC%94%E8%AE%B0/110.Git%E5%B7%A5%E5%85%B7-%E9%87%8D%E7%BD%AE%E6%8F%AD%E5%AF%86.html",relativePath:"06.书籍/10.《Git》学习笔记/20.文档笔记/110.Git工具-重置揭密.md",key:"v-ca403bee",path:"/pages/d9e9c6/",headers:[{level:2,title:"三棵树",slug:"三棵树",normalizedTitle:"三棵树",charIndex:147},{level:3,title:"HEAD",slug:"head",normalizedTitle:"head",charIndex:348},{level:3,title:"索引",slug:"索引",normalizedTitle:"索引",charIndex:257},{level:3,title:"工作目录",slug:"工作目录",normalizedTitle:"工作目录",charIndex:1116},{level:2,title:"工作流程",slug:"工作流程",normalizedTitle:"工作流程",charIndex:1764},{level:2,title:"重置的作用",slug:"重置的作用",normalizedTitle:"重置的作用",charIndex:2573},{level:3,title:"第 1 步：移动 HEAD",slug:"第-1-步-移动-head",normalizedTitle:"第 1 步：移动 head",charIndex:2720},{level:3,title:"第 2 步：更新索引（--mixed）",slug:"第-2-步-更新索引-mixed",normalizedTitle:"第 2 步：更新索引（--mixed）",charIndex:3207},{level:3,title:"第 3 步：更新工作目录（--hard）",slug:"第-3-步-更新工作目录-hard",normalizedTitle:"第 3 步：更新工作目录（--hard）",charIndex:3507},{level:3,title:"回顾",slug:"回顾",normalizedTitle:"回顾",charIndex:3867},{level:2,title:"通过路径来重置",slug:"通过路径来重置",normalizedTitle:"通过路径来重置",charIndex:4002},{level:2,title:"压缩",slug:"压缩",normalizedTitle:"压缩",charIndex:4855},{level:2,title:"检出",slug:"检出",normalizedTitle:"检出",charIndex:1113},{level:3,title:"不带路径",slug:"不带路径",normalizedTitle:"不带路径",charIndex:5428},{level:3,title:"带路径",slug:"带路径",normalizedTitle:"带路径",charIndex:5429},{level:2,title:"总结",slug:"总结",normalizedTitle:"总结",charIndex:6348}],lastUpdated:"2022/9/22 下午4:28:09",lastUpdatedTimestamp:1663835289e3,headersStr:"三棵树 HEAD 索引 工作目录 工作流程 重置的作用 第 1 步：移动 HEAD 第 2 步：更新索引（--mixed） 第 3 步：更新工作目录（--hard） 回顾 通过路径来重置 压缩 检出 不带路径 带路径 总结",content:"# Git 工具 - 重置揭密\n\n在继续了解更专业的工具前，我们先探讨一下 Git 的 reset 和 checkout 命令。 在初遇的 Git 命令中，这两个是最让人困惑的。 它们能做很多事情，所以看起来我们很难真正地理解并恰当地运用它们。 针对这一点，我们先来做一个简单的比喻。\n\n\n# 三棵树\n\n理解 reset 和 checkout 的最简方法，就是以 Git 的思维框架（将其作为内容管理器）来管理三棵不同的树。 “树” 在我们这里的实际意思是 “文件的集合”，而不是指特定的数据结构。 （在某些情况下索引看起来并不像一棵树，不过我们现在的目的是用简单的方式思考它。）\n\nGit 作为一个系统，是以它的一般操作来管理并操纵这三棵树的：\n\n树                   用途\nHEAD                上一次提交的快照，下一次提交的父结点\nIndex               预期的下一次提交的快照\nWorking Directory   沙盒\n\n\n# HEAD\n\nHEAD 是当前分支引用的指针，它总是指向该分支上的最后一次提交。 这表示 HEAD 将是下一次提交的父结点。 通常，理解 HEAD 的最简方式，就是将它看做 该分支上的最后一次提交 的快照。\n\n其实，查看快照的样子很容易。 下例就显示了 HEAD 快照实际的目录列表，以及其中每个文件的 SHA-1 校验和：\n\n$ git cat-file -p HEAD\ntree cfda3bf379e4f8dba8717dee55aab78aef7f4daf\nauthor Scott Chacon  1301511835 -0700\ncommitter Scott Chacon  1301511835 -0700\n\ninitial commit\n\n$ git ls-tree -r HEAD\n100644 blob a906cb2a4a904a152...   README\n100644 blob 8f94139338f9404f2...   Rakefile\n040000 tree 99f1a6d12cb4b6f19...   lib\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\nGit 的 cat-file 和 ls-tree 是底层命令，它们一般用于底层工作，在日常工作中并不使用。 不过它们能帮助我们了解到底发生了什么。\n\n\n# 索引\n\n索引是你的 预期的下一次提交。 我们也会将这个概念引用为 Git 的“暂存区”，这就是当你运行 git commit 时 Git 看起来的样子。\n\nGit 将上一次检出到工作目录中的所有文件填充到索引区，它们看起来就像最初被检出时的样子。 之后你会将其中一些文件替换为新版本，接着通过 git commit 将它们转换为树来用作新的提交。\n\n$ git ls-files -s\n100644 a906cb2a4a904a152e80877d4088654daad0c859 0\tREADME\n100644 8f94139338f9404f26296befa88755fc2598c289 0\tRakefile\n100644 47c6340d6459e05787f644c2447d2595f5d3a54b 0\tlib/simplegit.rb\n\n\n1\n2\n3\n4\n\n\n再说一次，我们在这里又用到了 git ls-files 这个幕后的命令，它会显示出索引当前的样子。\n\n确切来说，索引在技术上并非树结构，它其实是以扁平的清单实现的。不过对我们而言，把它当做树就够了。\n\n\n# 工作目录\n\n最后，你就有了自己的 工作目录（通常也叫 工作区）。 另外两棵树以一种高效但并不直观的方式，将它们的内容存储在 .git 文件夹中。 工作目录会将它们解包为实际的文件以便编辑。 你可以把工作目录当做 沙盒。在你将修改提交到暂存区并记录到历史之前，可以随意更改。\n\n$ tree\n.\n├── README\n├── Rakefile\n└── lib\n    └── simplegit.rb\n\n1 directory, 3 files\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# 工作流程\n\n经典的 Git 工作流程是通过操纵这三个区域来以更加连续的状态记录项目快照的。\n\n\n\n让我们来可视化这个过程：假设我们进入到一个新目录，其中有一个文件。 我们称其为该文件的 v1 版本，将它标记为蓝色。 现在运行 git init，这会创建一个 Git 仓库，其中的 HEAD 引用指向未创建的 master 分支。\n\n\n\n此时，只有工作目录有内容。\n\n现在我们想要提交这个文件，所以用 git add 来获取工作目录中的内容，并将其复制到索引中。\n\n\n\n接着运行 git commit，它会取得索引中的内容并将它保存为一个永久的快照， 然后创建一个指向该快照的提交对象，最后更新 master 来指向本次提交。\n\n\n\n此时如果我们运行 git status，会发现没有任何改动，因为现在三棵树完全相同。\n\n现在我们想要对文件进行修改然后提交它。 我们将会经历同样的过程；首先在工作目录中修改文件。 我们称其为该文件的 v2 版本，并将它标记为红色。\n\n\n\n如果现在运行 git status，我们会看到文件显示在 “Changes not staged for commit” 下面并被标记为红色，因为该条目在索引与工作目录之间存在不同。 接着我们运行 git add 来将它暂存到索引中。\n\n\n\n此时，由于索引和 HEAD 不同，若运行 git status 的话就会看到 “Changes to be committed” 下的该文件变为绿色 ——也就是说，现在预期的下一次提交与上一次提交不同。 最后，我们运行 git commit 来完成提交。\n\n\n\n现在运行 git status 会没有输出，因为三棵树又变得相同了。\n\n切换分支或克隆的过程也类似。 当检出一个分支时，它会修改 HEAD 指向新的分支引用，将 索引 填充为该次提交的快照， 然后将 索引 的内容复制到 工作目录 中。\n\n\n# 重置的作用\n\n在以下情景中观察 reset 命令会更有意义。\n\n为了演示这些例子，假设我们再次修改了 file.txt 文件并第三次提交它。 现在的历史看起来是这样的：\n\n\n\n让我们跟着 reset 看看它都做了什么。 它以一种简单可预见的方式直接操纵这三棵树。 它做了三个基本操作。\n\n\n# 第 1 步：移动 HEAD\n\nreset 做的第一件事是移动 HEAD 的指向。 这与改变 HEAD 自身不同（checkout 所做的）；reset 移动 HEAD 指向的分支。 这意味着如果 HEAD 设置为 master 分支（例如，你正在 master 分支上）， 运行 git reset 9e5e6a4 将会使 master 指向 9e5e6a4。\n\n\n\n无论你调用了何种形式的带有一个提交的 reset，它首先都会尝试这样做。 使用 reset --soft，它将仅仅停在那儿。\n\n现在看一眼上图，理解一下发生的事情：它本质上是撤销了上一次 git commit 命令。 当你在运行 git commit 时，Git 会创建一个新的提交，并移动 HEAD 所指向的分支来使其指向该提交。 当你将它 reset 回 HEAD~（HEAD 的父结点）时，其实就是把该分支移动回原来的位置，而不会改变索引和工作目录。 现在你可以更新索引并再次运行 git commit 来完成 git commit --amend 所要做的事情了（见 修改最后一次提交）。\n\n\n# 第 2 步：更新索引（--mixed）\n\n注意，如果你现在运行 git status 的话，就会看到新的 HEAD 和以绿色标出的它和索引之间的区别。\n\n接下来，reset 会用 HEAD 指向的当前快照的内容来更新索引。\n\n\n\n如果指定 --mixed 选项，reset 将会在这时停止。 这也是默认行为，所以如果没有指定任何选项（在本例中只是 git reset HEAD~），这就是命令将会停止的地方。\n\n现在再看一眼上图，理解一下发生的事情：它依然会撤销一上次 提交，但还会 取消暂存 所有的东西。 于是，我们回滚到了所有 git add 和 git commit 的命令执行之前。\n\n\n# 第 3 步：更新工作目录（--hard）\n\nreset 要做的的第三件事情就是让工作目录看起来像索引。 如果使用 --hard 选项，它将会继续这一步。\n\n\n\n现在让我们回想一下刚才发生的事情。 你撤销了最后的提交、git add 和 git commit 命令 以及 工作目录中的所有工作。\n\n必须注意，--hard 标记是 reset 命令唯一的危险用法，它也是 Git 会真正地销毁数据的仅有的几个操作之一。 其他任何形式的 reset 调用都可以轻松撤消，但是 --hard 选项不能，因为它强制覆盖了工作目录中的文件。 在这种特殊情况下，我们的 Git 数据库中的一个提交内还留有该文件的 v3 版本， 我们可以通过 reflog 来找回它。但是若该文件还未提交，Git 仍会覆盖它从而导致无法恢复。\n\n\n# 回顾\n\nreset 命令会以特定的顺序重写这三棵树，在你指定以下选项时停止：\n\n 1. 移动 HEAD 分支的指向 （若指定了 --soft，则到此停止）\n 2. 使索引看起来像 HEAD （若未指定 --hard，则到此停止）\n 3. 使工作目录看起来像索引\n\n\n# 通过路径来重置\n\n前面讲述了 reset 基本形式的行为，不过你还可以给它提供一个作用路径。 若指定了一个路径，reset 将会跳过第 1 步，并且将它的作用范围限定为指定的文件或文件集合。 这样做自然有它的道理，因为 HEAD 只是一个指针，你无法让它同时指向两个提交中各自的一部分。 不过索引和工作目录 可以部分更新，所以重置会继续进行第 2、3 步。\n\n现在，假如我们运行 git reset file.txt （这其实是 git reset --mixed HEAD file.txt 的简写形式，因为你既没有指定一个提交的 SHA-1 或分支，也没有指定 --soft 或 --hard），它会：\n\n 1. 移动 HEAD 分支的指向 （已跳过）\n 2. 让索引看起来像 HEAD （到此处停止）\n\n所以它本质上只是将 file.txt 从 HEAD 复制到索引中。\n\n\n\n它还有 取消暂存文件 的实际效果。 如果我们查看该命令的示意图，然后再想想 git add 所做的事，就会发现它们正好相反。\n\n\n\n这就是为什么 git status 命令的输出会建议运行此命令来取消暂存一个文件。 （查看 取消暂存的文件 来了解更多。）\n\n我们可以不让 Git 从 HEAD 拉取数据，而是通过具体指定一个提交来拉取该文件的对应版本。 我们只需运行类似于 git reset eb43bf file.txt 的命令即可。\n\n\n\n它其实做了同样的事情，也就是把工作目录中的文件恢复到 v1 版本，运行 git add 添加它， 然后再将它恢复到 v3 版本（只是不用真的过一遍这些步骤）。 如果我们现在运行 git commit，它就会记录一条“将该文件恢复到 v1 版本”的更改， 尽管我们并未在工作目录中真正地再次拥有它。\n\n还有一点同 git add 一样，就是 reset 命令也可以接受一个 --patch 选项来一块一块地取消暂存的内容。 这样你就可以根据选择来取消暂存或恢复内容了。\n\n\n# 压缩\n\n我们来看看如何利用这种新的功能来做一些有趣的事情——压缩提交。\n\n假设你的一系列提交信息中有 “oops.”“WIP” 和 “forgot this file”， 聪明的你就能使用 reset 来轻松快速地将它们压缩成单个提交，也显出你的聪明。 （压缩提交 展示了另一种方式，不过在本例中用 reset 更简单。）\n\n假设你有一个项目，第一次提交中有一个文件，第二次提交增加了一个新的文件并修改了第一个文件，第三次提交再次修改了第一个文件。 由于第二次提交是一个未完成的工作，因此你想要压缩它。\n\n\n\n那么可以运行 git reset --soft HEAD~2 来将 HEAD 分支移动到一个旧一点的提交上（即你想要保留的最近的提交）：\n\n\n\n然后只需再次运行 git commit：\n\n\n\n现在你可以查看可到达的历史，即将会推送的历史，现在看起来有个 v1 版 file-a.txt 的提交， 接着第二个提交将 file-a.txt 修改成了 v3 版并增加了 file-b.txt。 包含 v2 版本的文件已经不在历史中了。\n\n\n# 检出\n\n最后，你大概还想知道 checkout 和 reset 之间的区别。 和 reset 一样，checkout 也操纵三棵树，不过它有一点不同，这取决于你是否传给该命令一个文件路径。\n\n\n# 不带路径\n\n运行 git checkout [branch] 与运行 git reset --hard [branch] 非常相似，它会更新所有三棵树使其看起来像 [branch]，不过有两点重要的区别。\n\n首先不同于 reset --hard，checkout 对工作目录是安全的，它会通过检查来确保不会将已更改的文件弄丢。 其实它还更聪明一些。它会在工作目录中先试着简单合并一下，这样所有_还未修改过的_文件都会被更新。 而 reset --hard 则会不做检查就全面地替换所有东西。\n\n第二个重要的区别是 checkout 如何更新 HEAD。 reset 会移动 HEAD 分支的指向，而 checkout 只会移动 HEAD 自身来指向另一个分支。\n\n例如，假设我们有 master 和 develop 分支，它们分别指向不同的提交；我们现在在 develop 上（所以 HEAD 指向它）。 如果我们运行 git reset master，那么 develop 自身现在会和 master 指向同一个提交。 而如果我们运行 git checkout master 的话，develop 不会移动，HEAD 自身会移动。 现在 HEAD 将会指向 master。\n\n所以，虽然在这两种情况下我们都移动 HEAD 使其指向了提交 A，但_做法_是非常不同的。 reset 会移动 HEAD 分支的指向，而 checkout 则移动 HEAD 自身。\n\n\n\n\n# 带路径\n\n运行 checkout 的另一种方式就是指定一个文件路径，这会像 reset 一样不会移动 HEAD。 它就像 git reset [branch] file 那样用该次提交中的那个文件来更新索引，但是它也会覆盖工作目录中对应的文件。 它就像是 git reset --hard [branch] file（如果 reset 允许你这样运行的话）， 这样对工作目录并不安全，它也不会移动 HEAD。\n\n此外，同 git reset 和 git add 一样，checkout 也接受一个 --patch 选项，允许你根据选择一块一块地恢复文件内容。\n\n\n# 总结\n\n希望你现在熟悉并理解了 reset 命令，不过关于它和 checkout 之间的区别，你可能还是会有点困惑，毕竟不太可能记住不同调用的所有规则。\n\n下面的速查表列出了命令对树的影响。 “HEAD” 一列中的 “REF” 表示该命令移动了 HEAD 指向的分支引用，而 “HEAD” 则表示只移动了 HEAD 自身。 特别注意 WD Safe? 一列——如果它标记为 NO，那么运行该命令之前请考虑一下。\n\n                            HEAD   INDEX   WORKDIR   WD SAFE?\nCommit Level                                         \nreset --soft [commit]       REF    NO      NO        YES\nreset [commit]              REF    YES     NO        YES\nreset --hard [commit]       REF    YES     YES       NO\ncheckout <commit>           HEAD   YES     YES       YES\nFile Level                                           \nreset [commit] <paths>      NO     YES     NO        YES\ncheckout [commit] <paths>   NO     YES     YES       NO",normalizedContent:"# git 工具 - 重置揭密\n\n在继续了解更专业的工具前，我们先探讨一下 git 的 reset 和 checkout 命令。 在初遇的 git 命令中，这两个是最让人困惑的。 它们能做很多事情，所以看起来我们很难真正地理解并恰当地运用它们。 针对这一点，我们先来做一个简单的比喻。\n\n\n# 三棵树\n\n理解 reset 和 checkout 的最简方法，就是以 git 的思维框架（将其作为内容管理器）来管理三棵不同的树。 “树” 在我们这里的实际意思是 “文件的集合”，而不是指特定的数据结构。 （在某些情况下索引看起来并不像一棵树，不过我们现在的目的是用简单的方式思考它。）\n\ngit 作为一个系统，是以它的一般操作来管理并操纵这三棵树的：\n\n树                   用途\nhead                上一次提交的快照，下一次提交的父结点\nindex               预期的下一次提交的快照\nworking directory   沙盒\n\n\n# head\n\nhead 是当前分支引用的指针，它总是指向该分支上的最后一次提交。 这表示 head 将是下一次提交的父结点。 通常，理解 head 的最简方式，就是将它看做 该分支上的最后一次提交 的快照。\n\n其实，查看快照的样子很容易。 下例就显示了 head 快照实际的目录列表，以及其中每个文件的 sha-1 校验和：\n\n$ git cat-file -p head\ntree cfda3bf379e4f8dba8717dee55aab78aef7f4daf\nauthor scott chacon  1301511835 -0700\ncommitter scott chacon  1301511835 -0700\n\ninitial commit\n\n$ git ls-tree -r head\n100644 blob a906cb2a4a904a152...   readme\n100644 blob 8f94139338f9404f2...   rakefile\n040000 tree 99f1a6d12cb4b6f19...   lib\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\ngit 的 cat-file 和 ls-tree 是底层命令，它们一般用于底层工作，在日常工作中并不使用。 不过它们能帮助我们了解到底发生了什么。\n\n\n# 索引\n\n索引是你的 预期的下一次提交。 我们也会将这个概念引用为 git 的“暂存区”，这就是当你运行 git commit 时 git 看起来的样子。\n\ngit 将上一次检出到工作目录中的所有文件填充到索引区，它们看起来就像最初被检出时的样子。 之后你会将其中一些文件替换为新版本，接着通过 git commit 将它们转换为树来用作新的提交。\n\n$ git ls-files -s\n100644 a906cb2a4a904a152e80877d4088654daad0c859 0\treadme\n100644 8f94139338f9404f26296befa88755fc2598c289 0\trakefile\n100644 47c6340d6459e05787f644c2447d2595f5d3a54b 0\tlib/simplegit.rb\n\n\n1\n2\n3\n4\n\n\n再说一次，我们在这里又用到了 git ls-files 这个幕后的命令，它会显示出索引当前的样子。\n\n确切来说，索引在技术上并非树结构，它其实是以扁平的清单实现的。不过对我们而言，把它当做树就够了。\n\n\n# 工作目录\n\n最后，你就有了自己的 工作目录（通常也叫 工作区）。 另外两棵树以一种高效但并不直观的方式，将它们的内容存储在 .git 文件夹中。 工作目录会将它们解包为实际的文件以便编辑。 你可以把工作目录当做 沙盒。在你将修改提交到暂存区并记录到历史之前，可以随意更改。\n\n$ tree\n.\n├── readme\n├── rakefile\n└── lib\n    └── simplegit.rb\n\n1 directory, 3 files\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# 工作流程\n\n经典的 git 工作流程是通过操纵这三个区域来以更加连续的状态记录项目快照的。\n\n\n\n让我们来可视化这个过程：假设我们进入到一个新目录，其中有一个文件。 我们称其为该文件的 v1 版本，将它标记为蓝色。 现在运行 git init，这会创建一个 git 仓库，其中的 head 引用指向未创建的 master 分支。\n\n\n\n此时，只有工作目录有内容。\n\n现在我们想要提交这个文件，所以用 git add 来获取工作目录中的内容，并将其复制到索引中。\n\n\n\n接着运行 git commit，它会取得索引中的内容并将它保存为一个永久的快照， 然后创建一个指向该快照的提交对象，最后更新 master 来指向本次提交。\n\n\n\n此时如果我们运行 git status，会发现没有任何改动，因为现在三棵树完全相同。\n\n现在我们想要对文件进行修改然后提交它。 我们将会经历同样的过程；首先在工作目录中修改文件。 我们称其为该文件的 v2 版本，并将它标记为红色。\n\n\n\n如果现在运行 git status，我们会看到文件显示在 “changes not staged for commit” 下面并被标记为红色，因为该条目在索引与工作目录之间存在不同。 接着我们运行 git add 来将它暂存到索引中。\n\n\n\n此时，由于索引和 head 不同，若运行 git status 的话就会看到 “changes to be committed” 下的该文件变为绿色 ——也就是说，现在预期的下一次提交与上一次提交不同。 最后，我们运行 git commit 来完成提交。\n\n\n\n现在运行 git status 会没有输出，因为三棵树又变得相同了。\n\n切换分支或克隆的过程也类似。 当检出一个分支时，它会修改 head 指向新的分支引用，将 索引 填充为该次提交的快照， 然后将 索引 的内容复制到 工作目录 中。\n\n\n# 重置的作用\n\n在以下情景中观察 reset 命令会更有意义。\n\n为了演示这些例子，假设我们再次修改了 file.txt 文件并第三次提交它。 现在的历史看起来是这样的：\n\n\n\n让我们跟着 reset 看看它都做了什么。 它以一种简单可预见的方式直接操纵这三棵树。 它做了三个基本操作。\n\n\n# 第 1 步：移动 head\n\nreset 做的第一件事是移动 head 的指向。 这与改变 head 自身不同（checkout 所做的）；reset 移动 head 指向的分支。 这意味着如果 head 设置为 master 分支（例如，你正在 master 分支上）， 运行 git reset 9e5e6a4 将会使 master 指向 9e5e6a4。\n\n\n\n无论你调用了何种形式的带有一个提交的 reset，它首先都会尝试这样做。 使用 reset --soft，它将仅仅停在那儿。\n\n现在看一眼上图，理解一下发生的事情：它本质上是撤销了上一次 git commit 命令。 当你在运行 git commit 时，git 会创建一个新的提交，并移动 head 所指向的分支来使其指向该提交。 当你将它 reset 回 head~（head 的父结点）时，其实就是把该分支移动回原来的位置，而不会改变索引和工作目录。 现在你可以更新索引并再次运行 git commit 来完成 git commit --amend 所要做的事情了（见 修改最后一次提交）。\n\n\n# 第 2 步：更新索引（--mixed）\n\n注意，如果你现在运行 git status 的话，就会看到新的 head 和以绿色标出的它和索引之间的区别。\n\n接下来，reset 会用 head 指向的当前快照的内容来更新索引。\n\n\n\n如果指定 --mixed 选项，reset 将会在这时停止。 这也是默认行为，所以如果没有指定任何选项（在本例中只是 git reset head~），这就是命令将会停止的地方。\n\n现在再看一眼上图，理解一下发生的事情：它依然会撤销一上次 提交，但还会 取消暂存 所有的东西。 于是，我们回滚到了所有 git add 和 git commit 的命令执行之前。\n\n\n# 第 3 步：更新工作目录（--hard）\n\nreset 要做的的第三件事情就是让工作目录看起来像索引。 如果使用 --hard 选项，它将会继续这一步。\n\n\n\n现在让我们回想一下刚才发生的事情。 你撤销了最后的提交、git add 和 git commit 命令 以及 工作目录中的所有工作。\n\n必须注意，--hard 标记是 reset 命令唯一的危险用法，它也是 git 会真正地销毁数据的仅有的几个操作之一。 其他任何形式的 reset 调用都可以轻松撤消，但是 --hard 选项不能，因为它强制覆盖了工作目录中的文件。 在这种特殊情况下，我们的 git 数据库中的一个提交内还留有该文件的 v3 版本， 我们可以通过 reflog 来找回它。但是若该文件还未提交，git 仍会覆盖它从而导致无法恢复。\n\n\n# 回顾\n\nreset 命令会以特定的顺序重写这三棵树，在你指定以下选项时停止：\n\n 1. 移动 head 分支的指向 （若指定了 --soft，则到此停止）\n 2. 使索引看起来像 head （若未指定 --hard，则到此停止）\n 3. 使工作目录看起来像索引\n\n\n# 通过路径来重置\n\n前面讲述了 reset 基本形式的行为，不过你还可以给它提供一个作用路径。 若指定了一个路径，reset 将会跳过第 1 步，并且将它的作用范围限定为指定的文件或文件集合。 这样做自然有它的道理，因为 head 只是一个指针，你无法让它同时指向两个提交中各自的一部分。 不过索引和工作目录 可以部分更新，所以重置会继续进行第 2、3 步。\n\n现在，假如我们运行 git reset file.txt （这其实是 git reset --mixed head file.txt 的简写形式，因为你既没有指定一个提交的 sha-1 或分支，也没有指定 --soft 或 --hard），它会：\n\n 1. 移动 head 分支的指向 （已跳过）\n 2. 让索引看起来像 head （到此处停止）\n\n所以它本质上只是将 file.txt 从 head 复制到索引中。\n\n\n\n它还有 取消暂存文件 的实际效果。 如果我们查看该命令的示意图，然后再想想 git add 所做的事，就会发现它们正好相反。\n\n\n\n这就是为什么 git status 命令的输出会建议运行此命令来取消暂存一个文件。 （查看 取消暂存的文件 来了解更多。）\n\n我们可以不让 git 从 head 拉取数据，而是通过具体指定一个提交来拉取该文件的对应版本。 我们只需运行类似于 git reset eb43bf file.txt 的命令即可。\n\n\n\n它其实做了同样的事情，也就是把工作目录中的文件恢复到 v1 版本，运行 git add 添加它， 然后再将它恢复到 v3 版本（只是不用真的过一遍这些步骤）。 如果我们现在运行 git commit，它就会记录一条“将该文件恢复到 v1 版本”的更改， 尽管我们并未在工作目录中真正地再次拥有它。\n\n还有一点同 git add 一样，就是 reset 命令也可以接受一个 --patch 选项来一块一块地取消暂存的内容。 这样你就可以根据选择来取消暂存或恢复内容了。\n\n\n# 压缩\n\n我们来看看如何利用这种新的功能来做一些有趣的事情——压缩提交。\n\n假设你的一系列提交信息中有 “oops.”“wip” 和 “forgot this file”， 聪明的你就能使用 reset 来轻松快速地将它们压缩成单个提交，也显出你的聪明。 （压缩提交 展示了另一种方式，不过在本例中用 reset 更简单。）\n\n假设你有一个项目，第一次提交中有一个文件，第二次提交增加了一个新的文件并修改了第一个文件，第三次提交再次修改了第一个文件。 由于第二次提交是一个未完成的工作，因此你想要压缩它。\n\n\n\n那么可以运行 git reset --soft head~2 来将 head 分支移动到一个旧一点的提交上（即你想要保留的最近的提交）：\n\n\n\n然后只需再次运行 git commit：\n\n\n\n现在你可以查看可到达的历史，即将会推送的历史，现在看起来有个 v1 版 file-a.txt 的提交， 接着第二个提交将 file-a.txt 修改成了 v3 版并增加了 file-b.txt。 包含 v2 版本的文件已经不在历史中了。\n\n\n# 检出\n\n最后，你大概还想知道 checkout 和 reset 之间的区别。 和 reset 一样，checkout 也操纵三棵树，不过它有一点不同，这取决于你是否传给该命令一个文件路径。\n\n\n# 不带路径\n\n运行 git checkout [branch] 与运行 git reset --hard [branch] 非常相似，它会更新所有三棵树使其看起来像 [branch]，不过有两点重要的区别。\n\n首先不同于 reset --hard，checkout 对工作目录是安全的，它会通过检查来确保不会将已更改的文件弄丢。 其实它还更聪明一些。它会在工作目录中先试着简单合并一下，这样所有_还未修改过的_文件都会被更新。 而 reset --hard 则会不做检查就全面地替换所有东西。\n\n第二个重要的区别是 checkout 如何更新 head。 reset 会移动 head 分支的指向，而 checkout 只会移动 head 自身来指向另一个分支。\n\n例如，假设我们有 master 和 develop 分支，它们分别指向不同的提交；我们现在在 develop 上（所以 head 指向它）。 如果我们运行 git reset master，那么 develop 自身现在会和 master 指向同一个提交。 而如果我们运行 git checkout master 的话，develop 不会移动，head 自身会移动。 现在 head 将会指向 master。\n\n所以，虽然在这两种情况下我们都移动 head 使其指向了提交 a，但_做法_是非常不同的。 reset 会移动 head 分支的指向，而 checkout 则移动 head 自身。\n\n\n\n\n# 带路径\n\n运行 checkout 的另一种方式就是指定一个文件路径，这会像 reset 一样不会移动 head。 它就像 git reset [branch] file 那样用该次提交中的那个文件来更新索引，但是它也会覆盖工作目录中对应的文件。 它就像是 git reset --hard [branch] file（如果 reset 允许你这样运行的话）， 这样对工作目录并不安全，它也不会移动 head。\n\n此外，同 git reset 和 git add 一样，checkout 也接受一个 --patch 选项，允许你根据选择一块一块地恢复文件内容。\n\n\n# 总结\n\n希望你现在熟悉并理解了 reset 命令，不过关于它和 checkout 之间的区别，你可能还是会有点困惑，毕竟不太可能记住不同调用的所有规则。\n\n下面的速查表列出了命令对树的影响。 “head” 一列中的 “ref” 表示该命令移动了 head 指向的分支引用，而 “head” 则表示只移动了 head 自身。 特别注意 wd safe? 一列——如果它标记为 no，那么运行该命令之前请考虑一下。\n\n                            head   index   workdir   wd safe?\ncommit level                                         \nreset --soft [commit]       ref    no      no        yes\nreset [commit]              ref    yes     no        yes\nreset --hard [commit]       ref    yes     yes       no\ncheckout <commit>           head   yes     yes       yes\nfile level                                           \nreset [commit] <paths>      no     yes     no        yes\ncheckout [commit] <paths>   no     yes     yes       no",charsets:{cjk:!0}},{title:"Git分支的新建与合并-分支操作",frontmatter:{title:"Git分支的新建与合并-分支操作",date:"2020-11-18T17:43:57.000Z",permalink:"/pages/ea5a8c/",categories:["《Git》学习笔记"],tags:["Git"],readingShow:"top"},regularPath:"/06.%E4%B9%A6%E7%B1%8D/10.%E3%80%8AGit%E3%80%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/20.%E6%96%87%E6%A1%A3%E7%AC%94%E8%AE%B0/30.Git%E5%88%86%E6%94%AF%E7%9A%84%E6%96%B0%E5%BB%BA%E4%B8%8E%E5%90%88%E5%B9%B6-%E5%88%86%E6%94%AF%E6%93%8D%E4%BD%9C.html",relativePath:"06.书籍/10.《Git》学习笔记/20.文档笔记/30.Git分支的新建与合并-分支操作.md",key:"v-0bab8d58",path:"/pages/ea5a8c/",headers:[{level:3,title:"创建分支并切换",slug:"创建分支并切换",normalizedTitle:"创建分支并切换",charIndex:45},{level:3,title:"切换分支",slug:"切换分支",normalizedTitle:"切换分支",charIndex:188},{level:3,title:"合并分支",slug:"合并分支",normalizedTitle:"合并分支",charIndex:579},{level:3,title:"删除分支",slug:"删除分支",normalizedTitle:"删除分支",charIndex:670},{level:3,title:"多次提交之后合并分支",slug:"多次提交之后合并分支",normalizedTitle:"多次提交之后合并分支",charIndex:785},{level:3,title:"遇到冲突时的分支合并",slug:"遇到冲突时的分支合并",normalizedTitle:"遇到冲突时的分支合并",charIndex:1128}],lastUpdated:"2022/9/22 下午4:28:09",lastUpdatedTimestamp:1663835289e3,headersStr:"创建分支并切换 切换分支 合并分支 删除分支 多次提交之后合并分支 遇到冲突时的分支合并",content:"# Git分支的新建与合并-分支操作\n\n文档：Git 分支 - 分支的新建与合并\n\n\n# 创建分支并切换\n\n此时有一个需求需要在新的分支 iss53上工作：\n\n$ git checkout -b iss53  # b表示branch\n\n\n1\n\n\n它是下面两条命令的简写：\n\n$ git branch iss53\n$ git checkout iss53\n\n\n1\n2\n\n\n\n# 切换分支\n\n突然有一个紧急问题要解决，需要在原来的 master分支进行修复：\n\n$ git checkout master\n\n\n1\n\n\n在切换到 master之前，需要 iss53分支保持好一个干净的状态（修改都已提交）。\n\n注意：切换分支Git 会重置你的工作目录。\n\n> checkout 中文含义 “检出”，checkout <branch> 检出分支 => 检出指定分支的代码 => 重置工作目录并切换分支。\n\n接下来，你要修复这个紧急问题。 建立一个 hotfix 分支，在该分支上工作直到问题解决：\n\n$ git checkout -b hotfix\n\n# 中间过程在hotfix上修改了代码并提交\n$ echo 'test' > ./hotfix.txt\n$ git add .\n$ git commit -m 'fixed'\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# 合并分支\n\n$ git checkout master # 首先切回master分支\n$ git merge hotfix # 把 hotfix 分支合并过来\n\n\n1\n2\n\n\n\n# 删除分支\n\n$ git branch -d hotfix # d表示delete\n\n# 然后切回iss53继续工作\n$ git checkout iss53\n\n\n1\n2\n3\n4\n\n\n注意删除分支是在 branch 命令上\n\n\n# 多次提交之后合并分支\n\n假设你已经修正了 #53 问题，打算合并到 master分支：\n\n$ git checkout master\n$ git merga iss53\n\n\n1\n2\n\n\n这看似和之前的合并区别不大。此时你的开发历史从一个更早的地方开始分叉开来（diverged）。 因为，master 分支所在提交并不是 iss53 分支所在提交的直接祖先，Git 不得不做一些额外的工作。 出现这种情况的时候，Git 会使用两个分支的末端所指的快照以及这两个分支的公共祖先，做一个简单的三方合并。\n\n和之前将分支指针向前推进所不同的是，Git 将此次三方合并的结果做了一个新的快照并且自动创建一个新的提交指向它。 这个被称作一次合并提交，它的特别之处在于他有不止一个父提交。\n\n\n# 遇到冲突时的分支合并\n\n如果你在两个不同的分支中，对同一个文件的同一个部分进行了不同的修改，Git 就没法干净的合并它们，就产生了冲突。\n\n合并过程中出现 CONFLICT提升，表示有冲突\n\n$ git merge iss53\nAuto-merging index.html\nCONFLICT (content): Merge conflict in index.html\nAutomatic merge failed; fix conflicts and then commit the result.\n\n\n1\n2\n3\n4\n\n\n使用 git status查看未合并状态。\n\n任何因包含合并冲突而有待解决的文件，都会以未合并状态标识出来。 Git 会在有冲突的文件中加入标准的冲突解决标记，这样你可以打开这些包含冲突的文件然后手动解决冲突。 出现冲突的文件会包含一些特殊区段，看起来像下面这个样子：\n\n<<<<<<< HEAD:index.html\n<div id=\"footer\">contact : email.support@github.com</div>\n=======\n<div id=\"footer\">\n please contact us at support@github.com\n</div>\n>>>>>>> iss53:index.html\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n你需要手动解决冲突，解决了所有文件里的冲突之后，对每个文件使用 git add 命令来将其标记为冲突已解决。 一旦暂存这些原本有冲突的文件，Git 就会将它们标记为冲突已解决。\n\n如果你对结果感到满意，并且确定之前有冲突的的文件都已经暂存了，这时你可以输入 git commit 来完成合并提交。",normalizedContent:"# git分支的新建与合并-分支操作\n\n文档：git 分支 - 分支的新建与合并\n\n\n# 创建分支并切换\n\n此时有一个需求需要在新的分支 iss53上工作：\n\n$ git checkout -b iss53  # b表示branch\n\n\n1\n\n\n它是下面两条命令的简写：\n\n$ git branch iss53\n$ git checkout iss53\n\n\n1\n2\n\n\n\n# 切换分支\n\n突然有一个紧急问题要解决，需要在原来的 master分支进行修复：\n\n$ git checkout master\n\n\n1\n\n\n在切换到 master之前，需要 iss53分支保持好一个干净的状态（修改都已提交）。\n\n注意：切换分支git 会重置你的工作目录。\n\n> checkout 中文含义 “检出”，checkout <branch> 检出分支 => 检出指定分支的代码 => 重置工作目录并切换分支。\n\n接下来，你要修复这个紧急问题。 建立一个 hotfix 分支，在该分支上工作直到问题解决：\n\n$ git checkout -b hotfix\n\n# 中间过程在hotfix上修改了代码并提交\n$ echo 'test' > ./hotfix.txt\n$ git add .\n$ git commit -m 'fixed'\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# 合并分支\n\n$ git checkout master # 首先切回master分支\n$ git merge hotfix # 把 hotfix 分支合并过来\n\n\n1\n2\n\n\n\n# 删除分支\n\n$ git branch -d hotfix # d表示delete\n\n# 然后切回iss53继续工作\n$ git checkout iss53\n\n\n1\n2\n3\n4\n\n\n注意删除分支是在 branch 命令上\n\n\n# 多次提交之后合并分支\n\n假设你已经修正了 #53 问题，打算合并到 master分支：\n\n$ git checkout master\n$ git merga iss53\n\n\n1\n2\n\n\n这看似和之前的合并区别不大。此时你的开发历史从一个更早的地方开始分叉开来（diverged）。 因为，master 分支所在提交并不是 iss53 分支所在提交的直接祖先，git 不得不做一些额外的工作。 出现这种情况的时候，git 会使用两个分支的末端所指的快照以及这两个分支的公共祖先，做一个简单的三方合并。\n\n和之前将分支指针向前推进所不同的是，git 将此次三方合并的结果做了一个新的快照并且自动创建一个新的提交指向它。 这个被称作一次合并提交，它的特别之处在于他有不止一个父提交。\n\n\n# 遇到冲突时的分支合并\n\n如果你在两个不同的分支中，对同一个文件的同一个部分进行了不同的修改，git 就没法干净的合并它们，就产生了冲突。\n\n合并过程中出现 conflict提升，表示有冲突\n\n$ git merge iss53\nauto-merging index.html\nconflict (content): merge conflict in index.html\nautomatic merge failed; fix conflicts and then commit the result.\n\n\n1\n2\n3\n4\n\n\n使用 git status查看未合并状态。\n\n任何因包含合并冲突而有待解决的文件，都会以未合并状态标识出来。 git 会在有冲突的文件中加入标准的冲突解决标记，这样你可以打开这些包含冲突的文件然后手动解决冲突。 出现冲突的文件会包含一些特殊区段，看起来像下面这个样子：\n\n<<<<<<< head:index.html\n<div id=\"footer\">contact : email.support@github.com</div>\n=======\n<div id=\"footer\">\n please contact us at support@github.com\n</div>\n>>>>>>> iss53:index.html\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n你需要手动解决冲突，解决了所有文件里的冲突之后，对每个文件使用 git add 命令来将其标记为冲突已解决。 一旦暂存这些原本有冲突的文件，git 就会将它们标记为冲突已解决。\n\n如果你对结果感到满意，并且确定之前有冲突的的文件都已经暂存了，这时你可以输入 git commit 来完成合并提交。",charsets:{cjk:!0}},{title:"Git分支开发工作流",frontmatter:{title:"Git分支开发工作流",date:"2020-11-18T17:43:57.000Z",permalink:"/pages/49ee30/",categories:["《Git》学习笔记"],tags:["Git"],readingShow:"top"},regularPath:"/06.%E4%B9%A6%E7%B1%8D/10.%E3%80%8AGit%E3%80%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/20.%E6%96%87%E6%A1%A3%E7%AC%94%E8%AE%B0/50.Git%E5%88%86%E6%94%AF%E5%BC%80%E5%8F%91%E5%B7%A5%E4%BD%9C%E6%B5%81.html",relativePath:"06.书籍/10.《Git》学习笔记/20.文档笔记/50.Git分支开发工作流.md",key:"v-a2879398",path:"/pages/49ee30/",headers:[{level:3,title:"长期分支",slug:"长期分支",normalizedTitle:"长期分支",charIndex:32},{level:3,title:"主题分支 (短期分支)",slug:"主题分支-短期分支",normalizedTitle:"主题分支 (短期分支)",charIndex:633}],lastUpdated:"2022/9/22 下午4:28:09",lastUpdatedTimestamp:1663835289e3,headersStr:"长期分支 主题分支 (短期分支)",content:"# Git分支开发工作流\n\n文档：Git分支开发工作流\n\n\n# 长期分支\n\n因为 Git 使用简单的三方合并，所以就算在一段较长的时间内，反复把一个分支合并入另一个分支，也不是什么难事。 也就是说，在整个项目开发周期的不同阶段，你可以同时拥有多个开放的分支；你可以定期地把某些主题分支合并入其他分支中。\n\n许多使用 Git 的开发者都喜欢使用这种方式来工作，比如只在 master 分支上保留完全稳定的代码，开发过程在 dev分支，开发完成后并入 test分支进行测试，通过测试的稳定代码才并入 master分支中。\n\ndev和 test分支不需要保持绝对稳定，但在 test通过测试达到稳定状态，就可以被合并入 master分支。\n\n事实上我们刚才讨论的，是随着你的提交而不断右移的指针。 稳定分支(master)的指针总是在提交历史中落后一大截，而前沿分支(dev或 test)的指针往往比较靠前。\n\n你可以用这种方法维护不同层次的稳定性。 一些大型项目还有一个 proposed（建议） 或 pu: proposed updates（建议更新）分支，它可能因包含一些不成熟的内容而不能进入 master 分支。 这么做的目的是使你的分支具有不同级别的稳定性；当它们具有一定程度的稳定性后，再把它们合并入具有更高级别稳定性的分支中。 再次强调一下，使用多个长期分支的方法并非必要，但是这么做通常很有帮助，尤其是当你在一个非常庞大或者复杂的项目中工作时。\n\n\n# 主题分支 (短期分支)\n\n主题分支对任何规模的项目都适用。 主题分支是一种短期分支，它被用来实现单一特性或其相关工作。\n\n你已经在上一节中你创建的 iss53 和 hotfix 主题分支中看到过这种用法。 你在上一节用到的主题分支（iss53 和 hotfix 分支）中提交了一些更新，并且在它们合并入主干分支之后，你又删除了它们。 这项技术能使你快速并且完整地进行上下文切换（context-switch）——因为你的工作被分散到不同的流水线中，在不同的流水线中每个分支都仅与其目标特性相关，因此，在做代码审查之类的工作的时候就能更加容易地看出你做了哪些改动。 你可以把做出的改动在主题分支中保留几分钟、几天甚至几个月，等它们成熟之后再合并，而不用在乎它们建立的顺序或工作进度。\n\n考虑这样一个例子，你在 master 分支上工作到 C1，这时为了解决一个问题而新建 iss91 分支，在 iss91 分支上工作到 C4，然而对于那个问题你又有了新的想法，于是你再新建一个 iss91v2 分支试图用另一种方法解决那个问题，接着你回到 master 分支工作了一会儿，你又冒出了一个不太确定的想法，你便在 C10 的时候新建一个 dumbidea 分支，并在上面做些实验。 你的提交历史看起来像下面这个样子：\n\n\n\n图1. 拥有多个主题分支的提交历史 ▲\n\n现在，我们假设两件事情：你决定使用第二个方案来解决那个问题，即使用在 iss91v2 分支中方案。 另外，你将 dumbidea 分支拿给你的同事看过之后，结果发现这是个惊人之举。 这时你可以抛弃 iss91 分支（即丢弃 C5 和 C6 提交），然后把另外两个分支合并入主干分支。 最终你的提交历史看起来像下面这个样子：\n\n\n\n图2. 合并了 dumbidea 和 iss91v2 分支之后的提交历史 ▲\n\n我们将会在 分布式 Git 中向你揭示更多有关分支工作流的细节， 因此，请确保你阅读完那个章节之后，再来决定你的下个项目要使用什么样的分支策略（branching scheme）。\n\n请牢记，当你做这么多操作的时候，这些分支全部都存于本地。 当你新建和合并分支的时候，所有这一切都只发生在你本地的 Git 版本库中 —— 没有与服务器发生交互。",normalizedContent:"# git分支开发工作流\n\n文档：git分支开发工作流\n\n\n# 长期分支\n\n因为 git 使用简单的三方合并，所以就算在一段较长的时间内，反复把一个分支合并入另一个分支，也不是什么难事。 也就是说，在整个项目开发周期的不同阶段，你可以同时拥有多个开放的分支；你可以定期地把某些主题分支合并入其他分支中。\n\n许多使用 git 的开发者都喜欢使用这种方式来工作，比如只在 master 分支上保留完全稳定的代码，开发过程在 dev分支，开发完成后并入 test分支进行测试，通过测试的稳定代码才并入 master分支中。\n\ndev和 test分支不需要保持绝对稳定，但在 test通过测试达到稳定状态，就可以被合并入 master分支。\n\n事实上我们刚才讨论的，是随着你的提交而不断右移的指针。 稳定分支(master)的指针总是在提交历史中落后一大截，而前沿分支(dev或 test)的指针往往比较靠前。\n\n你可以用这种方法维护不同层次的稳定性。 一些大型项目还有一个 proposed（建议） 或 pu: proposed updates（建议更新）分支，它可能因包含一些不成熟的内容而不能进入 master 分支。 这么做的目的是使你的分支具有不同级别的稳定性；当它们具有一定程度的稳定性后，再把它们合并入具有更高级别稳定性的分支中。 再次强调一下，使用多个长期分支的方法并非必要，但是这么做通常很有帮助，尤其是当你在一个非常庞大或者复杂的项目中工作时。\n\n\n# 主题分支 (短期分支)\n\n主题分支对任何规模的项目都适用。 主题分支是一种短期分支，它被用来实现单一特性或其相关工作。\n\n你已经在上一节中你创建的 iss53 和 hotfix 主题分支中看到过这种用法。 你在上一节用到的主题分支（iss53 和 hotfix 分支）中提交了一些更新，并且在它们合并入主干分支之后，你又删除了它们。 这项技术能使你快速并且完整地进行上下文切换（context-switch）——因为你的工作被分散到不同的流水线中，在不同的流水线中每个分支都仅与其目标特性相关，因此，在做代码审查之类的工作的时候就能更加容易地看出你做了哪些改动。 你可以把做出的改动在主题分支中保留几分钟、几天甚至几个月，等它们成熟之后再合并，而不用在乎它们建立的顺序或工作进度。\n\n考虑这样一个例子，你在 master 分支上工作到 c1，这时为了解决一个问题而新建 iss91 分支，在 iss91 分支上工作到 c4，然而对于那个问题你又有了新的想法，于是你再新建一个 iss91v2 分支试图用另一种方法解决那个问题，接着你回到 master 分支工作了一会儿，你又冒出了一个不太确定的想法，你便在 c10 的时候新建一个 dumbidea 分支，并在上面做些实验。 你的提交历史看起来像下面这个样子：\n\n\n\n图1. 拥有多个主题分支的提交历史 ▲\n\n现在，我们假设两件事情：你决定使用第二个方案来解决那个问题，即使用在 iss91v2 分支中方案。 另外，你将 dumbidea 分支拿给你的同事看过之后，结果发现这是个惊人之举。 这时你可以抛弃 iss91 分支（即丢弃 c5 和 c6 提交），然后把另外两个分支合并入主干分支。 最终你的提交历史看起来像下面这个样子：\n\n\n\n图2. 合并了 dumbidea 和 iss91v2 分支之后的提交历史 ▲\n\n我们将会在 分布式 git 中向你揭示更多有关分支工作流的细节， 因此，请确保你阅读完那个章节之后，再来决定你的下个项目要使用什么样的分支策略（branching scheme）。\n\n请牢记，当你做这么多操作的时候，这些分支全部都存于本地。 当你新建和合并分支的时候，所有这一切都只发生在你本地的 git 版本库中 —— 没有与服务器发生交互。",charsets:{cjk:!0}},{title:"Git分支-远程分支",frontmatter:{title:"Git分支-远程分支",date:"2020-11-18T17:43:57.000Z",permalink:"/pages/574d62/",categories:["《Git》学习笔记"],tags:["Git"],readingShow:"top"},regularPath:"/06.%E4%B9%A6%E7%B1%8D/10.%E3%80%8AGit%E3%80%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/20.%E6%96%87%E6%A1%A3%E7%AC%94%E8%AE%B0/60.Git%E5%88%86%E6%94%AF-%E8%BF%9C%E7%A8%8B%E5%88%86%E6%94%AF.html",relativePath:"06.书籍/10.《Git》学习笔记/20.文档笔记/60.Git分支-远程分支.md",key:"v-d04c94fe",path:"/pages/574d62/",headers:[{level:3,title:"查看远程引用列表与信息",slug:"查看远程引用列表与信息",normalizedTitle:"查看远程引用列表与信息",charIndex:71},{level:3,title:"远程跟踪分支",slug:"远程跟踪分支",normalizedTitle:"远程跟踪分支",charIndex:184},{level:3,title:"推送",slug:"推送",normalizedTitle:"推送",charIndex:432},{level:4,title:"重命名远程仓库上的分支名",slug:"重命名远程仓库上的分支名",normalizedTitle:"重命名远程仓库上的分支名",charIndex:2764},{level:3,title:"跟踪分支",slug:"跟踪分支",normalizedTitle:"跟踪分支",charIndex:186},{level:3,title:"查看跟踪分支",slug:"查看跟踪分支",normalizedTitle:"查看跟踪分支",charIndex:5304},{level:3,title:"拉取",slug:"拉取",normalizedTitle:"拉取",charIndex:605},{level:3,title:"删除远程分支",slug:"删除远程分支",normalizedTitle:"删除远程分支",charIndex:6402}],lastUpdated:"2022/9/22 下午4:28:09",lastUpdatedTimestamp:1663835289e3,headersStr:"查看远程引用列表与信息 远程跟踪分支 推送 重命名远程仓库上的分支名 跟踪分支 查看跟踪分支 拉取 删除远程分支",content:"# Git分支-远程分支\n\n远程引用是对远程仓库的引用（指针），包括分支、标签等等。\n\n> 远程分支本质上也是一个指针，指向远程地址\n\n\n# 查看远程引用列表与信息\n\ngit ls-remote <remote> # 远程引用的完整列表\ngit remote show <remote> # 远程分支的更多信息\n\n\n1\n2\n\n\n上面两行命令比较少用，更常见的做法是利用远程跟踪分支。\n\n\n# 远程跟踪分支\n\n远程跟踪分支是远程分支状态的引用。它们是你无法移动的本地引用。一旦你进行了网络通信， Git 就会为你移动它们以精确反映远程仓库的状态。请将它们看做书签， 这样可以提醒你该分支在远程仓库中的位置就是你最后一次连接到它们的位置。\n\n它们以 <remote>/<branch> 的形式命名。 例如，如果你想要查看最后一次与远程仓库 origin 通信时 master 分支的状态，你可以查看 origin/master 分支。 你与同事合作解决一个问题并且他们推送了一个 iss53 分支，你可能有自己的本地 iss53 分支， 然而在服务器上的分支会以 origin/iss53 来表示。\n\n这可能有一点儿难以理解，让我们来看一个例子。 假设你的网络里有一个在 git.ourcompany.com 的 Git 服务器。 如果你从这里克隆，Git 的 clone 命令会为你自动将其命名为 origin，拉取它的所有数据， 创建一个指向它的 master 分支的指针，并且在本地将其命名为 origin/master。 Git 也会给你一个与 origin 的 master 分支在指向同一个地方的本地 master 分支，这样你就有工作的基础。\n\n<mark>笔记：从远程克隆下来的仓库有一个叫 origin/master的远程跟踪分支 和 一个本地的 master分支</mark>\n\n> 笔记：“origin” 并无特殊含义远程仓库名字 “origin” 与分支名字 “master” 一样，在 Git 中并没有任何特别的含义一样。 同时 “master” 是当你运行 git init 时默认的起始分支名字，原因仅仅是它的广泛使用， “origin” 是当你运行 git clone 时默认的远程仓库名字。 如果你运行 git clone -o booyah，那么你默认的远程分支名字将会是 booyah/master。\n\n\n\n图1. 克隆之后的服务器与本地仓库 ▲\n\n如果你在本地的 master 分支做了一些工作，在同一段时间内有其他人推送提交到 git.ourcompany.com 并且更新了它的 master 分支，这就是说你们的提交历史已走向不同的方向。 即便这样，只要你保持不与 origin 服务器连接（并拉取数据），你的 origin/master 指针就不会移动。\n\n\n\n图2. 本地与远程的工作可以分叉 ▲\n\n如果要与给定的远程仓库同步数据，运行 git fetch <remote> 命令（在本例中为 git fetch origin）。 这个命令查找 “origin” 是哪一个服务器（在本例中，它是 git.ourcompany.com）， 从中抓取本地没有的数据，并且更新本地数据库，移动 origin/master 指针到更新之后的位置。\n\n\n\n图3. git fetch 更新你的远程跟踪分支 ▲\n\n<mark>笔记: 本地的 master 分支 可能 和 远程跟踪分支 origin/master 分叉</mark>\n\n为了演示有多个远程仓库与远程分支的情况，我们假定你有另一个内部 Git 服务器，仅服务于你的某个敏捷开发团队。 这个服务器位于 git.team1.ourcompany.com。 你可以运行 git remote add 命令添加一个新的远程仓库引用到当前的项目，这个命令我们会在 Git 基础 中详细说明。 将这个远程仓库命名为 teamone，将其作为完整 URL 的缩写。<mark>远程仓库名本质上是远程URL的缩写</mark>\n\n\n\n图4. 添加另一个远程仓库 ▲\n\n现在，可以运行 git fetch teamone 来抓取远程仓库 teamone 有而本地没有的数据。 因为那台服务器上现有的数据是 origin 服务器上的一个子集， 所以 Git 并不会抓取数据而是会设置远程跟踪分支 teamone/master 指向 teamone 的 master 分支。\n\n\n\n图5. 远程跟踪分支 teamone/master ▲\n\n\n# 推送\n\n当你想要公开分享一个分支时，需要将其推送到有写入权限的远程仓库上。 本地的分支并不会自动与远程仓库同步——你必须显式地推送想要分享的分支。 这样，你就可以把不愿意分享的内容放到私人分支上，而将需要和别人协作的内容推送到公开分支。\n\n如果希望和别人一起在名为 serverfix 的分支上工作，你可以像推送第一个分支那样推送它。 运行 git push <remote> <branch>:\n\n$ git push origin serverfix\nCounting objects: 24, done.\nDelta compression using up to 8 threads.\nCompressing objects: 100% (15/15), done.\nWriting objects: 100% (24/24), 1.91 KiB | 0 bytes/s, done.\nTotal 24 (delta 2), reused 0 (delta 0)\nTo https://github.com/schacon/simplegit\n * [new branch]      serverfix -> serverfix\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n这里有些工作被简化了。 Git 自动将 serverfix 分支名字展开为 refs/heads/serverfix:refs/heads/serverfix， 那意味着，“推送本地的 serverfix 分支来更新远程仓库上的 serverfix 分支。” 我们将会详细学习 Git 内部原理 的 refs/heads/ 部分， 但是现在可以先把它放在儿。你也可以运行 git push origin serverfix:serverfix， 它会做同样的事——也就是说“推送本地的 serverfix 分支，将其作为远程仓库的 serverfix 分支” 可以通过这种格式来推送本地分支到一个命名不相同的远程分支。\n\n# 重命名远程仓库上的分支名\n\n如果并不想让远程仓库上的分支叫做 serverfix，可以运行 git push origin serverfix:awesomebranch 来将本地的 serverfix 分支推送到远程仓库上的 awesomebranch 分支。\n\nNOTE   如何避免每次输入密码如果你正在使用 HTTPS URL 来推送，GIT 服务器会询问用户名与密码。\n       默认情况下它会在终端中提示服务器是否允许你进行推送。如果不想在每一次推送时都输入用户名与密码，你可以设置一个\n       “CREDENTIAL CACHE”。 最简单的方式就是将其保存在内存中几分钟，可以简单地运行 GIT CONFIG\n       --GLOBAL CREDENTIAL.HELPER CACHE 来设置它。想要了解更多关于不同验证缓存的可用选项，查看\n       凭证存储。\n       \n\n下一次其他协作者从服务器上抓取数据时，他们会在本地生成一个远程分支 origin/serverfix，指向服务器的 serverfix 分支的引用：\n\n$ git fetch origin\nremote: Counting objects: 7, done.\nremote: Compressing objects: 100% (2/2), done.\nremote: Total 3 (delta 0), reused 3 (delta 0)\nUnpacking objects: 100% (3/3), done.\nFrom https://github.com/schacon/simplegit\n * [new branch]      serverfix    -> origin/serverfix\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n要特别注意的一点是当抓取到新的远程跟踪分支时，本地不会自动生成一份可编辑的副本（拷贝）。 换一句话说，这种情况下，不会有一个新的 serverfix 分支——只有一个不可以修改的 origin/serverfix 指针。\n\n可以运行 git merge origin/serverfix 将这些工作合并到当前所在的分支。 如果想要在自己的 serverfix 分支上工作，可以将其建立在远程跟踪分支之上：\n\n$ git checkout -b serverfix origin/serverfix\nBranch serverfix set up to track remote branch serverfix from origin.\nSwitched to a new branch 'serverfix'\n\n\n1\n2\n3\n\n\n这会给你一个用于工作的本地分支，并且起点位于 origin/serverfix。\n\n\n# 跟踪分支\n\n从一个远程跟踪分支检出一个本地分支会自动创建所谓的“跟踪分支”（它跟踪的分支叫做“上游分支”）。 跟踪分支是与远程分支有直接关系的本地分支。 如果在一个跟踪分支上输入 git pull，Git 能自动地识别去哪个服务器上抓取、合并到哪个分支。\n\n当克隆一个仓库时，它通常会自动地创建一个跟踪 origin/master 的 master 分支。 然而，如果你愿意的话可以设置其他的跟踪分支，或是一个在其他远程仓库上的跟踪分支，又或者不跟踪 master 分支。 最简单的实例就是像之前看到的那样，运行 git checkout -b <branch> <remote>/<branch>。 这是一个十分常用的操作所以 Git 提供了 --track 快捷方式：\n\n$ git checkout --track origin/serverfix\nBranch serverfix set up to track remote branch serverfix from origin.\nSwitched to a new branch 'serverfix'\n\n\n1\n2\n3\n\n\n由于这个操作太常用了，该捷径本身还有一个捷径。 如果你尝试检出的分支 (a) 不存在且 (b) 刚好只有一个名字与之匹配的远程分支，那么 Git 就会为你创建一个跟踪分支：\n\n$ git checkout serverfix\nBranch serverfix set up to track remote branch serverfix from origin.\nSwitched to a new branch 'serverfix'\n\n\n1\n2\n3\n\n\n如果想要将本地分支与远程分支设置为不同的名字，你可以轻松地使用上一个命令增加一个不同名字的本地分支：\n\n$ git checkout -b sf origin/serverfix\nBranch sf set up to track remote branch serverfix from origin.\nSwitched to a new branch 'sf'\n\n\n1\n2\n3\n\n\n现在，本地分支 sf 会自动从 origin/serverfix 拉取。\n\n设置已有的本地分支跟踪一个刚刚拉取下来的远程分支，或者想要修改正在跟踪的上游分支， 你可以在任意时间使用 -u 或 --set-upstream-to 选项运行 git branch 来显式地设置。\n\n$ git branch -u origin/serverfix\nBranch serverfix set up to track remote branch serverfix from origin.\n\n\n1\n2\n\n\nNOTE   上游快捷方式当设置好跟踪分支后，可以通过简写 @{UPSTREAM} 或 @{U} 来引用它的上游分支。 所以在\n       MASTER 分支时并且它正在跟踪 ORIGIN/MASTER 时，如果愿意的话可以使用 GIT MERGE @{U}\n       来取代 GIT MERGE ORIGIN/MASTER。\n       \n\n\n# 查看跟踪分支\n\n如果想要查看设置的所有跟踪分支，可以使用 git branch 的 -vv 选项。 这会将所有的本地分支列出来并且包含更多的信息，如每一个分支正在跟踪哪个远程分支与本地分支是否是领先、落后或是都有。\n\n$ git branch -vv\n  iss53     7e424c3 [origin/iss53: ahead 2] forgot the brackets\n  master    1ae2a45 [origin/master] deploying index fix\n* serverfix f8674d9 [teamone/server-fix-good: ahead 3, behind 1] this should do it\n  testing   5ea463a trying something new\n\n\n1\n2\n3\n4\n5\n\n\n这里可以看到 iss53 分支正在跟踪 origin/iss53 并且 “ahead” 是 2，意味着本地有两个提交还没有推送到服务器上。 也能看到 master 分支正在跟踪 origin/master 分支并且是最新的。 接下来可以看到 serverfix 分支正在跟踪 teamone 服务器上的 server-fix-good 分支并且领先 3 落后 1， 意味着服务器上有一次提交还没有合并入同时本地有三次提交还没有推送。 最后看到 testing 分支并没有跟踪任何远程分支。\n\n需要重点注意的一点是这些数字的值来自于你从每个服务器上最后一次抓取的数据。 这个命令并没有连接服务器，它只会告诉你关于本地缓存的服务器数据。 如果想要统计最新的领先与落后数字，需要在运行此命令前抓取所有的远程仓库。 可以像这样做：\n\n$ git fetch --all; git branch -vv\n\n\n1\n\n\n\n# 拉取\n\n当 git fetch 命令从服务器上抓取本地没有的数据时，它并不会修改工作目录中的内容。 它只会获取数据然后让你自己合并。 然而，有一个命令叫作 git pull 在大多数情况下它的含义是一个 git fetch 紧接着一个 git merge 命令。 如果有一个像之前章节中演示的设置好的跟踪分支，不管它是显式地设置还是通过 clone 或 checkout 命令为你创建的，git pull 都会查找当前分支所跟踪的服务器与分支， 从服务器上抓取数据然后尝试合并入那个远程分支。\n\n由于 git pull 的魔法经常令人困惑所以通常单独显式地使用 fetch 与 merge 命令会更好一些。\n\n\n# 删除远程分支\n\n假设你已经通过远程分支做完所有的工作了——也就是说你和你的协作者已经完成了一个特性， 并且将其合并到了远程仓库的 master 分支（或任何其他稳定代码分支）。 可以运行带有 --delete 选项的 git push 命令来删除一个远程分支。 如果想要从服务器上删除 serverfix 分支，运行下面的命令：\n\n$ git push origin --delete serverfix\nTo https://github.com/schacon/simplegit\n - [deleted]         serverfix\n\n\n1\n2\n3\n\n\n基本上这个命令做的只是从服务器上移除这个指针。 Git 服务器通常会保留数据一段时间直到垃圾回收运行，所以如果不小心删除掉了，通常是很容易恢复的。",normalizedContent:"# git分支-远程分支\n\n远程引用是对远程仓库的引用（指针），包括分支、标签等等。\n\n> 远程分支本质上也是一个指针，指向远程地址\n\n\n# 查看远程引用列表与信息\n\ngit ls-remote <remote> # 远程引用的完整列表\ngit remote show <remote> # 远程分支的更多信息\n\n\n1\n2\n\n\n上面两行命令比较少用，更常见的做法是利用远程跟踪分支。\n\n\n# 远程跟踪分支\n\n远程跟踪分支是远程分支状态的引用。它们是你无法移动的本地引用。一旦你进行了网络通信， git 就会为你移动它们以精确反映远程仓库的状态。请将它们看做书签， 这样可以提醒你该分支在远程仓库中的位置就是你最后一次连接到它们的位置。\n\n它们以 <remote>/<branch> 的形式命名。 例如，如果你想要查看最后一次与远程仓库 origin 通信时 master 分支的状态，你可以查看 origin/master 分支。 你与同事合作解决一个问题并且他们推送了一个 iss53 分支，你可能有自己的本地 iss53 分支， 然而在服务器上的分支会以 origin/iss53 来表示。\n\n这可能有一点儿难以理解，让我们来看一个例子。 假设你的网络里有一个在 git.ourcompany.com 的 git 服务器。 如果你从这里克隆，git 的 clone 命令会为你自动将其命名为 origin，拉取它的所有数据， 创建一个指向它的 master 分支的指针，并且在本地将其命名为 origin/master。 git 也会给你一个与 origin 的 master 分支在指向同一个地方的本地 master 分支，这样你就有工作的基础。\n\n<mark>笔记：从远程克隆下来的仓库有一个叫 origin/master的远程跟踪分支 和 一个本地的 master分支</mark>\n\n> 笔记：“origin” 并无特殊含义远程仓库名字 “origin” 与分支名字 “master” 一样，在 git 中并没有任何特别的含义一样。 同时 “master” 是当你运行 git init 时默认的起始分支名字，原因仅仅是它的广泛使用， “origin” 是当你运行 git clone 时默认的远程仓库名字。 如果你运行 git clone -o booyah，那么你默认的远程分支名字将会是 booyah/master。\n\n\n\n图1. 克隆之后的服务器与本地仓库 ▲\n\n如果你在本地的 master 分支做了一些工作，在同一段时间内有其他人推送提交到 git.ourcompany.com 并且更新了它的 master 分支，这就是说你们的提交历史已走向不同的方向。 即便这样，只要你保持不与 origin 服务器连接（并拉取数据），你的 origin/master 指针就不会移动。\n\n\n\n图2. 本地与远程的工作可以分叉 ▲\n\n如果要与给定的远程仓库同步数据，运行 git fetch <remote> 命令（在本例中为 git fetch origin）。 这个命令查找 “origin” 是哪一个服务器（在本例中，它是 git.ourcompany.com）， 从中抓取本地没有的数据，并且更新本地数据库，移动 origin/master 指针到更新之后的位置。\n\n\n\n图3. git fetch 更新你的远程跟踪分支 ▲\n\n<mark>笔记: 本地的 master 分支 可能 和 远程跟踪分支 origin/master 分叉</mark>\n\n为了演示有多个远程仓库与远程分支的情况，我们假定你有另一个内部 git 服务器，仅服务于你的某个敏捷开发团队。 这个服务器位于 git.team1.ourcompany.com。 你可以运行 git remote add 命令添加一个新的远程仓库引用到当前的项目，这个命令我们会在 git 基础 中详细说明。 将这个远程仓库命名为 teamone，将其作为完整 url 的缩写。<mark>远程仓库名本质上是远程url的缩写</mark>\n\n\n\n图4. 添加另一个远程仓库 ▲\n\n现在，可以运行 git fetch teamone 来抓取远程仓库 teamone 有而本地没有的数据。 因为那台服务器上现有的数据是 origin 服务器上的一个子集， 所以 git 并不会抓取数据而是会设置远程跟踪分支 teamone/master 指向 teamone 的 master 分支。\n\n\n\n图5. 远程跟踪分支 teamone/master ▲\n\n\n# 推送\n\n当你想要公开分享一个分支时，需要将其推送到有写入权限的远程仓库上。 本地的分支并不会自动与远程仓库同步——你必须显式地推送想要分享的分支。 这样，你就可以把不愿意分享的内容放到私人分支上，而将需要和别人协作的内容推送到公开分支。\n\n如果希望和别人一起在名为 serverfix 的分支上工作，你可以像推送第一个分支那样推送它。 运行 git push <remote> <branch>:\n\n$ git push origin serverfix\ncounting objects: 24, done.\ndelta compression using up to 8 threads.\ncompressing objects: 100% (15/15), done.\nwriting objects: 100% (24/24), 1.91 kib | 0 bytes/s, done.\ntotal 24 (delta 2), reused 0 (delta 0)\nto https://github.com/schacon/simplegit\n * [new branch]      serverfix -> serverfix\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n这里有些工作被简化了。 git 自动将 serverfix 分支名字展开为 refs/heads/serverfix:refs/heads/serverfix， 那意味着，“推送本地的 serverfix 分支来更新远程仓库上的 serverfix 分支。” 我们将会详细学习 git 内部原理 的 refs/heads/ 部分， 但是现在可以先把它放在儿。你也可以运行 git push origin serverfix:serverfix， 它会做同样的事——也就是说“推送本地的 serverfix 分支，将其作为远程仓库的 serverfix 分支” 可以通过这种格式来推送本地分支到一个命名不相同的远程分支。\n\n# 重命名远程仓库上的分支名\n\n如果并不想让远程仓库上的分支叫做 serverfix，可以运行 git push origin serverfix:awesomebranch 来将本地的 serverfix 分支推送到远程仓库上的 awesomebranch 分支。\n\nnote   如何避免每次输入密码如果你正在使用 https url 来推送，git 服务器会询问用户名与密码。\n       默认情况下它会在终端中提示服务器是否允许你进行推送。如果不想在每一次推送时都输入用户名与密码，你可以设置一个\n       “credential cache”。 最简单的方式就是将其保存在内存中几分钟，可以简单地运行 git config\n       --global credential.helper cache 来设置它。想要了解更多关于不同验证缓存的可用选项，查看\n       凭证存储。\n       \n\n下一次其他协作者从服务器上抓取数据时，他们会在本地生成一个远程分支 origin/serverfix，指向服务器的 serverfix 分支的引用：\n\n$ git fetch origin\nremote: counting objects: 7, done.\nremote: compressing objects: 100% (2/2), done.\nremote: total 3 (delta 0), reused 3 (delta 0)\nunpacking objects: 100% (3/3), done.\nfrom https://github.com/schacon/simplegit\n * [new branch]      serverfix    -> origin/serverfix\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n要特别注意的一点是当抓取到新的远程跟踪分支时，本地不会自动生成一份可编辑的副本（拷贝）。 换一句话说，这种情况下，不会有一个新的 serverfix 分支——只有一个不可以修改的 origin/serverfix 指针。\n\n可以运行 git merge origin/serverfix 将这些工作合并到当前所在的分支。 如果想要在自己的 serverfix 分支上工作，可以将其建立在远程跟踪分支之上：\n\n$ git checkout -b serverfix origin/serverfix\nbranch serverfix set up to track remote branch serverfix from origin.\nswitched to a new branch 'serverfix'\n\n\n1\n2\n3\n\n\n这会给你一个用于工作的本地分支，并且起点位于 origin/serverfix。\n\n\n# 跟踪分支\n\n从一个远程跟踪分支检出一个本地分支会自动创建所谓的“跟踪分支”（它跟踪的分支叫做“上游分支”）。 跟踪分支是与远程分支有直接关系的本地分支。 如果在一个跟踪分支上输入 git pull，git 能自动地识别去哪个服务器上抓取、合并到哪个分支。\n\n当克隆一个仓库时，它通常会自动地创建一个跟踪 origin/master 的 master 分支。 然而，如果你愿意的话可以设置其他的跟踪分支，或是一个在其他远程仓库上的跟踪分支，又或者不跟踪 master 分支。 最简单的实例就是像之前看到的那样，运行 git checkout -b <branch> <remote>/<branch>。 这是一个十分常用的操作所以 git 提供了 --track 快捷方式：\n\n$ git checkout --track origin/serverfix\nbranch serverfix set up to track remote branch serverfix from origin.\nswitched to a new branch 'serverfix'\n\n\n1\n2\n3\n\n\n由于这个操作太常用了，该捷径本身还有一个捷径。 如果你尝试检出的分支 (a) 不存在且 (b) 刚好只有一个名字与之匹配的远程分支，那么 git 就会为你创建一个跟踪分支：\n\n$ git checkout serverfix\nbranch serverfix set up to track remote branch serverfix from origin.\nswitched to a new branch 'serverfix'\n\n\n1\n2\n3\n\n\n如果想要将本地分支与远程分支设置为不同的名字，你可以轻松地使用上一个命令增加一个不同名字的本地分支：\n\n$ git checkout -b sf origin/serverfix\nbranch sf set up to track remote branch serverfix from origin.\nswitched to a new branch 'sf'\n\n\n1\n2\n3\n\n\n现在，本地分支 sf 会自动从 origin/serverfix 拉取。\n\n设置已有的本地分支跟踪一个刚刚拉取下来的远程分支，或者想要修改正在跟踪的上游分支， 你可以在任意时间使用 -u 或 --set-upstream-to 选项运行 git branch 来显式地设置。\n\n$ git branch -u origin/serverfix\nbranch serverfix set up to track remote branch serverfix from origin.\n\n\n1\n2\n\n\nnote   上游快捷方式当设置好跟踪分支后，可以通过简写 @{upstream} 或 @{u} 来引用它的上游分支。 所以在\n       master 分支时并且它正在跟踪 origin/master 时，如果愿意的话可以使用 git merge @{u}\n       来取代 git merge origin/master。\n       \n\n\n# 查看跟踪分支\n\n如果想要查看设置的所有跟踪分支，可以使用 git branch 的 -vv 选项。 这会将所有的本地分支列出来并且包含更多的信息，如每一个分支正在跟踪哪个远程分支与本地分支是否是领先、落后或是都有。\n\n$ git branch -vv\n  iss53     7e424c3 [origin/iss53: ahead 2] forgot the brackets\n  master    1ae2a45 [origin/master] deploying index fix\n* serverfix f8674d9 [teamone/server-fix-good: ahead 3, behind 1] this should do it\n  testing   5ea463a trying something new\n\n\n1\n2\n3\n4\n5\n\n\n这里可以看到 iss53 分支正在跟踪 origin/iss53 并且 “ahead” 是 2，意味着本地有两个提交还没有推送到服务器上。 也能看到 master 分支正在跟踪 origin/master 分支并且是最新的。 接下来可以看到 serverfix 分支正在跟踪 teamone 服务器上的 server-fix-good 分支并且领先 3 落后 1， 意味着服务器上有一次提交还没有合并入同时本地有三次提交还没有推送。 最后看到 testing 分支并没有跟踪任何远程分支。\n\n需要重点注意的一点是这些数字的值来自于你从每个服务器上最后一次抓取的数据。 这个命令并没有连接服务器，它只会告诉你关于本地缓存的服务器数据。 如果想要统计最新的领先与落后数字，需要在运行此命令前抓取所有的远程仓库。 可以像这样做：\n\n$ git fetch --all; git branch -vv\n\n\n1\n\n\n\n# 拉取\n\n当 git fetch 命令从服务器上抓取本地没有的数据时，它并不会修改工作目录中的内容。 它只会获取数据然后让你自己合并。 然而，有一个命令叫作 git pull 在大多数情况下它的含义是一个 git fetch 紧接着一个 git merge 命令。 如果有一个像之前章节中演示的设置好的跟踪分支，不管它是显式地设置还是通过 clone 或 checkout 命令为你创建的，git pull 都会查找当前分支所跟踪的服务器与分支， 从服务器上抓取数据然后尝试合并入那个远程分支。\n\n由于 git pull 的魔法经常令人困惑所以通常单独显式地使用 fetch 与 merge 命令会更好一些。\n\n\n# 删除远程分支\n\n假设你已经通过远程分支做完所有的工作了——也就是说你和你的协作者已经完成了一个特性， 并且将其合并到了远程仓库的 master 分支（或任何其他稳定代码分支）。 可以运行带有 --delete 选项的 git push 命令来删除一个远程分支。 如果想要从服务器上删除 serverfix 分支，运行下面的命令：\n\n$ git push origin --delete serverfix\nto https://github.com/schacon/simplegit\n - [deleted]         serverfix\n\n\n1\n2\n3\n\n\n基本上这个命令做的只是从服务器上移除这个指针。 git 服务器通常会保留数据一段时间直到垃圾回收运行，所以如果不小心删除掉了，通常是很容易恢复的。",charsets:{cjk:!0}},{title:"Git工具-查看修订版本",frontmatter:{title:"Git工具-查看修订版本",date:"2020-11-18T17:43:57.000Z",permalink:"/pages/c984d1/",categories:["《Git》学习笔记"],tags:["Git"],readingShow:"top"},regularPath:"/06.%E4%B9%A6%E7%B1%8D/10.%E3%80%8AGit%E3%80%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/20.%E6%96%87%E6%A1%A3%E7%AC%94%E8%AE%B0/80.Git%E5%B7%A5%E5%85%B7-%E6%9F%A5%E7%9C%8B%E4%BF%AE%E8%AE%A2%E7%89%88%E6%9C%AC.html",relativePath:"06.书籍/10.《Git》学习笔记/20.文档笔记/80.Git工具-查看修订版本.md",key:"v-79984a3c",path:"/pages/c984d1/",headers:[{level:2,title:"单个修订版本",slug:"单个修订版本",normalizedTitle:"单个修订版本",charIndex:91},{level:2,title:"简短的 SHA-1",slug:"简短的-sha-1",normalizedTitle:"简短的 sha-1",charIndex:181},{level:3,title:"查看给定SHA-1值的提交",slug:"查看给定sha-1值的提交",normalizedTitle:"查看给定sha-1值的提交",charIndex:956},{level:2,title:"分支引用",slug:"分支引用",normalizedTitle:"分支引用",charIndex:2176},{level:3,title:"查看最后一次提交",slug:"查看最后一次提交",normalizedTitle:"查看最后一次提交",charIndex:2251},{level:2,title:"引用日志",slug:"引用日志",normalizedTitle:"引用日志",charIndex:2695},{level:3,title:"HEAD的指向历史",slug:"head的指向历史",normalizedTitle:"head的指向历史",charIndex:2704},{level:2,title:"祖先引用",slug:"祖先引用",normalizedTitle:"祖先引用",charIndex:4612},{level:2,title:"提交区间",slug:"提交区间",normalizedTitle:"提交区间",charIndex:6633},{level:3,title:"双点",slug:"双点",normalizedTitle:"双点",charIndex:6734},{level:4,title:"查看即将推送到远端的内容",slug:"查看即将推送到远端的内容",normalizedTitle:"查看即将推送到远端的内容",charIndex:7261},{level:3,title:"多点",slug:"多点",normalizedTitle:"多点",charIndex:7605},{level:3,title:"三点",slug:"三点",normalizedTitle:"三点",charIndex:8031}],lastUpdated:"2022/9/22 下午4:28:09",lastUpdatedTimestamp:1663835289e3,headersStr:"单个修订版本 简短的 SHA-1 查看给定SHA-1值的提交 分支引用 查看最后一次提交 引用日志 HEAD的指向历史 祖先引用 提交区间 双点 查看即将推送到远端的内容 多点 三点",content:"# Git工具-查看修订版本\n\nGit 能够以多种方式来指定单个提交、一组提交、或者一定范围内的提交。 了解它们并不是必需的，但是了解一下总没坏处。\n\n修订版本指的是：提交\n\n\n# 单个修订版本\n\n你可以通过任意一个提交的 40 个字符的完整 SHA-1 散列值来指定它， 不过还有很多更人性化的方式来做同样的事情。本节将会介绍获取单个提交的多种方法。\n\n\n# 简短的 SHA-1\n\nGit 十分智能，你只需要提供 SHA-1 的前几个字符就可以获得对应的那次提交， 当然你提供的 SHA-1 字符数量不得少于 4 个，并且没有歧义——也就是说， 当前对象数据库中没有其它对象以这段 SHA-1 开头。\n\n例如，要查看你知道其中添加了某个功能的提交，首先运行 git log 命令来定位该提交：\n\n$ git log\ncommit 734713bc047d87bf7eac9674765ae793478c50d3\nAuthor: Scott Chacon <schacon@gmail.com>\nDate:   Fri Jan 2 18:32:33 2009 -0800\n\n    fixed refs handling, added gc auto, updated tests\n\ncommit d921970aadf03b3cf0e71becdaab3147ba71cdef\nMerge: 1c002dd... 35cfb2b...\nAuthor: Scott Chacon <schacon@gmail.com>\nDate:   Thu Dec 11 15:08:43 2008 -0800\n\n    Merge commit 'phedders/rdocs'\n\ncommit 1c002dd4b536e7479fe34593e72e6c6c1819e53b\nAuthor: Scott Chacon <schacon@gmail.com>\nDate:   Thu Dec 11 14:58:32 2008 -0800\n\n    added some blame and merge stuff\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\n\n# 查看给定SHA-1值的提交\n\n在本例中，假设你想要的提交其 SHA-1 以 1c002dd.... 开头， 那么你可以用如下几种 git show 的变体来检视该提交（假设简短的版本没有歧义）：\n\n$ git show 1c002dd4b536e7479fe34593e72e6c6c1819e53b\n$ git show 1c002dd4b536e7479f\n$ git show 1c002d\n\n\n1\n2\n3\n\n\nGit 可以为 SHA-1 值生成出简短且唯一的缩写。 如果你在 git log 后加上 --abbrev-commit 参数，输出结果里就会显示简短且唯一的值； 默认使用七个字符，不过有时为了避免 SHA-1 的歧义，会增加字符数：\n\n$ git log --abbrev-commit --pretty=oneline\nca82a6d changed the version number\n085bb3b removed unnecessary test code\na11bef0 first commit\n\n\n1\n2\n3\n4\n\n\n通常 8 到 10 个字符就已经足够在一个项目中避免 SHA-1 的歧义。 例如，到 2019 年 2 月为止，Linux 内核这个相当大的 Git 项目， 其对象数据库中有超过 875,000 个提交，包含七百万个对象，也只需要前 12 个字符就能保证唯一性。\n\nNOTE   关于 SHA-1 的简短说明许多人觉得他们的仓库里有可能出现两个不同的对象其 SHA-1 值相同。\n       然后呢？如果你真的向仓库里提交了一个对象，它跟之前的某个不同 对象的 SHA-1 值相同， GIT\n       会发现该对象的散列值已经存在于仓库里了，于是就会认为该对象被写入，然后直接使用它。\n       如果之后你想检出那个对象时，你将得到先前那个对象的数据。但是这种情况发生的概率十分渺小。 SHA-1 摘要长度是 20\n       字节，也就是 160 位。 2^80 个随机哈希对象才有 50% 的概率出现一次冲突 （计算冲突机率的公式是 P =\n       (N(N-1)/2) * (1/2^160)) ）。 2^80 是 1.2 X\n       10^24，也就是一亿亿亿，这是地球上沙粒总数的 1200 倍。举例说一下怎样才能产生一次 SHA-1 冲突。\n       如果地球上 65 亿个人类都在编程，每人每秒都在产生等价于整个 LINUX 内核历史（650 万个 GIT\n       对象）的代码， 并将之提交到一个巨大的 GIT 仓库里面，这样持续两年的时间才会产生足够的对象， 使其拥有 50%\n       的概率产生一次 SHA-1 对象冲突， 这比你编程团队的成员同一个晚上在互不相干的意外中被狼袭击并杀死的机率还要小。\n       \n\n\n# 分支引用\n\n引用特定提交的一种直接方法是，若它是一个分支的顶端的提交， 那么可以在任何需要引用该提交的 Git 命令中直接使用该分支的名称。\n\n\n# 查看最后一次提交\n\n例如，你想要查看一个分支的最后一次提交的对象，假设 topic1 分支指向提交 ca82a6d... ， 那么以下的命令是等价的：\n\n$ git show ca82a6dff817ec66f44342007202690a93763949\n$ git show topic1  # topic1是分支名\n\n\n1\n2\n\n\n如果你想知道某个分支指向哪个特定的 SHA-1，或者想看任何一个例子中被简写的 SHA-1， 你可以使用一个叫做 rev-parse 的 Git 探测工具。 你可以在 Git 内部原理 中查看更多关于探测工具的信息。 简单来说，rev-parse 是为了底层操作而不是日常操作设计的。 不过，有时你想看 Git 现在到底处于什么状态时，它可能会很有用。 你可以在你的分支上执行 rev-parse\n\n$ git rev-parse topic1\nca82a6dff817ec66f44342007202690a93763949\n\n\n1\n2\n\n\n\n# 引用日志\n\n\n# HEAD的指向历史\n\n当你在工作时， Git 会在后台保存一个引用日志（reflog）， 引用日志记录了最近几个月你的 HEAD 和分支引用所指向的历史。\n\n你可以使用 git reflog 来查看引用日志\n\n$ git reflog\n734713b HEAD@{0}: commit: fixed refs handling, added gc auto, updated\nd921970 HEAD@{1}: merge phedders/rdocs: Merge made by the 'recursive' strategy.\n1c002dd HEAD@{2}: commit: added some blame and merge stuff\n1c36188 HEAD@{3}: rebase -i (squash): updating HEAD\n95df984 HEAD@{4}: commit: # This is a combination of two commits.\n1c36188 HEAD@{5}: rebase -i (squash): updating HEAD\n7e05da5 HEAD@{6}: rebase -i (pick): updating HEAD\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n每当你的 HEAD 所指向的位置发生了变化，Git 就会将这个信息存储到引用日志这个历史记录里。 你也可以通过 reflog 数据来获取之前的提交历史。 如果你想查看仓库中 HEAD 在五次前的所指向的提交，你可以使用 @{n} 来引用 reflog 中输出的提交记录。\n\n$ git show HEAD@{5}\n\n\n1\n\n\n你同样可以使用这个语法来查看某个分支在一定时间前的位置。 例如，查看你的 master 分支在昨天的时候指向了哪个提交，你可以输入\n\n$ git show master@{yesterday}\n\n\n1\n\n\n就会显示昨天 master 分支的顶端指向了哪个提交。 这个方法只对还在你引用日志里的数据有用，所以不能用来查好几个月之前的提交。\n\n可以运行 git log -g 来查看类似于 git log 输出格式的引用日志信息：\n\n$ git log -g master\ncommit 734713bc047d87bf7eac9674765ae793478c50d3\nReflog: master@{0} (Scott Chacon <schacon@gmail.com>)\nReflog message: commit: fixed refs handling, added gc auto, updated\nAuthor: Scott Chacon <schacon@gmail.com>\nDate:   Fri Jan 2 18:32:33 2009 -0800\n\n    fixed refs handling, added gc auto, updated tests\n\ncommit d921970aadf03b3cf0e71becdaab3147ba71cdef\nReflog: master@{1} (Scott Chacon <schacon@gmail.com>)\nReflog message: merge phedders/rdocs: Merge made by recursive.\nAuthor: Scott Chacon <schacon@gmail.com>\nDate:   Thu Dec 11 15:08:43 2008 -0800\n\n    Merge commit 'phedders/rdocs'\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n值得注意的是，引用日志只存在于本地仓库，它只是一个记录你在 自己 的仓库里做过什么的日志。 其他人拷贝的仓库里的引用日志不会和你的相同，而你新克隆一个仓库的时候，引用日志是空的，因为你在仓库里还没有操作。 git show HEAD@{2.months.ago} 这条命令只有在你克隆了一个项目至少两个月时才会显示匹配的提交—— 如果你刚刚克隆了仓库，那么它将不会有任何结果返回。\n\nTIP   将引用日志想作 GIT 版的 SHELL 历史记录如果你有 UNIX 或者 LINUX 的背景，不妨将引用日志想作\n      GIT 版的 SHELL 历史记录， 重点在于仅与你和你的会话相关，而与他人无关。\n      \n\n\n# 祖先引用\n\n祖先引用是另一种指明一个提交的方式。 如果你在引用的尾部加上一个 ^（脱字符）， Git 会将其解析为该引用的上一个提交。 假设你的提交历史是：\n\n$ git log --pretty=format:'%h %s' --graph\n* 734713b fixed refs handling, added gc auto, updated tests\n*   d921970 Merge commit 'phedders/rdocs'\n|\\\n| * 35cfb2b Some rdoc changes\n* | 1c002dd added some blame and merge stuff\n|/\n* 1c36188 ignore *.gem\n* 9b29157 add open3_detach to gemspec file list\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n你可以使用 HEAD^ 来查看上一个提交，也就是 “HEAD 的父提交”：\n\n$ git show HEAD^\ncommit d921970aadf03b3cf0e71becdaab3147ba71cdef\nMerge: 1c002dd... 35cfb2b...\nAuthor: Scott Chacon <schacon@gmail.com>\nDate:   Thu Dec 11 15:08:43 2008 -0800\n\n    Merge commit 'phedders/rdocs'\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\nNOTE   在 WINDOWS 上转义脱字符在 WINDOWS 的 CMD.EXE 中，^ 是一个特殊字符，因此需要区别对待。\n       你可以双写它或者将提交引用放在引号中：$ GIT SHOW HEAD^ # 在 WINDOWS 上无法工作 $ GIT\n       SHOW HEAD^^ # 可以 $ GIT SHOW \"HEAD^\" # 可以\n       \n\n你也可以在 ^ 后面添加一个数字来指明想要 哪一个 父提交——例如 d921970^2 代表 “d921970 的第二父提交” 这个语法只适用于合并的提交，因为合并提交会有多个父提交。 合并提交的第一父提交是你合并时所在分支（通常为 master），而第二父提交是你所合并的分支（例如 topic）：\n\n$ git show d921970^\ncommit 1c002dd4b536e7479fe34593e72e6c6c1819e53b\nAuthor: Scott Chacon <schacon@gmail.com>\nDate:   Thu Dec 11 14:58:32 2008 -0800\n\n    added some blame and merge stuff\n\n$ git show d921970^2\ncommit 35cfb2b795a55793d7cc56a6cc2060b4bb732548\nAuthor: Paul Hedderly <paul+git@mjr.org>\nDate:   Wed Dec 10 22:22:03 2008 +0000\n\n    Some rdoc changes\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n另一种指明祖先提交的方法是 ~（波浪号）。 同样是指向第一父提交，因此 HEAD~ 和 HEAD^ 是等价的。 而区别在于你在后面加数字的时候。 HEAD~2 代表“第一父提交的第一父提交”，也就是“祖父提交”——Git 会根据你指定的次数获取对应的第一父提交。 例如，在之前的列出的提交历史中，HEAD~3 就是\n\n$ git show HEAD~3\ncommit 1c3618887afb5fbcbea25b7c013f4e2114448b8d\nAuthor: Tom Preston-Werner <tom@mojombo.com>\nDate:   Fri Nov 7 13:47:59 2008 -0500\n\n    ignore *.gem\n\n\n1\n2\n3\n4\n5\n6\n\n\n也可以写成 HEAD~~~，也是第一父提交的第一父提交的第一父提交：\n\n$ git show HEAD~~~\ncommit 1c3618887afb5fbcbea25b7c013f4e2114448b8d\nAuthor: Tom Preston-Werner <tom@mojombo.com>\nDate:   Fri Nov 7 13:47:59 2008 -0500\n\n    ignore *.gem\n\n\n1\n2\n3\n4\n5\n6\n\n\n你也可以组合使用这两个语法——你可以通过 HEAD~3^2 来取得之前引用的第二父提交（假设它是一个合并提交）。\n\n\n# 提交区间\n\n你已经学会如何单次的提交，现在来看看如何指明一定区间的提交。 当你有很多分支时，这对管理你的分支时十分有用， 你可以用提交区间来解决“这个分支还有哪些提交尚未合并到主分支？”的问题\n\n\n# 双点\n\n最常用的指明提交区间语法是双点。 这种语法可以让 Git 选出在一个分支中而不在另一个分支中的提交。 例如，你有如下的提交历史 Example history for range selection.\n\n\n\nFigure 137. Example history for range selection.\n\n你想要查看 experiment 分支中还有哪些提交尚未被合并入 master 分支。 你可以使用 master..experiment 来让 Git 显示这些提交。也就是“在 experiment 分支中而不在 master 分支中的提交”。 为了使例子简单明了，我使用了示意图中提交对象的字母来代替真实日志的输出，所以会显示：\n\n$ git log master..experiment\nD\nC\n\n\n1\n2\n3\n\n\n反过来，如果你想查看在 master 分支中而不在 experiment 分支中的提交，你只要交换分支名即可。 experiment..master 会显示在 master 分支中而不在 experiment 分支中的提交：\n\n$ git log experiment..master\nF\nE\n\n\n1\n2\n3\n\n\n# 查看即将推送到远端的内容\n\n这可以让你保持 experiment 分支跟随最新的进度以及查看你即将合并的内容。 另一个常用的场景是查看你即将推送到远端的内容：\n\n$ git log origin/master..HEAD\n\n\n1\n\n\n这个命令会输出在你当前分支中而不在远程 origin 中的提交。 如果你执行 git push 并且你的当前分支正在跟踪 origin/master，由 git log origin/master..HEAD 所输出的提交就是会被传输到远端服务器的提交。如果你留空了其中的一边， Git 会默认为 HEAD。 例如， git log origin/master.. 将会输出与之前例子相同的结果 —— Git 使用 HEAD 来代替留空的一边。\n\n\n# 多点\n\n双点语法很好用，但有时候你可能需要两个以上的分支才能确定你所需要的修订， 比如查看哪些提交是被包含在某些分支中的一个，但是不在你当前的分支上。 Git 允许你在任意引用前加上 ^ 字符或者 --not 来指明你不希望提交被包含其中的分支。 因此下列三个命令是等价的：\n\n$ git log refA..refB\n$ git log ^refA refB\n$ git log refB --not refA\n\n\n1\n2\n3\n\n\n这个语法很好用，因为你可以在查询中指定超过两个的引用，这是双点语法无法实现的。 比如，你想查看所有被 refA 或 refB 包含的但是不被 refC 包含的提交，你可以使用以下任意一个命令：\n\n$ git log refA refB ^refC\n$ git log refA refB --not refC\n\n\n1\n2\n\n\n这就构成了一个十分强大的修订查询系统，你可以通过它来查看你的分支里包含了哪些东西。\n\n\n# 三点\n\n最后一种主要的区间选择语法是三点，这个语法可以选择出被两个引用 之一 包含但又不被两者同时包含的提交。 再看看之前双点例子中的提交历史。 如果你想看 master 或者 experiment 中包含的但不是两者共有的提交，你可以执行：\n\n$ git log master...experiment\nF\nE\nD\nC\n\n\n1\n2\n3\n4\n5\n\n\n这和通常 log 按日期排序的输出一样，仅仅给出了4个提交的信息。\n\n这种情形下，log 命令的一个常用参数是 --left-right，它会显示每个提交到底处于哪一侧的分支。 这会让输出数据更加清晰。\n\n$ git log --left-right master...experiment\n< F\n< E\n> D\n> C\n\n\n1\n2\n3\n4\n5\n\n\n有了这些工具，你就可以十分方便地查看你 Git 仓库中的提交。",normalizedContent:"# git工具-查看修订版本\n\ngit 能够以多种方式来指定单个提交、一组提交、或者一定范围内的提交。 了解它们并不是必需的，但是了解一下总没坏处。\n\n修订版本指的是：提交\n\n\n# 单个修订版本\n\n你可以通过任意一个提交的 40 个字符的完整 sha-1 散列值来指定它， 不过还有很多更人性化的方式来做同样的事情。本节将会介绍获取单个提交的多种方法。\n\n\n# 简短的 sha-1\n\ngit 十分智能，你只需要提供 sha-1 的前几个字符就可以获得对应的那次提交， 当然你提供的 sha-1 字符数量不得少于 4 个，并且没有歧义——也就是说， 当前对象数据库中没有其它对象以这段 sha-1 开头。\n\n例如，要查看你知道其中添加了某个功能的提交，首先运行 git log 命令来定位该提交：\n\n$ git log\ncommit 734713bc047d87bf7eac9674765ae793478c50d3\nauthor: scott chacon <schacon@gmail.com>\ndate:   fri jan 2 18:32:33 2009 -0800\n\n    fixed refs handling, added gc auto, updated tests\n\ncommit d921970aadf03b3cf0e71becdaab3147ba71cdef\nmerge: 1c002dd... 35cfb2b...\nauthor: scott chacon <schacon@gmail.com>\ndate:   thu dec 11 15:08:43 2008 -0800\n\n    merge commit 'phedders/rdocs'\n\ncommit 1c002dd4b536e7479fe34593e72e6c6c1819e53b\nauthor: scott chacon <schacon@gmail.com>\ndate:   thu dec 11 14:58:32 2008 -0800\n\n    added some blame and merge stuff\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\n\n# 查看给定sha-1值的提交\n\n在本例中，假设你想要的提交其 sha-1 以 1c002dd.... 开头， 那么你可以用如下几种 git show 的变体来检视该提交（假设简短的版本没有歧义）：\n\n$ git show 1c002dd4b536e7479fe34593e72e6c6c1819e53b\n$ git show 1c002dd4b536e7479f\n$ git show 1c002d\n\n\n1\n2\n3\n\n\ngit 可以为 sha-1 值生成出简短且唯一的缩写。 如果你在 git log 后加上 --abbrev-commit 参数，输出结果里就会显示简短且唯一的值； 默认使用七个字符，不过有时为了避免 sha-1 的歧义，会增加字符数：\n\n$ git log --abbrev-commit --pretty=oneline\nca82a6d changed the version number\n085bb3b removed unnecessary test code\na11bef0 first commit\n\n\n1\n2\n3\n4\n\n\n通常 8 到 10 个字符就已经足够在一个项目中避免 sha-1 的歧义。 例如，到 2019 年 2 月为止，linux 内核这个相当大的 git 项目， 其对象数据库中有超过 875,000 个提交，包含七百万个对象，也只需要前 12 个字符就能保证唯一性。\n\nnote   关于 sha-1 的简短说明许多人觉得他们的仓库里有可能出现两个不同的对象其 sha-1 值相同。\n       然后呢？如果你真的向仓库里提交了一个对象，它跟之前的某个不同 对象的 sha-1 值相同， git\n       会发现该对象的散列值已经存在于仓库里了，于是就会认为该对象被写入，然后直接使用它。\n       如果之后你想检出那个对象时，你将得到先前那个对象的数据。但是这种情况发生的概率十分渺小。 sha-1 摘要长度是 20\n       字节，也就是 160 位。 2^80 个随机哈希对象才有 50% 的概率出现一次冲突 （计算冲突机率的公式是 p =\n       (n(n-1)/2) * (1/2^160)) ）。 2^80 是 1.2 x\n       10^24，也就是一亿亿亿，这是地球上沙粒总数的 1200 倍。举例说一下怎样才能产生一次 sha-1 冲突。\n       如果地球上 65 亿个人类都在编程，每人每秒都在产生等价于整个 linux 内核历史（650 万个 git\n       对象）的代码， 并将之提交到一个巨大的 git 仓库里面，这样持续两年的时间才会产生足够的对象， 使其拥有 50%\n       的概率产生一次 sha-1 对象冲突， 这比你编程团队的成员同一个晚上在互不相干的意外中被狼袭击并杀死的机率还要小。\n       \n\n\n# 分支引用\n\n引用特定提交的一种直接方法是，若它是一个分支的顶端的提交， 那么可以在任何需要引用该提交的 git 命令中直接使用该分支的名称。\n\n\n# 查看最后一次提交\n\n例如，你想要查看一个分支的最后一次提交的对象，假设 topic1 分支指向提交 ca82a6d... ， 那么以下的命令是等价的：\n\n$ git show ca82a6dff817ec66f44342007202690a93763949\n$ git show topic1  # topic1是分支名\n\n\n1\n2\n\n\n如果你想知道某个分支指向哪个特定的 sha-1，或者想看任何一个例子中被简写的 sha-1， 你可以使用一个叫做 rev-parse 的 git 探测工具。 你可以在 git 内部原理 中查看更多关于探测工具的信息。 简单来说，rev-parse 是为了底层操作而不是日常操作设计的。 不过，有时你想看 git 现在到底处于什么状态时，它可能会很有用。 你可以在你的分支上执行 rev-parse\n\n$ git rev-parse topic1\nca82a6dff817ec66f44342007202690a93763949\n\n\n1\n2\n\n\n\n# 引用日志\n\n\n# head的指向历史\n\n当你在工作时， git 会在后台保存一个引用日志（reflog）， 引用日志记录了最近几个月你的 head 和分支引用所指向的历史。\n\n你可以使用 git reflog 来查看引用日志\n\n$ git reflog\n734713b head@{0}: commit: fixed refs handling, added gc auto, updated\nd921970 head@{1}: merge phedders/rdocs: merge made by the 'recursive' strategy.\n1c002dd head@{2}: commit: added some blame and merge stuff\n1c36188 head@{3}: rebase -i (squash): updating head\n95df984 head@{4}: commit: # this is a combination of two commits.\n1c36188 head@{5}: rebase -i (squash): updating head\n7e05da5 head@{6}: rebase -i (pick): updating head\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n每当你的 head 所指向的位置发生了变化，git 就会将这个信息存储到引用日志这个历史记录里。 你也可以通过 reflog 数据来获取之前的提交历史。 如果你想查看仓库中 head 在五次前的所指向的提交，你可以使用 @{n} 来引用 reflog 中输出的提交记录。\n\n$ git show head@{5}\n\n\n1\n\n\n你同样可以使用这个语法来查看某个分支在一定时间前的位置。 例如，查看你的 master 分支在昨天的时候指向了哪个提交，你可以输入\n\n$ git show master@{yesterday}\n\n\n1\n\n\n就会显示昨天 master 分支的顶端指向了哪个提交。 这个方法只对还在你引用日志里的数据有用，所以不能用来查好几个月之前的提交。\n\n可以运行 git log -g 来查看类似于 git log 输出格式的引用日志信息：\n\n$ git log -g master\ncommit 734713bc047d87bf7eac9674765ae793478c50d3\nreflog: master@{0} (scott chacon <schacon@gmail.com>)\nreflog message: commit: fixed refs handling, added gc auto, updated\nauthor: scott chacon <schacon@gmail.com>\ndate:   fri jan 2 18:32:33 2009 -0800\n\n    fixed refs handling, added gc auto, updated tests\n\ncommit d921970aadf03b3cf0e71becdaab3147ba71cdef\nreflog: master@{1} (scott chacon <schacon@gmail.com>)\nreflog message: merge phedders/rdocs: merge made by recursive.\nauthor: scott chacon <schacon@gmail.com>\ndate:   thu dec 11 15:08:43 2008 -0800\n\n    merge commit 'phedders/rdocs'\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n值得注意的是，引用日志只存在于本地仓库，它只是一个记录你在 自己 的仓库里做过什么的日志。 其他人拷贝的仓库里的引用日志不会和你的相同，而你新克隆一个仓库的时候，引用日志是空的，因为你在仓库里还没有操作。 git show head@{2.months.ago} 这条命令只有在你克隆了一个项目至少两个月时才会显示匹配的提交—— 如果你刚刚克隆了仓库，那么它将不会有任何结果返回。\n\ntip   将引用日志想作 git 版的 shell 历史记录如果你有 unix 或者 linux 的背景，不妨将引用日志想作\n      git 版的 shell 历史记录， 重点在于仅与你和你的会话相关，而与他人无关。\n      \n\n\n# 祖先引用\n\n祖先引用是另一种指明一个提交的方式。 如果你在引用的尾部加上一个 ^（脱字符）， git 会将其解析为该引用的上一个提交。 假设你的提交历史是：\n\n$ git log --pretty=format:'%h %s' --graph\n* 734713b fixed refs handling, added gc auto, updated tests\n*   d921970 merge commit 'phedders/rdocs'\n|\\\n| * 35cfb2b some rdoc changes\n* | 1c002dd added some blame and merge stuff\n|/\n* 1c36188 ignore *.gem\n* 9b29157 add open3_detach to gemspec file list\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n你可以使用 head^ 来查看上一个提交，也就是 “head 的父提交”：\n\n$ git show head^\ncommit d921970aadf03b3cf0e71becdaab3147ba71cdef\nmerge: 1c002dd... 35cfb2b...\nauthor: scott chacon <schacon@gmail.com>\ndate:   thu dec 11 15:08:43 2008 -0800\n\n    merge commit 'phedders/rdocs'\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\nnote   在 windows 上转义脱字符在 windows 的 cmd.exe 中，^ 是一个特殊字符，因此需要区别对待。\n       你可以双写它或者将提交引用放在引号中：$ git show head^ # 在 windows 上无法工作 $ git\n       show head^^ # 可以 $ git show \"head^\" # 可以\n       \n\n你也可以在 ^ 后面添加一个数字来指明想要 哪一个 父提交——例如 d921970^2 代表 “d921970 的第二父提交” 这个语法只适用于合并的提交，因为合并提交会有多个父提交。 合并提交的第一父提交是你合并时所在分支（通常为 master），而第二父提交是你所合并的分支（例如 topic）：\n\n$ git show d921970^\ncommit 1c002dd4b536e7479fe34593e72e6c6c1819e53b\nauthor: scott chacon <schacon@gmail.com>\ndate:   thu dec 11 14:58:32 2008 -0800\n\n    added some blame and merge stuff\n\n$ git show d921970^2\ncommit 35cfb2b795a55793d7cc56a6cc2060b4bb732548\nauthor: paul hedderly <paul+git@mjr.org>\ndate:   wed dec 10 22:22:03 2008 +0000\n\n    some rdoc changes\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n另一种指明祖先提交的方法是 ~（波浪号）。 同样是指向第一父提交，因此 head~ 和 head^ 是等价的。 而区别在于你在后面加数字的时候。 head~2 代表“第一父提交的第一父提交”，也就是“祖父提交”——git 会根据你指定的次数获取对应的第一父提交。 例如，在之前的列出的提交历史中，head~3 就是\n\n$ git show head~3\ncommit 1c3618887afb5fbcbea25b7c013f4e2114448b8d\nauthor: tom preston-werner <tom@mojombo.com>\ndate:   fri nov 7 13:47:59 2008 -0500\n\n    ignore *.gem\n\n\n1\n2\n3\n4\n5\n6\n\n\n也可以写成 head~~~，也是第一父提交的第一父提交的第一父提交：\n\n$ git show head~~~\ncommit 1c3618887afb5fbcbea25b7c013f4e2114448b8d\nauthor: tom preston-werner <tom@mojombo.com>\ndate:   fri nov 7 13:47:59 2008 -0500\n\n    ignore *.gem\n\n\n1\n2\n3\n4\n5\n6\n\n\n你也可以组合使用这两个语法——你可以通过 head~3^2 来取得之前引用的第二父提交（假设它是一个合并提交）。\n\n\n# 提交区间\n\n你已经学会如何单次的提交，现在来看看如何指明一定区间的提交。 当你有很多分支时，这对管理你的分支时十分有用， 你可以用提交区间来解决“这个分支还有哪些提交尚未合并到主分支？”的问题\n\n\n# 双点\n\n最常用的指明提交区间语法是双点。 这种语法可以让 git 选出在一个分支中而不在另一个分支中的提交。 例如，你有如下的提交历史 example history for range selection.\n\n\n\nfigure 137. example history for range selection.\n\n你想要查看 experiment 分支中还有哪些提交尚未被合并入 master 分支。 你可以使用 master..experiment 来让 git 显示这些提交。也就是“在 experiment 分支中而不在 master 分支中的提交”。 为了使例子简单明了，我使用了示意图中提交对象的字母来代替真实日志的输出，所以会显示：\n\n$ git log master..experiment\nd\nc\n\n\n1\n2\n3\n\n\n反过来，如果你想查看在 master 分支中而不在 experiment 分支中的提交，你只要交换分支名即可。 experiment..master 会显示在 master 分支中而不在 experiment 分支中的提交：\n\n$ git log experiment..master\nf\ne\n\n\n1\n2\n3\n\n\n# 查看即将推送到远端的内容\n\n这可以让你保持 experiment 分支跟随最新的进度以及查看你即将合并的内容。 另一个常用的场景是查看你即将推送到远端的内容：\n\n$ git log origin/master..head\n\n\n1\n\n\n这个命令会输出在你当前分支中而不在远程 origin 中的提交。 如果你执行 git push 并且你的当前分支正在跟踪 origin/master，由 git log origin/master..head 所输出的提交就是会被传输到远端服务器的提交。如果你留空了其中的一边， git 会默认为 head。 例如， git log origin/master.. 将会输出与之前例子相同的结果 —— git 使用 head 来代替留空的一边。\n\n\n# 多点\n\n双点语法很好用，但有时候你可能需要两个以上的分支才能确定你所需要的修订， 比如查看哪些提交是被包含在某些分支中的一个，但是不在你当前的分支上。 git 允许你在任意引用前加上 ^ 字符或者 --not 来指明你不希望提交被包含其中的分支。 因此下列三个命令是等价的：\n\n$ git log refa..refb\n$ git log ^refa refb\n$ git log refb --not refa\n\n\n1\n2\n3\n\n\n这个语法很好用，因为你可以在查询中指定超过两个的引用，这是双点语法无法实现的。 比如，你想查看所有被 refa 或 refb 包含的但是不被 refc 包含的提交，你可以使用以下任意一个命令：\n\n$ git log refa refb ^refc\n$ git log refa refb --not refc\n\n\n1\n2\n\n\n这就构成了一个十分强大的修订查询系统，你可以通过它来查看你的分支里包含了哪些东西。\n\n\n# 三点\n\n最后一种主要的区间选择语法是三点，这个语法可以选择出被两个引用 之一 包含但又不被两者同时包含的提交。 再看看之前双点例子中的提交历史。 如果你想看 master 或者 experiment 中包含的但不是两者共有的提交，你可以执行：\n\n$ git log master...experiment\nf\ne\nd\nc\n\n\n1\n2\n3\n4\n5\n\n\n这和通常 log 按日期排序的输出一样，仅仅给出了4个提交的信息。\n\n这种情形下，log 命令的一个常用参数是 --left-right，它会显示每个提交到底处于哪一侧的分支。 这会让输出数据更加清晰。\n\n$ git log --left-right master...experiment\n< f\n< e\n> d\n> c\n\n\n1\n2\n3\n4\n5\n\n\n有了这些工具，你就可以十分方便地查看你 git 仓库中的提交。",charsets:{cjk:!0}},{title:"Git工具-交互式暂存",frontmatter:{title:"Git工具-交互式暂存",date:"2020-11-18T17:43:57.000Z",permalink:"/pages/76d859/",categories:["《Git》学习笔记"],tags:["Git"],readingShow:"top"},regularPath:"/06.%E4%B9%A6%E7%B1%8D/10.%E3%80%8AGit%E3%80%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/20.%E6%96%87%E6%A1%A3%E7%AC%94%E8%AE%B0/90.Git%E5%B7%A5%E5%85%B7-%E4%BA%A4%E4%BA%92%E5%BC%8F%E6%9A%82%E5%AD%98.html",relativePath:"06.书籍/10.《Git》学习笔记/20.文档笔记/90.Git工具-交互式暂存.md",key:"v-4ce962c9",path:"/pages/76d859/",headers:[{level:2,title:"暂存与取消暂存文件",slug:"暂存与取消暂存文件",normalizedTitle:"暂存与取消暂存文件",charIndex:751},{level:2,title:"暂存补丁",slug:"暂存补丁",normalizedTitle:"暂存补丁",charIndex:3468}],lastUpdated:"2022/9/22 下午4:28:09",lastUpdatedTimestamp:1663835289e3,headersStr:"暂存与取消暂存文件 暂存补丁",content:'# Git工具-交互式暂存\n\n本节中的几个交互式 Git 命令可以帮助你将文件的特定部分组合成提交。 当你在修改了大量文件后，希望这些改动能拆分为若干提交而不是混杂在一起成为一个提交时，这几个工具会非常有用。 通过这种方式，可以确保提交是逻辑上独立的变更集，同时也会使其他开发者在与你工作时很容易地审核。 如果运行 git add 时使用 -i 或者 --interactive 选项，Git 将会进入一个交互式终端模式，显示类似下面的东西：\n\n$ git add -i\n           staged     unstaged path\n  1:    unchanged        +0/-1 TODO\n  2:    unchanged        +1/-1 index.html\n  3:    unchanged        +5/-1 lib/simplegit.rb\n\n*** Commands ***\n  1: [s]tatus     2: [u]pdate      3: [r]evert     4: [a]dd untracked\n  5: [p]atch      6: [d]iff        7: [q]uit       8: [h]elp\nWhat now>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n可以看到这个命令以和平时非常不同的视图显示了暂存区——基本上与 git status 是相同的信息，但是更简明扼要一些。 它将暂存的修改列在左侧，未暂存的修改列在右侧。\n\n在这块区域后是“Commands”命令区域。 在这里你可以做一些工作，包括暂存文件、取消暂存文件、暂存文件的一部分、添加未被追踪的文件、显示暂存内容的区别。\n\n\n# 暂存与取消暂存文件\n\n如果在 What now> 提示符后键入 u 或 2（更新），它会问你想要暂存哪个文件：\n\nWhat now> u\n           staged     unstaged path\n  1:    unchanged        +0/-1 TODO\n  2:    unchanged        +1/-1 index.html\n  3:    unchanged        +5/-1 lib/simplegit.rb\nUpdate>>\n\n\n1\n2\n3\n4\n5\n6\n\n\n要暂存 TODO 和 index.html 文件，可以输入数字：\n\nUpdate>> 1,2\n           staged     unstaged path\n* 1:    unchanged        +0/-1 TODO\n* 2:    unchanged        +1/-1 index.html\n  3:    unchanged        +5/-1 lib/simplegit.rb\nUpdate>>\n\n\n1\n2\n3\n4\n5\n6\n\n\n每个文件前面的 * 意味着选中的文件将会被暂存。 如果在 Update>> 提示符后不输入任何东西并直接按回车，Git 将会暂存之前选择的文件：\n\nUpdate>>\nupdated 2 paths\n\n*** Commands ***\n  1: [s]tatus     2: [u]pdate      3: [r]evert     4: [a]dd untracked\n  5: [p]atch      6: [d]iff        7: [q]uit       8: [h]elp\nWhat now> s\n           staged     unstaged path\n  1:        +0/-1      nothing TODO\n  2:        +1/-1      nothing index.html\n  3:    unchanged        +5/-1 lib/simplegit.rb\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n现在可以看到 TODO 与 index.html 文件已经被暂存而 simplegit.rb 文件还未被暂存。 如果这时想要取消暂存 TODO 文件，使用 r 或 3（撤消）选项：\n\n*** Commands ***\n  1: [s]tatus     2: [u]pdate      3: [r]evert     4: [a]dd untracked\n  5: [p]atch      6: [d]iff        7: [q]uit       8: [h]elp\nWhat now> r\n           staged     unstaged path\n  1:        +0/-1      nothing TODO\n  2:        +1/-1      nothing index.html\n  3:    unchanged        +5/-1 lib/simplegit.rb\nRevert>> 1\n           staged     unstaged path\n* 1:        +0/-1      nothing TODO\n  2:        +1/-1      nothing index.html\n  3:    unchanged        +5/-1 lib/simplegit.rb\nRevert>> [enter]\nreverted one path\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n再次查看 Git 状态，可以看到已经取消暂存 TODO 文件：\n\n*** Commands ***\n  1: [s]tatus     2: [u]pdate      3: [r]evert     4: [a]dd untracked\n  5: [p]atch      6: [d]iff        7: [q]uit       8: [h]elp\nWhat now> s\n           staged     unstaged path\n  1:    unchanged        +0/-1 TODO\n  2:        +1/-1      nothing index.html\n  3:    unchanged        +5/-1 lib/simplegit.rb\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n如果想要查看已暂存内容的区别，可以使用 d 或 6（区别）命令。 它会显示暂存文件的一个列表，可以从中选择想要查看的暂存区别。 这跟你在命令行指定 git diff --cached 非常相似：\n\n*** Commands ***\n  1: [s]tatus     2: [u]pdate      3: [r]evert     4: [a]dd untracked\n  5: [p]atch      6: [d]iff        7: [q]uit       8: [h]elp\nWhat now> d\n           staged     unstaged path\n  1:        +1/-1      nothing index.html\nReview diff>> 1\ndiff --git a/index.html b/index.html\nindex 4d07108..4335f49 100644\n--- a/index.html\n+++ b/index.html\n@@ -16,7 +16,7 @@ Date Finder\n\n <p id="out">...</p>\n\n-<div id="footer">contact : support@github.com</div>\n+<div id="footer">contact : email.support@github.com</div>\n\n <script type="text/javascript">\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\n通过这些基本命令，可以使用交互式添加模式来轻松地处理暂存区。\n\n\n# 暂存补丁\n\nGit 也可以暂存文件的特定部分。 例如，如果在 simplegit.rb 文件中做了两处修改，但只想要暂存其中的一个而不是另一个，Git 会帮你轻松地完成。 在和上一节一样的交互式提示符中，输入 p 或 5（补丁）。 Git 会询问你想要部分暂存哪些文件；然后，对已选择文件的每一个部分，它都会一个个地显示文件区别并询问你是否想要暂存它们：\n\ndiff --git a/lib/simplegit.rb b/lib/simplegit.rb\nindex dd5ecc4..57399e0 100644\n--- a/lib/simplegit.rb\n+++ b/lib/simplegit.rb\n@@ -22,7 +22,7 @@ class SimpleGit\n   end\n\n   def log(treeish = \'master\')\n-    command("git log -n 25 #{treeish}")\n+    command("git log -n 30 #{treeish}")\n   end\n\n   def blame(path)\nStage this hunk [y,n,a,d,/,j,J,g,e,?]?\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n这时有很多选项。 输入 ? 显示所有可以使用的命令列表：\n\nStage this hunk [y,n,a,d,/,j,J,g,e,?]? ?\ny - stage this hunk\nn - do not stage this hunk\na - stage this and all the remaining hunks in the file\nd - do not stage this hunk nor any of the remaining hunks in the file\ng - select a hunk to go to\n/ - search for a hunk matching the given regex\nj - leave this hunk undecided, see next undecided hunk\nJ - leave this hunk undecided, see next hunk\nk - leave this hunk undecided, see previous undecided hunk\nK - leave this hunk undecided, see previous hunk\ns - split the current hunk into smaller hunks\ne - manually edit the current hunk\n? - print help\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n通常情况下可以输入 y 或 n 来选择是否要暂存每一个区块， 当然，暂存特定文件中的所有部分或为之后的选择跳过一个区块也是非常有用的。 如果你只暂存文件的一部分，状态输出可能会像下面这样：\n\nWhat now> 1\n           staged     unstaged path\n  1:    unchanged        +0/-1 TODO\n  2:        +1/-1      nothing index.html\n  3:        +1/-1        +4/-0 lib/simplegit.rb\n\n\n1\n2\n3\n4\n5\n\n\nsimplegit.rb 文件的状态很有趣。 它显示出若干行被暂存与若干行未被暂存。 已经部分地暂存了这个文件。 在这时，可以退出交互式添加脚本并且运行 git commit 来提交部分暂存的文件。\n\n也可以不必在交互式添加模式中做部分文件暂存——可以在命令行中使用 git add -p 或 git add --patch 来启动同样的脚本。\n\n更进一步地，可以使用 git reset --patch 命令的补丁模式来部分重置文件， 通过 git checkout --patch 命令来部分检出文件与 git stash save --patch 命令来部分暂存文件。 我们将会在接触这些命令的高级使用方法时了解更多详细信息。',normalizedContent:'# git工具-交互式暂存\n\n本节中的几个交互式 git 命令可以帮助你将文件的特定部分组合成提交。 当你在修改了大量文件后，希望这些改动能拆分为若干提交而不是混杂在一起成为一个提交时，这几个工具会非常有用。 通过这种方式，可以确保提交是逻辑上独立的变更集，同时也会使其他开发者在与你工作时很容易地审核。 如果运行 git add 时使用 -i 或者 --interactive 选项，git 将会进入一个交互式终端模式，显示类似下面的东西：\n\n$ git add -i\n           staged     unstaged path\n  1:    unchanged        +0/-1 todo\n  2:    unchanged        +1/-1 index.html\n  3:    unchanged        +5/-1 lib/simplegit.rb\n\n*** commands ***\n  1: [s]tatus     2: [u]pdate      3: [r]evert     4: [a]dd untracked\n  5: [p]atch      6: [d]iff        7: [q]uit       8: [h]elp\nwhat now>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n可以看到这个命令以和平时非常不同的视图显示了暂存区——基本上与 git status 是相同的信息，但是更简明扼要一些。 它将暂存的修改列在左侧，未暂存的修改列在右侧。\n\n在这块区域后是“commands”命令区域。 在这里你可以做一些工作，包括暂存文件、取消暂存文件、暂存文件的一部分、添加未被追踪的文件、显示暂存内容的区别。\n\n\n# 暂存与取消暂存文件\n\n如果在 what now> 提示符后键入 u 或 2（更新），它会问你想要暂存哪个文件：\n\nwhat now> u\n           staged     unstaged path\n  1:    unchanged        +0/-1 todo\n  2:    unchanged        +1/-1 index.html\n  3:    unchanged        +5/-1 lib/simplegit.rb\nupdate>>\n\n\n1\n2\n3\n4\n5\n6\n\n\n要暂存 todo 和 index.html 文件，可以输入数字：\n\nupdate>> 1,2\n           staged     unstaged path\n* 1:    unchanged        +0/-1 todo\n* 2:    unchanged        +1/-1 index.html\n  3:    unchanged        +5/-1 lib/simplegit.rb\nupdate>>\n\n\n1\n2\n3\n4\n5\n6\n\n\n每个文件前面的 * 意味着选中的文件将会被暂存。 如果在 update>> 提示符后不输入任何东西并直接按回车，git 将会暂存之前选择的文件：\n\nupdate>>\nupdated 2 paths\n\n*** commands ***\n  1: [s]tatus     2: [u]pdate      3: [r]evert     4: [a]dd untracked\n  5: [p]atch      6: [d]iff        7: [q]uit       8: [h]elp\nwhat now> s\n           staged     unstaged path\n  1:        +0/-1      nothing todo\n  2:        +1/-1      nothing index.html\n  3:    unchanged        +5/-1 lib/simplegit.rb\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n现在可以看到 todo 与 index.html 文件已经被暂存而 simplegit.rb 文件还未被暂存。 如果这时想要取消暂存 todo 文件，使用 r 或 3（撤消）选项：\n\n*** commands ***\n  1: [s]tatus     2: [u]pdate      3: [r]evert     4: [a]dd untracked\n  5: [p]atch      6: [d]iff        7: [q]uit       8: [h]elp\nwhat now> r\n           staged     unstaged path\n  1:        +0/-1      nothing todo\n  2:        +1/-1      nothing index.html\n  3:    unchanged        +5/-1 lib/simplegit.rb\nrevert>> 1\n           staged     unstaged path\n* 1:        +0/-1      nothing todo\n  2:        +1/-1      nothing index.html\n  3:    unchanged        +5/-1 lib/simplegit.rb\nrevert>> [enter]\nreverted one path\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n再次查看 git 状态，可以看到已经取消暂存 todo 文件：\n\n*** commands ***\n  1: [s]tatus     2: [u]pdate      3: [r]evert     4: [a]dd untracked\n  5: [p]atch      6: [d]iff        7: [q]uit       8: [h]elp\nwhat now> s\n           staged     unstaged path\n  1:    unchanged        +0/-1 todo\n  2:        +1/-1      nothing index.html\n  3:    unchanged        +5/-1 lib/simplegit.rb\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n如果想要查看已暂存内容的区别，可以使用 d 或 6（区别）命令。 它会显示暂存文件的一个列表，可以从中选择想要查看的暂存区别。 这跟你在命令行指定 git diff --cached 非常相似：\n\n*** commands ***\n  1: [s]tatus     2: [u]pdate      3: [r]evert     4: [a]dd untracked\n  5: [p]atch      6: [d]iff        7: [q]uit       8: [h]elp\nwhat now> d\n           staged     unstaged path\n  1:        +1/-1      nothing index.html\nreview diff>> 1\ndiff --git a/index.html b/index.html\nindex 4d07108..4335f49 100644\n--- a/index.html\n+++ b/index.html\n@@ -16,7 +16,7 @@ date finder\n\n <p id="out">...</p>\n\n-<div id="footer">contact : support@github.com</div>\n+<div id="footer">contact : email.support@github.com</div>\n\n <script type="text/javascript">\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\n通过这些基本命令，可以使用交互式添加模式来轻松地处理暂存区。\n\n\n# 暂存补丁\n\ngit 也可以暂存文件的特定部分。 例如，如果在 simplegit.rb 文件中做了两处修改，但只想要暂存其中的一个而不是另一个，git 会帮你轻松地完成。 在和上一节一样的交互式提示符中，输入 p 或 5（补丁）。 git 会询问你想要部分暂存哪些文件；然后，对已选择文件的每一个部分，它都会一个个地显示文件区别并询问你是否想要暂存它们：\n\ndiff --git a/lib/simplegit.rb b/lib/simplegit.rb\nindex dd5ecc4..57399e0 100644\n--- a/lib/simplegit.rb\n+++ b/lib/simplegit.rb\n@@ -22,7 +22,7 @@ class simplegit\n   end\n\n   def log(treeish = \'master\')\n-    command("git log -n 25 #{treeish}")\n+    command("git log -n 30 #{treeish}")\n   end\n\n   def blame(path)\nstage this hunk [y,n,a,d,/,j,j,g,e,?]?\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n这时有很多选项。 输入 ? 显示所有可以使用的命令列表：\n\nstage this hunk [y,n,a,d,/,j,j,g,e,?]? ?\ny - stage this hunk\nn - do not stage this hunk\na - stage this and all the remaining hunks in the file\nd - do not stage this hunk nor any of the remaining hunks in the file\ng - select a hunk to go to\n/ - search for a hunk matching the given regex\nj - leave this hunk undecided, see next undecided hunk\nj - leave this hunk undecided, see next hunk\nk - leave this hunk undecided, see previous undecided hunk\nk - leave this hunk undecided, see previous hunk\ns - split the current hunk into smaller hunks\ne - manually edit the current hunk\n? - print help\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n通常情况下可以输入 y 或 n 来选择是否要暂存每一个区块， 当然，暂存特定文件中的所有部分或为之后的选择跳过一个区块也是非常有用的。 如果你只暂存文件的一部分，状态输出可能会像下面这样：\n\nwhat now> 1\n           staged     unstaged path\n  1:    unchanged        +0/-1 todo\n  2:        +1/-1      nothing index.html\n  3:        +1/-1        +4/-0 lib/simplegit.rb\n\n\n1\n2\n3\n4\n5\n\n\nsimplegit.rb 文件的状态很有趣。 它显示出若干行被暂存与若干行未被暂存。 已经部分地暂存了这个文件。 在这时，可以退出交互式添加脚本并且运行 git commit 来提交部分暂存的文件。\n\n也可以不必在交互式添加模式中做部分文件暂存——可以在命令行中使用 git add -p 或 git add --patch 来启动同样的脚本。\n\n更进一步地，可以使用 git reset --patch 命令的补丁模式来部分重置文件， 通过 git checkout --patch 命令来部分检出文件与 git stash save --patch 命令来部分暂存文件。 我们将会在接触这些命令的高级使用方法时了解更多详细信息。',charsets:{cjk:!0}},{title:"Git分支-变基",frontmatter:{title:"Git分支-变基",date:"2020-11-18T17:43:57.000Z",permalink:"/pages/3a3247/",categories:["《Git》学习笔记"],tags:["Git"],readingShow:"top"},regularPath:"/06.%E4%B9%A6%E7%B1%8D/10.%E3%80%8AGit%E3%80%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/20.%E6%96%87%E6%A1%A3%E7%AC%94%E8%AE%B0/70.Git%E5%88%86%E6%94%AF-%E5%8F%98%E5%9F%BA.html",relativePath:"06.书籍/10.《Git》学习笔记/20.文档笔记/70.Git分支-变基.md",key:"v-a115cce6",path:"/pages/3a3247/",headers:[{level:2,title:"变基的基本操作",slug:"变基的基本操作",normalizedTitle:"变基的基本操作",charIndex:117},{level:3,title:"概念",slug:"概念",normalizedTitle:"概念",charIndex:312},{level:3,title:"原理",slug:"原理",normalizedTitle:"原理",charIndex:729},{level:3,title:"步骤",slug:"步骤",normalizedTitle:"步骤",charIndex:1135},{level:3,title:"优点",slug:"优点",normalizedTitle:"优点",charIndex:1698},{level:2,title:"更有趣的变基例子",slug:"更有趣的变基例子",normalizedTitle:"更有趣的变基例子",charIndex:1724},{level:3,title:"更有趣的变基例子",slug:"更有趣的变基例子-2",normalizedTitle:"更有趣的变基例子",charIndex:1724},{level:3,title:"--onto选项",slug:"onto选项",normalizedTitle:"--onto选项",charIndex:2527},{level:3,title:"省去先切换到源分支的步骤",slug:"省去先切换到源分支的步骤",normalizedTitle:"省去先切换到源分支的步骤",charIndex:2759},{level:2,title:"变基的风险",slug:"变基的风险",normalizedTitle:"变基的风险",charIndex:3412},{level:3,title:"金科玉律",slug:"金科玉律",normalizedTitle:"金科玉律",charIndex:3422},{level:3,title:"变基的实质",slug:"变基的实质",normalizedTitle:"变基的实质",charIndex:3612},{level:2,title:"用变基解决变基",slug:"用变基解决变基",normalizedTitle:"用变基解决变基",charIndex:4409},{level:2,title:"变基 vs. 合并",slug:"变基-vs-合并",normalizedTitle:"变基 vs. 合并",charIndex:5547}],lastUpdated:"2022/9/22 下午4:28:09",lastUpdatedTimestamp:1663835289e3,headersStr:"变基的基本操作 概念 原理 步骤 优点 更有趣的变基例子 更有趣的变基例子 --onto选项 省去先切换到源分支的步骤 变基的风险 金科玉律 变基的实质 用变基解决变基 变基 vs. 合并",content:"# Git分支-变基\n\n在 Git 中整合来自不同分支的修改主要有两种方法：merge 以及 rebase。 在本节中我们将学习什么是“变基”，怎样使用“变基”，并将展示该操作的惊艳之处，以及指出在何种情况下你应避免使用它。\n\n\n# 变基的基本操作\n\n请回顾之前在 分支的合并 中的一个例子，你会看到开发任务分叉到两个不同分支，又各自提交了更新。\n\n\n\n图0. 分叉的提交历史 ▲\n\n之前介绍过，整合分支最容易的方法是 merge 命令。 它会把两个分支的最新快照（C3 和 C4）以及二者最近的共同祖先（C2）进行三方合并，合并的结果是生成一个新的快照（并提交）。\n\n\n\n图1. 通过合并操作来整合分叉的历史 ▲\n\n\n# 概念\n\n变基就是：将某一分支上的所有修改复制到另一分支上\n\n除了 merge，还有一种方法：你可以提取在 C4 中引入的补丁和修改，然后在 C3 的基础上应用一次。 在 Git 中，这种操作就叫做 变基（rebase）。 你可以使用 rebase 命令将提交到某一分支上的所有修改都移到另一分支上，就好像“重新播放”一样。\n\n在这个例子中，你可以检出 experiment 分支，然后将它变基到 master 分支上：\n\n$ git checkout experiment\n$ git rebase master # 将experiment上的修改变基到master分支上（将experiment的提交移动到master上。）\nFirst, rewinding head to replay your work on top of it...\nApplying: added staged command\n\n\n1\n2\n3\n4\n\n\n它的原理是首先找到这两个分支（即当前分支 experiment、变基操作的目标基底分支 master） 的最近共同祖先 C2，然后对比当前分支相对于该祖先的历次提交，提取相应的修改并存为临时文件， 然后将当前分支指向目标基底 C3, 最后以此将之前另存为临时文件的修改依序应用。 （译注：写明了 commit id，以便理解，下同）\n\n\n# 原理\n\n 1. 找到当前分支和目标分支的最近共同祖先\n 2. 对比当前分支相对于该共同祖先的历次提交\n 3. 提取相应的修改并存为临时文件\n 4. 将当前分支指向目标分支\n 5. 将之前临时文件的修改依序应用\n\n\n\n图2.将 C4 中的修改变基到 C3 上 ▲\n\n现在回到 master 分支，进行一次快进合并。\n\n$ git checkout master\n$ git merge experiment\n\n\n1\n2\n\n\n\n\n图3.master 分支的快进合并 ▲\n\n\n# 步骤\n\n先检出源分支，将源分支的修改变基到目标分支。切回目标分支，进行一次快进合并\n\n# 示意：\ngit checkout <源分支>\ngit (源分支的修改)rebase(到) <目标分支>\ngit checkout <目标分支>\ngit merge <源分支>\n\n\n1\n2\n3\n4\n5\n\n\n此时，C4' 指向的快照就和 the merge example 中 C5 指向的快照一模一样了。 这两种整合方法的最终结果没有任何区别，但是 变基使得提交历史更加整洁。 你在查看一个经过变基的分支的历史记录时会发现，尽管实际的开发工作是并行的， 但它们看上去就像是串行的一样，提交历史是一条直线没有分叉。\n\n一般我们这样做的目的是为了确保在向远程分支推送时能保持提交历史的整洁——例如向某个其他人维护的项目贡献代码时。 在这种情况下，你首先在自己的分支里进行开发，当开发完成时你需要先将你的代码变基到 origin/master 上，然后再向主项目提交修改。 这样的话，该项目的维护者就不再需要进行整合工作，只需要快进合并便可。\n\n请注意，无论是通过变基，还是通过三方合并，整合的最终结果所指向的快照始终是一样的，只不过提交历史不同罢了。 变基是将一系列提交按照原有次序依次应用到另一分支上，而合并是把最终结果合在一起。\n\n\n# 优点\n\n变基的优点： 使提交记录更加整洁。\n\n\n# 更有趣的变基例子\n\n在对两个分支进行变基时，所生成的“重放”并不一定要在目标分支上应用，你也可以指定另外的一个分支进行应用。 就像 从一个主题分支里再分出一个主题分支的提交历史 中的例子那样。 你创建了一个主题分支 server，为服务端添加了一些功能，提交了 C3 和 C4。 然后从 C3 上创建了主题分支 client，为客户端添加了一些功能，提交了 C8 和 C9。 最后，你回到 server 分支，又提交了 C10。\n\n\n# 更有趣的变基例子\n\n在对两个分支进行变基时，所生成的“重放”并不一定要在目标分支上应用，你也可以指定另外的一个分支进行应用。 就像 从一个主题分支里再分出一个主题分支的提交历史 中的例子那样。 你创建了一个主题分支 server，为服务端添加了一些功能，提交了 C3 和 C4。 然后从 C3 上创建了主题分支 client，为客户端添加了一些功能，提交了 C8 和 C9。 最后，你回到 server 分支，又提交了 C10。\n\n\n\n图4.从一个主题分支里再分出一个主题分支的提交历史 ▲\n\n假设你希望将 client 中的修改合并到主分支并发布，但暂时并不想合并 server 中的修改， 因为它们还需要经过更全面的测试。这时，你就可以使用 git rebase 命令的 --onto 选项， 选中在 client 分支里但不在 server 分支里的修改（即 C8 和 C9），将它们在 master 分支上重放：\n\n$ git rebase --onto master server client\n\n\n1\n\n\n以上命令的意思是：“取出 client 分支，找出它从 server 分支分歧之后的补丁， 然后把这些补丁在 master 分支上重放一遍，让 client 看起来像直接基于 master 修改一样”。这理解起来有一点复杂，不过效果非常酷。\n\n\n# --onto选项\n\n选中C分支中的但不在B分支里的修改，应用到A分支。\n\n\n\n图5.截取主题分支上的另一个主题分支，然后变基到其他分支 ▲\n\n现在可以快进合并 master 分支了。（如图 快进合并 master 分支，使之包含来自 client 分支的修改）：\n\n$ git checkout master\n$ git merge client\n\n\n1\n2\n\n\n\n\n图6.快进合并 `master` 分支，使之包含来自 `client` 分支的修改 ▲\n\n\n# 省去先切换到源分支的步骤\n\ngit rebase <目标(当前)分支> <源分支> # 将源分支变基到目标分支。执行此命令后会自动切换到源分支\ngit checkout <目标分支>\ngit merge <源分支>\n\n\n1\n2\n3\n\n\n注意：使用这个方法要确保源分支上的代码是最新的。\n\n接下来你决定将 server 分支中的修改也整合进来。 使用 git rebase <basebranch> <topicbranch> 命令可以直接将主题分支 （即本例中的 server）变基到目标分支（即 master）上。 这样做能省去你先切换到 server 分支，再对其执行变基命令的多个步骤。\n\n$ git rebase master server\n\n\n1\n\n\n如图 将 server 中的修改变基到 master 上 所示，server 中的代码被“续”到了 master 后面。\n\n\n\n图7.将 `server` 中的修改变基到 `master` 上 ▲\n\n然后就可以快进合并主分支 master 了：\n\n$ git checkout master\n$ git merge server\n\n\n1\n2\n\n\n至此，client 和 server 分支中的修改都已经整合到主分支里了， 你可以删除这两个分支，最终提交历史会变成图 最终的提交历史 中的样子：\n\n$ git branch -d client\n$ git branch -d server\n\n\n1\n2\n\n\n\n\n图8. 最终的提交历史 ▲\n\n\n# 变基的风险\n\n\n# 金科玉律\n\n呃，奇妙的变基也并非完美无缺，要用它得遵守一条准则：\n\n如果提交存在于你的仓库之外，而别人可能基于这些提交进行开发，那么不要执行变基。\n\n如果你遵循这条金科玉律，就不会出差错。 否则，人民群众会仇恨你，你的朋友和家人也会嘲笑你，唾弃你。\n\n提示\n\n例如：几个人同时在一个主题分支上进行开发和提交时，你不要中途执行变基，只有在大家都完成工作之后才可以执行变基。\n\n\n# 变基的实质\n\n变基操作的实质是丢弃一些现有的提交，然后相应地新建一些内容一样但实际上不同的提交。 如果你已经将提交推送至某个仓库，而其他人也已经从该仓库拉取提交并进行了后续工作，此时，如果你用 git rebase 命令重新整理了提交并再次推送，你的同伴因此将不得不再次将他们手头的工作与你的提交进行整合，如果接下来你还要拉取并整合他们修改过的提交，事情就会变得一团糟。\n\n让我们来看一个在公开的仓库上执行变基操作所带来的问题。 假设你从一个中央服务器克隆然后在它的基础上进行了一些开发。 你的提交历史如图所示：\n\n\n\n图9. 克隆一个仓库，然后在它的基础上进行了一些开发 ▲\n\n然后，某人又向中央服务器提交了一些修改，其中还包括一次合并。 你抓取了这些在远程分支上的修改，并将其合并到你本地的开发分支，然后你的提交历史就会变成这样：\n\n\n\n图10. 抓取别人的提交，合并到自己的开发分支 ▲\n\n接下来，这个人又决定把合并操作回滚，改用变基；继而又用 git push --force 命令覆盖了服务器上的提交历史。 之后你从服务器抓取更新，会发现多出来一些新的提交。\n\n\n\n图11. 有人推送了经过变基的提交，并丢弃了你的本地开发所基于的一些提交 ▲\n\n结果就是你们两人的处境都十分尴尬。 如果你执行 git pull 命令，你将合并来自两条提交历史的内容，生成一个新的合并提交，最终仓库会如图所示：\n\n\n\n图12. 你将相同的内容又合并了一次，生成了一个新的提交 ▲\n\n此时如果你执行 git log 命令，你会发现有两个提交的作者、日期、日志居然是一样的，这会令人感到混乱。 此外，如果你将这一堆又推送到服务器上，你实际上是将那些已经被变基抛弃的提交又找了回来，这会令人感到更加混乱。 很明显对方并不想在提交历史中看到 C4 和 C6，因为之前就是他把这两个提交通过变基丢弃的。\n\n\n# 用变基解决变基\n\n如果你 真的 遭遇了类似的处境，Git 还有一些高级魔法可以帮到你。 如果团队中的某人强制推送并覆盖了一些你所基于的提交，你需要做的就是检查你做了哪些修改，以及他们覆盖了哪些修改。\n\n实际上，Git 除了对整个提交计算 SHA-1 校验和以外，也对本次提交所引入的修改计算了校验和——即 “patch-id”。\n\n如果你拉取被覆盖过的更新并将你手头的工作基于此进行变基的话，一般情况下 Git 都能成功分辨出哪些是你的修改，并把它们应用到新分支上。\n\n举个例子，如果遇到前面提到的 有人推送了经过变基的提交，并丢弃了你的本地开发所基于的一些提交 那种情境，如果我们不是执行合并，而是执行 git rebase teamone/master, Git 将会：\n\n * 检查哪些提交是我们的分支上独有的（C2，C3，C4，C6，C7）\n * 检查其中哪些提交不是合并操作的结果（C2，C3，C4）\n * 检查哪些提交在对方覆盖更新时并没有被纳入目标分支（只有 C2 和 C3，因为 C4 其实就是 C4'）\n * 把查到的这些提交应用在 teamone/master 上面\n\n从而我们将得到与 你将相同的内容又合并了一次，生成了一个新的提交 中不同的结果，如图 在一个被变基然后强制推送的分支上再次执行变基 所示。\n\n\n\n图13. 在一个被变基然后强制推送的分支上再次执行变基 ▲\n\n要想上述方案有效，还需要对方在变基时确保 C4' 和 C4 是几乎一样的。 否则变基操作将无法识别，并新建另一个类似 C4 的补丁（而这个补丁很可能无法整洁的整合入历史，因为补丁中的修改已经存在于某个地方了）。\n\n在本例中另一种简单的方法是使用 git pull --rebase 命令而不是直接 git pull。 又或者你可以自己手动完成这个过程，先 git fetch，再 git rebase teamone/master。\n\n如果你习惯使用 git pull ，同时又希望默认使用选项 --rebase，你可以执行这条语句 git config --global pull.rebase true 来更改 pull.rebase 的默认配置。\n\n如果你只对不会离开你电脑的提交执行变基，那就不会有事。 如果你对已经推送过的提交执行变基，但别人没有基于它的提交，那么也不会有事。 如果你对已经推送至共用仓库的提交上执行变基命令，并因此丢失了一些别人的开发所基于的提交， 那你就有大麻烦了，你的同事也会因此鄙视你。\n\n如果你或你的同事在某些情形下决意要这么做，请一定要通知每个人执行 git pull --rebase 命令，这样尽管不能避免伤痛，但能有所缓解。\n\n\n# 变基 vs. 合并\n\n至此，你已在实战中学习了变基和合并的用法，你一定会想问，到底哪种方式更好。 在回答这个问题之前，让我们退后一步，想讨论一下提交历史到底意味着什么。\n\n有一种观点认为，仓库的提交历史即是 记录实际发生过什么。 它是针对历史的文档，本身就有价值，不能乱改。 从这个角度看来，改变提交历史是一种亵渎，你使用 谎言 掩盖了实际发生过的事情。 如果由合并产生的提交历史是一团糟怎么办？ 既然事实就是如此，那么这些痕迹就应该被保留下来，让后人能够查阅。\n\n另一种观点则正好相反，他们认为提交历史是 项目过程中发生的事。 没人会出版一本书的第一版草稿，软件维护手册也是需要反复修订才能方便使用。 持这一观点的人会使用 rebase 及 filter-branch 等工具来编写故事，怎么方便后来的读者就怎么写。\n\n现在，让我们回到之前的问题上来，到底合并还是变基好？希望你能明白，这并没有一个简单的答案。 Git 是一个非常强大的工具，它允许你对提交历史做许多事情，但每个团队、每个项目对此的需求并不相同。 既然你已经分别学习了两者的用法，相信你能够根据实际情况作出明智的选择。\n\n总的原则是，只对尚未推送或分享给别人的本地修改执行变基操作清理历史， 从不对已推送至别处的提交执行变基操作，这样，你才能享受到两种方式带来的便利。",normalizedContent:"# git分支-变基\n\n在 git 中整合来自不同分支的修改主要有两种方法：merge 以及 rebase。 在本节中我们将学习什么是“变基”，怎样使用“变基”，并将展示该操作的惊艳之处，以及指出在何种情况下你应避免使用它。\n\n\n# 变基的基本操作\n\n请回顾之前在 分支的合并 中的一个例子，你会看到开发任务分叉到两个不同分支，又各自提交了更新。\n\n\n\n图0. 分叉的提交历史 ▲\n\n之前介绍过，整合分支最容易的方法是 merge 命令。 它会把两个分支的最新快照（c3 和 c4）以及二者最近的共同祖先（c2）进行三方合并，合并的结果是生成一个新的快照（并提交）。\n\n\n\n图1. 通过合并操作来整合分叉的历史 ▲\n\n\n# 概念\n\n变基就是：将某一分支上的所有修改复制到另一分支上\n\n除了 merge，还有一种方法：你可以提取在 c4 中引入的补丁和修改，然后在 c3 的基础上应用一次。 在 git 中，这种操作就叫做 变基（rebase）。 你可以使用 rebase 命令将提交到某一分支上的所有修改都移到另一分支上，就好像“重新播放”一样。\n\n在这个例子中，你可以检出 experiment 分支，然后将它变基到 master 分支上：\n\n$ git checkout experiment\n$ git rebase master # 将experiment上的修改变基到master分支上（将experiment的提交移动到master上。）\nfirst, rewinding head to replay your work on top of it...\napplying: added staged command\n\n\n1\n2\n3\n4\n\n\n它的原理是首先找到这两个分支（即当前分支 experiment、变基操作的目标基底分支 master） 的最近共同祖先 c2，然后对比当前分支相对于该祖先的历次提交，提取相应的修改并存为临时文件， 然后将当前分支指向目标基底 c3, 最后以此将之前另存为临时文件的修改依序应用。 （译注：写明了 commit id，以便理解，下同）\n\n\n# 原理\n\n 1. 找到当前分支和目标分支的最近共同祖先\n 2. 对比当前分支相对于该共同祖先的历次提交\n 3. 提取相应的修改并存为临时文件\n 4. 将当前分支指向目标分支\n 5. 将之前临时文件的修改依序应用\n\n\n\n图2.将 c4 中的修改变基到 c3 上 ▲\n\n现在回到 master 分支，进行一次快进合并。\n\n$ git checkout master\n$ git merge experiment\n\n\n1\n2\n\n\n\n\n图3.master 分支的快进合并 ▲\n\n\n# 步骤\n\n先检出源分支，将源分支的修改变基到目标分支。切回目标分支，进行一次快进合并\n\n# 示意：\ngit checkout <源分支>\ngit (源分支的修改)rebase(到) <目标分支>\ngit checkout <目标分支>\ngit merge <源分支>\n\n\n1\n2\n3\n4\n5\n\n\n此时，c4' 指向的快照就和 the merge example 中 c5 指向的快照一模一样了。 这两种整合方法的最终结果没有任何区别，但是 变基使得提交历史更加整洁。 你在查看一个经过变基的分支的历史记录时会发现，尽管实际的开发工作是并行的， 但它们看上去就像是串行的一样，提交历史是一条直线没有分叉。\n\n一般我们这样做的目的是为了确保在向远程分支推送时能保持提交历史的整洁——例如向某个其他人维护的项目贡献代码时。 在这种情况下，你首先在自己的分支里进行开发，当开发完成时你需要先将你的代码变基到 origin/master 上，然后再向主项目提交修改。 这样的话，该项目的维护者就不再需要进行整合工作，只需要快进合并便可。\n\n请注意，无论是通过变基，还是通过三方合并，整合的最终结果所指向的快照始终是一样的，只不过提交历史不同罢了。 变基是将一系列提交按照原有次序依次应用到另一分支上，而合并是把最终结果合在一起。\n\n\n# 优点\n\n变基的优点： 使提交记录更加整洁。\n\n\n# 更有趣的变基例子\n\n在对两个分支进行变基时，所生成的“重放”并不一定要在目标分支上应用，你也可以指定另外的一个分支进行应用。 就像 从一个主题分支里再分出一个主题分支的提交历史 中的例子那样。 你创建了一个主题分支 server，为服务端添加了一些功能，提交了 c3 和 c4。 然后从 c3 上创建了主题分支 client，为客户端添加了一些功能，提交了 c8 和 c9。 最后，你回到 server 分支，又提交了 c10。\n\n\n# 更有趣的变基例子\n\n在对两个分支进行变基时，所生成的“重放”并不一定要在目标分支上应用，你也可以指定另外的一个分支进行应用。 就像 从一个主题分支里再分出一个主题分支的提交历史 中的例子那样。 你创建了一个主题分支 server，为服务端添加了一些功能，提交了 c3 和 c4。 然后从 c3 上创建了主题分支 client，为客户端添加了一些功能，提交了 c8 和 c9。 最后，你回到 server 分支，又提交了 c10。\n\n\n\n图4.从一个主题分支里再分出一个主题分支的提交历史 ▲\n\n假设你希望将 client 中的修改合并到主分支并发布，但暂时并不想合并 server 中的修改， 因为它们还需要经过更全面的测试。这时，你就可以使用 git rebase 命令的 --onto 选项， 选中在 client 分支里但不在 server 分支里的修改（即 c8 和 c9），将它们在 master 分支上重放：\n\n$ git rebase --onto master server client\n\n\n1\n\n\n以上命令的意思是：“取出 client 分支，找出它从 server 分支分歧之后的补丁， 然后把这些补丁在 master 分支上重放一遍，让 client 看起来像直接基于 master 修改一样”。这理解起来有一点复杂，不过效果非常酷。\n\n\n# --onto选项\n\n选中c分支中的但不在b分支里的修改，应用到a分支。\n\n\n\n图5.截取主题分支上的另一个主题分支，然后变基到其他分支 ▲\n\n现在可以快进合并 master 分支了。（如图 快进合并 master 分支，使之包含来自 client 分支的修改）：\n\n$ git checkout master\n$ git merge client\n\n\n1\n2\n\n\n\n\n图6.快进合并 `master` 分支，使之包含来自 `client` 分支的修改 ▲\n\n\n# 省去先切换到源分支的步骤\n\ngit rebase <目标(当前)分支> <源分支> # 将源分支变基到目标分支。执行此命令后会自动切换到源分支\ngit checkout <目标分支>\ngit merge <源分支>\n\n\n1\n2\n3\n\n\n注意：使用这个方法要确保源分支上的代码是最新的。\n\n接下来你决定将 server 分支中的修改也整合进来。 使用 git rebase <basebranch> <topicbranch> 命令可以直接将主题分支 （即本例中的 server）变基到目标分支（即 master）上。 这样做能省去你先切换到 server 分支，再对其执行变基命令的多个步骤。\n\n$ git rebase master server\n\n\n1\n\n\n如图 将 server 中的修改变基到 master 上 所示，server 中的代码被“续”到了 master 后面。\n\n\n\n图7.将 `server` 中的修改变基到 `master` 上 ▲\n\n然后就可以快进合并主分支 master 了：\n\n$ git checkout master\n$ git merge server\n\n\n1\n2\n\n\n至此，client 和 server 分支中的修改都已经整合到主分支里了， 你可以删除这两个分支，最终提交历史会变成图 最终的提交历史 中的样子：\n\n$ git branch -d client\n$ git branch -d server\n\n\n1\n2\n\n\n\n\n图8. 最终的提交历史 ▲\n\n\n# 变基的风险\n\n\n# 金科玉律\n\n呃，奇妙的变基也并非完美无缺，要用它得遵守一条准则：\n\n如果提交存在于你的仓库之外，而别人可能基于这些提交进行开发，那么不要执行变基。\n\n如果你遵循这条金科玉律，就不会出差错。 否则，人民群众会仇恨你，你的朋友和家人也会嘲笑你，唾弃你。\n\n提示\n\n例如：几个人同时在一个主题分支上进行开发和提交时，你不要中途执行变基，只有在大家都完成工作之后才可以执行变基。\n\n\n# 变基的实质\n\n变基操作的实质是丢弃一些现有的提交，然后相应地新建一些内容一样但实际上不同的提交。 如果你已经将提交推送至某个仓库，而其他人也已经从该仓库拉取提交并进行了后续工作，此时，如果你用 git rebase 命令重新整理了提交并再次推送，你的同伴因此将不得不再次将他们手头的工作与你的提交进行整合，如果接下来你还要拉取并整合他们修改过的提交，事情就会变得一团糟。\n\n让我们来看一个在公开的仓库上执行变基操作所带来的问题。 假设你从一个中央服务器克隆然后在它的基础上进行了一些开发。 你的提交历史如图所示：\n\n\n\n图9. 克隆一个仓库，然后在它的基础上进行了一些开发 ▲\n\n然后，某人又向中央服务器提交了一些修改，其中还包括一次合并。 你抓取了这些在远程分支上的修改，并将其合并到你本地的开发分支，然后你的提交历史就会变成这样：\n\n\n\n图10. 抓取别人的提交，合并到自己的开发分支 ▲\n\n接下来，这个人又决定把合并操作回滚，改用变基；继而又用 git push --force 命令覆盖了服务器上的提交历史。 之后你从服务器抓取更新，会发现多出来一些新的提交。\n\n\n\n图11. 有人推送了经过变基的提交，并丢弃了你的本地开发所基于的一些提交 ▲\n\n结果就是你们两人的处境都十分尴尬。 如果你执行 git pull 命令，你将合并来自两条提交历史的内容，生成一个新的合并提交，最终仓库会如图所示：\n\n\n\n图12. 你将相同的内容又合并了一次，生成了一个新的提交 ▲\n\n此时如果你执行 git log 命令，你会发现有两个提交的作者、日期、日志居然是一样的，这会令人感到混乱。 此外，如果你将这一堆又推送到服务器上，你实际上是将那些已经被变基抛弃的提交又找了回来，这会令人感到更加混乱。 很明显对方并不想在提交历史中看到 c4 和 c6，因为之前就是他把这两个提交通过变基丢弃的。\n\n\n# 用变基解决变基\n\n如果你 真的 遭遇了类似的处境，git 还有一些高级魔法可以帮到你。 如果团队中的某人强制推送并覆盖了一些你所基于的提交，你需要做的就是检查你做了哪些修改，以及他们覆盖了哪些修改。\n\n实际上，git 除了对整个提交计算 sha-1 校验和以外，也对本次提交所引入的修改计算了校验和——即 “patch-id”。\n\n如果你拉取被覆盖过的更新并将你手头的工作基于此进行变基的话，一般情况下 git 都能成功分辨出哪些是你的修改，并把它们应用到新分支上。\n\n举个例子，如果遇到前面提到的 有人推送了经过变基的提交，并丢弃了你的本地开发所基于的一些提交 那种情境，如果我们不是执行合并，而是执行 git rebase teamone/master, git 将会：\n\n * 检查哪些提交是我们的分支上独有的（c2，c3，c4，c6，c7）\n * 检查其中哪些提交不是合并操作的结果（c2，c3，c4）\n * 检查哪些提交在对方覆盖更新时并没有被纳入目标分支（只有 c2 和 c3，因为 c4 其实就是 c4'）\n * 把查到的这些提交应用在 teamone/master 上面\n\n从而我们将得到与 你将相同的内容又合并了一次，生成了一个新的提交 中不同的结果，如图 在一个被变基然后强制推送的分支上再次执行变基 所示。\n\n\n\n图13. 在一个被变基然后强制推送的分支上再次执行变基 ▲\n\n要想上述方案有效，还需要对方在变基时确保 c4' 和 c4 是几乎一样的。 否则变基操作将无法识别，并新建另一个类似 c4 的补丁（而这个补丁很可能无法整洁的整合入历史，因为补丁中的修改已经存在于某个地方了）。\n\n在本例中另一种简单的方法是使用 git pull --rebase 命令而不是直接 git pull。 又或者你可以自己手动完成这个过程，先 git fetch，再 git rebase teamone/master。\n\n如果你习惯使用 git pull ，同时又希望默认使用选项 --rebase，你可以执行这条语句 git config --global pull.rebase true 来更改 pull.rebase 的默认配置。\n\n如果你只对不会离开你电脑的提交执行变基，那就不会有事。 如果你对已经推送过的提交执行变基，但别人没有基于它的提交，那么也不会有事。 如果你对已经推送至共用仓库的提交上执行变基命令，并因此丢失了一些别人的开发所基于的提交， 那你就有大麻烦了，你的同事也会因此鄙视你。\n\n如果你或你的同事在某些情形下决意要这么做，请一定要通知每个人执行 git pull --rebase 命令，这样尽管不能避免伤痛，但能有所缓解。\n\n\n# 变基 vs. 合并\n\n至此，你已在实战中学习了变基和合并的用法，你一定会想问，到底哪种方式更好。 在回答这个问题之前，让我们退后一步，想讨论一下提交历史到底意味着什么。\n\n有一种观点认为，仓库的提交历史即是 记录实际发生过什么。 它是针对历史的文档，本身就有价值，不能乱改。 从这个角度看来，改变提交历史是一种亵渎，你使用 谎言 掩盖了实际发生过的事情。 如果由合并产生的提交历史是一团糟怎么办？ 既然事实就是如此，那么这些痕迹就应该被保留下来，让后人能够查阅。\n\n另一种观点则正好相反，他们认为提交历史是 项目过程中发生的事。 没人会出版一本书的第一版草稿，软件维护手册也是需要反复修订才能方便使用。 持这一观点的人会使用 rebase 及 filter-branch 等工具来编写故事，怎么方便后来的读者就怎么写。\n\n现在，让我们回到之前的问题上来，到底合并还是变基好？希望你能明白，这并没有一个简单的答案。 git 是一个非常强大的工具，它允许你对提交历史做许多事情，但每个团队、每个项目对此的需求并不相同。 既然你已经分别学习了两者的用法，相信你能够根据实际情况作出明智的选择。\n\n总的原则是，只对尚未推送或分享给别人的本地修改执行变基操作清理历史， 从不对已推送至别处的提交执行变基操作，这样，你才能享受到两种方式带来的便利。",charsets:{cjk:!0}},{title:"网站轮子",frontmatter:{title:"网站轮子",permalink:"/whell/web/",date:"2020-04-19T11:33:04.000Z",article:!1,readingShow:"top"},regularPath:"/08.%E6%88%91%E7%9A%84/05.%E6%94%B6%E8%97%8F%E5%A4%B9/01.%E7%BD%91%E7%AB%99%E8%BD%AE%E5%AD%90.html",relativePath:"08.我的/05.收藏夹/01.网站轮子.md",key:"v-5e35661b",path:"/whell/web/",headers:[{level:2,title:"文档",slug:"文档",normalizedTitle:"文档",charIndex:12},{level:2,title:"社区",slug:"社区",normalizedTitle:"社区",charIndex:220},{level:2,title:"博客",slug:"博客",normalizedTitle:"博客",charIndex:411},{level:2,title:"电子书",slug:"电子书",normalizedTitle:"电子书",charIndex:475},{level:2,title:"文章",slug:"文章",normalizedTitle:"文章",charIndex:363},{level:2,title:"科学上网",slug:"科学上网",normalizedTitle:"科学上网",charIndex:567},{level:2,title:"视频",slug:"视频",normalizedTitle:"视频",charIndex:627},{level:3,title:"电视直播",slug:"电视直播",normalizedTitle:"电视直播",charIndex:760},{level:2,title:"Github",slug:"github",normalizedTitle:"github",charIndex:227},{level:2,title:"在线工具",slug:"在线工具",normalizedTitle:"在线工具",charIndex:881},{level:3,title:"开发",slug:"开发",normalizedTitle:"开发",charIndex:63},{level:3,title:"代码编辑",slug:"代码编辑",normalizedTitle:"代码编辑",charIndex:959},{level:3,title:"Emoji表情",slug:"emoji表情",normalizedTitle:"emoji表情",charIndex:1020},{level:3,title:"图片工具",slug:"图片工具",normalizedTitle:"图片工具",charIndex:1120},{level:3,title:"作图",slug:"作图",normalizedTitle:"作图",charIndex:1354},{level:3,title:"CSS",slug:"css",normalizedTitle:"css",charIndex:555},{level:3,title:"CDN加速",slug:"cdn加速",normalizedTitle:"cdn加速",charIndex:1650},{level:3,title:"网站托管",slug:"网站托管",normalizedTitle:"网站托管",charIndex:1710},{level:3,title:"正则",slug:"正则",normalizedTitle:"正则",charIndex:1740},{level:3,title:"其他",slug:"其他",normalizedTitle:"其他",charIndex:1801},{level:2,title:"设计",slug:"设计",normalizedTitle:"设计",charIndex:389},{level:3,title:"图库",slug:"图库",normalizedTitle:"图库",charIndex:2902},{level:2,title:"有趣",slug:"有趣",normalizedTitle:"有趣",charIndex:3063},{level:2,title:"交互",slug:"交互",normalizedTitle:"交互",charIndex:1980},{level:2,title:"教程",slug:"教程",normalizedTitle:"教程",charIndex:96},{level:2,title:"产品",slug:"产品",normalizedTitle:"产品",charIndex:2889},{level:2,title:"实用",slug:"实用",normalizedTitle:"实用",charIndex:3870},{level:2,title:"Talk",slug:"talk",normalizedTitle:"talk",charIndex:4243},{level:2,title:"算法",slug:"算法",normalizedTitle:"算法",charIndex:1890},{level:2,title:"生活",slug:"生活",normalizedTitle:"生活",charIndex:4323}],lastUpdated:"2022/10/18 下午3:59:55",lastUpdatedTimestamp:1666079995e3,headersStr:"文档 社区 博客 电子书 文章 科学上网 视频 电视直播 Github 在线工具 开发 代码编辑 Emoji表情 图片工具 作图 CSS CDN加速 网站托管 正则 其他 设计 图库 有趣 交互 教程 产品 实用 Talk 算法 生活",content:"# 个人收藏夹\n\n\n# 文档\n\n * MDN | MDN-JS标准内置对象 Web技术权威文档\n * DevDocs Web 开发技术文档，非常不错的学习手册！\n * 现代JavaScript教程 以最新标准为基准的JS教程\n * ES5教程 阮一峰的JS教程\n * ES6教程 阮一峰的ES6教程\n * Bash 脚本教程 阮一峰编写\n * ECMA ECMA官网\n * 菜鸟教程 涵盖多种语言的初级教程\n * 腾讯云开发者手册\n\n\n# 社区\n\n * Github 程序员同性交友社区\n * 掘金 一个帮助开发者成长的社区\n * 简书 有很多频道的创作社区\n * 思否 解决技术问题的社区\n * stack overflow 同上，外网的\n * InfoQ\n * V2EX\n * 鱼塘热榜 划水网站，收集了很多网站，当天热门文章\n * 码力全开资源库 很全很强大，独立开发者/设计干货/优质利器/工具资源...\n\n\n# 博客\n\n * 阮一峰的网络日志\n * samanthaming 对前端小知识点的总结，并为每个知识点制作精美的小卡片。\n\n\n# 电子书\n\n * 高教书苑 高等教育出版社的书籍，包含多种学科。\n * 前端电子书收集\n * SoBooks 免费的电子书资源网站\n\n\n# 文章\n\n * 灵活运用CSS开发技巧\n\n\n# 科学上网\n\n * 谷歌chrome商店访问助手\n\n * 谷歌云(GCP)一键搭建 V2Ray 让你畅快科学上网\n\n\n# 视频\n\n * 慕课网 实战视频教程\n * 妙味课堂 比较系统的前端入门视频教程\n * 中国大学MOOC 涵盖计算机、外语、心理学等专业免费课程\n * bilibili B站，上面也有一些可供学习的免费视频\n * egghead 质量还不错的短视频教程，外网\n\n\n# 电视直播\n\n * CCTV、卫视高清直播\n\n\n# Github\n\n * github 短域名服务\n * shields 徽章图标\n * followers 全球排名\n * star-history 展示一个项目 Stars 增长曲线\n\n\n# 在线工具\n\n\n# 开发\n\n * Can I use 查看属性和方法的兼容性\n * 30 seconds of code 收集了许多有用的代码小片段\n\n\n# 代码编辑\n\n * codepen 在线代码编辑与演示\n * codesandbox 内嵌VSCode的在线IDE\n\n\n# Emoji表情\n\n * emoji表情\n * emoji表情备忘录\n * gitmoji 通过 emoji 表达 git 的操作内容\n\n> windows系统下按Win+.快速打开表情选择框\n\n\n# 图片工具\n\n * tinypng图片压缩 压缩png很有用\n * Squoosh 谷歌出品在线免费图片压缩工具（jpg、png等,压缩效果比tinypng稍好）\n * waifu2x 通过卷积网络放大图片\n * vectormagic 转换矢量图\n * vectorizer 真正的 png 转 svg 神器\n * 在线AI图片处理 黑白修复、无损放大、动漫化、铅笔画等。\n * remove AI抠图\n * backgroundremover 又一个抠图的\n\n\n# 作图\n\n * processon在线作图 流程图、思维导图、原型图等\n * 百度脑图 思维导图\n\n\n# CSS\n\n * CSS Tricks CSS技巧收集与演示\n * CSS生成器\n * CSS渐变生成器\n * CSS3-Box Shadow(阴影)\n * 贝塞尔曲线生成器\n * 花纹背景生成器\n * 花纹背景-pattern.css\n * 3D字体\n * css-tricks css技巧文章\n * You-need-to-know-css CSS的各种DEMO，很全\n * animista CSS动画可视化工具，复制代码就能用\n * navnav 各种炫酷的CSS动画组件\n\n\n# CDN加速\n\n * jsDelivr 国外的一家优秀的公共 CDN 服务提供商\n * unpkg cdn 服务\n\n\n# 网站托管\n\n * vercel 好用的网站托管服务\n\n\n# 正则\n\n * 正则可视化\n * iHateRegex 正则搜索，细节做得很好\n * 正则迷你书 学习正则的小手册\n\n\n# 其他\n\n * Linux命令手册\n * carbon代码图片生成器 生成好看的代码图片\n\n\n# 设计\n\n * 创造师导航\n * 设计师网址导航\n * remove AI抠图，抠图算法很厉害\n * Manypixels 插画\n * Undraw 插画\n * storytale 插画，种类丰富，包含3D插画\n * uimovement 能从这个网站找到不少动画交互的灵感\n * awwwards是一个一个专门为设计精美的网站以及富有创意的网站颁奖的网站\n * dribbble 经常能在上面找到很多有创意好看的 gif 或者图片\n * Bēhance dribbble 是设计师的微博，Bēhance 是设计师的博客\n * Logojoy 使用 ai 做 logo 的网站，做出来的 logo 质量还不错。\n * brandmark 另一个在线制作 logo 网站\n * instant 又一个 logo 制作网站\n * namecheap又一个 logo 制作网站\n * logo-maker 又一个 logo 制作网站 这个更简单点 就是选模板之后微调\n * coolors 帮你在线配色的网站 你能找到不少配色灵感\n * colorhunt 另一个配色网站\n * uigradients 渐变色网站\n * designcap 在线海报设计\n * Flat UI 色表 Flat UI 色表\n * 0to255 颜色梯度\n * Ikonate 提供免费的图标 icons\n * remixicon 又一个提供免费图标 icons\n * feather 免费的 icons\n * nord 北欧性冷淡风主题配色\n * Unsplash 提供免费的高清图片\n * Pexels 提供免费的高清图片\n * colorkitty 从你的图片中提取配色\n * design.youzan 有赞设计原则\n * iconfont 阿里巴巴矢量图标库\n * undraw 免费的矢量插画\n * icomoon 矢量图标库\n * cssicon 所有的 icon 都是纯 css 画的 缺点：icon 不够多\n * CSS triangle generator 帮你快速用 css 做出三角形\n * clippy 在线帮你使用 css clip-path 做出各种形状的图形\n * Lorem Picsum 提供免费的占位图\n * Canva 可画 生成插画、封面、海报、头像等\n * 404页 404页素材\n * collectui 按功能组件分类的设计图\n * smartmockups 产品模板生成工具\n\n\n# 图库\n\n * uigradients 渐变色生成工具\n * freepik banner 图库\n * 觅元素一天免费下载十张 psd\n * 搞定设计 可以抠图\n * vectorizer 真正的 png 转 svg 神器\n * 站酷\n * 花瓣\n * 虎克 Ps 学习教程\n * beTheme\n * UI 中国\n\n\n# 有趣\n\n * 奇趣网站收藏家 收藏了很多有趣的网站\n * FC在线模拟器(小霸王游戏机) 童年回忆\n * 帮你百度一下 可以 点我测试一下-\n * 国际版 同帮我百度一下-点我测试一下-\n * wallhaven 壁纸网站-\n * URL 地址播放 Emojis 动画 在地址栏里面播放 emoji\n * Can't Unsee 强烈建议前端、客户端、UI 开发的同学玩下，检查一下自己对设计稿的敏感度怎么样\n * ggtalk 平时一直在听的一个技术博客\n * awesome-comment 里面收集了很多有趣的代码注释\n * text-img 都将图片转化为 ascii 用来写注释\n * weird-fonts 将普通字母转化为 特殊 unicode\n * snake 在地址栏里面玩贪吃蛇\n * zero-width-lib 利用零宽度字符实现 隐形水印、加密信息分享、逃脱词匹配，很有创意\n * abbreviations 查看一个简写是什么意思的网站\n * magi ai 搜索神器，超屌\n * 诺基亚短信图片生成器\n\n\n# 交互\n\n * 微交互 里面收集了市面上很多很好的微交互例子 值得学习\n * Little Big Details 同上，一个国外微交互汇集网站\n * cruip 登录页的各种页面设计，可以免费下载模板\n * Comixify 一个波兰团队做了非常好玩的工具，可以把视频自动转成漫画，上图是他们提供的 demo，效果很棒。\n * taiko-web 太鼓达人网页版 只能说很 6\n\n\n# 教程\n\n * npx 教你怎么合理的使用 npx\n * hacksplaining 网络安全学习网站\n * mobile-web-best-practice 移动 web 最佳实践\n\n\n# 产品\n\n * 产品大牛 什么有很多完整的产品原型可以借鉴\n * 磨刀 快速出 ui 原型\n\n\n# 实用\n\n * webden 在线网页编辑器，轻便快捷\n * browser-update 浏览器版本更新提示插件\n * typeform 一个国外的在线调查问卷网站\n * VideoFk VideoFk 视频在线解析下载\n * 全历史 历史内容聚合网站\n * UzerMe 云端办公工具\n * SoBooks 强大的电子书资源网站\n * 稿定设计 键式设计工具+智能抠图\n * 大力盘 百度网盘搜索\n * ENFI 下载器 不限速下载器\n * 来画视频 像做 PPT 一样做短视频\n * Arkie 海报制作工具\n * 优品 PPT\n * 比格 PPT\n * 高清免费图片\n * 高清免费图片 2\n * shapedivider 生成波浪分隔线\n * Notion 知识库、快速笔记、TaskList、日记、读书清单，各种类型，应有尽有\n\n\n# Talk\n\n * peerigon-talks 收集了不少有意思的 talks\n\n\n# 算法\n\n * leetcode 用 js 刷 leetcode\n\n\n# 生活\n\n * Ventusky 风雨气温图",normalizedContent:"# 个人收藏夹\n\n\n# 文档\n\n * mdn | mdn-js标准内置对象 web技术权威文档\n * devdocs web 开发技术文档，非常不错的学习手册！\n * 现代javascript教程 以最新标准为基准的js教程\n * es5教程 阮一峰的js教程\n * es6教程 阮一峰的es6教程\n * bash 脚本教程 阮一峰编写\n * ecma ecma官网\n * 菜鸟教程 涵盖多种语言的初级教程\n * 腾讯云开发者手册\n\n\n# 社区\n\n * github 程序员同性交友社区\n * 掘金 一个帮助开发者成长的社区\n * 简书 有很多频道的创作社区\n * 思否 解决技术问题的社区\n * stack overflow 同上，外网的\n * infoq\n * v2ex\n * 鱼塘热榜 划水网站，收集了很多网站，当天热门文章\n * 码力全开资源库 很全很强大，独立开发者/设计干货/优质利器/工具资源...\n\n\n# 博客\n\n * 阮一峰的网络日志\n * samanthaming 对前端小知识点的总结，并为每个知识点制作精美的小卡片。\n\n\n# 电子书\n\n * 高教书苑 高等教育出版社的书籍，包含多种学科。\n * 前端电子书收集\n * sobooks 免费的电子书资源网站\n\n\n# 文章\n\n * 灵活运用css开发技巧\n\n\n# 科学上网\n\n * 谷歌chrome商店访问助手\n\n * 谷歌云(gcp)一键搭建 v2ray 让你畅快科学上网\n\n\n# 视频\n\n * 慕课网 实战视频教程\n * 妙味课堂 比较系统的前端入门视频教程\n * 中国大学mooc 涵盖计算机、外语、心理学等专业免费课程\n * bilibili b站，上面也有一些可供学习的免费视频\n * egghead 质量还不错的短视频教程，外网\n\n\n# 电视直播\n\n * cctv、卫视高清直播\n\n\n# github\n\n * github 短域名服务\n * shields 徽章图标\n * followers 全球排名\n * star-history 展示一个项目 stars 增长曲线\n\n\n# 在线工具\n\n\n# 开发\n\n * can i use 查看属性和方法的兼容性\n * 30 seconds of code 收集了许多有用的代码小片段\n\n\n# 代码编辑\n\n * codepen 在线代码编辑与演示\n * codesandbox 内嵌vscode的在线ide\n\n\n# emoji表情\n\n * emoji表情\n * emoji表情备忘录\n * gitmoji 通过 emoji 表达 git 的操作内容\n\n> windows系统下按win+.快速打开表情选择框\n\n\n# 图片工具\n\n * tinypng图片压缩 压缩png很有用\n * squoosh 谷歌出品在线免费图片压缩工具（jpg、png等,压缩效果比tinypng稍好）\n * waifu2x 通过卷积网络放大图片\n * vectormagic 转换矢量图\n * vectorizer 真正的 png 转 svg 神器\n * 在线ai图片处理 黑白修复、无损放大、动漫化、铅笔画等。\n * remove ai抠图\n * backgroundremover 又一个抠图的\n\n\n# 作图\n\n * processon在线作图 流程图、思维导图、原型图等\n * 百度脑图 思维导图\n\n\n# css\n\n * css tricks css技巧收集与演示\n * css生成器\n * css渐变生成器\n * css3-box shadow(阴影)\n * 贝塞尔曲线生成器\n * 花纹背景生成器\n * 花纹背景-pattern.css\n * 3d字体\n * css-tricks css技巧文章\n * you-need-to-know-css css的各种demo，很全\n * animista css动画可视化工具，复制代码就能用\n * navnav 各种炫酷的css动画组件\n\n\n# cdn加速\n\n * jsdelivr 国外的一家优秀的公共 cdn 服务提供商\n * unpkg cdn 服务\n\n\n# 网站托管\n\n * vercel 好用的网站托管服务\n\n\n# 正则\n\n * 正则可视化\n * ihateregex 正则搜索，细节做得很好\n * 正则迷你书 学习正则的小手册\n\n\n# 其他\n\n * linux命令手册\n * carbon代码图片生成器 生成好看的代码图片\n\n\n# 设计\n\n * 创造师导航\n * 设计师网址导航\n * remove ai抠图，抠图算法很厉害\n * manypixels 插画\n * undraw 插画\n * storytale 插画，种类丰富，包含3d插画\n * uimovement 能从这个网站找到不少动画交互的灵感\n * awwwards是一个一个专门为设计精美的网站以及富有创意的网站颁奖的网站\n * dribbble 经常能在上面找到很多有创意好看的 gif 或者图片\n * behance dribbble 是设计师的微博，behance 是设计师的博客\n * logojoy 使用 ai 做 logo 的网站，做出来的 logo 质量还不错。\n * brandmark 另一个在线制作 logo 网站\n * instant 又一个 logo 制作网站\n * namecheap又一个 logo 制作网站\n * logo-maker 又一个 logo 制作网站 这个更简单点 就是选模板之后微调\n * coolors 帮你在线配色的网站 你能找到不少配色灵感\n * colorhunt 另一个配色网站\n * uigradients 渐变色网站\n * designcap 在线海报设计\n * flat ui 色表 flat ui 色表\n * 0to255 颜色梯度\n * ikonate 提供免费的图标 icons\n * remixicon 又一个提供免费图标 icons\n * feather 免费的 icons\n * nord 北欧性冷淡风主题配色\n * unsplash 提供免费的高清图片\n * pexels 提供免费的高清图片\n * colorkitty 从你的图片中提取配色\n * design.youzan 有赞设计原则\n * iconfont 阿里巴巴矢量图标库\n * undraw 免费的矢量插画\n * icomoon 矢量图标库\n * cssicon 所有的 icon 都是纯 css 画的 缺点：icon 不够多\n * css triangle generator 帮你快速用 css 做出三角形\n * clippy 在线帮你使用 css clip-path 做出各种形状的图形\n * lorem picsum 提供免费的占位图\n * canva 可画 生成插画、封面、海报、头像等\n * 404页 404页素材\n * collectui 按功能组件分类的设计图\n * smartmockups 产品模板生成工具\n\n\n# 图库\n\n * uigradients 渐变色生成工具\n * freepik banner 图库\n * 觅元素一天免费下载十张 psd\n * 搞定设计 可以抠图\n * vectorizer 真正的 png 转 svg 神器\n * 站酷\n * 花瓣\n * 虎克 ps 学习教程\n * betheme\n * ui 中国\n\n\n# 有趣\n\n * 奇趣网站收藏家 收藏了很多有趣的网站\n * fc在线模拟器(小霸王游戏机) 童年回忆\n * 帮你百度一下 可以 点我测试一下-\n * 国际版 同帮我百度一下-点我测试一下-\n * wallhaven 壁纸网站-\n * url 地址播放 emojis 动画 在地址栏里面播放 emoji\n * can't unsee 强烈建议前端、客户端、ui 开发的同学玩下，检查一下自己对设计稿的敏感度怎么样\n * ggtalk 平时一直在听的一个技术博客\n * awesome-comment 里面收集了很多有趣的代码注释\n * text-img 都将图片转化为 ascii 用来写注释\n * weird-fonts 将普通字母转化为 特殊 unicode\n * snake 在地址栏里面玩贪吃蛇\n * zero-width-lib 利用零宽度字符实现 隐形水印、加密信息分享、逃脱词匹配，很有创意\n * abbreviations 查看一个简写是什么意思的网站\n * magi ai 搜索神器，超屌\n * 诺基亚短信图片生成器\n\n\n# 交互\n\n * 微交互 里面收集了市面上很多很好的微交互例子 值得学习\n * little big details 同上，一个国外微交互汇集网站\n * cruip 登录页的各种页面设计，可以免费下载模板\n * comixify 一个波兰团队做了非常好玩的工具，可以把视频自动转成漫画，上图是他们提供的 demo，效果很棒。\n * taiko-web 太鼓达人网页版 只能说很 6\n\n\n# 教程\n\n * npx 教你怎么合理的使用 npx\n * hacksplaining 网络安全学习网站\n * mobile-web-best-practice 移动 web 最佳实践\n\n\n# 产品\n\n * 产品大牛 什么有很多完整的产品原型可以借鉴\n * 磨刀 快速出 ui 原型\n\n\n# 实用\n\n * webden 在线网页编辑器，轻便快捷\n * browser-update 浏览器版本更新提示插件\n * typeform 一个国外的在线调查问卷网站\n * videofk videofk 视频在线解析下载\n * 全历史 历史内容聚合网站\n * uzerme 云端办公工具\n * sobooks 强大的电子书资源网站\n * 稿定设计 键式设计工具+智能抠图\n * 大力盘 百度网盘搜索\n * enfi 下载器 不限速下载器\n * 来画视频 像做 ppt 一样做短视频\n * arkie 海报制作工具\n * 优品 ppt\n * 比格 ppt\n * 高清免费图片\n * 高清免费图片 2\n * shapedivider 生成波浪分隔线\n * notion 知识库、快速笔记、tasklist、日记、读书清单，各种类型，应有尽有\n\n\n# talk\n\n * peerigon-talks 收集了不少有意思的 talks\n\n\n# 算法\n\n * leetcode 用 js 刷 leetcode\n\n\n# 生活\n\n * ventusky 风雨气温图",charsets:{cjk:!0}},{title:"友情连接",frontmatter:{title:"友情连接",date:"2021-10-28T12:52:20.000Z",permalink:"/friends",article:!1,sidebar:!1,comment:!0,readingShow:"top"},regularPath:"/10.%E6%9B%B4%E5%A4%9A/99.%E5%8F%8B%E6%83%85%E8%BF%9E%E6%8E%A5.html",relativePath:"10.更多/99.友情连接.md",key:"v-3fede6a8",path:"/friends/",lastUpdated:"2022/10/18 下午3:59:55",lastUpdatedTimestamp:1666079995e3,headersStr:null,content:"Max-Kevin\n\n一个没有梦想的咸鱼   💻学习📝记录🔗分享\n\n- name: Max-Kevin\n  desc: 一个没有梦想的咸鱼   💻学习📝记录🔗分享\n  avatar: https://max-kevin.github.io/blogs/egg.png\n  link: https://max-kevin.github.io/blogs/\n  bgColor: '#FFB6C1'\n  textColor: '#621529'\n\n\n1\n2\n3\n4\n5\n6\n\n\n与我 联系 或者 在本页面评论区留言您的友链信息，格式：(点击代码块右上角一键复制)\n\n- name: Young Kbt Blog\t# 昵称\n  desc: 故事由我书写，旅程由你见证，传奇由她聆听\t# 介绍\n  avatar: https://cdn.staticaly.com/gh/Kele-Bingtang/static@master/user/avatar2.png\t# 头像\n  link: https://notes.youngkbt.cn/\t# 链接\n  bgColor: '#FFB6C1'\t# 可选\n  textColor: '#621529'\t# 可选\n\n\n1\n2\n3\n4\n5\n6\n\n\n申请前记得先添加本站哦~",normalizedContent:"max-kevin\n\n一个没有梦想的咸鱼   💻学习📝记录🔗分享\n\n- name: max-kevin\n  desc: 一个没有梦想的咸鱼   💻学习📝记录🔗分享\n  avatar: https://max-kevin.github.io/blogs/egg.png\n  link: https://max-kevin.github.io/blogs/\n  bgcolor: '#ffb6c1'\n  textcolor: '#621529'\n\n\n1\n2\n3\n4\n5\n6\n\n\n与我 联系 或者 在本页面评论区留言您的友链信息，格式：(点击代码块右上角一键复制)\n\n- name: young kbt blog\t# 昵称\n  desc: 故事由我书写，旅程由你见证，传奇由她聆听\t# 介绍\n  avatar: https://cdn.staticaly.com/gh/kele-bingtang/static@master/user/avatar2.png\t# 头像\n  link: https://notes.youngkbt.cn/\t# 链接\n  bgcolor: '#ffb6c1'\t# 可选\n  textcolor: '#621529'\t# 可选\n\n\n1\n2\n3\n4\n5\n6\n\n\n申请前记得先添加本站哦~",charsets:{cjk:!0}},{title:"分类",frontmatter:{categoriesPage:!0,title:"分类",permalink:"/categories/",article:!1,readingShow:"top"},regularPath:"/@pages/categoriesPage.html",relativePath:"@pages/categoriesPage.md",key:"v-1fd32e2a",path:"/categories/",lastUpdated:"2022/9/22 下午4:28:09",lastUpdatedTimestamp:1663835289e3,headersStr:null,content:"",normalizedContent:"",charsets:{}},{title:"私密文章登录",frontmatter:{title:"私密文章登录",date:"2022-09-25T00:00:00.000Z",permalink:"/vdoing/login/",sidebar:!1,article:!1,comment:!1,editLink:!1,readingShow:"top"},regularPath:"/99.%E7%A7%81%E5%AF%86%E6%96%87%E7%AB%A0%E7%99%BB%E5%BD%95.html",relativePath:"99.私密文章登录.md",key:"v-1b67533c",path:"/vdoing/login/",lastUpdated:"2022/10/18 下午3:59:55",lastUpdatedTimestamp:1666079995e3,headersStr:null,content:"您当前访问的是博主的私密文章，请输入有效的用户名和密码。如果没有，请在评论区或者其他途径向博主获取。",normalizedContent:"您当前访问的是博主的私密文章，请输入有效的用户名和密码。如果没有，请在评论区或者其他途径向博主获取。",charsets:{cjk:!0}},{title:"归档",frontmatter:{archivesPage:!0,title:"归档",permalink:"/archives/",article:!1,readingShow:"top"},regularPath:"/@pages/archivesPage.html",relativePath:"@pages/archivesPage.md",key:"v-0e579d4a",path:"/archives/",lastUpdated:"2022/9/22 下午4:28:09",lastUpdatedTimestamp:1663835289e3,headersStr:null,content:"",normalizedContent:"",charsets:{}},{title:"标签",frontmatter:{tagsPage:!0,title:"标签",permalink:"/tags/",article:!1,readingShow:"top"},regularPath:"/@pages/tagsPage.html",relativePath:"@pages/tagsPage.md",key:"v-591997ca",path:"/tags/",lastUpdated:"2022/9/22 下午4:28:09",lastUpdatedTimestamp:1663835289e3,headersStr:null,content:"",normalizedContent:"",charsets:{}},{title:"Home",frontmatter:{home:!0,heroText:"Max-Kevin",tagline:"有形即有度，有度必满盈。故君子之思不器，君子之行不器，君子之量不器。",pageClass:"vdoing-index-class",postList:"detailed",readingShow:"top"},regularPath:"/",relativePath:"index.md",key:"v-08d0b636",path:"/",lastUpdated:"2022/9/22 下午4:28:09",lastUpdatedTimestamp:1663835289e3,headersStr:null,content:"",normalizedContent:"",charsets:{}}],themeConfig:{nav:[{text:"首页",link:"/"},{text:"随笔",link:"/speak/"},{text:"前端",link:"/web/",items:[{text:"HTML",items:[{text:"测试",link:"/web/"}]},{text:"CSS",items:[{text:"测试",link:"/web/"}]},{text:"JavaScript",items:[{text:"测试",link:"/web/"}]}]},{text:"技术",link:"/technology/",items:[{text:"技术文档",link:"/technology/doc/"}]},{text:"书籍",link:"/books/",items:[{text:"《ES6 教程》",link:"/books/es6/"},{text:"《Git》",link:"/books/git/"}]},{text:"导航站",link:"/navigation/"},{text:"我的",items:[{text:"收藏",link:"/whell/web/"}]},{text:"更多",items:[{text:"友情链接",link:"/friends/"}]}],sidebarDepth:2,logo:"/egg.png",repo:"https://github.com/Max-Kevin",searchMaxSuggestions:10,lastUpdated:"更新时间",docsDir:"docs",editLinks:!1,editLinkText:"编辑此页",categoryText:"随笔",bodyBgImg:["./img/0001001_p01.png","./img/0001001_p02.jpg","./img/0001001_p03.jpg","./img/0001001_p04.jpg","./img/0001001_p05.jpg","./img/0001001_p06.jpg","./img/0001001_p07.jpg","./img/0001001_p08.jpg","./img/0001001_p09.jpg"],bodyBgImgOpacity:.3,contentBgStyle:1,privatePage:{openPrivate:!0,username:"max-kevin",password:"123456",expire:"5h",loginPath:"/vdoing/login/",loginKey:"vdoing_manager",loginSession:!1,firstLogin:0,firstLoginKey:"vdoing_first_login"},sidebar:{"/00.目录页/":[{title:"导航栏-目录页",collapsable:!0,children:[["00.导航栏-目录页/01.随笔.md","随便写点","/speak"],["00.导航栏-目录页/03.技术.md","开发工具","/technology"],["00.导航栏-目录页/06.书籍.md","书籍","/books"],["00.导航栏-目录页/09.前端.md","前端知识","/web"]]},{title:"技术-目录页",collapsable:!0,children:[["03.技术-目录页/05.技术文档.md","开发工具","/technology/doc"]]},{title:"书籍-目录页",collapsable:!0,children:[{title:"学习书籍",collapsable:!0,children:[["06.书籍-目录页/10.学习书籍/05.《ES6 教程》笔记.md","《ES6 教程》笔记","/books/es6/"],["06.书籍-目录页/10.学习书籍/10.《Git》学习笔记.md","《Git》学习笔记","/books/git/"]]}]},{title:"前端-目录页",collapsable:!0,children:[{title:"HTML",collapsable:!0,children:[]},{title:"CSS",collapsable:!0,children:[]},{title:"JavaScript",collapsable:!0,children:[]}]}],catalogue:{"随笔":"/speak","技术":"/technology","书籍":"/books","前端":"/web","技术文档":"/technology/doc","《ES6 教程》笔记":"/books/es6/","《Git》学习笔记":"/books/git/"},"/01.随笔/":[["01.吐槽.md","每日吐槽","/speak/d39dce/"],["02.测试私密文章.md","测试私密文章","/pages/b6d59b/"]],"/03.技术/":[{title:"技术文档",collapsable:!0,children:[["05.技术文档/01.Git使用手册.md","Git使用手册","/pages/9a7ee40fc232253e"],["05.技术文档/02.Markdown使用教程.md","Markdown使用教程","/pages/ad247c4332211551"],["05.技术文档/03.npm常用命令.md","npm常用命令","/pages/61f2f95fd7da14fd"],["05.技术文档/10.npm packageJson属性详解.md","npm packageJson属性详解","/pages/dec4f3f00e71a312"],["05.技术文档/15.yaml语言教程.md","yaml语言教程","/pages/4e8444e2d534d14f"],["05.技术文档/20.Git修改分支名.md","Git修改分支名","/pages/922650/"]]}],"/06.书籍/":[{title:"《ES6 教程》笔记",collapsable:!0,children:[["05.《ES6 教程》笔记/01.ECMAScript 6 简介.md","ECMAScript 6 简介","/pages/f344d070a1031ef7"],["05.《ES6 教程》笔记/02.let 和 const 命令.md","let 和 const 命令","/pages/c1edd70a6b7c7872"],["05.《ES6 教程》笔记/03.变量的解构赋值.md","变量的解构赋值","/pages/b1ab10a62f7564da"],["05.《ES6 教程》笔记/04.字符串的扩展.md","字符串的扩展","/pages/ca89eca8adeba5f4"],["05.《ES6 教程》笔记/05.字符串的新增方法.md","字符串的新增方法","/pages/a650b4a0ebfc9350"],["05.《ES6 教程》笔记/06.正则的扩展.md","正则的扩展","/pages/0473261a6ab0ee8c"],["05.《ES6 教程》笔记/07.数值的扩展.md","数值的扩展","/pages/5dfea9a0f2d1a392"],["05.《ES6 教程》笔记/08.函数的扩展.md","函数的扩展","/pages/8ed309d668b20264"],["05.《ES6 教程》笔记/09.数组的扩展.md","数组的扩展","/pages/e34009d60d8bc4b2"],["05.《ES6 教程》笔记/10.对象的扩展.md","对象的扩展","/pages/b5e3e0a0ff6e9c25"],["05.《ES6 教程》笔记/11.对象的新增方法.md","对象的新增方法","/pages/e85e68947502cf90"],["05.《ES6 教程》笔记/12.Symbol.md","Symbol","/pages/02c86eb2792f3262"],["05.《ES6 教程》笔记/13.Set 和 Map 数据结构.md","Set 和 Map 数据结构","/pages/0c21dae358fca16b"],["05.《ES6 教程》笔记/14.Proxy.md","Proxy","/pages/f56ec2ab97d60483"],["05.《ES6 教程》笔记/15.Reflect.md","Reflect","/pages/74de3e45e4491e95"],["05.《ES6 教程》笔记/16.Promise 对象.md","Promise 对象","/pages/2810ae8985e9bd52"],["05.《ES6 教程》笔记/17.Iterator 和 for-of 循环.md","Iterator 和 for-of 循环","/pages/48df907ad3570f3d"],["05.《ES6 教程》笔记/18.Generator 函数的语法.md","Generator 函数的语法","/pages/718b48ed9ce0adce"],["05.《ES6 教程》笔记/19.Generator 函数的异步应用.md","Generator 函数的异步应用","/pages/75af7031eb66847b"],["05.《ES6 教程》笔记/20.async 函数.md","async 函数","/pages/3777253e65bac487"],["05.《ES6 教程》笔记/21.Class 的基本语法.md","Class 的基本语法","/pages/e831e1593c82bbe0"],["05.《ES6 教程》笔记/22.Class 的继承.md","Class 的继承","/pages/83f8c3a0cd87dd83"],["05.《ES6 教程》笔记/23.Module 的语法.md","Module 的语法","/pages/efe2fb04eb8ac5fb"],["05.《ES6 教程》笔记/24.Module 的加载实现.md","Module 的加载实现","/pages/a79ca2e64ceae213"],["05.《ES6 教程》笔记/25.编程风格.md","编程风格","/pages/984bf549204bb266"],["05.《ES6 教程》笔记/26.读懂 ECMAScript 规格.md","读懂 ECMAScript 规格","/pages/32c35f7651d6e58e"],["05.《ES6 教程》笔记/27.异步遍历器.md","异步遍历器","/pages/16121351be68691b"],["05.《ES6 教程》笔记/28.ArrayBuffer.md","ArrayBuffer","/pages/a2ba314746bfdbdd"],["05.《ES6 教程》笔记/29.最新提案.md","最新提案","/pages/7188882b8d65af1b"],["05.《ES6 教程》笔记/30.装饰器.md","装饰器","/pages/e97bc1e5626b082c"],["05.《ES6 教程》笔记/31.函数式编程.md","函数式编程","/pages/1cf50330655efc69"],["05.《ES6 教程》笔记/32.Mixin.md","Mixin","/pages/6a8e2dc558da1b39"],["05.《ES6 教程》笔记/33.SIMD.md","SIMD","/pages/8e8f80f69b775a56"],["05.《ES6 教程》笔记/34.参考链接.md","参考链接","/pages/ea6f3b870f6dab69"]]},{title:"《Git》学习笔记",collapsable:!0,children:[{title:"手册",collapsable:!0,children:[["10.《Git》学习笔记/10.手册/00.常用Git命令清单.md","常用Git命令清单","/pages/8292d8/"],["10.《Git》学习笔记/10.手册/03.Git变基合并.md","Git变基合并","/pages/c10281/"],["10.《Git》学习笔记/10.手册/06.Git命令思维导图.md","Git命令思维导图","/pages/4cbc21/"]]},{title:"文档笔记",collapsable:!0,children:[["10.《Git》学习笔记/20.文档笔记/10.Git基础与命令.md","Git基础与命令","/pages/635088/"],["10.《Git》学习笔记/20.文档笔记/20.Git分支-分支原理.md","Git分支-分支原理","/pages/4bef1a/"],["10.《Git》学习笔记/20.文档笔记/30.Git分支的新建与合并-分支操作.md","Git分支的新建与合并-分支操作","/pages/ea5a8c/"],["10.《Git》学习笔记/20.文档笔记/40.Git分支管理-查看分支.md","Git分支管理-查看分支","/pages/a399b3/"],["10.《Git》学习笔记/20.文档笔记/50.Git分支开发工作流.md","Git分支开发工作流","/pages/49ee30/"],["10.《Git》学习笔记/20.文档笔记/60.Git分支-远程分支.md","Git分支-远程分支","/pages/574d62/"],["10.《Git》学习笔记/20.文档笔记/70.Git分支-变基.md","Git分支-变基","/pages/3a3247/"],["10.《Git》学习笔记/20.文档笔记/80.Git工具-查看修订版本.md","Git工具-查看修订版本","/pages/c984d1/"],["10.《Git》学习笔记/20.文档笔记/90.Git工具-交互式暂存.md","Git工具-交互式暂存","/pages/76d859/"],["10.《Git》学习笔记/20.文档笔记/100.Git工具-重写历史.md","Git工具-重写历史","/pages/1832fe/"],["10.《Git》学习笔记/20.文档笔记/110.Git工具-重置揭密.md","Git工具-重置揭密","/pages/d9e9c6/"]]}]}],"/08.我的/":[{title:"收藏夹",collapsable:!0,children:[["05.收藏夹/01.网站轮子.md","网站轮子","/whell/web/"]]}],"/09.前端/":[{title:"HTML笔记",collapsable:!0,children:[]},{title:"CSS笔记",collapsable:!0,children:[]},{title:"JavaScript笔记",collapsable:!0,children:[]}],"/10.更多/":[["99.友情连接.md","友情连接","/friends"]]},blogInfo:{blogCreate:"2022-06-04",indexView:!0,pageView:!0,readingTime:!0,eachFileWords:[{name:"随笔",filePath:"C:\\Users\\Baby\\Desktop\\codeBlogs\\docs\\00.目录页\\00.导航栏-目录页\\01.随笔.md",wordsCount:45,readingTime:"1",pageComponent:{name:"Catalogue",data:{key:"01.随笔",imgUrl:"/img/speak_tucao.png",description:"就纯粹的吐吐槽，写写字"}},title:"随便写点",date:"2022-09-25T12:00:00.000Z",permalink:"/speak",sidebar:!1,article:!1,comment:!1,editLink:!1},{name:"技术",filePath:"C:\\Users\\Baby\\Desktop\\codeBlogs\\docs\\00.目录页\\00.导航栏-目录页\\03.技术.md",wordsCount:48,readingTime:"1",pageComponent:{name:"Catalogue",data:{key:"03.技术",imgUrl:"/img/other.png",description:"技术文档、教程、技巧、总结等文章"}},title:"开发工具",date:"2022-09-25T12:00:00.000Z",permalink:"/technology",sidebar:!1,article:!1,comment:!1,editLink:!1},{name:"书籍",filePath:"C:\\Users\\Baby\\Desktop\\codeBlogs\\docs\\00.目录页\\00.导航栏-目录页\\06.书籍.md",wordsCount:50,readingTime:"1",pageComponent:{name:"Catalogue",data:{path:"00.目录页/06.书籍-目录页",imgUrl:"/img/web.png",description:"JavaScript、ES6、Vue框架等前端技术"}},title:"书籍",date:"2020-03-11T21:50:53.000Z",permalink:"/books",sidebar:!1,article:!1,comment:!1,editLink:!1},{name:"前端",filePath:"C:\\Users\\Baby\\Desktop\\codeBlogs\\docs\\00.目录页\\00.导航栏-目录页\\09.前端.md",wordsCount:53,readingTime:"1",pageComponent:{name:"Catalogue",data:{key:"00.目录页/09.前端-目录页",imgUrl:"/img/speak_tucao.png",description:"有关前端的知识文章笔录"}},title:"前端知识",date:"2022-09-25T12:00:00.000Z",permalink:"/web",sidebar:!1,article:!1,comment:!1,editLink:!1},{name:"技术文档",filePath:"C:\\Users\\Baby\\Desktop\\codeBlogs\\docs\\00.目录页\\03.技术-目录页\\05.技术文档.md",wordsCount:61,readingTime:"1",pageComponent:{name:"Catalogue",data:{key:"03.技术/05.技术文档",imgUrl:"https://symbol-node.oss-cn-shanghai.aliyuncs.com/blog/basic/goland.png",description:"开发工具,Visual Studio Code,搜索引擎"}},title:"开发工具",date:"2022-06-08T14:35:30.000Z",permalink:"/technology/doc",sidebar:!1,article:!1,comment:!1,editLink:!1},{name:"《ES6 教程》笔记",filePath:"C:\\Users\\Baby\\Desktop\\codeBlogs\\docs\\00.目录页\\06.书籍-目录页\\10.学习书籍\\05.《ES6 教程》笔记.md",wordsCount:83,readingTime:"1",pageComponent:{name:"Catalogue",data:{path:"06.书籍/05.《ES6 教程》笔记",description:"本章内容为博主在原教程基础上添加学习笔记，教程版权归原作者所有。来源：<a href='https://es6.ruanyifeng.com/' target='_blank'>ES6教程</a>"}},title:"《ES6 教程》笔记",date:"2020-01-12T15:49:22.000Z",permalink:"/books/es6/",sidebar:!1,article:!1,comment:!1,editLink:!1},{name:"《Git》学习笔记",filePath:"C:\\Users\\Baby\\Desktop\\codeBlogs\\docs\\00.目录页\\06.书籍-目录页\\10.学习书籍\\10.《Git》学习笔记.md",wordsCount:79,readingTime:"1",pageComponent:{name:"Catalogue",data:{path:"06.书籍/10.《Git》学习笔记",imgUrl:"https://avatars3.githubusercontent.com/u/18133?s=200&v=4",description:"<a href='https://git-scm.com/book/zh/v2' target='_blank'>Git官网文档</a>的学习笔记，以官方文档为准。"}},title:"《Git》学习笔记",date:"2020-11-18T17:40:48.000Z",permalink:"/books/git/",sidebar:!1,article:!1,comment:!1,editLink:!1},{name:"吐槽",filePath:"C:\\Users\\Baby\\Desktop\\codeBlogs\\docs\\01.随笔\\01.吐槽.md",wordsCount:131,readingTime:"1",title:"每日吐槽",date:"2022-05-10T15:12:38.000Z",permalink:"/speak/d39dce/",categories:["吐槽"],tags:[null]},{name:"测试私密文章",filePath:"C:\\Users\\Baby\\Desktop\\codeBlogs\\docs\\01.随笔\\02.测试私密文章.md",wordsCount:29,readingTime:"1",private:!0,title:"测试私密文章",date:"2022-09-22T16:55:13.000Z",permalink:"/pages/b6d59b/",categories:["随笔"],tags:[null]},{name:"Git使用手册",filePath:"C:\\Users\\Baby\\Desktop\\codeBlogs\\docs\\03.技术\\05.技术文档\\01.Git使用手册.md",wordsCount:"2.4k",readingTime:"10.2m",ititle:"Git使用手册",date:"2019-12-25T14:27:01.000Z",permalink:"/pages/9a7ee40fc232253e",categories:["技术","技术文档"],tags:[null],title:"Git使用手册"},{name:"Markdown使用教程",filePath:"C:\\Users\\Baby\\Desktop\\codeBlogs\\docs\\03.技术\\05.技术文档\\02.Markdown使用教程.md",wordsCount:"4.2k",readingTime:"18.4m",title:"Markdown使用教程",date:"2019-12-25T14:27:01.000Z",permalink:"/pages/ad247c4332211551",categories:["技术","技术文档"],tags:[null]},{name:"npm常用命令",filePath:"C:\\Users\\Baby\\Desktop\\codeBlogs\\docs\\03.技术\\05.技术文档\\03.npm常用命令.md",wordsCount:"1k",readingTime:"4m",title:"npm常用命令",date:"2019-12-25T14:27:01.000Z",permalink:"/pages/61f2f95fd7da14fd",categories:["技术","技术文档"],tags:[null]},{name:"npm packageJson属性详解",filePath:"C:\\Users\\Baby\\Desktop\\codeBlogs\\docs\\03.技术\\05.技术文档\\10.npm packageJson属性详解.md",wordsCount:"4.3k",readingTime:"17.2m",title:"npm packageJson属性详解",date:"2020-04-08T17:16:38.000Z",permalink:"/pages/dec4f3f00e71a312",categories:["技术","技术文档"],tags:[null]},{name:"yaml语言教程",filePath:"C:\\Users\\Baby\\Desktop\\codeBlogs\\docs\\03.技术\\05.技术文档\\15.yaml语言教程.md",wordsCount:"1.3k",readingTime:"5.3m",title:"yaml语言教程",date:"2019-12-25T14:27:01.000Z",permalink:"/pages/4e8444e2d534d14f",categories:["技术","技术文档"],tags:[null]},{name:"Git修改分支名",filePath:"C:\\Users\\Baby\\Desktop\\codeBlogs\\docs\\03.技术\\05.技术文档\\20.Git修改分支名.md",wordsCount:129,readingTime:"1",title:"Git修改分支名",date:"2022-08-11T10:51:18.000Z",permalink:"/pages/922650/",categories:["技术","技术文档"],tags:[null]},{name:"ECMAScript 6 简介",filePath:"C:\\Users\\Baby\\Desktop\\codeBlogs\\docs\\06.书籍\\05.《ES6 教程》笔记\\01.ECMAScript 6 简介.md",wordsCount:"4.5k",readingTime:"18.3m",title:"ECMAScript 6 简介",date:"2020-01-12T15:45:35.000Z",permalink:"/pages/f344d070a1031ef7",author:"阮一峰",categories:["《ES6 教程》笔记"],tags:["ES6"]},{name:"let 和 const 命令",filePath:"C:\\Users\\Baby\\Desktop\\codeBlogs\\docs\\06.书籍\\05.《ES6 教程》笔记\\02.let 和 const 命令.md",wordsCount:"5.3k",readingTime:"20.4m",title:"let 和 const 命令",date:"2020-02-09T16:00:29.000Z",permalink:"/pages/c1edd70a6b7c7872",author:"阮一峰",categories:["《ES6 教程》笔记"],tags:["ES6"]},{name:"变量的解构赋值",filePath:"C:\\Users\\Baby\\Desktop\\codeBlogs\\docs\\06.书籍\\05.《ES6 教程》笔记\\03.变量的解构赋值.md",wordsCount:"4k",readingTime:"16.4m",title:"变量的解构赋值",date:"2020-02-09T16:00:29.000Z",permalink:"/pages/b1ab10a62f7564da",author:"阮一峰",categories:["《ES6 教程》笔记"],tags:["ES6"]},{name:"字符串的扩展",filePath:"C:\\Users\\Baby\\Desktop\\codeBlogs\\docs\\06.书籍\\05.《ES6 教程》笔记\\04.字符串的扩展.md",wordsCount:"4.1k",readingTime:"17.2m",title:"字符串的扩展",date:"2020-02-09T16:00:29.000Z",permalink:"/pages/ca89eca8adeba5f4",author:"阮一峰",categories:["《ES6 教程》笔记"],tags:["ES6"]},{name:"字符串的新增方法",filePath:"C:\\Users\\Baby\\Desktop\\codeBlogs\\docs\\06.书籍\\05.《ES6 教程》笔记\\05.字符串的新增方法.md",wordsCount:"2.8k",readingTime:"11.1m",title:"字符串的新增方法",date:"2020-02-09T16:00:29.000Z",permalink:"/pages/a650b4a0ebfc9350",author:"阮一峰",categories:["《ES6 教程》笔记"],tags:["ES6"]},{name:"正则的扩展",filePath:"C:\\Users\\Baby\\Desktop\\codeBlogs\\docs\\06.书籍\\05.《ES6 教程》笔记\\06.正则的扩展.md",wordsCount:"5k",readingTime:"20.3m",title:"正则的扩展",date:"2020-02-09T16:00:29.000Z",permalink:"/pages/0473261a6ab0ee8c",author:"阮一峰",categories:["《ES6 教程》笔记"],tags:["ES6"]},{name:"数值的扩展",filePath:"C:\\Users\\Baby\\Desktop\\codeBlogs\\docs\\06.书籍\\05.《ES6 教程》笔记\\07.数值的扩展.md",wordsCount:"6k",readingTime:"25.8m",title:"数值的扩展",date:"2020-02-09T16:00:29.000Z",permalink:"/pages/5dfea9a0f2d1a392",author:"阮一峰",categories:["《ES6 教程》笔记"],tags:["ES6"]},{name:"函数的扩展",filePath:"C:\\Users\\Baby\\Desktop\\codeBlogs\\docs\\06.书籍\\05.《ES6 教程》笔记\\08.函数的扩展.md",wordsCount:"9.5k",readingTime:"38m",title:"函数的扩展",date:"2020-02-09T16:00:29.000Z",permalink:"/pages/8ed309d668b20264",author:"阮一峰",categories:["《ES6 教程》笔记"],tags:["ES6"]},{name:"数组的扩展",filePath:"C:\\Users\\Baby\\Desktop\\codeBlogs\\docs\\06.书籍\\05.《ES6 教程》笔记\\09.数组的扩展.md",wordsCount:"6.4k",readingTime:"26.6m",title:"数组的扩展",date:"2020-02-09T16:00:29.000Z",permalink:"/pages/e34009d60d8bc4b2",author:"阮一峰",categories:["《ES6 教程》笔记"],tags:["ES6"]},{name:"对象的扩展",filePath:"C:\\Users\\Baby\\Desktop\\codeBlogs\\docs\\06.书籍\\05.《ES6 教程》笔记\\10.对象的扩展.md",wordsCount:"5.6k",readingTime:"22.5m",title:"对象的扩展",date:"2020-02-09T16:00:29.000Z",permalink:"/pages/b5e3e0a0ff6e9c25",author:"阮一峰",categories:["《ES6 教程》笔记"],tags:["ES6"]},{name:"对象的新增方法",filePath:"C:\\Users\\Baby\\Desktop\\codeBlogs\\docs\\06.书籍\\05.《ES6 教程》笔记\\11.对象的新增方法.md",wordsCount:"4.6k",readingTime:"19.8m",title:"对象的新增方法",date:"2020-02-09T16:00:29.000Z",permalink:"/pages/e85e68947502cf90",author:"阮一峰",categories:["《ES6 教程》笔记"],tags:["ES6"]},{name:"Symbol",filePath:"C:\\Users\\Baby\\Desktop\\codeBlogs\\docs\\06.书籍\\05.《ES6 教程》笔记\\12.Symbol.md",wordsCount:"5.4k",readingTime:"23.1m",title:"Symbol",date:"2020-02-09T16:00:29.000Z",permalink:"/pages/02c86eb2792f3262",author:"阮一峰",categories:["《ES6 教程》笔记"],tags:["ES6"]},{name:"Set 和 Map 数据结构",filePath:"C:\\Users\\Baby\\Desktop\\codeBlogs\\docs\\06.书籍\\05.《ES6 教程》笔记\\13.Set 和 Map 数据结构.md",wordsCount:"7.2k",readingTime:"30.4m",title:"Set 和 Map 数据结构",date:"2020-02-09T16:00:29.000Z",permalink:"/pages/0c21dae358fca16b",author:"阮一峰",categories:["《ES6 教程》笔记"],tags:["ES6"]},{name:"Proxy",filePath:"C:\\Users\\Baby\\Desktop\\codeBlogs\\docs\\06.书籍\\05.《ES6 教程》笔记\\14.Proxy.md",wordsCount:"6.4k",readingTime:"27.7m",title:"Proxy",date:"2020-02-09T16:00:29.000Z",permalink:"/pages/f56ec2ab97d60483",author:"阮一峰",categories:["《ES6 教程》笔记"],tags:["ES6"]},{name:"Reflect",filePath:"C:\\Users\\Baby\\Desktop\\codeBlogs\\docs\\06.书籍\\05.《ES6 教程》笔记\\15.Reflect.md",wordsCount:"2.8k",readingTime:"12.7m",title:"Reflect",date:"2020-02-09T16:00:29.000Z",permalink:"/pages/74de3e45e4491e95",author:"阮一峰",categories:["《ES6 教程》笔记"],tags:["ES6"]},{name:"Promise 对象",filePath:"C:\\Users\\Baby\\Desktop\\codeBlogs\\docs\\06.书籍\\05.《ES6 教程》笔记\\16.Promise 对象.md",wordsCount:"8.3k",readingTime:"34.1m",title:"Promise 对象",date:"2020-02-09T16:00:29.000Z",permalink:"/pages/2810ae8985e9bd52",author:"阮一峰",categories:["《ES6 教程》笔记"],tags:["ES6"]},{name:"Iterator 和 for-of 循环",filePath:"C:\\Users\\Baby\\Desktop\\codeBlogs\\docs\\06.书籍\\05.《ES6 教程》笔记\\17.Iterator 和 for-of 循环.md",wordsCount:"5.6k",readingTime:"23.3m",title:"Iterator 和 for-of 循环",date:"2020-02-09T16:00:29.000Z",permalink:"/pages/48df907ad3570f3d",author:"阮一峰",categories:["《ES6 教程》笔记"],tags:["ES6"]},{name:"Generator 函数的语法",filePath:"C:\\Users\\Baby\\Desktop\\codeBlogs\\docs\\06.书籍\\05.《ES6 教程》笔记\\18.Generator 函数的语法.md",wordsCount:"10.9k",readingTime:"44.9m",title:"Generator 函数的语法",date:"2020-02-09T16:00:29.000Z",permalink:"/pages/718b48ed9ce0adce",author:"阮一峰",categories:["《ES6 教程》笔记"],tags:["ES6"]},{name:"Generator 函数的异步应用",filePath:"C:\\Users\\Baby\\Desktop\\codeBlogs\\docs\\06.书籍\\05.《ES6 教程》笔记\\19.Generator 函数的异步应用.md",wordsCount:"6.1k",readingTime:"24.1m",title:"Generator 函数的异步应用",date:"2020-02-09T16:00:29.000Z",permalink:"/pages/75af7031eb66847b",author:"阮一峰",categories:["《ES6 教程》笔记"],tags:["ES6"]},{name:"async 函数",filePath:"C:\\Users\\Baby\\Desktop\\codeBlogs\\docs\\06.书籍\\05.《ES6 教程》笔记\\20.async 函数.md",wordsCount:"5.2k",readingTime:"21.7m",title:"async 函数",date:"2020-02-09T16:00:29.000Z",permalink:"/pages/3777253e65bac487",author:"阮一峰",categories:["《ES6 教程》笔记"],tags:["ES6"]},{name:"Class 的基本语法",filePath:"C:\\Users\\Baby\\Desktop\\codeBlogs\\docs\\06.书籍\\05.《ES6 教程》笔记\\21.Class 的基本语法.md",wordsCount:"5.4k",readingTime:"22m",title:"Class 的基本语法",date:"2020-02-09T16:00:29.000Z",permalink:"/pages/e831e1593c82bbe0",author:"阮一峰",categories:["《ES6 教程》笔记"],tags:["ES6"]},{name:"Class 的继承",filePath:"C:\\Users\\Baby\\Desktop\\codeBlogs\\docs\\06.书籍\\05.《ES6 教程》笔记\\22.Class 的继承.md",wordsCount:"4.2k",readingTime:"17.7m",title:"Class 的继承",date:"2020-02-09T16:00:29.000Z",permalink:"/pages/83f8c3a0cd87dd83",author:"阮一峰",categories:["《ES6 教程》笔记"],tags:["ES6"]},{name:"Module 的语法",filePath:"C:\\Users\\Baby\\Desktop\\codeBlogs\\docs\\06.书籍\\05.《ES6 教程》笔记\\23.Module 的语法.md",wordsCount:"5.8k",readingTime:"23m",title:"Module 的语法",date:"2020-02-09T16:00:29.000Z",permalink:"/pages/efe2fb04eb8ac5fb",author:"阮一峰",categories:["《ES6 教程》笔记"],tags:["ES6"]},{name:"Module 的加载实现",filePath:"C:\\Users\\Baby\\Desktop\\codeBlogs\\docs\\06.书籍\\05.《ES6 教程》笔记\\24.Module 的加载实现.md",wordsCount:"6.3k",readingTime:"25.7m",title:"Module 的加载实现",date:"2020-02-09T16:00:29.000Z",permalink:"/pages/a79ca2e64ceae213",author:"阮一峰",categories:["《ES6 教程》笔记"],tags:["ES6"]},{name:"编程风格",filePath:"C:\\Users\\Baby\\Desktop\\codeBlogs\\docs\\06.书籍\\05.《ES6 教程》笔记\\25.编程风格.md",wordsCount:"2.4k",readingTime:"10.6m",title:"编程风格",date:"2020-02-09T16:00:29.000Z",permalink:"/pages/984bf549204bb266",author:"阮一峰",categories:["《ES6 教程》笔记"],tags:["ES6"]},{name:"读懂 ECMAScript 规格",filePath:"C:\\Users\\Baby\\Desktop\\codeBlogs\\docs\\06.书籍\\05.《ES6 教程》笔记\\26.读懂 ECMAScript 规格.md",wordsCount:"3.7k",readingTime:"15.4m",title:"读懂 ECMAScript 规格",date:"2020-02-09T16:00:29.000Z",permalink:"/pages/32c35f7651d6e58e",author:"阮一峰",categories:["《ES6 教程》笔记"],tags:["ES6"]},{name:"异步遍历器",filePath:"C:\\Users\\Baby\\Desktop\\codeBlogs\\docs\\06.书籍\\05.《ES6 教程》笔记\\27.异步遍历器.md",wordsCount:"3.3k",readingTime:"13.8m",title:"异步遍历器",date:"2020-02-09T16:00:29.000Z",permalink:"/pages/16121351be68691b",author:"阮一峰",categories:["《ES6 教程》笔记"],tags:["ES6"]},{name:"ArrayBuffer",filePath:"C:\\Users\\Baby\\Desktop\\codeBlogs\\docs\\06.书籍\\05.《ES6 教程》笔记\\28.ArrayBuffer.md",wordsCount:"11.8k",readingTime:"47.8m",title:"ArrayBuffer",date:"2020-02-09T16:00:29.000Z",permalink:"/pages/a2ba314746bfdbdd",author:"阮一峰",categories:["《ES6 教程》笔记"],tags:["ES6"]},{name:"最新提案",filePath:"C:\\Users\\Baby\\Desktop\\codeBlogs\\docs\\06.书籍\\05.《ES6 教程》笔记\\29.最新提案.md",wordsCount:"4.2k",readingTime:"16.9m",title:"最新提案",date:"2020-02-09T16:00:30.000Z",permalink:"/pages/7188882b8d65af1b",author:"阮一峰",categories:["《ES6 教程》笔记"],tags:["ES6"]},{name:"装饰器",filePath:"C:\\Users\\Baby\\Desktop\\codeBlogs\\docs\\06.书籍\\05.《ES6 教程》笔记\\30.装饰器.md",wordsCount:"3.5k",readingTime:"15.5m",title:"装饰器",date:"2020-02-09T16:00:30.000Z",permalink:"/pages/e97bc1e5626b082c",author:"阮一峰",categories:["《ES6 教程》笔记"],tags:["ES6"]},{name:"函数式编程",filePath:"C:\\Users\\Baby\\Desktop\\codeBlogs\\docs\\06.书籍\\05.《ES6 教程》笔记\\31.函数式编程.md",wordsCount:"1.3k",readingTime:"5.7m",title:"函数式编程",date:"2020-02-09T16:00:30.000Z",permalink:"/pages/1cf50330655efc69",author:"阮一峰",categories:["《ES6 教程》笔记"],tags:["ES6"]},{name:"Mixin",filePath:"C:\\Users\\Baby\\Desktop\\codeBlogs\\docs\\06.书籍\\05.《ES6 教程》笔记\\32.Mixin.md",wordsCount:908,readingTime:"3.6m",title:"Mixin",date:"2020-02-09T16:00:30.000Z",permalink:"/pages/6a8e2dc558da1b39",author:"阮一峰",categories:["《ES6 教程》笔记"],tags:["ES6"]},{name:"SIMD",filePath:"C:\\Users\\Baby\\Desktop\\codeBlogs\\docs\\06.书籍\\05.《ES6 教程》笔记\\33.SIMD.md",wordsCount:"5.6k",readingTime:"25.1m",title:"SIMD",date:"2020-02-09T16:00:30.000Z",permalink:"/pages/8e8f80f69b775a56",author:"阮一峰",categories:["《ES6 教程》笔记"],tags:["ES6"]},{name:"参考链接",filePath:"C:\\Users\\Baby\\Desktop\\codeBlogs\\docs\\06.书籍\\05.《ES6 教程》笔记\\34.参考链接.md",wordsCount:"4.6k",readingTime:"25.1m",title:"参考链接",date:"2020-02-09T16:00:30.000Z",permalink:"/pages/ea6f3b870f6dab69",author:"阮一峰",categories:["《ES6 教程》笔记"],tags:["ES6"]},{name:"常用Git命令清单",filePath:"C:\\Users\\Baby\\Desktop\\codeBlogs\\docs\\06.书籍\\10.《Git》学习笔记\\10.手册\\00.常用Git命令清单.md",wordsCount:"1.8k",readingTime:"7.4m",title:"常用Git命令清单",date:"2020-11-18T17:43:57.000Z",permalink:"/pages/8292d8/",categories:["《Git》学习笔记"],tags:["Git"]},{name:"Git变基合并",filePath:"C:\\Users\\Baby\\Desktop\\codeBlogs\\docs\\06.书籍\\10.《Git》学习笔记\\10.手册\\03.Git变基合并.md",wordsCount:"1.3k",readingTime:"5.3m",title:"Git变基合并",date:"2020-11-18T17:43:57.000Z",permalink:"/pages/c10281/",categories:["《Git》学习笔记"],tags:["Git"]},{name:"Git命令思维导图",filePath:"C:\\Users\\Baby\\Desktop\\codeBlogs\\docs\\06.书籍\\10.《Git》学习笔记\\10.手册\\06.Git命令思维导图.md",wordsCount:36,readingTime:"1",title:"Git命令思维导图",date:"2020-11-18T17:46:22.000Z",permalink:"/pages/4cbc21/",categories:["《Git》学习笔记"],tags:["Git"]},{name:"Git基础与命令",filePath:"C:\\Users\\Baby\\Desktop\\codeBlogs\\docs\\06.书籍\\10.《Git》学习笔记\\20.文档笔记\\10.Git基础与命令.md",wordsCount:"4k",readingTime:"15.6m",title:"Git基础与命令",date:"2020-11-18T17:43:57.000Z",permalink:"/pages/635088/",categories:["《Git》学习笔记"],tags:["Git"]},{name:"Git工具-重写历史",filePath:"C:\\Users\\Baby\\Desktop\\codeBlogs\\docs\\06.书籍\\10.《Git》学习笔记\\20.文档笔记\\100.Git工具-重写历史.md",wordsCount:"3.9k",readingTime:"15.5m",title:"Git工具-重写历史",date:"2020-11-18T17:43:57.000Z",permalink:"/pages/1832fe/",categories:["《Git》学习笔记"],tags:["Git"]},{name:"Git工具-重置揭密",filePath:"C:\\Users\\Baby\\Desktop\\codeBlogs\\docs\\06.书籍\\10.《Git》学习笔记\\20.文档笔记\\110.Git工具-重置揭密.md",wordsCount:"4.1k",readingTime:"15.7m",title:"Git工具-重置揭密",date:"2020-11-18T17:43:57.000Z",permalink:"/pages/d9e9c6/",categories:["《Git》学习笔记"],tags:["Git"]},{name:"Git分支-分支原理",filePath:"C:\\Users\\Baby\\Desktop\\codeBlogs\\docs\\06.书籍\\10.《Git》学习笔记\\20.文档笔记\\20.Git分支-分支原理.md",wordsCount:"2k",readingTime:"7.8m",title:"Git分支-分支原理",date:"2020-11-18T17:43:57.000Z",permalink:"/pages/4bef1a/",categories:["《Git》学习笔记"],tags:["Git"]},{name:"Git分支的新建与合并-分支操作",filePath:"C:\\Users\\Baby\\Desktop\\codeBlogs\\docs\\06.书籍\\10.《Git》学习笔记\\20.文档笔记\\30.Git分支的新建与合并-分支操作.md",wordsCount:950,readingTime:"3.6m",title:"Git分支的新建与合并-分支操作",date:"2020-11-18T17:43:57.000Z",permalink:"/pages/ea5a8c/",categories:["《Git》学习笔记"],tags:["Git"]},{name:"Git分支管理-查看分支",filePath:"C:\\Users\\Baby\\Desktop\\codeBlogs\\docs\\06.书籍\\10.《Git》学习笔记\\20.文档笔记\\40.Git分支管理-查看分支.md",wordsCount:409,readingTime:"1.6m",title:"Git分支管理-查看分支",date:"2020-11-18T17:43:57.000Z",permalink:"/pages/a399b3/",categories:["《Git》学习笔记"],tags:["Git"]},{name:"Git分支开发工作流",filePath:"C:\\Users\\Baby\\Desktop\\codeBlogs\\docs\\06.书籍\\10.《Git》学习笔记\\20.文档笔记\\50.Git分支开发工作流.md",wordsCount:"1.3k",readingTime:"4.6m",title:"Git分支开发工作流",date:"2020-11-18T17:43:57.000Z",permalink:"/pages/49ee30/",categories:["《Git》学习笔记"],tags:["Git"]},{name:"Git分支-远程分支",filePath:"C:\\Users\\Baby\\Desktop\\codeBlogs\\docs\\06.书籍\\10.《Git》学习笔记\\20.文档笔记\\60.Git分支-远程分支.md",wordsCount:"3.5k",readingTime:"13.4m",title:"Git分支-远程分支",date:"2020-11-18T17:43:57.000Z",permalink:"/pages/574d62/",categories:["《Git》学习笔记"],tags:["Git"]},{name:"Git分支-变基",filePath:"C:\\Users\\Baby\\Desktop\\codeBlogs\\docs\\06.书籍\\10.《Git》学习笔记\\20.文档笔记\\70.Git分支-变基.md",wordsCount:"4.7k",readingTime:"17.3m",title:"Git分支-变基",date:"2020-11-18T17:43:57.000Z",permalink:"/pages/3a3247/",categories:["《Git》学习笔记"],tags:["Git"]},{name:"Git工具-查看修订版本",filePath:"C:\\Users\\Baby\\Desktop\\codeBlogs\\docs\\06.书籍\\10.《Git》学习笔记\\20.文档笔记\\80.Git工具-查看修订版本.md",wordsCount:"3.6k",readingTime:"14.1m",title:"Git工具-查看修订版本",date:"2020-11-18T17:43:57.000Z",permalink:"/pages/c984d1/",categories:["《Git》学习笔记"],tags:["Git"]},{name:"Git工具-交互式暂存",filePath:"C:\\Users\\Baby\\Desktop\\codeBlogs\\docs\\06.书籍\\10.《Git》学习笔记\\20.文档笔记\\90.Git工具-交互式暂存.md",wordsCount:"1.6k",readingTime:"7.3m",title:"Git工具-交互式暂存",date:"2020-11-18T17:43:57.000Z",permalink:"/pages/76d859/",categories:["《Git》学习笔记"],tags:["Git"]},{name:"网站轮子",filePath:"C:\\Users\\Baby\\Desktop\\codeBlogs\\docs\\08.我的\\05.收藏夹\\01.网站轮子.md",wordsCount:"2.8k",readingTime:"12.4m",title:"网站轮子",permalink:"/whell/web/",date:"2020-04-19T11:33:04.000Z",article:!1},{name:"友情连接",filePath:"C:\\Users\\Baby\\Desktop\\codeBlogs\\docs\\10.更多\\99.友情连接.md",wordsCount:172,readingTime:"1",title:"友情连接",date:"2021-10-28T12:52:20.000Z",permalink:"/friends",article:!1,sidebar:!1,comment:!0}],mdFileCountType:"archives",totalWords:"archives",moutedEvent:".tags-wrapper",indexIteration:2500,pageIteration:2500},indexImg:{navColor:1,switchNavColor:!1,bgTimeColor:!0,bgTimeColorArray:["transparent","rgba(255, 148, 48, .2)","rgba(0, 0, 0, .3)","rgba(0, 0, 0, .5)"],descFade:!0,desc:["有形即有度，有度必满盈。故君子之思不器，君子之行不器，君子之量不器 —— 《论语·为政》","无善无恶心之体，有善有恶意之动，知善知恶是良知，为善去恶是格物。 -- 王阳明","积跬步以至千里，致敬每个爱学习的你 —— 来自 Evan Xu","这一生波澜壮阔或是不惊都没问题 —— 来自 Weibw","故事由我书写，旅程由你见证，传奇由她聆听 —— 来自 Young Kbt","积跬步以至千里，致敬每个爱学习的你 —— 来自 Evan Xu","这一生波澜壮阔或是不惊都没问题 —— 来自 Weibw"],descFontSize:"1.4rem",descFadeInTime:200,descFadeOutTime:100,descNextTime:800,bubble:!1,bubblePosition:0,bubbleNum:200},author:{name:"Max-Kevin",link:"https://Max-Kevin.github.io/"},blogger:{avatar:"./avatar.jpg",name:"可乐",slogan:"人终究被少年不可得之物困其一生"},social:{icons:[{iconClass:"icon-youjian",title:"发邮件",link:"1990230289@qq.com"},{iconClass:"icon-github",title:"GitHub",link:"https://github.com/Max-Kevin"},{iconClass:"icon-erji",title:"听音乐",link:"https://music.163.com/#/playlist?id=503418750"}]},footer:{createYear:2022,copyrightInfo:'Max-Kevin | Max-Kevin<br> <a href="http://beian.miit.gov.cn/" target="_blank"></a><a href="/sitemap.xml">sitemap</a> icon by <a target="_blank" href="https://icons8.com">Icons8</a>'}},locales:{"/":{lang:"zh-CN",title:"Max-Kevin",description:"无善无恶心之体，有善有恶意之动，知善知恶是良知，为善去恶是格物。",path:"/"}}};var Ms=t(98),Ps=t(99),Cs=t(11);var Os={computed:{$filterPosts(){return this.$site.pages.filter(n=>{const{frontmatter:{pageComponent:e,article:t,home:r}}=n;return!(e||!1===t||!0===r)})},$sortPosts(){return(n=this.$filterPosts).sort((n,e)=>{const t=n.frontmatter.sticky,r=e.frontmatter.sticky;return t&&r?t==r?Object(Cs.a)(n,e):t-r:t&&!r?-1:!t&&r?1:Object(Cs.a)(n,e)}),n;var n},$sortPostsByDate(){return(n=this.$filterPosts).sort((n,e)=>Object(Cs.a)(n,e)),n;var n},$groupPosts(){return function(n){const e={},t={};for(let r=0,o=n.length;r<o;r++){const{frontmatter:{categories:o,tags:a}}=n[r];"array"===Object(Cs.n)(o)&&o.forEach(t=>{t&&(e[t]||(e[t]=[]),e[t].push(n[r]))}),"array"===Object(Cs.n)(a)&&a.forEach(e=>{e&&(t[e]||(t[e]=[]),t[e].push(n[r]))})}return{categories:e,tags:t}}(this.$sortPosts)},$categoriesAndTags(){return function(n){const e=[],t=[];for(let t in n.categories)e.push({key:t,length:n.categories[t].length});for(let e in n.tags)t.push({key:e,length:n.tags[e].length});return{categories:e,tags:t}}(this.$groupPosts)}}};Ht.component(Ms.default),Ht.component(Ps.default);function zs(n){return n.toString().padStart(2,"0")}t(243);Ht.component("Aplayer",()=>t.e(10).then(t.bind(null,350))),Ht.component("Card",()=>Promise.all([t.e(0),t.e(4)]).then(t.bind(null,351))),Ht.component("BlockToggle",()=>Promise.all([t.e(0),t.e(3)]).then(t.bind(null,352))),Ht.component("Login",()=>Promise.all([t.e(0),t.e(7)]).then(t.bind(null,353))),Ht.component("IndexBigImg",()=>Promise.all([t.e(0),t.e(6)]).then(t.bind(null,354))),Ht.component("GlobalTip",()=>Promise.all([t.e(0),t.e(5)]).then(t.bind(null,355))),Ht.component("CodeBlock",()=>Promise.resolve().then(t.bind(null,98))),Ht.component("Badge",()=>Promise.all([t.e(0),t.e(8)]).then(t.bind(null,426))),Ht.component("CodeGroup",()=>Promise.resolve().then(t.bind(null,99)));t(244),t(245);var Ds=t(97),Bs=t.n(Ds),$s=t(27);let Ns,Gs;var Fs;"valine"===(Fs="gitalk")?t.e(84).then(t.t.bind(null,344,7)).then(n=>Gs=n.default):"gitalk"===Fs&&Promise.all([t.e(0),t.e(83)]).then(t.t.bind(null,345,7)).then(()=>t.e(82).then(t.t.bind(null,346,7))).then(n=>Ns=n.default);function Rs(n,e){const t={};return Reflect.ownKeys(n).forEach(r=>{if("string"==typeof n[r])try{t[r]=Bs.a.render(n[r],e)}catch(e){console.warn(`Comment config option error at key named "${r}"`),console.warn("More info: "+e.message),t[r]=n[r]}else t[r]=n[r]}),t}console.log(`How to use "gitalk" in ${$s.name}@v${$s.version}:`,$s.homepage);const Us={gitalk:{render(n,e){const t=document.createElement("div");t.id=e;document.querySelector("main.page").appendChild(t);new Ns(Rs({clientID:"61f225475ee82228c429",clientSecret:"a76281b6fd34103a46bb0be85e5ece40555e8296",repo:"blogs",owner:"Max-Kevin",admin:["Max-Kevin"],pagerDirection:"last",id:"<%- (frontmatter.permalink || frontmatter.to.path).slice(-16) %>",title:"「评论」<%- frontmatter.title %>",labels:["Gitalk","Comment"],body:"页面：<%- window.location.origin + (frontmatter.to.path || window.location.pathname) %>"},{frontmatter:n})).render(e)},clear(n){const e=document.querySelector("#"+n);return e&&e.remove(),!0}},valine:{render(n,e){const t=document.createElement("div");t.id=e;document.querySelector("main.page").appendChild(t),new Gs({...Rs({clientID:"61f225475ee82228c429",clientSecret:"a76281b6fd34103a46bb0be85e5ece40555e8296",repo:"blogs",owner:"Max-Kevin",admin:["Max-Kevin"],pagerDirection:"last",id:"<%- (frontmatter.permalink || frontmatter.to.path).slice(-16) %>",title:"「评论」<%- frontmatter.title %>",labels:["Gitalk","Comment"],body:"页面：<%- window.location.origin + (frontmatter.to.path || window.location.pathname) %>"},{frontmatter:n}),el:"#"+e})},clear(n){const e=document.querySelector("#"+n);return e&&e.remove(),!0}}},Ls="vuepress-plugin-comment";let qs=null;function Hs(n){return Us.gitalk.clear(Ls)}function Js(n){return!1!==n.comment&&!1!==n.comments}function Ws(n){clearTimeout(qs);if(document.querySelector("main.page"))return Us.gitalk.render(n,Ls);qs=setTimeout(()=>Ws(n),200)}var Vs={mounted(){qs=setTimeout(()=>{const n={to:{},from:{},...this.$frontmatter};Hs()&&Js(n)&&Ws(n)},1e3),this.$router.afterEach((n,e)=>{if(n&&e&&n.path===e.path)return;const t={to:n,from:e,...this.$frontmatter};Hs()&&Js(t)&&Ws(t)})}},Ks=Object(As.a)(Vs,(function(){return(0,this._self._c)("div")}),[],!1,null,null,null).exports,Zs={name:"DynamicTitle",data:()=>({originTitle:"",recoverTimeout:null,config:{showIcon:"https://symbol-node.oss-cn-shanghai.aliyuncs.com/blog/basic/favicon.ico",showText:"ヾ(≧▽≦*)o欢迎回来！",hideIcon:"https://symbol-node.oss-cn-shanghai.aliyuncs.com/blog/basic/favicon.ico",hideText:"ಥ_ಥ不要走呀！",recoverTime:2e3}}),mounted(){this.originTitle=document.title,""!==this.config.showIcon&&this.getIconElm().setAttribute("href",this.config.showIcon),document.addEventListener("visibilitychange",()=>{document.hidden?this.hidden():this.visible()})},methods:{hidden(){""!==this.config.hideIcon&&this.getIconElm().setAttribute("href",this.config.hideIcon),document.title=this.config.hideText,clearTimeout(this.recoverTimeout)},visible(){""!==this.config.showIcon&&this.getIconElm().setAttribute("href",this.config.showIcon),document.title=this.config.showText+this.originTitle,this.recoverTimeout=setTimeout(()=>{document.title=this.originTitle},this.config.recoverTime)},getIconElm(){let n=document.querySelector("link[rel=icon]");return null===n&&(n=document.createElement("link"),n.setAttribute("rel","icon"),document.head.appendChild(n)),n}},watch:{$route(n,e){n.path!==e.path&&(this.originTitle=document.title,clearTimeout(this.recoverTimeout))}}},Ys=Object(As.a)(Zs,(function(){return(0,this._self._c)("div")}),[],!1,null,null,null).exports,Xs=(n,e,t)=>{if(!e.has(n))throw TypeError("Cannot "+t)},Qs=(n,e,t)=>(Xs(n,e,"read from private field"),t?t.call(n):e.get(n)),nl=(n,e,t)=>{if(e.has(n))throw TypeError("Cannot add the same private member more than once");e instanceof WeakSet?e.add(n):e.set(n,t)},el=(n,e,t,r)=>(Xs(n,e,"write to private field"),r?r.call(n,t):e.set(n,t),t);var tl,rl;const ol=class{constructor(n,e,t,r=!0){nl(this,tl,void 0),nl(this,rl,void 0),el(this,tl,{width:0,height:0});const{el:o,ctx:a}=ol.initCanvas(n);this.el=o,this.ctx=a,el(this,rl,r),this.size={width:e||window.innerWidth,height:t||window.innerHeight}}get size(){return{...Qs(this,tl)}}set size({width:n,height:e}){var t;if(Qs(this,tl).width===n&&Qs(this,tl).height===e)return;Qs(this,tl).width=n,Qs(this,tl).height=e;const r=null!=(t=Qs(this,rl)?window.devicePixelRatio:1)?t:1;this.el.width=Math.round(Qs(this,tl).width*r),this.el.height=Math.round(Qs(this,tl).height*r),this.el.style.width=Qs(this,tl).width+"px",this.el.style.height=Qs(this,tl).height+"px",Qs(this,rl)&&this.ctx.scale(r,r)}clear(){ol.clearCanvas(this.ctx,{...Qs(this,tl)})}to(n){n.ctx.drawImage(this.el,0,0,Qs(this,tl).width,Qs(this,tl).height)}handleResize(n){this.size={width:window.innerWidth,height:window.innerHeight}}static setCanvasStyle(n,e,t){const r=n.style,{zIndex:o=0,opacity:a=1}=e;r.position="fixed",r.top="0",r.left="0",r.zIndex=o.toString(),r.width=(t?t.width:n.width).toString()+"px",r.height=(t?t.height:n.height).toString()+"px",1!==a&&(r.opacity=a.toString()),r.pointerEvents="none"}static initCanvas(n){n||(n=document.createElement("canvas"));const e=n.getContext("2d");return{el:n,ctx:e}}static createOffscreenCanvas(){return new ol}static clearCanvas(n,e){const{width:t,height:r}=e;n.clearRect(0,0,t,r)}};let al=ol;var il,sl;tl=new WeakMap,rl=new WeakMap;class ll{constructor(n,e,t,r=!0,o=!0,a={zIndex:0,opacity:1}){nl(this,il,void 0),nl(this,sl,void 0),el(this,il,new al(n,e,t,r)),al.setCanvasStyle(Qs(this,il).el,a,{width:e,height:t}),el(this,sl,o?new al(void 0,e,t,r):null)}get size(){return Qs(this,il).size}draw(n){var e;const t=null!=(e=Qs(this,sl))?e:Qs(this,il);t.clear(),n(t.ctx,{...t.size})}render(){!Qs(this,sl)||(Qs(this,il).clear(),Qs(this,sl).to(Qs(this,il)))}handleResize(n){Qs(this,il).handleResize(n),Qs(this,sl)&&Qs(this,sl).handleResize(n)}clear(){Qs(this,il).clear(),Qs(this,sl)&&Qs(this,sl).clear()}}il=new WeakMap,sl=new WeakMap;var cl=(n,e,t)=>{if(!e.has(n))throw TypeError("Cannot "+t)},ul=(n,e,t)=>(cl(n,e,"read from private field"),t?t.call(n):e.get(n));var pl;class dl{constructor(){((n,e,t)=>{if(e.has(n))throw TypeError("Cannot add the same private member more than once");e instanceof WeakSet?e.add(n):e.set(n,t)})(this,pl,void 0),((n,e,t,r)=>{cl(n,e,"write to private field"),r?r.call(n,t):e.set(n,t)})(this,pl,new Map)}add(n,e,t=window){ul(this,pl).has(t)||ul(this,pl).set(t,new Map);const r=ul(this,pl).get(t);r.has(n)||r.set(n,new Set),r.get(n).add(e)}startAll(){for(const[n,e]of ul(this,pl))for(const[t,r]of e)for(const e of r)n.addEventListener(t,e)}stopAll(){for(const[n,e]of ul(this,pl))for(const[t,r]of e)for(const e of r)n.removeEventListener(t,e)}clear(){ul(this,pl).clear()}}function ml(n){return!!n.touches}pl=new WeakMap;class fl{static randomFloat(n,e){return Math.random()*(e-n)+n}static randomInt(n,e){return Math.floor(fl.randomFloat(n,e))}static choice(n){const e=n.length;return n[Math.floor(e*Math.random())]}static color(n="0123456789ABCDEF"){return"#"+fl.choice(n)+fl.choice(n)+fl.choice(n)+fl.choice(n)+fl.choice(n)+fl.choice(n)}}var gl,hl,yl,bl,vl,xl=(n,e,t)=>{if(!e.has(n))throw TypeError("Cannot "+t)},wl=(n,e,t)=>(xl(n,e,"read from private field"),t?t.call(n):e.get(n)),jl=(n,e,t)=>{if(e.has(n))throw TypeError("Cannot add the same private member more than once");e instanceof WeakSet?e.add(n):e.set(n,t)},kl=(n,e,t,r)=>(xl(n,e,"write to private field"),r?r.call(n,t):e.set(n,t),t),Sl=(n,e,t)=>(xl(n,e,"access private method"),t);class El{constructor(n,e,t,r,o){jl(this,gl,void 0),jl(this,hl,void 0),jl(this,yl,void 0),this.size=t,this.color=r,kl(this,yl,0),kl(this,gl,o),kl(this,hl,e),this.position={...n}}move(){this.position.x=Math.sin(wl(this,gl))*wl(this,hl)+this.position.x,this.position.y=Math.cos(wl(this,gl))*wl(this,hl)+this.position.y+.3*wl(this,yl),((n,e,t,r)=>({set _(r){kl(n,e,r,t)},get _(){return wl(n,e,r)}}))(this,yl)._++}shouleRemove(n){return this.position.x<0||this.position.x>n.width||this.position.y>n.height}}gl=new WeakMap,hl=new WeakMap,yl=new WeakMap;bl=new WeakMap;class Al{static create(n,e,t,r,o,a){return new(this.shapeMap.get(n))(e,t,r,o,a)}}Al.shapeMap=new Map([["star",class extends El{constructor(n,e,t,r,o){super(n,e,t,r,o),jl(this,bl,0)}draw(n,e){n.fillStyle=this.color,n.beginPath();const t=2*this.size,r=this.size;for(let e=0;e<5;e++)n.lineTo(Math.cos((18+72*e-wl(this,bl))/180*Math.PI)*t+this.position.x,-Math.sin((18+72*e-wl(this,bl))/180*Math.PI)*t+this.position.y),n.lineTo(Math.cos((54+72*e-wl(this,bl))/180*Math.PI)*r+this.position.x,-Math.sin((54+72*e-wl(this,bl))/180*Math.PI)*r+this.position.y);n.fill(),kl(this,bl,wl(this,bl)+5)}}],["circle",class extends El{draw(n,e){n.fillStyle=this.color,n.beginPath(),n.arc(this.position.x,this.position.y,this.size,0,2*Math.PI),n.fill()}}]]);class Tl{constructor(n,e,t,r){jl(this,vl,void 0),this.stopped=!1,kl(this,vl,new Set);for(let o=0;o<r;o++){const r=Al.create(n,e,fl.randomFloat(1,6),t,fl.color("89ABCDEF"),fl.randomFloat(Math.PI-1,Math.PI+1));wl(this,vl).add(r)}}move(n){for(const e of wl(this,vl))e.shouleRemove(n)?wl(this,vl).delete(e):e.move();0===wl(this,vl).size&&(this.stopped=!0)}draw(n,e){for(const t of wl(this,vl))t.draw(n,e)}}vl=new WeakMap;var Il,_l,Ml,Pl,Cl,Ol,zl,Dl,Bl,$l,Nl,Gl,Fl,Rl,Ul,Ll,ql,Hl,Jl,Wl;class Vl{constructor({shape:n="star",size:e=2,numParticles:t=10}={},r={}){jl(this,Bl),jl(this,Nl),jl(this,Fl),jl(this,Ul),jl(this,ql),jl(this,Jl),jl(this,Il,void 0),jl(this,_l,void 0),jl(this,Ml,void 0),jl(this,Pl,null),jl(this,Cl,new Set),jl(this,Ol,!1),jl(this,zl,void 0),jl(this,Dl,new dl),kl(this,Il,n),kl(this,_l,e),kl(this,Ml,t),kl(this,zl,r),this.animate=this.animate.bind(this)}mount(n){kl(this,Pl,new ll(n,window.innerWidth,window.innerHeight,!0,!0,wl(this,zl))),Sl(this,Bl,$l).call(this),function(n,{leftColor:e="#fff",rightColor:t="#444",leftBgColor:r="#35495e",rightBgColor:o="#00ffc0"}={}){console.log(`%c ${n} %c v0.5.2 112fa81 %c`,`background: ${r}; padding: 2px; color: ${e}; font-weight: bold; text-transform: uppercase;`,`background: ${o}; padding: 2px; color: ${t}; font-weight: bold; text-transform: uppercase;`,"background: transparent")}("Theme Popper 🎉",{leftBgColor:"#ffb366"})}unmount(){Sl(this,Nl,Gl).call(this),kl(this,Ol,!1)}animate(){if(kl(this,Ol,!0),0===wl(this,Cl).size)return kl(this,Ol,!1),void wl(this,Pl).clear();requestAnimationFrame(this.animate);for(const n of wl(this,Cl)){if(n.stopped)return void wl(this,Cl).delete(n);n.move(wl(this,Pl).size)}wl(this,Pl).draw((n,e)=>{for(const t of wl(this,Cl))t.draw(n,e)}),wl(this,Pl).render()}}Il=new WeakMap,_l=new WeakMap,Ml=new WeakMap,Pl=new WeakMap,Cl=new WeakMap,Ol=new WeakMap,zl=new WeakMap,Dl=new WeakMap,Bl=new WeakSet,$l=function(){/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)?wl(this,Dl).add("touchstart",Sl(this,Fl,Rl).bind(this)):wl(this,Dl).add("mousedown",Sl(this,Fl,Rl).bind(this)),wl(this,Dl).add("visibilitychange",Sl(this,ql,Hl).bind(this)),wl(this,Dl).add("resize",function(n,e,t){var r,o,a;void 0===e&&(e=50),void 0===t&&(t={});var i=null!=(r=t.isImmediate)&&r,s=null!=(o=t.callback)&&o,l=t.maxWait,c=Date.now(),u=[];function p(){if(void 0!==l){var n=Date.now()-c;if(n+e>=l)return l-n}return e}var d=function(){var e=[].slice.call(arguments),t=this;return new Promise((function(r,o){var l=i&&void 0===a;if(void 0!==a&&clearTimeout(a),a=setTimeout((function(){if(a=void 0,c=Date.now(),!i){var r=n.apply(t,e);s&&s(r),u.forEach((function(n){return(0,n.resolve)(r)})),u=[]}}),p()),l){var d=n.apply(t,e);return s&&s(d),r(d)}u.push({resolve:r,reject:o})}))};return d.cancel=function(n){void 0!==a&&clearTimeout(a),u.forEach((function(e){return(0,e.reject)(n)})),u=[]},d}(Sl(this,Ul,Ll).bind(this),500)),wl(this,Dl).startAll()},Nl=new WeakSet,Gl=function(){wl(this,Dl).stopAll(),wl(this,Dl).clear()},Fl=new WeakSet,Rl=function(n){const e={x:ml(n)?n.touches[0].clientX:n.clientX,y:ml(n)?n.touches[0].clientY:n.clientY},t=new Tl(wl(this,Il),{...e},wl(this,_l),wl(this,Ml));wl(this,Cl).add(t),wl(this,Ol)||Sl(this,Jl,Wl).call(this)},Ul=new WeakSet,Ll=function(n){wl(this,Pl).handleResize(n)},ql=new WeakSet,Hl=function(n){wl(this,Cl).clear(),kl(this,Ol,!1)},Jl=new WeakSet,Wl=function(){requestAnimationFrame(this.animate)};var Kl={name:"CursorEffects",data:()=>({popper:new Vl({shape:"star",size:2},{opacity:1,zIndex:999999999})}),mounted(){this.popper.mount(this.$el)},beforeDestroy(){this.popper.unmount()}},Zl=Object(As.a)(Kl,(function(){return(0,this._self._c)("canvas",{attrs:{id:"vuepress-canvas-cursor"}})}),[],!1,null,null,null).exports,Yl={name:"GoTop",data:()=>({visibilityHeight:500,catStyle:"hide-cat"}),mounted(){window.addEventListener("scroll",this.handleScroll,!0)},destroyed(){window.removeEventListener("scroll",this.handleScroll)},methods:{handleScroll(){this.catStyle=this.getScrollTop()>this.visibilityHeight?"show-cat":"hide-cat"},getScrollTop:()=>window.pageYOffset||document.documentElement.scrollTop||document.body.scrollTop||0,goTop(){window.scrollTo({top:0,behavior:"smooth"}),this.scrollTop=0}}},Xl=(t(251),Object(As.a)(Yl,(function(){return(0,this._self._c)("div",{class:this.catStyle,attrs:{id:"goTop"},on:{click:this.goTop}})}),[],!1,null,"bf92849a",null).exports),Ql={name:"ReadingProgress",data:()=>({readingTop:0,readingHeight:1,progressStyle:null,transform:void 0,running:!1}),watch:{$readingShow(){this.progressStyle=this.getProgressStyle(),this.$readingShow&&window.addEventListener("scroll",this.base)}},mounted(){this.transform=this.getTransform(),this.progressStyle=this.getProgressStyle(),this.$readingShow&&window.addEventListener("scroll",this.base)},beforeDestroy(){this.$readingShow&&window.removeEventListener("scroll",this.base)},methods:{base(){this.running||(this.running=!0,requestAnimationFrame(this.getReadingBase))},getReadingBase(){this.readingHeight=this.getReadingHeight()-this.getScreenHeight(),this.readingTop=this.getReadingTop(),this.progressStyle=this.getProgressStyle(),this.running=!1},getReadingHeight:()=>Math.max(document.body.scrollHeight,document.body.offsetHeight,0),getScreenHeight:()=>Math.max(window.innerHeight,document.documentElement.clientHeight,0),getReadingTop:()=>Math.max(window.pageYOffset,document.documentElement.scrollTop,0),getTransform(){const n=document.createElement("div");return["transform","-webkit-transform","-moz-transform","-o-transform","-ms-transform"].find(e=>e in n.style)||void 0},getProgressStyle(){const n=this.readingTop/this.readingHeight;switch(this.$readingShow){case"top":case"bottom":return this.transform?`${this.transform}: scaleX(${n})`:`width: ${100*n}%`;case"left":case"right":return this.transform?`${this.transform}: scaleY(${n})`:`height: ${100*n}%`;default:return null}}}},nc=(t(252),Object(As.a)(Ql,(function(){var n=this._self._c;return n("ClientOnly",[this.$readingShow?n("div",{staticClass:"reading-progress",class:this.$readingShow},[n("div",{staticClass:"progress",style:this.progressStyle})]):this._e()])}),[],!1,null,"3640397f",null).exports),ec=[({Vue:n,options:e,router:t,siteData:r})=>{r.pages.map(n=>{const{frontmatter:{date:e,author:t}}=n;"string"==typeof e&&"Z"===e.charAt(e.length-1)&&(n.frontmatter.date=function(n){n instanceof Date||(n=new Date(n));return`${n.getUTCFullYear()}-${zs(n.getUTCMonth()+1)}-${zs(n.getUTCDate())} ${zs(n.getUTCHours())}:${zs(n.getUTCMinutes())}:${zs(n.getUTCSeconds())}`}(e)),t?n.author=t:r.themeConfig.author&&(n.author=r.themeConfig.author)}),n.mixin(Os)},{},({Vue:n})=>{n.mixin({computed:{$dataBlock(){return this.$options.__data__block__}}})},{},{},({Vue:n})=>{n.component("Comment",Ks)},({Vue:n})=>{n.component("DynamicTitle",Ys)},({Vue:n})=>{n.component("CursorEffects",Zl)},({Vue:n})=>{n.component("GoTop",Xl)},({Vue:n})=>{n.component(nc.name,nc),n.mixin({computed:{$readingShow(){return this.$page.frontmatter.readingShow}}})}],tc=["BlockToggle","GlobalTip","Aplayer","Comment","DynamicTitle","CursorEffects","GoTop","ReadingProgress"];class rc extends class{constructor(){this.store=new Ht({data:{state:{}}})}$get(n){return this.store.state[n]}$set(n,e){Ht.set(this.store.state,n,e)}$emit(...n){this.store.$emit(...n)}$on(...n){this.store.$on(...n)}}{}Object.assign(rc.prototype,{getPageAsyncComponent:as,getLayoutAsyncComponent:is,getAsyncComponent:ss,getVueComponent:ls});var oc={install(n){const e=new rc;n.$vuepress=e,n.prototype.$vuepress=e}};function ac(n,e){const t=e.toLowerCase();return n.options.routes.some(n=>n.path.toLowerCase()===t)}var ic={props:{pageKey:String,slotKey:{type:String,default:"default"}},render(n){const e=this.pageKey||this.$parent.$page.key;return us("pageKey",e),Ht.component(e)||Ht.component(e,as(e)),Ht.component(e)?n(e):n("")}},sc={functional:!0,props:{slotKey:String,required:!0},render:(n,{props:e,slots:t})=>n("div",{class:["content__"+e.slotKey]},t()[e.slotKey])},lc={computed:{openInNewWindowTitle(){return this.$themeLocaleConfig.openNewWindowText||"(opens new window)"}}},cc=(t(253),t(254),Object(As.a)(lc,(function(){var n=this._self._c;return n("span",[n("svg",{staticClass:"icon outbound",attrs:{xmlns:"http://www.w3.org/2000/svg","aria-hidden":"true",focusable:"false",x:"0px",y:"0px",viewBox:"0 0 100 100",width:"15",height:"15"}},[n("path",{attrs:{fill:"currentColor",d:"M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"}}),this._v(" "),n("polygon",{attrs:{fill:"currentColor",points:"45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"}})]),this._v(" "),n("span",{staticClass:"sr-only"},[this._v(this._s(this.openInNewWindowTitle))])])}),[],!1,null,null,null).exports),uc={functional:!0,render(n,{parent:e,children:t}){if(e._isMounted)return t;e.$once("hook:mounted",()=>{e.$forceUpdate()})}};Ht.config.productionTip=!1,Ht.use(Li),Ht.use(oc),Ht.mixin(function(n,e,t=Ht){!function(n){n.locales&&Object.keys(n.locales).forEach(e=>{n.locales[e].path=e});Object.freeze(n)}(e),t.$vuepress.$set("siteData",e);const r=new(n(t.$vuepress.$get("siteData"))),o=Object.getOwnPropertyDescriptors(Object.getPrototypeOf(r)),a={};return Object.keys(o).reduce((n,e)=>(e.startsWith("$")&&(n[e]=o[e].get),n),a),{computed:a}}(n=>class{setPage(n){this.__page=n}get $site(){return n}get $themeConfig(){return this.$site.themeConfig}get $frontmatter(){return this.$page.frontmatter}get $localeConfig(){const{locales:n={}}=this.$site;let e,t;for(const r in n)"/"===r?t=n[r]:0===this.$page.path.indexOf(r)&&(e=n[r]);return e||t||{}}get $siteTitle(){return this.$localeConfig.title||this.$site.title||""}get $canonicalUrl(){const{canonicalUrl:n}=this.$page.frontmatter;return"string"==typeof n&&n}get $title(){const n=this.$page,{metaTitle:e}=this.$page.frontmatter;if("string"==typeof e)return e;const t=this.$siteTitle,r=n.frontmatter.home?null:n.frontmatter.title||n.title;return t?r?r+" | "+t:t:r||"VuePress"}get $description(){const n=function(n){if(n){const e=n.filter(n=>"description"===n.name)[0];if(e)return e.content}}(this.$page.frontmatter.meta);return n||(this.$page.frontmatter.description||this.$localeConfig.description||this.$site.description||"")}get $lang(){return this.$page.frontmatter.lang||this.$localeConfig.lang||"en-US"}get $localePath(){return this.$localeConfig.path||"/"}get $themeLocaleConfig(){return(this.$site.themeConfig.locales||{})[this.$localePath]||{}}get $page(){return this.__page?this.__page:function(n,e){for(let t=0;t<n.length;t++){const r=n[t];if(r.path.toLowerCase()===e.toLowerCase())return r}return{path:"",frontmatter:{}}}(this.$site.pages,this.$route.path)}},_s)),Ht.component("Content",ic),Ht.component("ContentSlotsDistributor",sc),Ht.component("OutboundLink",cc),Ht.component("ClientOnly",uc),Ht.component("Layout",is("Layout")),Ht.component("NotFound",is("NotFound")),Ht.prototype.$withBase=function(n){const e=this.$site.base;return"/"===n.charAt(0)?e+n.slice(1):n},window.__VUEPRESS__={version:"1.9.7",hash:"1b0b9b2"},async function(n){const e="undefined"!=typeof window&&window.__VUEPRESS_ROUTER_BASE__?window.__VUEPRESS_ROUTER_BASE__:_s.routerBase||_s.base,t=new Li({base:e,mode:"history",fallback:!1,routes:Is,scrollBehavior:(n,e,t)=>t||(n.hash?!Ht.$vuepress.$get("disableScrollBehavior")&&{selector:decodeURIComponent(n.hash)}:{x:0,y:0})});!function(n){n.beforeEach((e,t,r)=>{if(ac(n,e.path))r();else if(/(\/|\.html)$/.test(e.path))if(/\/$/.test(e.path)){const t=e.path.replace(/\/$/,"")+".html";ac(n,t)?r(t):r()}else r();else{const t=e.path+"/",o=e.path+".html";ac(n,o)?r(o):ac(n,t)?r(t):r()}})}(t);const r={};try{await Promise.all(ec.filter(n=>"function"==typeof n).map(e=>e({Vue:Ht,options:r,router:t,siteData:_s,isServer:n})))}catch(n){console.error(n)}return{app:new Ht(Object.assign(r,{router:t,render:n=>n("div",{attrs:{id:"app"}},[n("RouterView",{ref:"layout"}),n("div",{class:"global-ui"},tc.map(e=>n(e)))])})),router:t}}(!1).then(({app:n,router:e})=>{e.onReady(()=>{n.$mount("#app")})})}]);